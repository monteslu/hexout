!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=48)}([function(t,e){t.exports=function(t={x:0,y:0},e){return t.x===e.x&&t.y===e.y?0:t.x===e.x?t.y>e.y?0:Math.PI:t.y===e.y?t.x>e.x?1.5*Math.PI:Math.PI/2:t.x<e.x&&t.y>e.y?Math.atan((e.x-t.x)/(t.y-e.y)):t.x<e.x&&t.y<e.y?Math.PI/2+Math.atan((e.y-t.y)/(e.x-t.x)):t.x>e.x&&t.y<e.y?Math.PI+Math.atan((t.x-e.x)/(e.y-t.y)):1.5*Math.PI+Math.atan((t.y-e.y)/(t.x-e.x))}},function(t,e){t.exports=function(t={x:0,y:0},e,i){const s=Math.sin(i),n=Math.cos(i),o={};o.x=e.x-t.x,o.y=e.y-t.y;const a=o.x*n-o.y*s,r=o.x*s+o.y*n;return o.x=a+t.x,o.y=r+t.y,o}},function(t,e){t.exports={CANCEL:3,HELP:6,BACK_SPACE:8,TAB:9,CLEAR:12,RETURN:13,ENTER:14,SHIFT:16,CONTROL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESCAPE:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINTSCREEN:44,INSERT:45,DELETE:46,NUM0:48,NUM1:49,NUM2:50,NUM3:51,NUM4:52,NUM5:53,NUM6:54,NUM7:55,NUM8:56,NUM9:57,SEMICOLON:59,EQUALS:61,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,CONTEXT_MENU:93,NUMPAD0:96,NUMPAD1:97,NUMPAD2:98,NUMPAD3:99,NUMPAD4:100,NUMPAD5:101,NUMPAD6:102,NUMPAD7:103,NUMPAD8:104,NUMPAD9:105,MULTIPLY:106,ADD:107,SEPARATOR:108,SUBTRACT:109,DECIMAL:110,DIVIDE:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,F13:124,F14:125,F15:126,F16:127,F17:128,F18:129,F19:130,F20:131,F21:132,F22:133,F23:134,F24:135,NUM_LOCK:144,SCROLL_LOCK:145,UP_DPAD:175,DOWN_DPAD:176,LEFT_DPAD:177,RIGHT_DPAD:178,COMMA:188,PERIOD:190,SLASH:191,BACK_QUOTE:192,OPEN_BRACKET:219,BACK_SLASH:220,CLOSE_BRACKET:221,QUOTE:222,META:224}},function(t,e,i){const s=i(5),n=i(26);t.exports=class extends s{constructor(t={}){super(t),this.radius=1,Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.beginPath(),t.arc(this.x*e,this.y*e,this.radius*e,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke(),this.staticBody||(t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.beginPath(),t.moveTo(this.x*e,this.y*e),t.lineTo(this.x*e,this.y*e-this.radius*e),t.closePath(),t.stroke(),t.restore()),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.radius=this.radius*t,super.scaleShape(t)}pointInShape(t){return n(t,this)<=this.radius}}},function(t,e){t.exports=function t(e,i){return e=Array.isArray(e)?e.map(function(e){return t(e,i)}):"object"==typeof i?{x:e.x*i.x,y:e.y*i.y}:{x:e.x*i,y:e.y*i}}},function(t,e){t.exports=class{constructor(t={}){this.id=t.id||Math.random()+"_"+Date.now(),this.x=0,this.y=0,this.scale=null,this.angle=0,this.center=null,this.drawLocation=!0,this.drawCenter=!0,this.restitution=.3,this.density=1,this.friction=.9,this.linearDamping=0,this.linearVelocity=null,this.angularVelocity=0,this.angularDamping=0,this.staticBody=!1,this.fillStyle="rgba(128,128,128,0.5)",this.strokeStyle="#000",this.lineWidth=1,this.maskBits=null,this.categoryBits=null,this.groupIndex=null,Object.assign(this,t)}update(t){Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,this.drawLocation&&(t.fillStyle=this.strokeStyle,t.beginPath(),t.arc(this.x*e,this.y*e,4,0,2*Math.PI,!0),t.closePath(),t.fill()),this.center&&this.drawCenter&&(t.fillStyle=this.centerStyle||"yellow",t.beginPath(),t.arc(this.center.x*e,this.center.y*e,2,0,2*Math.PI,!0),t.closePath(),t.fill()),t.lineWidth=i}scaleShape(t){this.x=this.x*t,this.y=this.y*t,this.alreadyScaled=!0}}},function(t,e){const i={NORMAL:0,DETECT_INITAL_PRESS_ONLY:1,STATE_RELEASED:0,STATE_PRESSED:1,STATE_WAITING_FOR_RELEASE:2,STATE_MOVED:3};t.exports=class{constructor(t={}){this.name=null,this.behavior=0,this.amount=0,this.state=0,this.statics=i,Object.assign(this,t),this.reset()}reset(){this.state=i.STATE_RELEASED,this.amount=0}tap(){this.press(),this.release()}press(){this.state=i.STATE_PRESSED,this.behavior===i.DETECT_INITAL_PRESS_ONLY&&this.pressAmt(1)}pressAmt(t){this.state!==i.STATE_WAITING_FOR_RELEASE&&(this.amount+=t,this.state=i.STATE_WAITING_FOR_RELEASE)}release(){this.state=i.STATE_RELEASED}isPressed(){return this.state===i.STATE_PRESSED}getAmount(){var t=this.amount;return 0!==t&&(this.state===i.STATE_RELEASED?this.amount=0:this.behavior===i.DETECT_INITAL_PRESS_ONLY&&(this.state=i.STATE_WAITING_FOR_RELEASE,this.amount=0)),t}}},function(t,e,i){"use strict";t.exports=function(t,e){if(!t||!e)return!1;for(var i=e.points||e,s=!1,n=i.length-1,o=0;o<i.length;n=o++){var a=i[o].x,r=i[o].y,h=i[n].x,l=i[n].y;r>t.y!=l>t.y&&t.x<(h-a)*(t.y-r)/(l-r)+a&&(s=!s)}return s}},function(t,e){t.exports=function t(e,i){return Array.isArray(e)?e=e.map(function(e){return t(e,i)}):(e={x:e.x,y:e.y},null!=i.x&&(e.x+=i.x),null!=i.y&&(e.y+=i.y)),e}},function(t,e){t.exports=class{constructor(t={}){this.id=t.id||Math.random()+"_"+Date.now(),this.bodyId1=null,this.bodyId2=null,this.bodyPoint1=null,this.jointAttributes=null,Object.assign(this,t)}scaleJointLocation(t){t&&this.bodyPoint1&&(this.bodyPoint1.x=this.bodyPoint1.x*t,this.bodyPoint1.y=this.bodyPoint1.y*t,this.alreadyScaled=!0)}}},function(t,e,i){const s=i(5),n=i(4),o=i(7),a=i(8);t.exports=class extends s{constructor(t={}){super(t),this.points=[],Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.beginPath(),t.moveTo((this.x+this.points[0].x)*e,(this.y+this.points[0].y)*e);for(var s=1;s<this.points.length;s++)t.lineTo((this.points[s].x+this.x)*e,(this.points[s].y+this.y)*e);t.lineTo((this.x+this.points[0].x)*e,(this.y+this.points[0].y)*e),t.closePath(),t.fill(),t.stroke(),t.restore(),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.points=n(this.points,t),super.scaleShape(t)}pointInShape(t){return o(t,a(this.points,this))}}},function(t,e,i){window.frozenjs={GameCore:i(12),InputManager:i(13),ResourceManager:i(17),MouseAction:i(15),TouchAction:i(14),keys:i(2),Animation:i(22),AnimFrame:i(23),utils:i(34),Sprite:i(27),reiner:{Creature:i(38)},sounds:{WebAudio:i(21)},box2d:{entities:i(39),joints:i(42),Box:i(28),BoxGame:i(47)}},t.exports=window.frozenjs},function(t,e,i){const s=i(13),n=i(17);t.exports=class{constructor(t={}){this.isRunning=!1,this.canvasId=null,this.maxStep=40,this.contextType="2d",this.height=0,this.width=0,this.resourceManager=null,this.inputManager=null,this.loadingForeground="#00F",this.loadingBackground="#FFF",this.gameAreaId=null,this.canvasPercentage=0,Object.assign(this,t),this.resourceManager||(this.resourceManager=new n)}setHeight(t){this.height=t,this.canvas.height=t}setWidth(t){this.width=t,this.canvas.width=t}stop(){this.isRunning=!1}run(){this.isRunning||(this.init(),this.loadResources(this.resourceManager),this.initInput(this.inputManager),this.launchLoop())}loadResources(t){}init(){this.canvas||(this.canvas=document.getElementById(this.canvasId)),this.canvas?(this.context||(this.context=this.canvas.getContext(this.contextType)),this.context?(this.setHeight(this.height||this.canvas.height),this.setWidth(this.width||this.canvas.width),this.inputManager||(this.gameAreaId&&this.canvasPercentage?this.inputManager=new s({canvas:this.canvas,gameArea:document.getElementById(this.gameAreaId),canvasPercentage:this.canvasPercentage}):this.inputManager=new s({canvas:this.canvas})),this.inputManager.resize(),this.isRunning=!0):alert("Sorry, your browser does not support a "+this.contextType+" drawing surface on canvas.  I recommend any browser but Internet Explorer")):alert("Sorry, your browser does not support canvas.  I recommend any browser but Internet Explorer")}initInput(t){}handleInput(t,e){}gameLoop(){this.currTime=(new Date).getTime(),this.elapsedTime=Math.min(this.currTime-this.prevTime,this.maxStep),this.prevTime=this.currTime,this.resourceManager&&!this.resourceManager.resourcesReady()?(this.updateLoadingScreen(this.elapsedTime),this.drawLoadingScreen(this.context)):(this.handleInput(this.inputManager,this.elapsedTime),this.paused||this.update(this.elapsedTime),this.context.save(),this.draw(this.context),this.context.restore())}launchLoop(){this.elapsedTime=0;var t=Date.now();this.currTime=t,this.prevTime=t,this.loopRunner=this.loopRunner.bind(this),window.requestAnimationFrame(this.loopRunner)}loopRunner(){this.gameLoop(),window.requestAnimationFrame(this.loopRunner)}update(t){}updateLoadingScreen(t){}draw(t){"2d"===this.contextType&&(t.font="14px sans-serif",t.fillText("This game does not have its own draw function!",10,50))}drawLoadingScreen(t){if(this.resourceManager&&"2d"===this.contextType){t.fillStyle=this.loadingBackground,t.fillRect(0,0,this.width,this.height),t.fillStyle=this.loadingForeground,t.strokeStyle=this.loadingForeground;var e=Math.floor(this.height/12);t.font="bold "+e+"px sans-serif",t.fillText("Loading... "+this.resourceManager.getPercentComplete()+"%",.1*this.width,.55*this.height),t.strokeRect(.1*this.width,.7*this.height,.8*this.width,.1*this.height),t.fillRect(.1*this.width,.7*this.height,.8*this.width*this.resourceManager.getPercentComplete()/100,.1*this.height),t.lineWidth=4}}}},function(t,e,i){const s=i(31),n=i(6),o=i(14),a=i(15),r=i(16),h=i(2);function l(t,e,i){return t.addEventListener(e,i),function(){t.removeEventListener(e,i)}}function c(t){return parseFloat(t)||0}function u(t){var e=function(t){return window.getComputedStyle(t,null)||{}}(t),i=c(e.marginLeft),s=c(e.marginTop);return{w:i+c(e.marginRight),h:s+c(e.marginBottom)}}t.exports=class{constructor(t={}){function e(t){t.remove()}if(this.keyActions=null,this.mouseAction=null,this.touchAction=null,this.canvas=null,this.handleMouse=!0,this.handleTouch=!0,this.handleKeys=!0,this.gameArea=null,this.canvasPercentage=null,this.emulateMouse=!0,this.hammer=null,Object.assign(this,t),this.hammer||(this.hammer=new s(document.body,{prevent_default:!0,drag_max_touches:0,hold:!1})),this.keyActions||(this.keyActions={}),this.handleKeys&&(this.pushCleanup(l(document,"keydown",this.keydown.bind(this)),e),this.pushCleanup(l(document,"keyup",this.keyup.bind(this)),e)),"ontouchstart"in document?(this.pushCleanup(l(document,"touchstart",this.touchstart.bind(this)),e),this.pushCleanup(l(document,"touchmove",this.touchmove.bind(this)),e),this.pushCleanup(l(document,"touchend",this.touchend.bind(this)),e)):(this.pushCleanup(l(document,"mousedown",this.mousedown.bind(this)),e),this.pushCleanup(l(document,"mousemove",this.mousemove.bind(this)),e),this.pushCleanup(l(document,"mouseup",this.mouseup.bind(this)),e)),this.mouseAction||(this.mouseAction=new a),this.touchAction||(this.touchAction=new o),this.emulateMouse,this.gameArea&&this.canvasPercentage){var i=this.resize.bind(this);this.pushCleanup(l(window,"resize",i),e),this.pushCleanup(l(window,"orientationchange",i),e)}this.normalizePoint=this.normalizePoint.bind(this),this.insideCanvas=this.insideCanvas.bind(this)}on(t,e){var i=this.hammer,s=this.removeCleanup;i.on(t,e);var n=this.pushCleanup([t,e],function(t){i.off.apply(i,t)});return{remove:function(){s(n),n()}}}insideCanvas(t){return r(t,this.canvas)}mapToKey(t,e){this.keyActions[e]=t}addKeyAction(t,e){Array.isArray(t)||(t=[t]);const i=t.map(t=>{const i=new n;return e&&(i.behavior=i.detectInitialPressOnly),this.mapToKey(i,t),i});return i.length>1?i:i[0]}addArrowKeyActions(){this.addKeyAction(h.UP),this.addKeyAction(h.DOWN),this.addKeyAction(h.LEFT),this.addKeyAction(h.RIGHT)}mouseUp(t){this.mouseup(t)}mouseup(t){this.mouseAction.release(this.normalizePoint(t))}mouseDown(t){this.mousedown(t)}mousedown(t){this.mouseAction.release(null);var e=this.normalizePoint(t);this.mouseAction.insideCanvas=this.insideCanvas(e),this.mouseAction.press(e)}mouseMove(t){this.mousemove(t)}mousemove(t){this.mouseAction.position=this.normalizePoint(t)}touchStart(t){this.touchstart(t)}touchstart(t){this.touchAction.release(null),console.log(t.touches,t);const e=[];for(let i=0;i<t.touches.length;i++)e.push(this.normalizePoint(t.touches[i]));this.touchAction.insideCanvas=e.some(this.insideCanvas),this.touchAction.press(e),this.emulateMouse&&this.mousedown(t.touches[0])}touchEnd(t){this.touchend(t)}touchend(t){const e=[];for(let i=0;i<t.touches.length;i++)e.push(this.normalizePoint(t.touches[i]));this.touchAction.release(e),this.emulateMouse&&this.mouseUp(t.touches[0])}touchMove(t){this.touchmove(t)}touchmove(t){const e=[];for(let i=0;i<t.touches.length;i++)e.push(this.normalizePoint(t.touches[i]));this.touchAction.positions=e,this.touchAction.startPositions&&t.preventDefault(),this.emulateMouse&&this.mousemove(t.touches[0])}getKeyAction(t){return this.keyActions?this.keyActions[t.keyCode]||this.keyActions[String.fromCharCode(t.keyCode)]:null}keyPressed(t){this.keydown(t)}keyDown(t){this.keydown(t)}keydown(t){var e=this.getKeyAction(t);e&&!e.isPressed()&&e.press()}keyReleased(t){this.keyup(t)}keyup(t){var e=this.getKeyAction(t);e&&e.release()}getMouseLoc(t){return this.normalizePoint(t)}normalizePoint(t){if(t){var e=(i=this.canvas,{x:(s=i.getBoundingClientRect()).left,y:s.top});return this.zoomRatio?{x:Math.round((t.clientX-e.x)/this.zoomRatio),y:Math.round((t.clientY-e.y)/this.zoomRatio)}:{x:Math.round(t.clientX-e.x),y:Math.round(t.clientY-e.y)}}var i,s}resize(){if(this.gameArea&&this.canvasPercentage&&this.canvas){var t=this.canvas.width,e=this.canvas.height,i=u(document.body),s=window.innerWidth-i.w,n=window.innerHeight-i.h,o=t/e,a="",r="";s/n>o?(a=(s=n*o)+"px",r=n+"px"):(a=s+"px",r=Math.round(s/o)+"px"),this.zoomRatio=s/t*this.canvasPercentage,this.gameArea.style.width=a,this.gameArea.style.height=r;var h=Math.floor(100*this.canvasPercentage)+"%";this.canvas.style.width=h,this.canvas.style.height=h,this.canvas.style.display="block",this.canvas.style.marginLeft="auto",this.canvas.style.marginRight="auto"}}pushCleanup(t,e){}}},function(t,e,i){const s=i(6);t.exports=class extends s{constructor(t={}){super(t),this.startPositions=null,this.endPositions=null,this.positions=null,this.insideCanvas=null,Object.assign(this,t)}press(t){this.startPositions=t,this.positions=t,super.press(t)}release(t){this.endPositions=t,super.release(t)}}},function(t,e,i){const s=i(6);t.exports=class extends s{constructor(t={}){super(t),this.startPosition=null,this.endPosition=null,this.position=null,this.insideCanvas=null,Object.assign(this,t)}press(t){this.startPosition=t,this.position=t,super.press(t)}release(t){this.endPosition=t||this.position,super.release(t)}}},function(t,e){t.exports=function(t,e){return!(t.x<0||t.x>e.width||t.y<0||t.y>e.height)}},function(t,e,i){"use strict";const s=i(18),n=i(20),o=i(21);var a={};function r(t,e){var i=e;return t&&(i=[t,e].join("/")),i.replace(/\/{2,}/g,"/")}function h(t){var e=document.createElement("canvas");e.height=t.height,e.width=t.width;var i=e.getContext("2d");return i.translate(e.width,0),i.scale(-1,1),i.drawImage(t,0,0),e.toDataURL()}function l(t){var e=document.createElement("canvas");e.height=t.height,e.width=t.width;var i=e.getContext("2d");return i.translate(0,e.height),i.scale(1,-1),i.drawImage(t,0,0),e.toDataURL()}class c{constructor(t){var e=this;e.name=t,e.complete=!1,e.img=new Image,e.img.addEventListener("load",function(){e.complete=!0},!1)}load(){this.img.src=this.name}}t.exports=class{constructor(t={}){this.allLoaded=!1,this.imageDir=null,this.soundDir=null,this.resourceList=a,Object.assign(this,t),this.Sound||(s("WebAudio")?this.Sound=o:this.Sound=n)}loadImage(t){let e=!1;Array.isArray(t)||(e=!0,t=[t]);const i=t.map(t=>{const e=r(this.imageDir,t);if(this.resourceList[e])return this.resourceList[e].img;this.allLoaded=!1;const i=new c(e);return i.load(),this.resourceList[e]=i,i.img});return e?i[0]:i}loadSound(t){let e=!1;Array.isArray(t)||(e=!0,t=[t]);const i=t.map(t=>{const e=r(this.soundDir,t);if(this.resourceList[e])return this.resourceList[e];this.allLoaded=!1;const i=new this.Sound(e);return this.resourceList[e]=i,i});return e?i[0]:i}flipImage(t,e,i){this.allLoaded=!1;const s=new c(t);this.resourceList[t]=s;const n=new Image;return n.addEventListener("load",function t(){s.img.src=i(n),n.removeEventListener("load",t)}),n.src=e.src,s.img}flipImageX(t,e){return this.flipImage(t,e,h)}flipImageY(t,e){return this.flipImage(t,e,l)}resourcesReady(){if(this.allLoaded)return!0;for(var t in this.resourceList)if(!this.resourceList[t].complete)return!1;return this.allLoaded=!0,!0}getPercentComplete(){var t=0,e=0;for(var i in this.resourceList)e++,this.resourceList[i].complete&&(t+=1);return 0===e?0:Math.round(t/e*100)}}},function(t,e,i){"use strict";(function(e){i(32);t.exports=function t(i){return"shittySound"==i?!(!t("android")&&!t("ios")||!t("webkit")):"android"==i?parseFloat(navigator.userAgent.split("Android ")[1])||void 0:"ios"!=i&&("webkit"==i?parseFloat(navigator.userAgent.split("WebKit/")[1])||void 0:"WebAudio"==i?!!e.AudioContext:"touch"===i&&"ontouchstart"in document.documentElement)}}).call(this,i(19))},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e){const i={"audio/mpeg":".mp3","audio/webm":".webm","audio/ogg":".ogg","audio/wav":".wav","audio/aac":".aac","audio/x-m4a":".m4a"};t.exports=class{constructor(t={}){this.name=null,this.complete=!1,this.probably=[],this.maybe=[],Object.assign(this,t),this.formats=i,"string"==typeof t&&this.load(t)}load(t){this.name=t,this.complete=!0}loop(t){}play(t,e){}_initAudio(t,e){}_chooseFormat(){if(!this.probably.length&&!this.maybe.length){var t,e,i=new Audio;for(t in this.formats)"probably"!==(e=i.canPlayType(t))?"maybe"!==e||this.maybe.push(this.formats[t]):this.probably.push(this.formats[t])}return this.probably.length?this.probably[0]:this.maybe.length?this.maybe[0]:""}_nextFormat(){return this.probably.length>1?(this.probably.shift(),this.probably[0]):1===this.probably.length&&(this.probably.length=0,this.maybe.length)?this.maybe[0]:this.maybe.length>1?(this.maybe.shift(),this.maybe[0]):(1===this.maybe.length&&(this.maybe.length=0),"")}}},function(t,e,i){const s=i(20),n=i(33),o=i(18);var a=null;if(o("WebAudio")&&(a=new window.AudioContext),o("shittySound")){document.addEventListener("touchstart",function t(){const e=a.createBufferSource();e.buffer=a.createBuffer(1,1,22050),e.connect(a.destination),e.start(0),document.removeEventListener("touchstart",t)})}t.exports=class extends s{constructor(t={}){super(t),this.audioContext=a,this.buffer=null,Object.assign(this,t)}load(t){var e=this;this.name=t;var i=n(t);i===t&&(t=i+this._chooseFormat());var s=new XMLHttpRequest;s.open("GET",t,!0),s.responseType="arraybuffer",s.onload=function(t){e.audioContext.decodeAudioData(t.target.response,function(t){e.buffer=t,e.complete=!0},function(t){e._nextFormat()?e.load(e.name):e.complete=!0})},s.send()}loop(t){this.buffer&&this._initAudio(t,!0).start(0)}play(t,e){this.buffer&&(e=e||0,this._initAudio(t,!1).start(e))}_initAudio(t,e){e="boolean"==typeof e&&e;var i=this.audioContext.createBufferSource();if(i.buffer=this.buffer,i.loop=e,t){var s=this.audioContext.createGain();s.gain.value=t,i.connect(s),s.connect(this.audioContext.destination)}else i.connect(this.audioContext.destination);return i}}},function(t,e,i){const s=i(23);class n{constructor(t={}){this.currFrameIndex=0,this.animTime=0,this.totalDuration=0,this.height=64,this.width=64,this.image=null,this.offsetX=0,this.offsetY=0,this.frames=void 0,Object.assign(this,t),this.start()}createFromSheet(t,e,i,s,o,a){var r=new n({image:i,height:o,width:s}),h=Array.isArray(e),l=1;a||(a=0);for(var c=0;c<t;c++)l=h?e[c]:e,r.addFrame(l,c,a);return r}clone(){return new n({image:this.image,frames:this.frames,totalDuration:this.totalDuration})}addFrame(t,e,i){this.frames||(this.frames=[]),this.totalDuration+=t,this.frames.push(new s({endTime:this.totalDuration,image:this.image,imgSlotX:e,imgSlotY:i}))}start(){this.animTime=0,this.currFrameIndex=0}update(t){if(this.frames.length>1)for(this.animTime+=t,this.animTime>=this.totalDuration&&(this.animTime=this.animTime%this.totalDuration,this.currFrameIndex=0);this.animTime>this.frames[this.currFrameIndex].endTime;)this.currFrameIndex++}getCurrentFrame(){return 0===this.frames.length?null:this.frames[this.currFrameIndex]}draw(t,e,i){var s=this.getCurrentFrame();t.drawImage(this.image,s.imgSlotX*this.width+this.offsetX,s.imgSlotY*this.height+this.offsetY,this.width,this.height,e,i,this.width,this.height)}}t.exports=n},function(t,e){t.exports=class{constructor(t={}){this.endTime=0,this.imgSlotX=0,this.imgSlotY=0,this.image=null,Object.assign(this,t)}}},function(t,e){const i=Math.PI/180;t.exports=function(t){return t*i}},function(t,e){const i=180/Math.PI;t.exports=function(t){return t*i}},function(t,e){t.exports=function(t,e){return Math.sqrt((e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y))}},function(t,e){class i{constructor(t={}){this.x=0,this.y=0,this.dx=0,this.dy=0,this.maxSpeed=0,this.name=null,this.collisionRadius=40,Object.assign(this,t)}update(t){this.x+=this.dx*t,this.y+=this.dy*t,this.anim.update(t)}limitSpeed(t){return this.maxSpeed&&Math.abs(t)>this.maxSpeed?t>0?this.maxSpeed:t<0?this.maxSpeed:0:t}getCurrentFrame(){if(this.anim)return this.anim.getCurrentFrame()}draw(t){this.anim&&this.anim.draw(t,this.x,this.y)}clone(){return new i({anim:this.anim.clone()})}}t.exports=i},function(t,e,i){(function(e){const s=i(46);console.log(Box2D,"Box2D",e,window);const n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.b2BodyDef,a=Box2D.Dynamics.b2Body,r=Box2D.Dynamics.b2FixtureDef,h=(Box2D.Dynamics.b2Fixture,Box2D.Dynamics.b2World),l=Box2D.Collision.Shapes.b2PolygonShape,c=Box2D.Collision.Shapes.b2CircleShape;t.exports=class{constructor(t={}){this.intervalRate=60,this.adaptive=!1,this.bodiesMap=null,this.fixturesMap=null,this.jointsMap=null,this.b2World=null,this.gravityX=0,this.gravityY=9.8,this.allowSleep=!0,this.resolveCollisions=!1,this.contactListener=null,this.collisions=null,this.scale=30,this.bodiesMap={},this.fixturesMap={},this.jointsMap={},Object.assign(this,t),this.b2World=new h(new n(this.gravityX,this.gravityY),this.allowSleep),this.intervalRate&&(this.intervalRate=parseInt(this.intervalRate,10)),this.resolveCollisions&&(this.contactListener=new s),this.contactListener&&this.addContactListener(this.contactListener)}update(t){this.contactListener&&this.contactListener.reset&&this.contactListener.reset();var e=Date.now();if(t)this.b2World.Step(t/1e3,10,10),this.b2World.ClearForces();else{var i=this.adaptive?(e-this.lastTimestamp)/1e3:1/this.intervalRate;this.b2World.Step(i,10,10),this.b2World.ClearForces()}return Date.now()-e}getState(){for(var t={},e=this.b2World.GetBodyList();e;e=e.m_next)e.IsActive()&&void 0!==e.GetUserData()&&null!==e.GetUserData()&&(t[e.GetUserData()]={x:e.GetPosition().x,y:e.GetPosition().y,angle:e.GetAngle(),center:{x:e.GetWorldCenter().x,y:e.GetWorldCenter().y},linearVelocity:e.m_linearVelocity,angularVelocity:e.m_angularVelocity},this.contactListener&&this.contactListener.collisions&&(t[e.GetUserData()].collisions=this.contactListener.collisions[e.GetUserData()]||null));return t}updateExternalState(t){var e=this.getState();for(var i in e){var s=t[i];s&&!s.staticBody&&s.update(e[i])}}setBodies(t){for(var e in t){var i=t[e];this.addBody(i)}this.ready=!0}addBody(t){t.alreadyScaled||(t.scaleShape(1/this.scale),t.scale=this.scale);var e,i,s,h,u,d=new o,p=new r;p.restitution=t.restitution,p.density=t.density,p.friction=t.friction,null!=t.maskBits&&(p.filter.maskBits=t.maskBits),null!=t.categoryBits&&(p.filter.categoryBits=t.categoryBits),null!=t.groupIndex&&(p.filter.groupIndex=t.groupIndex),t.staticBody?d.type=a.b2_staticBody:d.type=a.b2_dynamicBody,d.position.x=t.x,d.position.y=t.y,d.userData=t.id,d.angle=t.angle,d.linearDamping=t.linearDamping,d.angularDamping=t.angularDamping;var y=this.b2World.CreateBody(d);if(t.radius)p.shape=new c(t.radius),y.CreateFixture(p);else if(t.points){for(s=[],e=0;e<t.points.length;e++)(h=new n).Set(t.points[e].x,t.points[e].y),s[e]=h;p.shape=new l,p.shape.SetAsArray(s,s.length),y.CreateFixture(p)}else if(t.polys)for(i=0;i<t.polys.length;i++){for(s=t.polys[i],u=[],e=0;e<s.length;e++)(h=new n).Set(s[e].x,s[e].y),u[e]=h;p.shape=new l,p.shape.SetAsArray(u,u.length),y.CreateFixture(p)}else p.shape=new l,p.shape.SetAsBox(t.halfWidth,t.halfHeight),y.CreateFixture(p);this.bodiesMap[t.id]=y}setPosition(t,e,i){this.bodiesMap[t].SetPosition(new n(e,i))}setAngle(t,e){var i=this.bodiesMap[t];console.log("set angle",i.setAngle,i),i.setAngle(e)}setLinearVelocity(t,e,i){this.bodiesMap[t].SetLinearVelocity(new n(e,i))}setAngularVelocity(t,e){this.bodiesMap[t].SetAngularVelocity(e)}applyImpulseDegrees(t,e,i){var s=this.bodiesMap[t];s.ApplyImpulse(new n(Math.sin(e*(Math.PI/180))*i,Math.cos(e*(Math.PI/180))*i*-1),s.GetWorldCenter())}applyForceDegrees(t,e,i){var s=this.bodiesMap[t];s.ApplyForce(new n(Math.sin(e*(Math.PI/180))*i,Math.cos(e*(Math.PI/180))*i*-1),s.GetWorldCenter())}applyImpulse(t,e,i){var s=this.bodiesMap[t];s.ApplyImpulse(new n(Math.sin(e)*i,Math.cos(e)*i*-1),s.GetWorldCenter())}applyForce(t,e,i){var s=this.bodiesMap[t];s.ApplyForce(new n(Math.sin(e)*i,Math.cos(e)*i*-1),s.GetWorldCenter())}setAngle(t,e){this.bodiesMap[t].SetAngle(e)}setAnglularVelocity(t,e){this.bodiesMap[t].SetAngularVelocity(e)}applyTorque(t,e){this.bodiesMap[t].ApplyTorque(e)}setGravity(t){this.b2World.SetGravity(new n(t.x,t.y))}removeBody(t){this.bodiesMap[t]&&(this.fixturesMap[t]&&this.bodiesMap[t].DestroyFixture(this.fixturesMap[t]),this.b2World.DestroyBody(this.bodiesMap[t]),delete this.bodiesMap[t])}wakeUpBody(t){this.bodiesMap[t]&&this.bodiesMap[t].SetAwake(!0)}addContactListener(t){var e=new Box2D.Dynamics.b2ContactListener;t.beginContact&&(e.BeginContact=function(e){t.beginContact(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,e)}),t.endContact&&(e.EndContact=function(e){t.endContact(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,e)}),t.preSolve&&(e.PreSolve=function(e,i){t.preSolve(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,i,e)}),t.postSolve&&(e.PostSolve=function(e,i){t.postSolve(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,i,e)}),this.b2World.SetContactListener(e)}removeJoint(t){this.jointsMap[t]&&(this.b2World.DestroyJoint(this.jointsMap[t]),delete this.jointsMap[t])}addJoint(t){if(t&&t.id&&!this.jointsMap[t.id]){!t.alreadyScaled&&t.scaleJointLocation&&(t.scaleJointLocation(1/this.scale),t.scale=this.scale);var e=t.createB2Joint(this);e&&(this.jointsMap[t.id]=e)}}}}).call(this,i(19))},function(t,e){t.exports={entities:[{points:[{x:-100,y:-100},{x:568.10113,y:-100},{x:568.10113,y:0},{x:0,y:540},{x:-100,y:540}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",id:"uleftw",hidden:!0,wall:!0,restitution:1},{points:[{x:-100,y:540},{x:0,y:540},{x:568.10113,y:1080},{x:568.10113,y:1180},{x:-100,y:1180}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",restitution:1,hidden:!0,wall:!0,id:"lleftw"},{points:[{x:1351.89887,y:-100},{x:2020,y:-100},{x:2020,y:540},{x:1920,y:540},{x:1351.89887,y:0}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",restitution:1,id:"urighttw",hidden:!0,wall:!0},{points:[{x:1351.89887,y:1080},{x:1920,y:540},{x:2020,y:540},{x:2020,y:1180},{x:1351.89887,y:1180}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",restitution:1,id:"lrighttw",hidden:!0,wall:!0},{x:960,y:1180,halfWidth:1e3,halfHeight:100,staticBody:!0,zone:!1,type:"Rectangle",id:"bottomw",restitution:1,hidden:!0,wall:!0},{x:960,y:-100,halfWidth:1e3,halfHeight:100,staticBody:!0,zone:!1,type:"Rectangle",id:"topw",restitution:1,hidden:!0,wall:!0}],joints:[],canvas:{height:600,width:800},backImg:null}},function(t,e){t.exports=["#00DD00","#DD0000","#EEEEEE","#A0522D","#0000DD","#FF8C00"]},function(t,e,i){var s;
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function(n,o,a,r){"use strict";var h,l=["","webkit","Moz","MS","ms","o"],c=o.createElement("div"),u="function",d=Math.round,p=Math.abs,y=Date.now;function f(t,e,i){return setTimeout(A(t,i),e)}function m(t,e,i){return!!Array.isArray(t)&&(g(t,i[e],i),!0)}function g(t,e,i){var s;if(t)if(t.forEach)t.forEach(e,i);else if(t.length!==r)for(s=0;s<t.length;)e.call(i,t[s],s,t),s++;else for(s in t)t.hasOwnProperty(s)&&e.call(i,t[s],s,t)}function v(t,e,i){var s="DEPRECATED METHOD: "+e+"\n"+i+" AT \n";return function(){var e=new Error("get-stack-trace"),i=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=n.console&&(n.console.warn||n.console.log);return o&&o.call(n.console,s,i),t.apply(this,arguments)}}h="function"!=typeof Object.assign?function(t){if(t===r||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var s=arguments[i];if(s!==r&&null!==s)for(var n in s)s.hasOwnProperty(n)&&(e[n]=s[n])}return e}:Object.assign;var x=v(function(t,e,i){for(var s=Object.keys(e),n=0;n<s.length;)(!i||i&&t[s[n]]===r)&&(t[s[n]]=e[s[n]]),n++;return t},"extend","Use `assign`."),b=v(function(t,e){return x(t,e,!0)},"merge","Use `assign`.");function T(t,e,i){var s,n=e.prototype;(s=t.prototype=Object.create(n)).constructor=t,s._super=n,i&&h(s,i)}function A(t,e){return function(){return t.apply(e,arguments)}}function S(t,e){return typeof t==u?t.apply(e&&e[0]||r,e):t}function w(t,e){return t===r?e:t}function P(t,e,i){g(D(e),function(e){t.addEventListener(e,i,!1)})}function E(t,e,i){g(D(e),function(e){t.removeEventListener(e,i,!1)})}function M(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function I(t,e){return t.indexOf(e)>-1}function D(t){return t.trim().split(/\s+/g)}function C(t,e,i){if(t.indexOf&&!i)return t.indexOf(e);for(var s=0;s<t.length;){if(i&&t[s][i]==e||!i&&t[s]===e)return s;s++}return-1}function W(t){return Array.prototype.slice.call(t,0)}function _(t,e,i){for(var s=[],n=[],o=0;o<t.length;){var a=e?t[o][e]:t[o];C(n,a)<0&&s.push(t[o]),n[o]=a,o++}return i&&(s=e?s.sort(function(t,i){return t[e]>i[e]}):s.sort()),s}function O(t,e){for(var i,s,n=e[0].toUpperCase()+e.slice(1),o=0;o<l.length;){if((s=(i=l[o])?i+n:e)in t)return s;o++}return r}var L=1;function R(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||n}var k="ontouchstart"in n,F=O(n,"PointerEvent")!==r,B=k&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),N=25,j=1,H=2,U=4,z=8,G=1,Y=2,X=4,V=8,J=16,K=Y|X,q=V|J,Q=K|q,Z=["x","y"],$=["clientX","clientY"];function tt(t,e){var i=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){S(t.options.enable,[t])&&i.handler(e)},this.init()}function et(t,e,i){var s=i.pointers.length,n=i.changedPointers.length,o=e&j&&s-n==0,a=e&(U|z)&&s-n==0;i.isFirst=!!o,i.isFinal=!!a,o&&(t.session={}),i.eventType=e,function(t,e){var i=t.session,s=e.pointers,n=s.length;i.firstInput||(i.firstInput=it(e));n>1&&!i.firstMultiple?i.firstMultiple=it(e):1===n&&(i.firstMultiple=!1);var o=i.firstInput,a=i.firstMultiple,h=a?a.center:o.center,l=e.center=st(s);e.timeStamp=y(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=rt(h,l),e.distance=at(h,l),function(t,e){var i=e.center,s=t.offsetDelta||{},n=t.prevDelta||{},o=t.prevInput||{};e.eventType!==j&&o.eventType!==U||(n=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},s=t.offsetDelta={x:i.x,y:i.y});e.deltaX=n.x+(i.x-s.x),e.deltaY=n.y+(i.y-s.y)}(i,e),e.offsetDirection=ot(e.deltaX,e.deltaY);var c=nt(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=c.x,e.overallVelocityY=c.y,e.overallVelocity=p(c.x)>p(c.y)?c.x:c.y,e.scale=a?(u=a.pointers,d=s,at(d[0],d[1],$)/at(u[0],u[1],$)):1,e.rotation=a?function(t,e){return rt(e[1],e[0],$)+rt(t[1],t[0],$)}(a.pointers,s):0,e.maxPointers=i.prevInput?e.pointers.length>i.prevInput.maxPointers?e.pointers.length:i.prevInput.maxPointers:e.pointers.length,function(t,e){var i,s,n,o,a=t.lastInterval||e,h=e.timeStamp-a.timeStamp;if(e.eventType!=z&&(h>N||a.velocity===r)){var l=e.deltaX-a.deltaX,c=e.deltaY-a.deltaY,u=nt(h,l,c);s=u.x,n=u.y,i=p(u.x)>p(u.y)?u.x:u.y,o=ot(l,c),t.lastInterval=e}else i=a.velocity,s=a.velocityX,n=a.velocityY,o=a.direction;e.velocity=i,e.velocityX=s,e.velocityY=n,e.direction=o}(i,e);var u,d;var f=t.element;M(e.srcEvent.target,f)&&(f=e.srcEvent.target);e.target=f}(t,i),t.emit("hammer.input",i),t.recognize(i),t.session.prevInput=i}function it(t){for(var e=[],i=0;i<t.pointers.length;)e[i]={clientX:d(t.pointers[i].clientX),clientY:d(t.pointers[i].clientY)},i++;return{timeStamp:y(),pointers:e,center:st(e),deltaX:t.deltaX,deltaY:t.deltaY}}function st(t){var e=t.length;if(1===e)return{x:d(t[0].clientX),y:d(t[0].clientY)};for(var i=0,s=0,n=0;n<e;)i+=t[n].clientX,s+=t[n].clientY,n++;return{x:d(i/e),y:d(s/e)}}function nt(t,e,i){return{x:e/t||0,y:i/t||0}}function ot(t,e){return t===e?G:p(t)>=p(e)?t<0?Y:X:e<0?V:J}function at(t,e,i){i||(i=Z);var s=e[i[0]]-t[i[0]],n=e[i[1]]-t[i[1]];return Math.sqrt(s*s+n*n)}function rt(t,e,i){i||(i=Z);var s=e[i[0]]-t[i[0]],n=e[i[1]]-t[i[1]];return 180*Math.atan2(n,s)/Math.PI}tt.prototype={handler:function(){},init:function(){this.evEl&&P(this.element,this.evEl,this.domHandler),this.evTarget&&P(this.target,this.evTarget,this.domHandler),this.evWin&&P(R(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&E(this.element,this.evEl,this.domHandler),this.evTarget&&E(this.target,this.evTarget,this.domHandler),this.evWin&&E(R(this.element),this.evWin,this.domHandler)}};var ht={mousedown:j,mousemove:H,mouseup:U},lt="mousedown",ct="mousemove mouseup";function ut(){this.evEl=lt,this.evWin=ct,this.pressed=!1,tt.apply(this,arguments)}T(ut,tt,{handler:function(t){var e=ht[t.type];e&j&&0===t.button&&(this.pressed=!0),e&H&&1!==t.which&&(e=U),this.pressed&&(e&U&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var dt={pointerdown:j,pointermove:H,pointerup:U,pointercancel:z,pointerout:z},pt={2:"touch",3:"pen",4:"mouse",5:"kinect"},yt="pointerdown",ft="pointermove pointerup pointercancel";function mt(){this.evEl=yt,this.evWin=ft,tt.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}n.MSPointerEvent&&!n.PointerEvent&&(yt="MSPointerDown",ft="MSPointerMove MSPointerUp MSPointerCancel"),T(mt,tt,{handler:function(t){var e=this.store,i=!1,s=t.type.toLowerCase().replace("ms",""),n=dt[s],o=pt[t.pointerType]||t.pointerType,a="touch"==o,r=C(e,t.pointerId,"pointerId");n&j&&(0===t.button||a)?r<0&&(e.push(t),r=e.length-1):n&(U|z)&&(i=!0),r<0||(e[r]=t,this.callback(this.manager,n,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),i&&e.splice(r,1))}});var gt={touchstart:j,touchmove:H,touchend:U,touchcancel:z},vt="touchstart",xt="touchstart touchmove touchend touchcancel";function bt(){this.evTarget=vt,this.evWin=xt,this.started=!1,tt.apply(this,arguments)}T(bt,tt,{handler:function(t){var e=gt[t.type];if(e===j&&(this.started=!0),this.started){var i=function(t,e){var i=W(t.touches),s=W(t.changedTouches);e&(U|z)&&(i=_(i.concat(s),"identifier",!0));return[i,s]}.call(this,t,e);e&(U|z)&&i[0].length-i[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}}});var Tt={touchstart:j,touchmove:H,touchend:U,touchcancel:z},At="touchstart touchmove touchend touchcancel";function St(){this.evTarget=At,this.targetIds={},tt.apply(this,arguments)}T(St,tt,{handler:function(t){var e=Tt[t.type],i=function(t,e){var i=W(t.touches),s=this.targetIds;if(e&(j|H)&&1===i.length)return s[i[0].identifier]=!0,[i,i];var n,o,a=W(t.changedTouches),r=[],h=this.target;if(o=i.filter(function(t){return M(t.target,h)}),e===j)for(n=0;n<o.length;)s[o[n].identifier]=!0,n++;n=0;for(;n<a.length;)s[a[n].identifier]&&r.push(a[n]),e&(U|z)&&delete s[a[n].identifier],n++;if(!r.length)return;return[_(o.concat(r),"identifier",!0),r]}.call(this,t,e);i&&this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}});var wt=2500,Pt=25;function Et(){tt.apply(this,arguments);var t=A(this.handler,this);this.touch=new St(this.manager,t),this.mouse=new ut(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function Mt(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var i={x:e.clientX,y:e.clientY};this.lastTouches.push(i);var s=this.lastTouches;setTimeout(function(){var t=s.indexOf(i);t>-1&&s.splice(t,1)},wt)}}T(Et,tt,{handler:function(t,e,i){var s="touch"==i.pointerType,n="mouse"==i.pointerType;if(!(n&&i.sourceCapabilities&&i.sourceCapabilities.firesTouchEvents)){if(s)(function(t,e){t&j?(this.primaryTouch=e.changedPointers[0].identifier,Mt.call(this,e)):t&(U|z)&&Mt.call(this,e)}).call(this,e,i);else if(n&&function(t){for(var e=t.srcEvent.clientX,i=t.srcEvent.clientY,s=0;s<this.lastTouches.length;s++){var n=this.lastTouches[s],o=Math.abs(e-n.x),a=Math.abs(i-n.y);if(o<=Pt&&a<=Pt)return!0}return!1}.call(this,i))return;this.callback(t,e,i)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var It=O(c.style,"touchAction"),Dt=It!==r,Ct="auto",Wt="manipulation",_t="none",Ot="pan-x",Lt="pan-y",Rt=function(){if(!Dt)return!1;var t={},e=n.CSS&&n.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){t[i]=!e||n.CSS.supports("touch-action",i)}),t}();function kt(t,e){this.manager=t,this.set(e)}kt.prototype={set:function(t){"compute"==t&&(t=this.compute()),Dt&&this.manager.element.style&&Rt[t]&&(this.manager.element.style[It]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return g(this.manager.recognizers,function(e){S(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),function(t){if(I(t,_t))return _t;var e=I(t,Ot),i=I(t,Lt);if(e&&i)return _t;if(e||i)return e?Ot:Lt;if(I(t,Wt))return Wt;return Ct}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,i=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var s=this.actions,n=I(s,_t)&&!Rt[_t],o=I(s,Lt)&&!Rt[Lt],a=I(s,Ot)&&!Rt[Ot];if(n){var r=1===t.pointers.length,h=t.distance<2,l=t.deltaTime<250;if(r&&h&&l)return}if(!a||!o)return n||o&&i&K||a&&i&q?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var Ft=1,Bt=2,Nt=4,jt=8,Ht=jt,Ut=16;function zt(t){this.options=h({},this.defaults,t||{}),this.id=L++,this.manager=null,this.options.enable=w(this.options.enable,!0),this.state=Ft,this.simultaneous={},this.requireFail=[]}function Gt(t){return t&Ut?"cancel":t&jt?"end":t&Nt?"move":t&Bt?"start":""}function Yt(t){return t==J?"down":t==V?"up":t==Y?"left":t==X?"right":""}function Xt(t,e){var i=e.manager;return i?i.get(t):t}function Vt(){zt.apply(this,arguments)}function Jt(){Vt.apply(this,arguments),this.pX=null,this.pY=null}function Kt(){Vt.apply(this,arguments)}function qt(){zt.apply(this,arguments),this._timer=null,this._input=null}function Qt(){Vt.apply(this,arguments)}function Zt(){Vt.apply(this,arguments)}function $t(){zt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function te(t,e){return(e=e||{}).recognizers=w(e.recognizers,te.defaults.preset),new ee(t,e)}zt.prototype={defaults:{},set:function(t){return h(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(m(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=Xt(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return m(t,"dropRecognizeWith",this)?this:(t=Xt(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(m(t,"requireFailure",this))return this;var e=this.requireFail;return-1===C(e,t=Xt(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(m(t,"dropRequireFailure",this))return this;t=Xt(t,this);var e=C(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,i=this.state;function s(i){e.manager.emit(i,t)}i<jt&&s(e.options.event+Gt(i)),s(e.options.event),t.additionalEvent&&s(t.additionalEvent),i>=jt&&s(e.options.event+Gt(i))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(32|Ft)))return!1;t++}return!0},recognize:function(t){var e=h({},t);if(!S(this.options.enable,[this,e]))return this.reset(),void(this.state=32);this.state&(Ht|Ut|32)&&(this.state=Ft),this.state=this.process(e),this.state&(Bt|Nt|jt|Ut)&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},T(Vt,zt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,i=t.eventType,s=e&(Bt|Nt),n=this.attrTest(t);return s&&(i&z||!n)?e|Ut:s||n?i&U?e|jt:e&Bt?e|Nt:Bt:32}}),T(Jt,Vt,{defaults:{event:"pan",threshold:10,pointers:1,direction:Q},getTouchAction:function(){var t=this.options.direction,e=[];return t&K&&e.push(Lt),t&q&&e.push(Ot),e},directionTest:function(t){var e=this.options,i=!0,s=t.distance,n=t.direction,o=t.deltaX,a=t.deltaY;return n&e.direction||(e.direction&K?(n=0===o?G:o<0?Y:X,i=o!=this.pX,s=Math.abs(t.deltaX)):(n=0===a?G:a<0?V:J,i=a!=this.pY,s=Math.abs(t.deltaY))),t.direction=n,i&&s>e.threshold&&n&e.direction},attrTest:function(t){return Vt.prototype.attrTest.call(this,t)&&(this.state&Bt||!(this.state&Bt)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=Yt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),T(Kt,Vt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[_t]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&Bt)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),T(qt,zt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Ct]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,s=t.distance<e.threshold,n=t.deltaTime>e.time;if(this._input=t,!s||!i||t.eventType&(U|z)&&!n)this.reset();else if(t.eventType&j)this.reset(),this._timer=f(function(){this.state=Ht,this.tryEmit()},e.time,this);else if(t.eventType&U)return Ht;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===Ht&&(t&&t.eventType&U?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=y(),this.manager.emit(this.options.event,this._input)))}}),T(Qt,Vt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[_t]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&Bt)}}),T(Zt,Vt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:K|q,pointers:1},getTouchAction:function(){return Jt.prototype.getTouchAction.call(this)},attrTest:function(t){var e,i=this.options.direction;return i&(K|q)?e=t.overallVelocity:i&K?e=t.overallVelocityX:i&q&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&i&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&p(e)>this.options.velocity&&t.eventType&U},emit:function(t){var e=Yt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),T($t,zt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[Wt]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,s=t.distance<e.threshold,n=t.deltaTime<e.time;if(this.reset(),t.eventType&j&&0===this.count)return this.failTimeout();if(s&&n&&i){if(t.eventType!=U)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,a=!this.pCenter||at(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,a&&o?this.count+=1:this.count=1,this._input=t,0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=f(function(){this.state=Ht,this.tryEmit()},e.interval,this),Bt):Ht}return 32},failTimeout:function(){return this._timer=f(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==Ht&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),te.VERSION="2.0.7",te.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[Qt,{enable:!1}],[Kt,{enable:!1},["rotate"]],[Zt,{direction:K}],[Jt,{direction:K},["swipe"]],[$t],[$t,{event:"doubletap",taps:2},["tap"]],[qt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function ee(t,e){var i;this.options=h({},te.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((i=this).options.inputClass||(F?mt:B?St:k?Et:ut))(i,et),this.touchAction=new kt(this,this.options.touchAction),ie(this,!0),g(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function ie(t,e){var i,s=t.element;s.style&&(g(t.options.cssProps,function(n,o){i=O(s.style,o),e?(t.oldCssProps[i]=s.style[i],s.style[i]=n):s.style[i]=t.oldCssProps[i]||""}),e||(t.oldCssProps={}))}ee.prototype={set:function(t){return h(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var i;this.touchAction.preventDefaults(t);var s=this.recognizers,n=e.curRecognizer;(!n||n&&n.state&Ht)&&(n=e.curRecognizer=null);for(var o=0;o<s.length;)i=s[o],2===e.stopped||n&&i!=n&&!i.canRecognizeWith(n)?i.reset():i.recognize(t),!n&&i.state&(Bt|Nt|jt)&&(n=e.curRecognizer=i),o++}},get:function(t){if(t instanceof zt)return t;for(var e=this.recognizers,i=0;i<e.length;i++)if(e[i].options.event==t)return e[i];return null},add:function(t){if(m(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(m(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,i=C(e,t);-1!==i&&(e.splice(i,1),this.touchAction.update())}return this},on:function(t,e){if(t!==r&&e!==r){var i=this.handlers;return g(D(t),function(t){i[t]=i[t]||[],i[t].push(e)}),this}},off:function(t,e){if(t!==r){var i=this.handlers;return g(D(t),function(t){e?i[t]&&i[t].splice(C(i[t],e),1):delete i[t]}),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var i=o.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=e,e.target.dispatchEvent(i)}(t,e);var i=this.handlers[t]&&this.handlers[t].slice();if(i&&i.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var s=0;s<i.length;)i[s](e),s++}},destroy:function(){this.element&&ie(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},h(te,{INPUT_START:j,INPUT_MOVE:H,INPUT_END:U,INPUT_CANCEL:z,STATE_POSSIBLE:Ft,STATE_BEGAN:Bt,STATE_CHANGED:Nt,STATE_ENDED:jt,STATE_RECOGNIZED:Ht,STATE_CANCELLED:Ut,STATE_FAILED:32,DIRECTION_NONE:G,DIRECTION_LEFT:Y,DIRECTION_RIGHT:X,DIRECTION_UP:V,DIRECTION_DOWN:J,DIRECTION_HORIZONTAL:K,DIRECTION_VERTICAL:q,DIRECTION_ALL:Q,Manager:ee,Input:tt,TouchAction:kt,TouchInput:St,MouseInput:ut,PointerEventInput:mt,TouchMouseInput:Et,SingleTouchInput:bt,Recognizer:zt,AttrRecognizer:Vt,Tap:$t,Pan:Jt,Swipe:Zt,Pinch:Kt,Rotate:Qt,Press:qt,on:P,off:E,each:g,merge:b,extend:x,assign:h,inherit:T,bindFn:A,prefixed:O}),(void 0!==n?n:"undefined"!=typeof self?self:{}).Hammer=te,(s=function(){return te}.call(e,i,e,t))===r||(t.exports=s)}(window,document)},function(t,e,i){"use strict";for(var s=["ms","moz","webkit","o"],n=0;n<s.length&&!window.AudioContext;++n)window.AudioContext=window[s[n]+"AudioContext"];t.exports=window.AudioContext},function(t,e,i){"use strict";t.exports=function(t){return t.replace(/(.*)\.[^.]{1,4}$/,"")}},function(t,e,i){const s=i(35),n=i(24),o=i(25),a=i(7),r=i(26),h=i(36),l=i(0),c=i(4),u=i(8),d=i(16),p=i(37),y={averagePoints:s,degreesToRadians:n,radiansToDegrees:o,pointInPolygon:a,distance:r,degreesFromCenter:h,radiansFromCenter:l,scalePoints:c,translatePoints:u,insideCanvas:d,rotateRadiansAroundCenter:i(1),rotateDegreesAroundCenter:p};t.exports=y},function(t,e){t.exports=function(t){var e={x:0,y:0};return t.forEach(t,function(t){e.x+=t.x,e.y+=t.y}),e.x=e.x/t.length,e.y=e.y/t.length,e}},function(t,e,i){const s=i(25),n=i(0);t.exports=function(t,e){return s(n(t,e))}},function(t,e,i){const s=i(1),n=i(24);t.exports=function(t,e,i){return s(t,e,n(i))}},function(t,e,i){const s=i(27),n=i(22),o=0,a=2;t.exports=class extends s{constructor(t={}){super(t),this.state=a,this.walkingAnims=[],this.dyingAnims=[],this.idleAnims=[],this.direction=o,Object.assign(this,t)}updateDirection(t){this.x+=this.dx*t,this.y+=this.dy*t,this.state!==this.statics.STATE_DYING&&(this.dx>0&&0===this.dy?this.direction=this.statics.EAST:0===this.dx&&this.dy<0?this.direction=this.statics.NORTH:this.dx>0&&this.dy<0?this.direction=this.statics.NORTHEAST:this.dx<0&&this.dy<0?this.direction=this.statics.NORTHWEST:0===this.dx&&this.dy>0?this.direction=this.statics.SOUTH:this.dx>0&&this.dy>0?this.direction=this.statics.SOUTHEAST:this.dx<0&&this.dy>0?this.direction=this.statics.SOUTHWEST:this.dx<0&&0===this.dy&&(this.direction=this.statics.WEST),0===this.dx&&0===this.dy?this.state=this.statics.STATE_IDLE:this.state=this.statics.STATE_WALKING)}updateAnimations(t){this.state===this.statics.STATE_WALKING?this.anim=this.walkingAnims[this.direction]:this.state===this.statics.STATE_DYING?this.anim=this.dyingAnims[this.direction]:this.anim=this.idleAnims[this.direction],this.anim.update(t)}createAnimations(t,e,i,s,o,a){var r=[],h=Array.isArray(e),l=1;a||(a=0);for(var c=0;c<8;c++){r[c]=new n({height:s,width:o,image:i});for(var u=0;u<t;u++)l=h?e[u]:e,r[c].addFrame(l,u+t*c,a)}return r}}},function(t,e,i){"use strict";var s={Circle:i(3),MultiPolygon:i(40),Polygon:i(10),Rectangle:i(41)};t.exports=s},function(t,e,i){const s=i(5),n=i(4),o=i(7),a=i(8);t.exports=class extends s{constructor(t={}){super(t),this.polys=[],Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle;for(var s=0;s<this.polys.length;s++){t.beginPath(),t.moveTo((this.x+this.polys[s][0].x)*e,(this.y+this.polys[s][0].y)*e);for(var n=1;n<this.polys[s].length;n++)t.lineTo((this.polys[s][n].x+this.x)*e,(this.polys[s][n].y+this.y)*e);t.lineTo((this.x+this.polys[s][0].x)*e,(this.y+this.polys[s][0].y)*e),t.closePath(),t.fill(),t.stroke()}t.restore(),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.polys=n(this.polys,t),sup.scaleShape(t)}pointInShape(t){for(var e=0;e<this.polys.length;e++)if(o(t,a(this.polys[e],this)))return!0;return!1}}},function(t,e,i){const s=i(5);t.exports=class extends s{constructor(t={}){super(t),this.halfWidth=1,this.halfHeight=1,Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.fillRect((this.x-this.halfWidth)*e,(this.y-this.halfHeight)*e,2*this.halfWidth*e,2*this.halfHeight*e),t.strokeRect((this.x-this.halfWidth)*e,(this.y-this.halfHeight)*e,2*this.halfWidth*e,2*this.halfHeight*e),t.restore(),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.halfHeight=this.halfHeight*t,this.halfWidth=this.halfWidth*t,super.scaleShape(t)}pointInShape(t){return t.x>=this.x-this.halfWidth&&t.x<=this.x+this.halfWidth&&t.y>=this.y-this.halfHeight&&t.y<=this.y+this.halfHeight}}},function(t,e,i){"use strict";var s={Distance:i(43),Prismatic:i(44),Revolute:i(45)};t.exports=s},function(t,e,i){const s=i(9),n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.Joints.b2DistanceJointDef;t.exports=class extends s{constructor(t={}){super(t),this.bodyPoint2=null,Object.assign(this,t)}scaleJointLocation(t){t&&this.bodyPoint2&&(this.bodyPoint2.x=this.bodyPoint2.x*t,this.bodyPoint2.y=this.bodyPoint2.y*t,this.alreadyScaled=!0),super.scaleJointLocation(t)}createB2Joint(t){if(t&&t.bodiesMap&&t.b2World&&t.jointsMap&&!t.jointsMap[this.id]){const e=t.bodiesMap[this.bodyId1],i=t.bodiesMap[this.bodyId2];if(e&&i){let s,a;this.bodyPoint1&&(s=new n(this.bodyPoint1.x,this.bodyPoint1.y)),this.bodyPoint2&&(a=new n(this.bodyPoint2.x,this.bodyPoint2.y)),s=s||e.GetWorldCenter(),a=a||i.GetWorldCenter();const r=new o;return r.Initialize(e,i,s,a),this.jointAttributes&&Object.assign(r,this.jointAttributes),t.b2World.CreateJoint(r)}}}}},function(t,e,i){const s=i(9),n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.Joints.b2PrismaticJointDef;t.exports=class extends s{constructor(t={}){super(t),this.axisScale=null,Object.assign(this,t)}createB2Joint(t){if(t&&t.bodiesMap&&t.b2World&&t.jointsMap&&!t.jointsMap[this.id]){const s=t.bodiesMap[this.bodyId1],a=t.bodiesMap[this.bodyId2];if(s&&a){let r;this.bodyPoint1&&(r=new n(this.bodyPoint1.x,this.bodyPoint1.y)),r=r||s.GetWorldCenter();var e,i=new o;return e=this.axisScale?new n(this.axisScale.x,this.axisScale.y):new n(1,0),i.Initialize(s,a,r,e),this.jointAttributes&&Object.assign(i,this.jointAttributes),t.b2World.CreateJoint(i)}}}}},function(t,e,i){const s=i(9),n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.Joints.b2RevoluteJointDef;t.exports=class extends s{constructor(t={}){super(t),Object.assign(this,t)}createB2Joint(t){if(t&&t.bodiesMap&&t.b2World&&t.jointsMap&&!t.jointsMap[this.id]){var e=t.bodiesMap[this.bodyId1],i=t.bodiesMap[this.bodyId2];if(e&&i){var s;this.bodyPoint1&&(s=new n(this.bodyPoint1.x,this.bodyPoint1.y)),s=s||e.GetWorldCenter();var a=new o;return a.Initialize(e,i,s,void 0),this.jointAttributes&&Object.assign(a,this.jointAttributes),t.b2World.CreateJoint(a)}}}}},function(t,e){t.exports=class{constructor(t={}){Object.assign(this,t),this.collisions=this.collisions||{}}reset(){this.collisions={}}postSolve(t,e,i,s){this.collisions[t]=this.collisions[t]||[],this.collisions[t].push({id:e,impulse:i.normalImpulses[0]}),this.collisions[e]=this.collisions[e]||[],this.collisions[e].push({id:t,impulse:i.normalImpulses[0]})}}},function(t,e,i){const s=i(12),n=i(28);t.exports=class extends s{constructor(t={}){super(t),console.log("boxgame options",t),this.box=null,this.boxUpdating=!0,this.entities=null,this.joints=null,Object.assign(this,t),this.box||(this.box=new n(t.boxOptions)),this.entities||(this.entities={}),this.joints||(this.joints={})}updateBox(t){this.boxUpdating&&(this.box.update(t),this.box.updateExternalState(this.entities))}addBody(t){this.entities[t.id]=t,this.box.addBody(t)}addBodies(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.addBody(t)})}removeBody(t){this.box.removeBody(t.id),delete this.entities[t.id]}removeBodies(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.removeBody(t)})}addJoint(t){this.joints[t.id]=t,this.box.addJoint(t)}addJoints(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.addJoint(t)})}removeJoint(t){this.box.removeJoint(t.id),delete this.joints[t.id]}removeJoints(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.removeJoint(t)})}}},function(t,e,i){"use strict";i.r(e);var s=i(11),n=i(29),o=i.n(n);var a=function(t,e){const{fullW:i,fullH:s,hexSide:n,sideW:o,sint1:a,ang1:r,sint2:h,ang2:l}=this.measurements;t.clearRect(0,0,this.width,this.height),t.strokeStyle=this.players[0].color,t.beginPath(),t.moveTo(o,1),t.lineTo(i-o,1),t.stroke(),t.strokeStyle=this.players[3].color,t.beginPath(),t.moveTo(o,s),t.lineTo(i-o,s),t.stroke(),t.strokeStyle=this.players[1].color,t.beginPath(),t.moveTo(i-o,0),t.lineTo(i,s/2),t.stroke(),t.strokeStyle=this.players[2].color,t.beginPath(),t.moveTo(i,s/2),t.lineTo(i-o,s),t.stroke(),t.strokeStyle=this.players[4].color,t.beginPath(),t.moveTo(o,s),t.lineTo(0,s/2),t.stroke(),t.strokeStyle=this.players[5].color,t.beginPath(),t.moveTo(0,s/2),t.lineTo(o,0),t.stroke(),this.players.forEach(i=>{i.face.dead||i.paddles[0].draw(t,e),i.face.draw(t,e)}),Object.keys(this.entities).forEach(e=>{this.entities[e].hidden||this.entities[e].draw(t)})},r=i(3),h=i.n(r),l=i(0),c=i.n(l),u=i(1),d=i.n(u);console.log("wtf too many bricks?");let p=[[6,1],[10,1],[14,1],[34,1],[38,1],[42,1],[8,3],[12,3],[16,3],[32,3],[36,3],[40,3],[6,5],[10,5],[14,5],[34,5],[38,5],[42,5],[8,7],[12,7],[16,7],[32,7],[36,7],[40,7],[10,9],[14,9],[18,9],[30,9],[34,9],[38,9],[12,11],[16,11],[20,11],[24,11],[28,11],[32,11],[36,11],[14,13],[18,13],[22,13],[26,13],[30,13],[34,13],[12,15],[16,15],[20,15],[24,15],[28,15],[32,15],[36,15],[18,17],[22,17],[26,17],[30,17],[24,19]];var y=p=p.map(t=>((t=[12.5*t[0],12.5*t[1]])[0]=t[0]-300,t)),f=i(30),m=i.n(f),g=i(10),v=i.n(g);class x extends v.a{draw(t,e){const i=t.lineWidth;t.save(),t.lineWidth=1,t.lineJoin="round",t.fillStyle=this.fillStyle;const s=t.createLinearGradient(0,this.prey,0,this.prey+2*this.halfHeight);s.addColorStop(0,t.fillStyle),s.addColorStop(1,"#444"),t.translate(this.prex,this.prey),t.rotate(this.preAngle),t.translate(-this.prex,-this.prey),t.fillStyle=s,t.strokeStyle=this.strokeStyle,t.fillRect(this.prex-this.halfWidth,this.prey-this.halfHeight,2*this.halfWidth,2*this.halfHeight),t.strokeRect(this.prex-this.halfWidth,this.prey-this.halfHeight,2*this.halfWidth,2*this.halfHeight),t.restore(),t.lineWidth=i}}class b extends h.a{draw(t,e){e=e||this.scale||1;const i=this.x*e,s=this.y*e,n=t.lineWidth;t.lineWidth=2,t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.beginPath(),t.arc(i,s,this.radius*e,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke();const o={x:i-17,y:s-15},a={x:i+17,y:s-15};if(this.dead)t.lineWidth=2,t.fillStyle="rgba(0,0,0,0.75)",t.strokeStyle=this.fillStyle,t.beginPath(),t.arc(i,s,this.radius*e,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke(),t.beginPath(),t.moveTo(o.x-10,o.y-10),t.lineTo(o.x+10,o.y+10),t.stroke(),t.beginPath(),t.moveTo(o.x+10,o.y-10),t.lineTo(o.x-10,o.y+10),t.stroke(),t.beginPath(),t.moveTo(a.x-10,a.y-10),t.lineTo(a.x+10,a.y+10),t.stroke(),t.beginPath(),t.moveTo(a.x+10,a.y-10),t.lineTo(a.x-10,a.y+10),t.stroke();else{t.lineWidth=1,t.fillStyle="#FFF",t.beginPath(),t.arc(i-17,s-15,10,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke(),t.beginPath(),t.arc(i+17,s-15,10,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke();const n=c()(o,{x:this.ball.x*e,y:this.ball.y*e}),r=c()(a,{x:this.ball.x*e,y:this.ball.y*e}),h=d()(o,{x:i-17,y:s-20},n),l=d()(a,{x:i+17,y:s-20},r);t.fillStyle="black",t.beginPath(),t.arc(h.x,h.y,6,0,2*Math.PI,!0),t.closePath(),t.fill(),t.beginPath(),t.arc(l.x,l.y,6,0,2*Math.PI,!0),t.closePath(),t.fill()}t.lineWidth=n}}var T=i(2),A=i.n(T);i(4);const S=10;function w(t,e,i,s){let n=t.inputManager.keyActions[e].isPressed();if(n||t.inputManager.keyActions[i].isPressed())return t.players[s].direction=n?-1:1;t.players[s].direction=0}var P=function(t){w(this,A.a.LEFT,A.a.RIGHT,2),w(this,"Q","W",5),w(this,"C","V",4),w(this,"N","M",3),w(this,"T","Y",0),w(this,"O","P",1),t.keyActions[A.a.UP].isPressed()&&this.box.applyImpulseDegrees("ball",0,S),t.keyActions[A.a.DOWN].isPressed()&&this.box.applyImpulseDegrees("ball",180,S),t.keyActions.A.isPressed()&&this.box.applyTorque("ball",100*-S),t.keyActions.D.isPressed()&&this.box.applyTorque("ball",100*S)};const{BoxGame:E,entities:M,joints:I}=s.box2d,{radiansFromCenter:D,scalePoints:C,rotateRadiansAroundCenter:W,distance:_,radiansToDegrees:O}=s.utils,L=2*Math.PI/360*1.75;const R=568.10113077769,k=Math.asin(.6889532509648748),F=Math.asin(.7248057794927981);console.log("angle in radians",k,F);const B=new E({canvasId:"canvas",gameAreaId:"gameArea",canvasPercentage:1,boxOptions:{resolveCollisions:!0,gravityY:0},draw:a,initInput:function(t){t.addArrowKeyActions(),t.addKeyAction(["A","D","Q","W","C","V","N","M","T","Y","O","P"])},handleInput:P,update:function(t){if(this.updateBox(t),this.ball&&this.ball.collisions&&this.ball.collisions.length){this.ball.collisions.forEach(t=>{const e=this.entities[t.id];if(e){if(e.brick)this.removeBody(t);else if(e.king)console.log("king kill",e),e.dead=!0,Object.keys(this.entities).forEach(t=>{const i=this.entities[t];i.brick&&i.playerId===e.playerId&&this.removeBody(i)}),this.players[e.playerId].paddles.forEach(t=>{this.removeBody(t)}),this.removeBody(e);else if(e.paddle){const t=this.players[e.playerId];_(t.anchor,this.ball);console.log("%cpaddlehit "+e.playerId,"font-size: 1.5em; background: #222; color: "+U[e.playerId].color)}e.wall?this.ball.wallHits++:this.ball.wallHits=0}});const t=D({x:0,y:0},this.ball.linearVelocity);this.removeBody(this.ball),this.addBody(this.ball);const e=Math.round(Math.random())?-Math.random()*L:Math.random()*L;Object.keys(B.entities).reduce((t,e)=>B.entities[e].brick?t+1:t,0);this.box.applyForce(this.ball.id,t+e+e*this.ball.wallHits,400)}B.players.forEach((e,i)=>{if(!e.face.dead){e.direction>0&&e.position<Math.PI?(e.position+=.0027*t,e.position=Math.min(e.position,Math.PI)):e.direction<0&&e.position>0&&(e.position-=.0027*t,e.position=Math.max(e.position,0));const s=W(e.pt,{x:e.pt.x,y:e.pt.y+295},e.angle+e.position-Math.PI/2),n=e.paddleOps;n.x=s.x,n.y=s.y,n.points=[{x:n.halfWidth,y:-n.halfHeight},{x:.7*n.halfWidth,y:n.halfHeight/2},{x:.4*n.halfWidth,y:n.halfHeight},{x:.4*-n.halfWidth,y:n.halfHeight},{x:.7*-n.halfWidth,y:n.halfHeight/2},{x:-n.halfWidth,y:-n.halfHeight}],n.points=e.paddleOps.points.map(t=>W({x:0,y:0},t,e.angle+e.position-Math.PI/2)),e.update++,n.id=i+"paddle"+e.update;const o=new M.Polygon(n);if(B.addBody(o),e.paddles.push(o),e.paddles.length>3){const t=e.paddles.shift();B.removeBody(t)}}})}}),N={x:960,y:540,ptRadius:10,radius:10,points:[0,1,2,3,4,5,6,7,8],id:"ball",wallHits:0};N.points=N.points.map((t,e)=>{return W({x:0,y:0},{x:0,y:N.ptRadius},2*Math.PI/N.points.length*e)}),B.ball=new class extends h.a{draw(t,e){e=e||this.scale||1;const i=this.x*e,s=this.y*e,n=this.ptRadius;if(t.fillStyle="rgba(255,127,0,0.66)",t.beginPath(),t.arc(i,s,n,0,2*Math.PI,!0),t.closePath(),t.fill(),this.linearVelocity){const e=.06,o=.85,a=c()({x:0,y:0},this.linearVelocity),r={x:i,y:s};[1,2,3,4,5].map((t,h)=>d()(r,{x:i,y:s-n*(o*t)},a+Math.PI+(t%2?e:-e))).forEach((e,i)=>{t.fillStyle="rgba(255,255,0,0.5)",t.beginPath(),t.arc(e.x,e.y,n-n*(.15*(i+1)),0,2*Math.PI,!0),t.closePath(),t.fill()})}}}(N),B.addBody(B.ball),o.a.entities.forEach(function(t){const e=M[t.type];e&&(t.drawCenter=!1,B.addBody(new e(t)))});const j=.6043122389547919,H=[0,k,F+Math.PI/2,Math.PI,Math.PI+k,1.5*Math.PI+F];const U=[[960,0],[1920-R*j,540*(1-j)],[1920-R*j,540+540*j],[960,1080],[R*j,540+540*j],[R*j,540*(1-j)]].map((t,e)=>({pt:{x:t[0],y:t[1]},color:m.a[e],angle:H[e],direction:0,position:Math.PI/2,update:0}));console.log("players",U);const z=U[0].pt;U.forEach((t,e)=>{console.log("creating player",t);const i=t.pt,s=W(i,{x:i.x,y:i.y+55},t.angle),n=new b({x:s.x,y:s.y,radius:50,staticBody:!0,restitution:2,fillStyle:t.color,king:!0,ball:B.ball,playerId:e});B.addBody(n),t.face=n;const o=W(i,{x:i.x,y:i.y+295},t.angle);t.paddleOps={x:o.x,y:o.y,halfWidth:55,halfHeight:12,restitution:1,fillStyle:t.color,strokeStyle:t.color,paddle:!0,drawCenter:!1,playerId:e,density:100,staticBody:!0,id:e+"paddle0",hidden:!0},t.paddleOps.points=[{x:t.paddleOps.halfWidth,y:-t.paddleOps.halfHeight},{x:t.paddleOps.halfWidth,y:t.paddleOps.halfHeight},{x:-t.paddleOps.halfWidth,y:t.paddleOps.halfHeight},{x:-t.paddleOps.halfWidth,y:-t.paddleOps.halfHeight}],t.paddleOps.points=t.paddleOps.points.map(e=>W({x:0,y:0},e,t.angle));const a=new M.Polygon(t.paddleOps);B.addBody(a),t.paddles=[a],t.anchor=new M.Circle({x:t.pt.x,y:t.pt.y,radius:.1,staticBody:!0,playerId:e,hidden:!0}),B.addBody(t.anchor),a.distance=_(t.anchor,a);const r=new I.Distance({bodyId1:t.anchor.id,bodyId2:a.id,id:Math.random()+"j"});B.addJoint(r),y.forEach((s,n)=>{const o={x:s[0]+960,y:s[1],halfWidth:25,halfHeight:12.5,staticBody:!0,restitution:1.5,playerId:e,fillStyle:t.color,brick:!0,preAngle:t.angle},a=W(z,o,t.angle);o.x=a.x,o.y=a.y,o.x+=i.x-U[0].pt.x,o.y+=i.y-U[0].pt.y,o.points=[{x:o.halfWidth,y:-o.halfHeight},{x:o.halfWidth,y:o.halfHeight},{x:-o.halfWidth,y:o.halfHeight},{x:-o.halfWidth,y:-o.halfHeight}],o.points=o.points.map(e=>W({x:0,y:0},e,t.angle)),o.prex=o.x,o.prey=o.y;const r=new x(o);B.addBody(r)})}),B.measurements={fullW:1920,fullH:1080,hexSide:783.79773844413,sideW:R,sint1:.6889532509648748,ang1:k,sint2:.7248057794927981,ang2:F},B.players=U,console.log(B),window.game=B,B.run(),B.box.applyForceDegrees("ball",360*Math.random(),400)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,