!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=48)}([function(t,e){t.exports=function(t={x:0,y:0},e){return t.x===e.x&&t.y===e.y?0:t.x===e.x?t.y>e.y?0:Math.PI:t.y===e.y?t.x>e.x?1.5*Math.PI:Math.PI/2:t.x<e.x&&t.y>e.y?Math.atan((e.x-t.x)/(t.y-e.y)):t.x<e.x&&t.y<e.y?Math.PI/2+Math.atan((e.y-t.y)/(e.x-t.x)):t.x>e.x&&t.y<e.y?Math.PI+Math.atan((t.x-e.x)/(e.y-t.y)):1.5*Math.PI+Math.atan((t.y-e.y)/(t.x-e.x))}},function(t,e){t.exports=function(t={x:0,y:0},e,i){const s=Math.sin(i),n=Math.cos(i),o={};o.x=e.x-t.x,o.y=e.y-t.y;const a=o.x*n-o.y*s,r=o.x*s+o.y*n;return o.x=a+t.x,o.y=r+t.y,o}},function(t,e){t.exports={CANCEL:3,HELP:6,BACK_SPACE:8,TAB:9,CLEAR:12,RETURN:13,ENTER:14,SHIFT:16,CONTROL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESCAPE:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINTSCREEN:44,INSERT:45,DELETE:46,NUM0:48,NUM1:49,NUM2:50,NUM3:51,NUM4:52,NUM5:53,NUM6:54,NUM7:55,NUM8:56,NUM9:57,SEMICOLON:59,EQUALS:61,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,CONTEXT_MENU:93,NUMPAD0:96,NUMPAD1:97,NUMPAD2:98,NUMPAD3:99,NUMPAD4:100,NUMPAD5:101,NUMPAD6:102,NUMPAD7:103,NUMPAD8:104,NUMPAD9:105,MULTIPLY:106,ADD:107,SEPARATOR:108,SUBTRACT:109,DECIMAL:110,DIVIDE:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,F13:124,F14:125,F15:126,F16:127,F17:128,F18:129,F19:130,F20:131,F21:132,F22:133,F23:134,F24:135,NUM_LOCK:144,SCROLL_LOCK:145,UP_DPAD:175,DOWN_DPAD:176,LEFT_DPAD:177,RIGHT_DPAD:178,COMMA:188,PERIOD:190,SLASH:191,BACK_QUOTE:192,OPEN_BRACKET:219,BACK_SLASH:220,CLOSE_BRACKET:221,QUOTE:222,META:224}},function(t,e,i){const s=i(5),n=i(26);t.exports=class extends s{constructor(t={}){super(t),this.radius=1,Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.beginPath(),t.arc(this.x*e,this.y*e,this.radius*e,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke(),this.staticBody||(t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.beginPath(),t.moveTo(this.x*e,this.y*e),t.lineTo(this.x*e,this.y*e-this.radius*e),t.closePath(),t.stroke(),t.restore()),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.radius=this.radius*t,super.scaleShape(t)}pointInShape(t){return n(t,this)<=this.radius}}},function(t,e){t.exports=function t(e,i){return e=Array.isArray(e)?e.map(function(e){return t(e,i)}):"object"==typeof i?{x:e.x*i.x,y:e.y*i.y}:{x:e.x*i,y:e.y*i}}},function(t,e){t.exports=class{constructor(t={}){this.id=t.id||Math.random()+"_"+Date.now(),this.x=0,this.y=0,this.scale=null,this.angle=0,this.center=null,this.drawCenter=!0,this.restitution=.3,this.density=1,this.friction=.9,this.linearDamping=0,this.linearVelocity=null,this.angularVelocity=0,this.angularDamping=0,this.staticBody=!1,this.fillStyle="rgba(128,128,128,0.5)",this.strokeStyle="#000",this.lineWidth=1,this.maskBits=null,this.categoryBits=null,this.groupIndex=null,Object.assign(this,t)}update(t){Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.fillStyle=this.strokeStyle,t.beginPath(),t.arc(this.x*e,this.y*e,4,0,2*Math.PI,!0),t.closePath(),t.fill(),this.center&&this.drawCenter&&(t.fillStyle=this.centerStyle||"yellow",t.beginPath(),t.arc(this.center.x*e,this.center.y*e,2,0,2*Math.PI,!0),t.closePath(),t.fill()),t.lineWidth=i}scaleShape(t){this.x=this.x*t,this.y=this.y*t,this.alreadyScaled=!0}}},function(t,e){const i={NORMAL:0,DETECT_INITAL_PRESS_ONLY:1,STATE_RELEASED:0,STATE_PRESSED:1,STATE_WAITING_FOR_RELEASE:2,STATE_MOVED:3};t.exports=class{constructor(t={}){this.name=null,this.behavior=0,this.amount=0,this.state=0,this.statics=i,Object.assign(this,t),this.reset()}reset(){this.state=i.STATE_RELEASED,this.amount=0}tap(){this.press(),this.release()}press(){this.state=i.STATE_PRESSED,this.behavior===i.DETECT_INITAL_PRESS_ONLY&&this.pressAmt(1)}pressAmt(t){this.state!==i.STATE_WAITING_FOR_RELEASE&&(this.amount+=t,this.state=i.STATE_WAITING_FOR_RELEASE)}release(){this.state=i.STATE_RELEASED}isPressed(){return this.state===i.STATE_PRESSED}getAmount(){var t=this.amount;return 0!==t&&(this.state===i.STATE_RELEASED?this.amount=0:this.behavior===i.DETECT_INITAL_PRESS_ONLY&&(this.state=i.STATE_WAITING_FOR_RELEASE,this.amount=0)),t}}},function(t,e,i){"use strict";t.exports=function(t,e){if(!t||!e)return!1;for(var i=e.points||e,s=!1,n=i.length-1,o=0;o<i.length;n=o++){var a=i[o].x,r=i[o].y,h=i[n].x,l=i[n].y;r>t.y!=l>t.y&&t.x<(h-a)*(t.y-r)/(l-r)+a&&(s=!s)}return s}},function(t,e){t.exports=function t(e,i){return Array.isArray(e)?e=e.map(function(e){return t(e,i)}):(e={x:e.x,y:e.y},null!=i.x&&(e.x+=i.x),null!=i.y&&(e.y+=i.y)),e}},function(t,e){t.exports=class{constructor(t={}){this.id=t.id||Math.random()+"_"+Date.now(),this.bodyId1=null,this.bodyId2=null,this.bodyPoint1=null,this.jointAttributes=null,Object.assign(this,t)}scaleJointLocation(t){t&&this.bodyPoint1&&(this.bodyPoint1.x=this.bodyPoint1.x*t,this.bodyPoint1.y=this.bodyPoint1.y*t,this.alreadyScaled=!0)}}},function(t,e,i){const s=i(5),n=i(4),o=i(7),a=i(8);t.exports=class extends s{constructor(t={}){super(t),this.points=[],Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.beginPath(),t.moveTo((this.x+this.points[0].x)*e,(this.y+this.points[0].y)*e);for(var s=1;s<this.points.length;s++)t.lineTo((this.points[s].x+this.x)*e,(this.points[s].y+this.y)*e);t.lineTo((this.x+this.points[0].x)*e,(this.y+this.points[0].y)*e),t.closePath(),t.fill(),t.stroke(),t.restore(),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.points=n(this.points,t),super.scaleShape(t)}pointInShape(t){return o(t,a(this.points,this))}}},function(t,e,i){window.frozenjs={GameCore:i(12),InputManager:i(13),ResourceManager:i(17),MouseAction:i(15),TouchAction:i(14),keys:i(2),Animation:i(22),AnimFrame:i(23),utils:i(34),Sprite:i(27),reiner:{Creature:i(38)},sounds:{WebAudio:i(21)},box2d:{entities:i(39),joints:i(42),Box:i(28),BoxGame:i(47)}},t.exports=window.frozenjs},function(t,e,i){const s=i(13),n=i(17);t.exports=class{constructor(t={}){this.isRunning=!1,this.canvasId=null,this.maxStep=40,this.contextType="2d",this.height=0,this.width=0,this.resourceManager=null,this.inputManager=null,this.loadingForeground="#00F",this.loadingBackground="#FFF",this.gameAreaId=null,this.canvasPercentage=0,Object.assign(this,t),this.resourceManager||(this.resourceManager=new n)}setHeight(t){this.height=t,this.canvas.height=t}setWidth(t){this.width=t,this.canvas.width=t}stop(){this.isRunning=!1}run(){this.isRunning||(this.init(),this.loadResources(this.resourceManager),this.initInput(this.inputManager),this.launchLoop())}loadResources(t){}init(){this.canvas||(this.canvas=document.getElementById(this.canvasId)),this.canvas?(this.context||(this.context=this.canvas.getContext(this.contextType)),this.context?(this.setHeight(this.height||this.canvas.height),this.setWidth(this.width||this.canvas.width),this.inputManager||(this.gameAreaId&&this.canvasPercentage?this.inputManager=new s({canvas:this.canvas,gameArea:document.getElementById(this.gameAreaId),canvasPercentage:this.canvasPercentage}):this.inputManager=new s({canvas:this.canvas})),this.inputManager.resize(),this.isRunning=!0):alert("Sorry, your browser does not support a "+this.contextType+" drawing surface on canvas.  I recommend any browser but Internet Explorer")):alert("Sorry, your browser does not support canvas.  I recommend any browser but Internet Explorer")}initInput(t){}handleInput(t,e){}gameLoop(){this.currTime=(new Date).getTime(),this.elapsedTime=Math.min(this.currTime-this.prevTime,this.maxStep),this.prevTime=this.currTime,this.resourceManager&&!this.resourceManager.resourcesReady()?(this.updateLoadingScreen(this.elapsedTime),this.drawLoadingScreen(this.context)):(this.handleInput(this.inputManager,this.elapsedTime),this.paused||this.update(this.elapsedTime),this.context.save(),this.draw(this.context),this.context.restore())}launchLoop(){this.elapsedTime=0;var t=Date.now();this.currTime=t,this.prevTime=t,this.loopRunner=this.loopRunner.bind(this),window.requestAnimationFrame(this.loopRunner)}loopRunner(){this.gameLoop(),window.requestAnimationFrame(this.loopRunner)}update(t){}updateLoadingScreen(t){}draw(t){"2d"===this.contextType&&(t.font="14px sans-serif",t.fillText("This game does not have its own draw function!",10,50))}drawLoadingScreen(t){if(this.resourceManager&&"2d"===this.contextType){t.fillStyle=this.loadingBackground,t.fillRect(0,0,this.width,this.height),t.fillStyle=this.loadingForeground,t.strokeStyle=this.loadingForeground;var e=Math.floor(this.height/12);t.font="bold "+e+"px sans-serif",t.fillText("Loading... "+this.resourceManager.getPercentComplete()+"%",.1*this.width,.55*this.height),t.strokeRect(.1*this.width,.7*this.height,.8*this.width,.1*this.height),t.fillRect(.1*this.width,.7*this.height,.8*this.width*this.resourceManager.getPercentComplete()/100,.1*this.height),t.lineWidth=4}}}},function(t,e,i){const s=i(31),n=i(6),o=i(14),a=i(15),r=i(16),h=i(2);function l(t,e,i){return t.addEventListener(e,i),function(){t.removeEventListener(e,i)}}function c(t){return parseFloat(t)||0}function u(t){var e=function(t){return window.getComputedStyle(t,null)||{}}(t),i=c(e.marginLeft),s=c(e.marginTop);return{w:i+c(e.marginRight),h:s+c(e.marginBottom)}}t.exports=class{constructor(t={}){function e(t){t.remove()}if(this.keyActions=null,this.mouseAction=null,this.touchAction=null,this.canvas=null,this.handleMouse=!0,this.handleTouch=!0,this.handleKeys=!0,this.gameArea=null,this.canvasPercentage=null,this.emulateMouse=!0,this.hammer=null,Object.assign(this,t),this.hammer||(this.hammer=new s(document.body,{prevent_default:!0,drag_max_touches:0,hold:!1})),this.keyActions||(this.keyActions={}),this.handleKeys&&(this.pushCleanup(l(document,"keydown",this.keydown.bind(this)),e),this.pushCleanup(l(document,"keyup",this.keyup.bind(this)),e)),"ontouchstart"in document?(this.pushCleanup(l(document,"touchstart",this.touchstart.bind(this)),e),this.pushCleanup(l(document,"touchmove",this.touchmove.bind(this)),e),this.pushCleanup(l(document,"touchend",this.touchend.bind(this)),e)):(this.pushCleanup(l(document,"mousedown",this.mousedown.bind(this)),e),this.pushCleanup(l(document,"mousemove",this.mousemove.bind(this)),e),this.pushCleanup(l(document,"mouseup",this.mouseup.bind(this)),e)),this.mouseAction||(this.mouseAction=new a),this.touchAction||(this.touchAction=new o),this.emulateMouse,this.gameArea&&this.canvasPercentage){var i=this.resize.bind(this);this.pushCleanup(l(window,"resize",i),e),this.pushCleanup(l(window,"orientationchange",i),e)}this.normalizePoint=this.normalizePoint.bind(this),this.insideCanvas=this.insideCanvas.bind(this)}on(t,e){var i=this.hammer,s=this.removeCleanup;i.on(t,e);var n=this.pushCleanup([t,e],function(t){i.off.apply(i,t)});return{remove:function(){s(n),n()}}}insideCanvas(t){return r(t,this.canvas)}mapToKey(t,e){this.keyActions[e]=t}addKeyAction(t,e){var i=new n;return e&&(i.behavior=i.detectInitialPressOnly),this.mapToKey(i,t),i}addArrowKeyActions(){this.addKeyAction(h.UP),this.addKeyAction(h.DOWN),this.addKeyAction(h.LEFT),this.addKeyAction(h.RIGHT)}mouseUp(t){this.mouseup(t)}mouseup(t){this.mouseAction.release(this.normalizePoint(t))}mouseDown(t){this.mousedown(t)}mousedown(t){this.mouseAction.release(null);var e=this.normalizePoint(t);this.mouseAction.insideCanvas=this.insideCanvas(e),this.mouseAction.press(e)}mouseMove(t){this.mousemove(t)}mousemove(t){this.mouseAction.position=this.normalizePoint(t)}touchStart(t){this.touchstart(t)}touchstart(t){this.touchAction.release(null),console.log(t.touches,t);const e=[];for(let i=0;i<t.touches.length;i++)e.push(this.normalizePoint(t.touches[i]));this.touchAction.insideCanvas=e.some(this.insideCanvas),this.touchAction.press(e),this.emulateMouse&&this.mousedown(t.touches[0])}touchEnd(t){this.touchend(t)}touchend(t){const e=[];for(let i=0;i<t.touches.length;i++)e.push(this.normalizePoint(t.touches[i]));this.touchAction.release(e),this.emulateMouse&&this.mouseUp(t.touches[0])}touchMove(t){this.touchmove(t)}touchmove(t){const e=[];for(let i=0;i<t.touches.length;i++)e.push(this.normalizePoint(t.touches[i]));this.touchAction.positions=e,this.touchAction.startPositions&&t.preventDefault(),this.emulateMouse&&this.mousemove(t.touches[0])}getKeyAction(t){return this.keyActions?this.keyActions[t.keyCode]||this.keyActions[String.fromCharCode(t.keyCode)]:null}keyPressed(t){this.keydown(t)}keyDown(t){this.keydown(t)}keydown(t){var e=this.getKeyAction(t);e&&!e.isPressed()&&e.press()}keyReleased(t){this.keyup(t)}keyup(t){var e=this.getKeyAction(t);e&&e.release()}getMouseLoc(t){return this.normalizePoint(t)}normalizePoint(t){if(t){var e=(i=this.canvas,{x:(s=i.getBoundingClientRect()).left,y:s.top});return this.zoomRatio?{x:Math.round((t.clientX-e.x)/this.zoomRatio),y:Math.round((t.clientY-e.y)/this.zoomRatio)}:{x:Math.round(t.clientX-e.x),y:Math.round(t.clientY-e.y)}}var i,s}resize(){if(this.gameArea&&this.canvasPercentage&&this.canvas){var t=this.canvas.width,e=this.canvas.height,i=u(document.body),s=window.innerWidth-i.w,n=window.innerHeight-i.h,o=t/e,a="",r="";s/n>o?(a=(s=n*o)+"px",r=n+"px"):(a=s+"px",r=Math.round(s/o)+"px"),this.zoomRatio=s/t*this.canvasPercentage,this.gameArea.style.width=a,this.gameArea.style.height=r;var h=Math.floor(100*this.canvasPercentage)+"%";this.canvas.style.width=h,this.canvas.style.height=h,this.canvas.style.display="block",this.canvas.style.marginLeft="auto",this.canvas.style.marginRight="auto"}}pushCleanup(t,e){}}},function(t,e,i){const s=i(6);t.exports=class extends s{constructor(t={}){super(t),this.startPositions=null,this.endPositions=null,this.positions=null,this.insideCanvas=null,Object.assign(this,t)}press(t){this.startPositions=t,this.positions=t,super.press(t)}release(t){this.endPositions=t,super.release(t)}}},function(t,e,i){const s=i(6);t.exports=class extends s{constructor(t={}){super(t),this.startPosition=null,this.endPosition=null,this.position=null,this.insideCanvas=null,Object.assign(this,t)}press(t){this.startPosition=t,this.position=t,super.press(t)}release(t){this.endPosition=t||this.position,super.release(t)}}},function(t,e){t.exports=function(t,e){return!(t.x<0||t.x>e.width||t.y<0||t.y>e.height)}},function(t,e,i){"use strict";const s=i(18),n=i(20),o=i(21);var a={};function r(t,e){var i=e;return t&&(i=[t,e].join("/")),i.replace(/\/{2,}/g,"/")}function h(t){var e=document.createElement("canvas");e.height=t.height,e.width=t.width;var i=e.getContext("2d");return i.translate(e.width,0),i.scale(-1,1),i.drawImage(t,0,0),e.toDataURL()}function l(t){var e=document.createElement("canvas");e.height=t.height,e.width=t.width;var i=e.getContext("2d");return i.translate(0,e.height),i.scale(1,-1),i.drawImage(t,0,0),e.toDataURL()}class c{constructor(t){var e=this;e.name=t,e.complete=!1,e.img=new Image,e.img.addEventListener("load",function(){e.complete=!0},!1)}load(){this.img.src=this.name}}t.exports=class{constructor(t={}){this.allLoaded=!1,this.imageDir=null,this.soundDir=null,this.resourceList=a,Object.assign(this,t),this.Sound||(s("WebAudio")?this.Sound=o:this.Sound=n)}loadImage(t){let e=!1;Array.isArray(t)||(e=!0,t=[t]);const i=t.map(t=>{const e=r(this.imageDir,t);if(this.resourceList[e])return this.resourceList[e].img;this.allLoaded=!1;const i=new c(e);return i.load(),this.resourceList[e]=i,i.img});return e?i[0]:i}loadSound(t){let e=!1;Array.isArray(t)||(e=!0,t=[t]);const i=t.map(t=>{const e=r(this.soundDir,t);if(this.resourceList[e])return this.resourceList[e];this.allLoaded=!1;const i=new this.Sound(e);return this.resourceList[e]=i,i});return e?i[0]:i}flipImage(t,e,i){this.allLoaded=!1;const s=new c(t);this.resourceList[t]=s;const n=new Image;return n.addEventListener("load",function t(){s.img.src=i(n),n.removeEventListener("load",t)}),n.src=e.src,s.img}flipImageX(t,e){return this.flipImage(t,e,h)}flipImageY(t,e){return this.flipImage(t,e,l)}resourcesReady(){if(this.allLoaded)return!0;for(var t in this.resourceList)if(!this.resourceList[t].complete)return!1;return this.allLoaded=!0,!0}getPercentComplete(){var t=0,e=0;for(var i in this.resourceList)e++,this.resourceList[i].complete&&(t+=1);return 0===e?0:Math.round(t/e*100)}}},function(t,e,i){"use strict";(function(e){i(32);t.exports=function t(i){return"shittySound"==i?!(!t("android")&&!t("ios")||!t("webkit")):"android"==i?parseFloat(navigator.userAgent.split("Android ")[1])||void 0:"ios"!=i&&("webkit"==i?parseFloat(navigator.userAgent.split("WebKit/")[1])||void 0:"WebAudio"==i?!!e.AudioContext:"touch"===i&&"ontouchstart"in document.documentElement)}}).call(this,i(19))},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e){const i={"audio/mpeg":".mp3","audio/webm":".webm","audio/ogg":".ogg","audio/wav":".wav","audio/aac":".aac","audio/x-m4a":".m4a"};t.exports=class{constructor(t={}){this.name=null,this.complete=!1,this.probably=[],this.maybe=[],Object.assign(this,t),this.formats=i,"string"==typeof t&&this.load(t)}load(t){this.name=t,this.complete=!0}loop(t){}play(t,e){}_initAudio(t,e){}_chooseFormat(){if(!this.probably.length&&!this.maybe.length){var t,e,i=new Audio;for(t in this.formats)"probably"!==(e=i.canPlayType(t))?"maybe"!==e||this.maybe.push(this.formats[t]):this.probably.push(this.formats[t])}return this.probably.length?this.probably[0]:this.maybe.length?this.maybe[0]:""}_nextFormat(){return this.probably.length>1?(this.probably.shift(),this.probably[0]):1===this.probably.length&&(this.probably.length=0,this.maybe.length)?this.maybe[0]:this.maybe.length>1?(this.maybe.shift(),this.maybe[0]):(1===this.maybe.length&&(this.maybe.length=0),"")}}},function(t,e,i){const s=i(20),n=i(33),o=i(18);var a=null;if(o("WebAudio")&&(a=new window.AudioContext),o("shittySound")){document.addEventListener("touchstart",function t(){const e=a.createBufferSource();e.buffer=a.createBuffer(1,1,22050),e.connect(a.destination),e.start(0),document.removeEventListener("touchstart",t)})}t.exports=class extends s{constructor(t={}){super(t),this.audioContext=a,this.buffer=null,Object.assign(this,t)}load(t){var e=this;this.name=t;var i=n(t);i===t&&(t=i+this._chooseFormat());var s=new XMLHttpRequest;s.open("GET",t,!0),s.responseType="arraybuffer",s.onload=function(t){e.audioContext.decodeAudioData(t.target.response,function(t){e.buffer=t,e.complete=!0},function(t){e._nextFormat()?e.load(e.name):e.complete=!0})},s.send()}loop(t){this.buffer&&this._initAudio(t,!0).start(0)}play(t,e){this.buffer&&(e=e||0,this._initAudio(t,!1).start(e))}_initAudio(t,e){e="boolean"==typeof e&&e;var i=this.audioContext.createBufferSource();if(i.buffer=this.buffer,i.loop=e,t){var s=this.audioContext.createGain();s.gain.value=t,i.connect(s),s.connect(this.audioContext.destination)}else i.connect(this.audioContext.destination);return i}}},function(t,e,i){const s=i(23);class n{constructor(t={}){this.currFrameIndex=0,this.animTime=0,this.totalDuration=0,this.height=64,this.width=64,this.image=null,this.offsetX=0,this.offsetY=0,this.frames=void 0,Object.assign(this,t),this.start()}createFromSheet(t,e,i,s,o,a){var r=new n({image:i,height:o,width:s}),h=Array.isArray(e),l=1;a||(a=0);for(var c=0;c<t;c++)l=h?e[c]:e,r.addFrame(l,c,a);return r}clone(){return new n({image:this.image,frames:this.frames,totalDuration:this.totalDuration})}addFrame(t,e,i){this.frames||(this.frames=[]),this.totalDuration+=t,this.frames.push(new s({endTime:this.totalDuration,image:this.image,imgSlotX:e,imgSlotY:i}))}start(){this.animTime=0,this.currFrameIndex=0}update(t){if(this.frames.length>1)for(this.animTime+=t,this.animTime>=this.totalDuration&&(this.animTime=this.animTime%this.totalDuration,this.currFrameIndex=0);this.animTime>this.frames[this.currFrameIndex].endTime;)this.currFrameIndex++}getCurrentFrame(){return 0===this.frames.length?null:this.frames[this.currFrameIndex]}draw(t,e,i){var s=this.getCurrentFrame();t.drawImage(this.image,s.imgSlotX*this.width+this.offsetX,s.imgSlotY*this.height+this.offsetY,this.width,this.height,e,i,this.width,this.height)}}t.exports=n},function(t,e){t.exports=class{constructor(t={}){this.endTime=0,this.imgSlotX=0,this.imgSlotY=0,this.image=null,Object.assign(this,t)}}},function(t,e){const i=Math.PI/180;t.exports=function(t){return t*i}},function(t,e){const i=180/Math.PI;t.exports=function(t){return t*i}},function(t,e){t.exports=function(t,e){return Math.sqrt((e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y))}},function(t,e){class i{constructor(t={}){this.x=0,this.y=0,this.dx=0,this.dy=0,this.maxSpeed=0,this.name=null,this.collisionRadius=40,Object.assign(this,t)}update(t){this.x+=this.dx*t,this.y+=this.dy*t,this.anim.update(t)}limitSpeed(t){return this.maxSpeed&&Math.abs(t)>this.maxSpeed?t>0?this.maxSpeed:t<0?this.maxSpeed:0:t}getCurrentFrame(){if(this.anim)return this.anim.getCurrentFrame()}draw(t){this.anim&&this.anim.draw(t,this.x,this.y)}clone(){return new i({anim:this.anim.clone()})}}t.exports=i},function(t,e,i){(function(e){const s=i(46);console.log(Box2D,"Box2D",e,window);const n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.b2BodyDef,a=Box2D.Dynamics.b2Body,r=Box2D.Dynamics.b2FixtureDef,h=(Box2D.Dynamics.b2Fixture,Box2D.Dynamics.b2World),l=Box2D.Collision.Shapes.b2PolygonShape,c=Box2D.Collision.Shapes.b2CircleShape;t.exports=class{constructor(t={}){this.intervalRate=60,this.adaptive=!1,this.bodiesMap=null,this.fixturesMap=null,this.jointsMap=null,this.b2World=null,this.gravityX=0,this.gravityY=9.8,this.allowSleep=!0,this.resolveCollisions=!1,this.contactListener=null,this.collisions=null,this.scale=30,this.bodiesMap={},this.fixturesMap={},this.jointsMap={},Object.assign(this,t),this.b2World=new h(new n(this.gravityX,this.gravityY),this.allowSleep),this.intervalRate&&(this.intervalRate=parseInt(this.intervalRate,10)),this.resolveCollisions&&(this.contactListener=new s),this.contactListener&&this.addContactListener(this.contactListener)}update(t){this.contactListener&&this.contactListener.reset&&this.contactListener.reset();var e=Date.now();if(t)this.b2World.Step(t/1e3,10,10),this.b2World.ClearForces();else{var i=this.adaptive?(e-this.lastTimestamp)/1e3:1/this.intervalRate;this.b2World.Step(i,10,10),this.b2World.ClearForces()}return Date.now()-e}getState(){for(var t={},e=this.b2World.GetBodyList();e;e=e.m_next)e.IsActive()&&void 0!==e.GetUserData()&&null!==e.GetUserData()&&(t[e.GetUserData()]={x:e.GetPosition().x,y:e.GetPosition().y,angle:e.GetAngle(),center:{x:e.GetWorldCenter().x,y:e.GetWorldCenter().y},linearVelocity:e.m_linearVelocity,angularVelocity:e.m_angularVelocity},this.contactListener&&this.contactListener.collisions&&(t[e.GetUserData()].collisions=this.contactListener.collisions[e.GetUserData()]||null));return t}updateExternalState(t){var e=this.getState();for(var i in e){var s=t[i];s&&!s.staticBody&&s.update(e[i])}}setBodies(t){for(var e in t){var i=t[e];this.addBody(i)}this.ready=!0}addBody(t){t.alreadyScaled||(t.scaleShape(1/this.scale),t.scale=this.scale);var e,i,s,h,u,d=new o,p=new r;p.restitution=t.restitution,p.density=t.density,p.friction=t.friction,null!=t.maskBits&&(p.filter.maskBits=t.maskBits),null!=t.categoryBits&&(p.filter.categoryBits=t.categoryBits),null!=t.groupIndex&&(p.filter.groupIndex=t.groupIndex),t.staticBody?d.type=a.b2_staticBody:d.type=a.b2_dynamicBody,d.position.x=t.x,d.position.y=t.y,d.userData=t.id,d.angle=t.angle,d.linearDamping=t.linearDamping,d.angularDamping=t.angularDamping;var y=this.b2World.CreateBody(d);if(t.radius)p.shape=new c(t.radius),y.CreateFixture(p);else if(t.points){for(s=[],e=0;e<t.points.length;e++)(h=new n).Set(t.points[e].x,t.points[e].y),s[e]=h;p.shape=new l,p.shape.SetAsArray(s,s.length),y.CreateFixture(p)}else if(t.polys)for(i=0;i<t.polys.length;i++){for(s=t.polys[i],u=[],e=0;e<s.length;e++)(h=new n).Set(s[e].x,s[e].y),u[e]=h;p.shape=new l,p.shape.SetAsArray(u,u.length),y.CreateFixture(p)}else p.shape=new l,p.shape.SetAsBox(t.halfWidth,t.halfHeight),y.CreateFixture(p);this.bodiesMap[t.id]=y}setPosition(t,e,i){this.bodiesMap[t].SetPosition(new n(e,i))}setAngle(t,e){var i=this.bodiesMap[t];console.log("set angle",i.setAngle,i),i.setAngle(e)}setLinearVelocity(t,e,i){this.bodiesMap[t].SetLinearVelocity(new n(e,i))}setAngularVelocity(t,e){this.bodiesMap[t].SetAngularVelocity(e)}applyImpulseDegrees(t,e,i){var s=this.bodiesMap[t];s.ApplyImpulse(new n(Math.sin(e*(Math.PI/180))*i,Math.cos(e*(Math.PI/180))*i*-1),s.GetWorldCenter())}applyForceDegrees(t,e,i){var s=this.bodiesMap[t];s.ApplyForce(new n(Math.sin(e*(Math.PI/180))*i,Math.cos(e*(Math.PI/180))*i*-1),s.GetWorldCenter())}applyImpulse(t,e,i){var s=this.bodiesMap[t];s.ApplyImpulse(new n(Math.sin(e)*i,Math.cos(e)*i*-1),s.GetWorldCenter())}applyForce(t,e,i){var s=this.bodiesMap[t];s.ApplyForce(new n(Math.sin(e)*i,Math.cos(e)*i*-1),s.GetWorldCenter())}setAngle(t,e){this.bodiesMap[t].SetAngle(e)}setAnglularVelocity(t,e){this.bodiesMap[t].SetAngularVelocity(e)}applyTorque(t,e){this.bodiesMap[t].ApplyTorque(e)}setGravity(t){this.b2World.SetGravity(new n(t.x,t.y))}removeBody(t){this.bodiesMap[t]&&(this.fixturesMap[t]&&this.bodiesMap[t].DestroyFixture(this.fixturesMap[t]),this.b2World.DestroyBody(this.bodiesMap[t]),delete this.bodiesMap[t])}wakeUpBody(t){this.bodiesMap[t]&&this.bodiesMap[t].SetAwake(!0)}addContactListener(t){var e=new Box2D.Dynamics.b2ContactListener;t.beginContact&&(e.BeginContact=function(e){t.beginContact(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,e)}),t.endContact&&(e.EndContact=function(e){t.endContact(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,e)}),t.preSolve&&(e.PreSolve=function(e,i){t.preSolve(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,i,e)}),t.postSolve&&(e.PostSolve=function(e,i){t.postSolve(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,i,e)}),this.b2World.SetContactListener(e)}removeJoint(t){this.jointsMap[t]&&(this.b2World.DestroyJoint(this.jointsMap[t]),delete this.jointsMap[t])}addJoint(t){if(t&&t.id&&!this.jointsMap[t.id]){!t.alreadyScaled&&t.scaleJointLocation&&(t.scaleJointLocation(1/this.scale),t.scale=this.scale);var e=t.createB2Joint(this);e&&(this.jointsMap[t.id]=e)}}}}).call(this,i(19))},function(t,e){t.exports={entities:[{points:[{x:-100,y:-100},{x:568.10113,y:-100},{x:568.10113,y:0},{x:0,y:540},{x:-100,y:540}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",id:"uleftw",hidden:!0,wall:!0,restitution:1},{points:[{x:-100,y:540},{x:0,y:540},{x:568.10113,y:1080},{x:568.10113,y:1180},{x:-100,y:1180}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",restitution:1,hidden:!0,wall:!0,id:"lleftw"},{points:[{x:1351.89887,y:-100},{x:2020,y:-100},{x:2020,y:540},{x:1920,y:540},{x:1351.89887,y:0}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",restitution:1,id:"urighttw",hidden:!0},{points:[{x:1351.89887,y:1080},{x:1920,y:540},{x:2020,y:540},{x:2020,y:1180},{x:1351.89887,y:1180}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",restitution:1,id:"lrighttw",hidden:!0,wall:!0},{x:960,y:1180,halfWidth:1e3,halfHeight:100,staticBody:!0,zone:!1,type:"Rectangle",id:"bottomw",restitution:1,hidden:!0,wall:!0},{x:960,y:-100,halfWidth:1e3,halfHeight:100,staticBody:!0,zone:!1,type:"Rectangle",id:"topw",restitution:1,hidden:!0,wall:!0}],joints:[],canvas:{height:600,width:800},backImg:null}},function(t,e){t.exports=["#00DD00","#DD0000","#EEEEEE","#A0522D","#0000DD","#FF8C00"]},function(t,e,i){var s;
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function(n,o,a,r){"use strict";var h,l=["","webkit","Moz","MS","ms","o"],c=o.createElement("div"),u="function",d=Math.round,p=Math.abs,y=Date.now;function f(t,e,i){return setTimeout(A(t,i),e)}function m(t,e,i){return!!Array.isArray(t)&&(g(t,i[e],i),!0)}function g(t,e,i){var s;if(t)if(t.forEach)t.forEach(e,i);else if(t.length!==r)for(s=0;s<t.length;)e.call(i,t[s],s,t),s++;else for(s in t)t.hasOwnProperty(s)&&e.call(i,t[s],s,t)}function v(t,e,i){var s="DEPRECATED METHOD: "+e+"\n"+i+" AT \n";return function(){var e=new Error("get-stack-trace"),i=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=n.console&&(n.console.warn||n.console.log);return o&&o.call(n.console,s,i),t.apply(this,arguments)}}h="function"!=typeof Object.assign?function(t){if(t===r||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var s=arguments[i];if(s!==r&&null!==s)for(var n in s)s.hasOwnProperty(n)&&(e[n]=s[n])}return e}:Object.assign;var x=v(function(t,e,i){for(var s=Object.keys(e),n=0;n<s.length;)(!i||i&&t[s[n]]===r)&&(t[s[n]]=e[s[n]]),n++;return t},"extend","Use `assign`."),b=v(function(t,e){return x(t,e,!0)},"merge","Use `assign`.");function T(t,e,i){var s,n=e.prototype;(s=t.prototype=Object.create(n)).constructor=t,s._super=n,i&&h(s,i)}function A(t,e){return function(){return t.apply(e,arguments)}}function S(t,e){return typeof t==u?t.apply(e&&e[0]||r,e):t}function P(t,e){return t===r?e:t}function w(t,e,i){g(D(e),function(e){t.addEventListener(e,i,!1)})}function E(t,e,i){g(D(e),function(e){t.removeEventListener(e,i,!1)})}function M(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function I(t,e){return t.indexOf(e)>-1}function D(t){return t.trim().split(/\s+/g)}function C(t,e,i){if(t.indexOf&&!i)return t.indexOf(e);for(var s=0;s<t.length;){if(i&&t[s][i]==e||!i&&t[s]===e)return s;s++}return-1}function _(t){return Array.prototype.slice.call(t,0)}function W(t,e,i){for(var s=[],n=[],o=0;o<t.length;){var a=e?t[o][e]:t[o];C(n,a)<0&&s.push(t[o]),n[o]=a,o++}return i&&(s=e?s.sort(function(t,i){return t[e]>i[e]}):s.sort()),s}function O(t,e){for(var i,s,n=e[0].toUpperCase()+e.slice(1),o=0;o<l.length;){if((s=(i=l[o])?i+n:e)in t)return s;o++}return r}var R=1;function L(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||n}var k="ontouchstart"in n,F=O(n,"PointerEvent")!==r,B=k&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),N=25,j=1,H=2,U=4,z=8,G=1,Y=2,K=4,X=8,V=16,J=Y|K,q=X|V,Q=J|q,Z=["x","y"],$=["clientX","clientY"];function tt(t,e){var i=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){S(t.options.enable,[t])&&i.handler(e)},this.init()}function et(t,e,i){var s=i.pointers.length,n=i.changedPointers.length,o=e&j&&s-n==0,a=e&(U|z)&&s-n==0;i.isFirst=!!o,i.isFinal=!!a,o&&(t.session={}),i.eventType=e,function(t,e){var i=t.session,s=e.pointers,n=s.length;i.firstInput||(i.firstInput=it(e));n>1&&!i.firstMultiple?i.firstMultiple=it(e):1===n&&(i.firstMultiple=!1);var o=i.firstInput,a=i.firstMultiple,h=a?a.center:o.center,l=e.center=st(s);e.timeStamp=y(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=rt(h,l),e.distance=at(h,l),function(t,e){var i=e.center,s=t.offsetDelta||{},n=t.prevDelta||{},o=t.prevInput||{};e.eventType!==j&&o.eventType!==U||(n=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},s=t.offsetDelta={x:i.x,y:i.y});e.deltaX=n.x+(i.x-s.x),e.deltaY=n.y+(i.y-s.y)}(i,e),e.offsetDirection=ot(e.deltaX,e.deltaY);var c=nt(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=c.x,e.overallVelocityY=c.y,e.overallVelocity=p(c.x)>p(c.y)?c.x:c.y,e.scale=a?(u=a.pointers,d=s,at(d[0],d[1],$)/at(u[0],u[1],$)):1,e.rotation=a?function(t,e){return rt(e[1],e[0],$)+rt(t[1],t[0],$)}(a.pointers,s):0,e.maxPointers=i.prevInput?e.pointers.length>i.prevInput.maxPointers?e.pointers.length:i.prevInput.maxPointers:e.pointers.length,function(t,e){var i,s,n,o,a=t.lastInterval||e,h=e.timeStamp-a.timeStamp;if(e.eventType!=z&&(h>N||a.velocity===r)){var l=e.deltaX-a.deltaX,c=e.deltaY-a.deltaY,u=nt(h,l,c);s=u.x,n=u.y,i=p(u.x)>p(u.y)?u.x:u.y,o=ot(l,c),t.lastInterval=e}else i=a.velocity,s=a.velocityX,n=a.velocityY,o=a.direction;e.velocity=i,e.velocityX=s,e.velocityY=n,e.direction=o}(i,e);var u,d;var f=t.element;M(e.srcEvent.target,f)&&(f=e.srcEvent.target);e.target=f}(t,i),t.emit("hammer.input",i),t.recognize(i),t.session.prevInput=i}function it(t){for(var e=[],i=0;i<t.pointers.length;)e[i]={clientX:d(t.pointers[i].clientX),clientY:d(t.pointers[i].clientY)},i++;return{timeStamp:y(),pointers:e,center:st(e),deltaX:t.deltaX,deltaY:t.deltaY}}function st(t){var e=t.length;if(1===e)return{x:d(t[0].clientX),y:d(t[0].clientY)};for(var i=0,s=0,n=0;n<e;)i+=t[n].clientX,s+=t[n].clientY,n++;return{x:d(i/e),y:d(s/e)}}function nt(t,e,i){return{x:e/t||0,y:i/t||0}}function ot(t,e){return t===e?G:p(t)>=p(e)?t<0?Y:K:e<0?X:V}function at(t,e,i){i||(i=Z);var s=e[i[0]]-t[i[0]],n=e[i[1]]-t[i[1]];return Math.sqrt(s*s+n*n)}function rt(t,e,i){i||(i=Z);var s=e[i[0]]-t[i[0]],n=e[i[1]]-t[i[1]];return 180*Math.atan2(n,s)/Math.PI}tt.prototype={handler:function(){},init:function(){this.evEl&&w(this.element,this.evEl,this.domHandler),this.evTarget&&w(this.target,this.evTarget,this.domHandler),this.evWin&&w(L(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&E(this.element,this.evEl,this.domHandler),this.evTarget&&E(this.target,this.evTarget,this.domHandler),this.evWin&&E(L(this.element),this.evWin,this.domHandler)}};var ht={mousedown:j,mousemove:H,mouseup:U},lt="mousedown",ct="mousemove mouseup";function ut(){this.evEl=lt,this.evWin=ct,this.pressed=!1,tt.apply(this,arguments)}T(ut,tt,{handler:function(t){var e=ht[t.type];e&j&&0===t.button&&(this.pressed=!0),e&H&&1!==t.which&&(e=U),this.pressed&&(e&U&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var dt={pointerdown:j,pointermove:H,pointerup:U,pointercancel:z,pointerout:z},pt={2:"touch",3:"pen",4:"mouse",5:"kinect"},yt="pointerdown",ft="pointermove pointerup pointercancel";function mt(){this.evEl=yt,this.evWin=ft,tt.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}n.MSPointerEvent&&!n.PointerEvent&&(yt="MSPointerDown",ft="MSPointerMove MSPointerUp MSPointerCancel"),T(mt,tt,{handler:function(t){var e=this.store,i=!1,s=t.type.toLowerCase().replace("ms",""),n=dt[s],o=pt[t.pointerType]||t.pointerType,a="touch"==o,r=C(e,t.pointerId,"pointerId");n&j&&(0===t.button||a)?r<0&&(e.push(t),r=e.length-1):n&(U|z)&&(i=!0),r<0||(e[r]=t,this.callback(this.manager,n,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),i&&e.splice(r,1))}});var gt={touchstart:j,touchmove:H,touchend:U,touchcancel:z},vt="touchstart",xt="touchstart touchmove touchend touchcancel";function bt(){this.evTarget=vt,this.evWin=xt,this.started=!1,tt.apply(this,arguments)}T(bt,tt,{handler:function(t){var e=gt[t.type];if(e===j&&(this.started=!0),this.started){var i=function(t,e){var i=_(t.touches),s=_(t.changedTouches);e&(U|z)&&(i=W(i.concat(s),"identifier",!0));return[i,s]}.call(this,t,e);e&(U|z)&&i[0].length-i[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}}});var Tt={touchstart:j,touchmove:H,touchend:U,touchcancel:z},At="touchstart touchmove touchend touchcancel";function St(){this.evTarget=At,this.targetIds={},tt.apply(this,arguments)}T(St,tt,{handler:function(t){var e=Tt[t.type],i=function(t,e){var i=_(t.touches),s=this.targetIds;if(e&(j|H)&&1===i.length)return s[i[0].identifier]=!0,[i,i];var n,o,a=_(t.changedTouches),r=[],h=this.target;if(o=i.filter(function(t){return M(t.target,h)}),e===j)for(n=0;n<o.length;)s[o[n].identifier]=!0,n++;n=0;for(;n<a.length;)s[a[n].identifier]&&r.push(a[n]),e&(U|z)&&delete s[a[n].identifier],n++;if(!r.length)return;return[W(o.concat(r),"identifier",!0),r]}.call(this,t,e);i&&this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}});var Pt=2500,wt=25;function Et(){tt.apply(this,arguments);var t=A(this.handler,this);this.touch=new St(this.manager,t),this.mouse=new ut(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function Mt(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var i={x:e.clientX,y:e.clientY};this.lastTouches.push(i);var s=this.lastTouches;setTimeout(function(){var t=s.indexOf(i);t>-1&&s.splice(t,1)},Pt)}}T(Et,tt,{handler:function(t,e,i){var s="touch"==i.pointerType,n="mouse"==i.pointerType;if(!(n&&i.sourceCapabilities&&i.sourceCapabilities.firesTouchEvents)){if(s)(function(t,e){t&j?(this.primaryTouch=e.changedPointers[0].identifier,Mt.call(this,e)):t&(U|z)&&Mt.call(this,e)}).call(this,e,i);else if(n&&function(t){for(var e=t.srcEvent.clientX,i=t.srcEvent.clientY,s=0;s<this.lastTouches.length;s++){var n=this.lastTouches[s],o=Math.abs(e-n.x),a=Math.abs(i-n.y);if(o<=wt&&a<=wt)return!0}return!1}.call(this,i))return;this.callback(t,e,i)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var It=O(c.style,"touchAction"),Dt=It!==r,Ct="auto",_t="manipulation",Wt="none",Ot="pan-x",Rt="pan-y",Lt=function(){if(!Dt)return!1;var t={},e=n.CSS&&n.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){t[i]=!e||n.CSS.supports("touch-action",i)}),t}();function kt(t,e){this.manager=t,this.set(e)}kt.prototype={set:function(t){"compute"==t&&(t=this.compute()),Dt&&this.manager.element.style&&Lt[t]&&(this.manager.element.style[It]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return g(this.manager.recognizers,function(e){S(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),function(t){if(I(t,Wt))return Wt;var e=I(t,Ot),i=I(t,Rt);if(e&&i)return Wt;if(e||i)return e?Ot:Rt;if(I(t,_t))return _t;return Ct}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,i=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var s=this.actions,n=I(s,Wt)&&!Lt[Wt],o=I(s,Rt)&&!Lt[Rt],a=I(s,Ot)&&!Lt[Ot];if(n){var r=1===t.pointers.length,h=t.distance<2,l=t.deltaTime<250;if(r&&h&&l)return}if(!a||!o)return n||o&&i&J||a&&i&q?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var Ft=1,Bt=2,Nt=4,jt=8,Ht=jt,Ut=16;function zt(t){this.options=h({},this.defaults,t||{}),this.id=R++,this.manager=null,this.options.enable=P(this.options.enable,!0),this.state=Ft,this.simultaneous={},this.requireFail=[]}function Gt(t){return t&Ut?"cancel":t&jt?"end":t&Nt?"move":t&Bt?"start":""}function Yt(t){return t==V?"down":t==X?"up":t==Y?"left":t==K?"right":""}function Kt(t,e){var i=e.manager;return i?i.get(t):t}function Xt(){zt.apply(this,arguments)}function Vt(){Xt.apply(this,arguments),this.pX=null,this.pY=null}function Jt(){Xt.apply(this,arguments)}function qt(){zt.apply(this,arguments),this._timer=null,this._input=null}function Qt(){Xt.apply(this,arguments)}function Zt(){Xt.apply(this,arguments)}function $t(){zt.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function te(t,e){return(e=e||{}).recognizers=P(e.recognizers,te.defaults.preset),new ee(t,e)}zt.prototype={defaults:{},set:function(t){return h(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(m(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=Kt(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return m(t,"dropRecognizeWith",this)?this:(t=Kt(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(m(t,"requireFailure",this))return this;var e=this.requireFail;return-1===C(e,t=Kt(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(m(t,"dropRequireFailure",this))return this;t=Kt(t,this);var e=C(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,i=this.state;function s(i){e.manager.emit(i,t)}i<jt&&s(e.options.event+Gt(i)),s(e.options.event),t.additionalEvent&&s(t.additionalEvent),i>=jt&&s(e.options.event+Gt(i))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(32|Ft)))return!1;t++}return!0},recognize:function(t){var e=h({},t);if(!S(this.options.enable,[this,e]))return this.reset(),void(this.state=32);this.state&(Ht|Ut|32)&&(this.state=Ft),this.state=this.process(e),this.state&(Bt|Nt|jt|Ut)&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},T(Xt,zt,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,i=t.eventType,s=e&(Bt|Nt),n=this.attrTest(t);return s&&(i&z||!n)?e|Ut:s||n?i&U?e|jt:e&Bt?e|Nt:Bt:32}}),T(Vt,Xt,{defaults:{event:"pan",threshold:10,pointers:1,direction:Q},getTouchAction:function(){var t=this.options.direction,e=[];return t&J&&e.push(Rt),t&q&&e.push(Ot),e},directionTest:function(t){var e=this.options,i=!0,s=t.distance,n=t.direction,o=t.deltaX,a=t.deltaY;return n&e.direction||(e.direction&J?(n=0===o?G:o<0?Y:K,i=o!=this.pX,s=Math.abs(t.deltaX)):(n=0===a?G:a<0?X:V,i=a!=this.pY,s=Math.abs(t.deltaY))),t.direction=n,i&&s>e.threshold&&n&e.direction},attrTest:function(t){return Xt.prototype.attrTest.call(this,t)&&(this.state&Bt||!(this.state&Bt)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=Yt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),T(Jt,Xt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[Wt]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&Bt)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),T(qt,zt,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Ct]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,s=t.distance<e.threshold,n=t.deltaTime>e.time;if(this._input=t,!s||!i||t.eventType&(U|z)&&!n)this.reset();else if(t.eventType&j)this.reset(),this._timer=f(function(){this.state=Ht,this.tryEmit()},e.time,this);else if(t.eventType&U)return Ht;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===Ht&&(t&&t.eventType&U?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=y(),this.manager.emit(this.options.event,this._input)))}}),T(Qt,Xt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[Wt]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&Bt)}}),T(Zt,Xt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:J|q,pointers:1},getTouchAction:function(){return Vt.prototype.getTouchAction.call(this)},attrTest:function(t){var e,i=this.options.direction;return i&(J|q)?e=t.overallVelocity:i&J?e=t.overallVelocityX:i&q&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&i&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&p(e)>this.options.velocity&&t.eventType&U},emit:function(t){var e=Yt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),T($t,zt,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[_t]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,s=t.distance<e.threshold,n=t.deltaTime<e.time;if(this.reset(),t.eventType&j&&0===this.count)return this.failTimeout();if(s&&n&&i){if(t.eventType!=U)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,a=!this.pCenter||at(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,a&&o?this.count+=1:this.count=1,this._input=t,0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=f(function(){this.state=Ht,this.tryEmit()},e.interval,this),Bt):Ht}return 32},failTimeout:function(){return this._timer=f(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==Ht&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),te.VERSION="2.0.7",te.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[Qt,{enable:!1}],[Jt,{enable:!1},["rotate"]],[Zt,{direction:J}],[Vt,{direction:J},["swipe"]],[$t],[$t,{event:"doubletap",taps:2},["tap"]],[qt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function ee(t,e){var i;this.options=h({},te.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((i=this).options.inputClass||(F?mt:B?St:k?Et:ut))(i,et),this.touchAction=new kt(this,this.options.touchAction),ie(this,!0),g(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function ie(t,e){var i,s=t.element;s.style&&(g(t.options.cssProps,function(n,o){i=O(s.style,o),e?(t.oldCssProps[i]=s.style[i],s.style[i]=n):s.style[i]=t.oldCssProps[i]||""}),e||(t.oldCssProps={}))}ee.prototype={set:function(t){return h(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var i;this.touchAction.preventDefaults(t);var s=this.recognizers,n=e.curRecognizer;(!n||n&&n.state&Ht)&&(n=e.curRecognizer=null);for(var o=0;o<s.length;)i=s[o],2===e.stopped||n&&i!=n&&!i.canRecognizeWith(n)?i.reset():i.recognize(t),!n&&i.state&(Bt|Nt|jt)&&(n=e.curRecognizer=i),o++}},get:function(t){if(t instanceof zt)return t;for(var e=this.recognizers,i=0;i<e.length;i++)if(e[i].options.event==t)return e[i];return null},add:function(t){if(m(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(m(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,i=C(e,t);-1!==i&&(e.splice(i,1),this.touchAction.update())}return this},on:function(t,e){if(t!==r&&e!==r){var i=this.handlers;return g(D(t),function(t){i[t]=i[t]||[],i[t].push(e)}),this}},off:function(t,e){if(t!==r){var i=this.handlers;return g(D(t),function(t){e?i[t]&&i[t].splice(C(i[t],e),1):delete i[t]}),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var i=o.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=e,e.target.dispatchEvent(i)}(t,e);var i=this.handlers[t]&&this.handlers[t].slice();if(i&&i.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var s=0;s<i.length;)i[s](e),s++}},destroy:function(){this.element&&ie(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},h(te,{INPUT_START:j,INPUT_MOVE:H,INPUT_END:U,INPUT_CANCEL:z,STATE_POSSIBLE:Ft,STATE_BEGAN:Bt,STATE_CHANGED:Nt,STATE_ENDED:jt,STATE_RECOGNIZED:Ht,STATE_CANCELLED:Ut,STATE_FAILED:32,DIRECTION_NONE:G,DIRECTION_LEFT:Y,DIRECTION_RIGHT:K,DIRECTION_UP:X,DIRECTION_DOWN:V,DIRECTION_HORIZONTAL:J,DIRECTION_VERTICAL:q,DIRECTION_ALL:Q,Manager:ee,Input:tt,TouchAction:kt,TouchInput:St,MouseInput:ut,PointerEventInput:mt,TouchMouseInput:Et,SingleTouchInput:bt,Recognizer:zt,AttrRecognizer:Xt,Tap:$t,Pan:Vt,Swipe:Zt,Pinch:Jt,Rotate:Qt,Press:qt,on:w,off:E,each:g,merge:b,extend:x,assign:h,inherit:T,bindFn:A,prefixed:O}),(void 0!==n?n:"undefined"!=typeof self?self:{}).Hammer=te,(s=function(){return te}.call(e,i,e,t))===r||(t.exports=s)}(window,document)},function(t,e,i){"use strict";for(var s=["ms","moz","webkit","o"],n=0;n<s.length&&!window.AudioContext;++n)window.AudioContext=window[s[n]+"AudioContext"];t.exports=window.AudioContext},function(t,e,i){"use strict";t.exports=function(t){return t.replace(/(.*)\.[^.]{1,4}$/,"")}},function(t,e,i){const s=i(35),n=i(24),o=i(25),a=i(7),r=i(26),h=i(36),l=i(0),c=i(4),u=i(8),d=i(16),p=i(37),y={averagePoints:s,degreesToRadians:n,radiansToDegrees:o,pointInPolygon:a,distance:r,degreesFromCenter:h,radiansFromCenter:l,scalePoints:c,translatePoints:u,insideCanvas:d,rotateRadiansAroundCenter:i(1),rotateDegreesAroundCenter:p};t.exports=y},function(t,e){t.exports=function(t){var e={x:0,y:0};return t.forEach(t,function(t){e.x+=t.x,e.y+=t.y}),e.x=e.x/t.length,e.y=e.y/t.length,e}},function(t,e,i){const s=i(25),n=i(0);t.exports=function(t,e){return s(n(t,e))}},function(t,e,i){const s=i(1),n=i(24);t.exports=function(t,e,i){return s(t,e,n(i))}},function(t,e,i){const s=i(27),n=i(22),o=0,a=2;t.exports=class extends s{constructor(t={}){super(t),this.state=a,this.walkingAnims=[],this.dyingAnims=[],this.idleAnims=[],this.direction=o,Object.assign(this,t)}updateDirection(t){this.x+=this.dx*t,this.y+=this.dy*t,this.state!==this.statics.STATE_DYING&&(this.dx>0&&0===this.dy?this.direction=this.statics.EAST:0===this.dx&&this.dy<0?this.direction=this.statics.NORTH:this.dx>0&&this.dy<0?this.direction=this.statics.NORTHEAST:this.dx<0&&this.dy<0?this.direction=this.statics.NORTHWEST:0===this.dx&&this.dy>0?this.direction=this.statics.SOUTH:this.dx>0&&this.dy>0?this.direction=this.statics.SOUTHEAST:this.dx<0&&this.dy>0?this.direction=this.statics.SOUTHWEST:this.dx<0&&0===this.dy&&(this.direction=this.statics.WEST),0===this.dx&&0===this.dy?this.state=this.statics.STATE_IDLE:this.state=this.statics.STATE_WALKING)}updateAnimations(t){this.state===this.statics.STATE_WALKING?this.anim=this.walkingAnims[this.direction]:this.state===this.statics.STATE_DYING?this.anim=this.dyingAnims[this.direction]:this.anim=this.idleAnims[this.direction],this.anim.update(t)}createAnimations(t,e,i,s,o,a){var r=[],h=Array.isArray(e),l=1;a||(a=0);for(var c=0;c<8;c++){r[c]=new n({height:s,width:o,image:i});for(var u=0;u<t;u++)l=h?e[u]:e,r[c].addFrame(l,u+t*c,a)}return r}}},function(t,e,i){"use strict";var s={Circle:i(3),MultiPolygon:i(40),Polygon:i(10),Rectangle:i(41)};t.exports=s},function(t,e,i){const s=i(5),n=i(4),o=i(7),a=i(8);t.exports=class extends s{constructor(t={}){super(t),this.polys=[],Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle;for(var s=0;s<this.polys.length;s++){t.beginPath(),t.moveTo((this.x+this.polys[s][0].x)*e,(this.y+this.polys[s][0].y)*e);for(var n=1;n<this.polys[s].length;n++)t.lineTo((this.polys[s][n].x+this.x)*e,(this.polys[s][n].y+this.y)*e);t.lineTo((this.x+this.polys[s][0].x)*e,(this.y+this.polys[s][0].y)*e),t.closePath(),t.fill(),t.stroke()}t.restore(),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.polys=n(this.polys,t),sup.scaleShape(t)}pointInShape(t){for(var e=0;e<this.polys.length;e++)if(o(t,a(this.polys[e],this)))return!0;return!1}}},function(t,e,i){const s=i(5);t.exports=class extends s{constructor(t={}){super(t),this.halfWidth=1,this.halfHeight=1,Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.fillRect((this.x-this.halfWidth)*e,(this.y-this.halfHeight)*e,2*this.halfWidth*e,2*this.halfHeight*e),t.strokeRect((this.x-this.halfWidth)*e,(this.y-this.halfHeight)*e,2*this.halfWidth*e,2*this.halfHeight*e),t.restore(),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.halfHeight=this.halfHeight*t,this.halfWidth=this.halfWidth*t,super.scaleShape(t)}pointInShape(t){return t.x>=this.x-this.halfWidth&&t.x<=this.x+this.halfWidth&&t.y>=this.y-this.halfHeight&&t.y<=this.y+this.halfHeight}}},function(t,e,i){"use strict";var s={Distance:i(43),Prismatic:i(44),Revolute:i(45)};t.exports=s},function(t,e,i){const s=i(9),n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.Joints.b2DistanceJointDef;t.exports=class extends s{constructor(t={}){super(t),this.bodyPoint2=null,Object.assign(this,t)}scaleJointLocation(t){t&&this.bodyPoint2&&(this.bodyPoint2.x=this.bodyPoint2.x*t,this.bodyPoint2.y=this.bodyPoint2.y*t,this.alreadyScaled=!0),super.scaleJointLocation(t)}createB2Joint(t){if(t&&t.bodiesMap&&t.b2World&&t.jointsMap&&!t.jointsMap[this.id]){const e=t.bodiesMap[this.bodyId1],i=t.bodiesMap[this.bodyId2];if(e&&i){let s,a;this.bodyPoint1&&(s=new n(this.bodyPoint1.x,this.bodyPoint1.y)),this.bodyPoint2&&(a=new n(this.bodyPoint2.x,this.bodyPoint2.y)),s=s||e.GetWorldCenter(),a=a||i.GetWorldCenter();const r=new o;return r.Initialize(e,i,s,a),this.jointAttributes&&Object.assign(r,this.jointAttributes),t.b2World.CreateJoint(r)}}}}},function(t,e,i){const s=i(9),n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.Joints.b2PrismaticJointDef;t.exports=class extends s{constructor(t={}){super(t),this.axisScale=null,Object.assign(this,t)}createB2Joint(t){if(t&&t.bodiesMap&&t.b2World&&t.jointsMap&&!t.jointsMap[this.id]){const s=t.bodiesMap[this.bodyId1],a=t.bodiesMap[this.bodyId2];if(s&&a){let r;this.bodyPoint1&&(r=new n(this.bodyPoint1.x,this.bodyPoint1.y)),r=r||s.GetWorldCenter();var e,i=new o;return e=this.axisScale?new n(this.axisScale.x,this.axisScale.y):new n(1,0),i.Initialize(s,a,r,e),this.jointAttributes&&Object.assign(i,this.jointAttributes),t.b2World.CreateJoint(i)}}}}},function(t,e,i){const s=i(9),n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.Joints.b2RevoluteJointDef;t.exports=class extends s{constructor(t={}){super(t),Object.assign(this,t)}createB2Joint(t){if(t&&t.bodiesMap&&t.b2World&&t.jointsMap&&!t.jointsMap[this.id]){var e=t.bodiesMap[this.bodyId1],i=t.bodiesMap[this.bodyId2];if(e&&i){var s;this.bodyPoint1&&(s=new n(this.bodyPoint1.x,this.bodyPoint1.y)),s=s||e.GetWorldCenter();var a=new o;return a.Initialize(e,i,s,void 0),this.jointAttributes&&Object.assign(a,this.jointAttributes),t.b2World.CreateJoint(a)}}}}},function(t,e){t.exports=class{constructor(t={}){Object.assign(this,t),this.collisions=this.collisions||{}}reset(){this.collisions={}}postSolve(t,e,i,s){this.collisions[t]=this.collisions[t]||[],this.collisions[t].push({id:e,impulse:i.normalImpulses[0]}),this.collisions[e]=this.collisions[e]||[],this.collisions[e].push({id:t,impulse:i.normalImpulses[0]})}}},function(t,e,i){const s=i(12),n=i(28);t.exports=class extends s{constructor(t={}){super(t),console.log("boxgame options",t),this.box=null,this.boxUpdating=!0,this.entities=null,this.joints=null,Object.assign(this,t),this.box||(this.box=new n(t.boxOptions)),this.entities||(this.entities={}),this.joints||(this.joints={})}updateBox(t){this.boxUpdating&&(this.box.update(t),this.box.updateExternalState(this.entities))}addBody(t){this.entities[t.id]=t,this.box.addBody(t)}addBodies(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.addBody(t)})}removeBody(t){this.box.removeBody(t.id),delete this.entities[t.id]}removeBodies(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.removeBody(t)})}addJoint(t){this.joints[t.id]=t,this.box.addJoint(t)}addJoints(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.addJoint(t)})}removeJoint(t){this.box.removeJoint(t.id),delete this.joints[t.id]}removeJoints(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.removeJoint(t)})}}},function(t,e,i){"use strict";i.r(e);var s=i(11),n=i(29),o=i.n(n);var a=function(t,e){const{fullW:i,fullH:s,hexSide:n,sideW:o,sint1:a,ang1:r,sint2:h,ang2:l}=this.measurements;t.clearRect(0,0,this.width,this.height),t.strokeStyle=this.players[0].color,t.beginPath(),t.moveTo(o,1),t.lineTo(i-o,1),t.stroke(),t.strokeStyle=this.players[3].color,t.beginPath(),t.moveTo(o,s),t.lineTo(i-o,s),t.stroke(),t.strokeStyle=this.players[1].color,t.beginPath(),t.moveTo(i-o,0),t.lineTo(i,s/2),t.stroke(),t.strokeStyle=this.players[2].color,t.beginPath(),t.moveTo(i,s/2),t.lineTo(i-o,s),t.stroke(),t.strokeStyle=this.players[4].color,t.beginPath(),t.moveTo(o,s),t.lineTo(0,s/2),t.stroke(),t.strokeStyle=this.players[5].color,t.beginPath(),t.moveTo(0,s/2),t.lineTo(o,0),t.stroke(),this.players.forEach(i=>{i.face.dead||i.paddles[0].draw(t,e),i.face.draw(t,e)}),Object.keys(this.entities).forEach(e=>{this.entities[e].hidden||this.entities[e].draw(t)})},r=i(3),h=i.n(r),l=i(0),c=i.n(l),u=i(1),d=i.n(u);console.log("wtf too many bricks?");let p=[[6,1],[10,1],[14,1],[34,1],[38,1],[42,1],[8,3],[12,3],[16,3],[32,3],[36,3],[40,3],[6,5],[10,5],[14,5],[34,5],[38,5],[42,5],[8,7],[12,7],[16,7],[32,7],[36,7],[40,7],[10,9],[14,9],[18,9],[30,9],[34,9],[38,9],[12,11],[16,11],[20,11],[24,11],[28,11],[32,11],[36,11],[14,13],[18,13],[22,13],[26,13],[30,13],[34,13],[12,15],[16,15],[20,15],[24,15],[28,15],[32,15],[36,15],[18,17],[22,17],[26,17],[30,17],[24,19]];var y=p=p.map(t=>((t=[12.5*t[0],12.5*t[1]])[0]=t[0]-300,t)),f=i(30),m=i.n(f),g=i(10),v=i.n(g);class x extends v.a{draw(t,e){const i=t.lineWidth;t.save(),t.lineWidth=1,t.lineJoin="round",t.fillStyle=this.fillStyle;const s=t.createLinearGradient(0,this.prey,0,this.prey+2*this.halfHeight);s.addColorStop(0,t.fillStyle),s.addColorStop(1,"#444"),t.translate(this.prex,this.prey),t.rotate(this.preAngle),t.translate(-this.prex,-this.prey),t.fillStyle=s,t.strokeStyle=this.strokeStyle,t.fillRect(this.prex-this.halfWidth,this.prey-this.halfHeight,2*this.halfWidth,2*this.halfHeight),t.strokeRect(this.prex-this.halfWidth,this.prey-this.halfHeight,2*this.halfWidth,2*this.halfHeight),t.restore(),t.lineWidth=i}}class b extends h.a{draw(t,e){e=e||this.scale||1;const i=this.x*e,s=this.y*e,n=t.lineWidth;t.lineWidth=2,t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.beginPath(),t.arc(i,s,this.radius*e,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke();const o={x:i-17,y:s-15},a={x:i+17,y:s-15};if(this.dead)t.lineWidth=2,t.fillStyle="rgba(0,0,0,0.75)",t.strokeStyle=this.fillStyle,t.beginPath(),t.arc(i,s,this.radius*e,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke(),t.beginPath(),t.moveTo(o.x-10,o.y-10),t.lineTo(o.x+10,o.y+10),t.stroke(),t.beginPath(),t.moveTo(o.x+10,o.y-10),t.lineTo(o.x-10,o.y+10),t.stroke(),t.beginPath(),t.moveTo(a.x-10,a.y-10),t.lineTo(a.x+10,a.y+10),t.stroke(),t.beginPath(),t.moveTo(a.x+10,a.y-10),t.lineTo(a.x-10,a.y+10),t.stroke();else{t.lineWidth=1,t.fillStyle="#FFF",t.beginPath(),t.arc(i-17,s-15,10,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke(),t.beginPath(),t.arc(i+17,s-15,10,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke();const n=c()(o,{x:this.ball.x*e,y:this.ball.y*e}),r=c()(a,{x:this.ball.x*e,y:this.ball.y*e}),h=d()(o,{x:i-17,y:s-20},n),l=d()(a,{x:i+17,y:s-20},r);t.fillStyle="black",t.beginPath(),t.arc(h.x,h.y,6,0,2*Math.PI,!0),t.closePath(),t.fill(),t.beginPath(),t.arc(l.x,l.y,6,0,2*Math.PI,!0),t.closePath(),t.fill()}t.lineWidth=n}}var T=i(2),A=i.n(T);i(4);const S=10;function P(t,e,i,s){let n=t.inputManager.keyActions[e].isPressed();if(n||t.inputManager.keyActions[i].isPressed())return t.players[s].direction=n?-1:1;t.players[s].direction=0}var w=function(t){P(this,A.a.LEFT,A.a.RIGHT,2),P(this,"Q","W",5),P(this,"C","V",4),P(this,"N","M",3),P(this,"T","Y",0),P(this,"O","P",1),t.keyActions[A.a.UP].isPressed()&&this.box.applyImpulseDegrees("ball",0,S),t.keyActions[A.a.DOWN].isPressed()&&this.box.applyImpulseDegrees("ball",180,S),t.keyActions.A.isPressed()&&this.box.applyTorque("ball",100*-S),t.keyActions.D.isPressed()&&this.box.applyTorque("ball",100*S)};const{BoxGame:E,entities:M,joints:I}=s.box2d,{Revolute:D}=I,{radiansFromCenter:C,scalePoints:_,rotateRadiansAroundCenter:W,distance:O,radiansToDegrees:R}=s.utils,L=2*Math.PI/360*1.75;const k=568.10113077769,F=Math.asin(.6889532509648748),B=Math.asin(.7248057794927981);console.log("angle in radians",F,B);const N=new E({canvasId:"canvas",gameAreaId:"gameArea",canvasPercentage:1,boxOptions:{resolveCollisions:!0,gravityY:0},draw:a,initInput:function(t){t.addArrowKeyActions(),t.addKeyAction("A"),t.addKeyAction("D"),t.addKeyAction("Q"),t.addKeyAction("W"),t.addKeyAction("C"),t.addKeyAction("V"),t.addKeyAction("N"),t.addKeyAction("M"),t.addKeyAction("T"),t.addKeyAction("Y"),t.addKeyAction("O"),t.addKeyAction("P")},handleInput:w,update:function(t){if(this.updateBox(t),this.ball&&this.ball.collisions&&this.ball.collisions.length){this.ball.collisions.forEach(t=>{const e=this.entities[t.id];if(e)if(e.brick)this.removeBody(t);else if(e.king)console.log("king kill",e),e.dead=!0,Object.keys(this.entities).forEach(t=>{const i=this.entities[t];i.brick&&i.playerId===e.playerId&&this.removeBody(i)}),this.players[e.playerId].paddles.forEach(t=>{this.removeBody(t)}),this.removeBody(e);else if(e.paddle){const t=this.players[e.playerId];O(t.anchor,this.ball);console.log("%cpaddlehit "+e.playerId,"font-size: 1.5em; background: #222; color: "+z[e.playerId].color)}});const t=C({x:0,y:0},this.ball.linearVelocity);this.removeBody(this.ball),this.addBody(this.ball),this.box.applyForce(this.ball.id,t+(Math.round(Math.random())?-Math.random()*L:Math.random()*L),400)}N.players.forEach((e,i)=>{if(!e.face.dead){e.direction>0&&e.position<Math.PI?(e.position+=.0027*t,e.position=Math.min(e.position,Math.PI)):e.direction<0&&e.position>0&&(e.position-=.0027*t,e.position=Math.max(e.position,0));const s=W({x:e.pt[0],y:e.pt[1]},{x:e.pt[0],y:e.pt[1]+295},e.angle+e.position-Math.PI/2),n=e.paddleOps;n.x=s.x,n.y=s.y,n.points=[{x:n.halfWidth,y:-n.halfHeight},{x:.6*n.halfWidth,y:n.halfHeight},{x:.6*-n.halfWidth,y:n.halfHeight},{x:-n.halfWidth,y:-n.halfHeight}],n.points=e.paddleOps.points.map(t=>W({x:0,y:0},t,e.angle+e.position-Math.PI/2)),e.update++,n.id=i+"paddle"+e.update;const o=new M.Polygon(n);if(N.addBody(o),e.paddles.push(o),e.paddles.length>3){const t=e.paddles.shift();N.removeBody(t)}}})}}),j={x:960,y:540,ptRadius:10,radius:10,points:[0,1,2,3,4,5,6,7,8],id:"ball"};j.points=j.points.map((t,e)=>{return W({x:0,y:0},{x:0,y:j.ptRadius},2*Math.PI/j.points.length*e)}),N.ball=new class extends h.a{draw(t,e){e=e||this.scale||1;const i=this.x*e,s=this.y*e,n=this.ptRadius;if(t.fillStyle="rgba(255,127,0,0.66)",t.beginPath(),t.arc(i,s,n,0,2*Math.PI,!0),t.closePath(),t.fill(),this.linearVelocity){const e=.06,o=.85,a=c()({x:0,y:0},this.linearVelocity),r={x:i,y:s};[1,2,3,4,5].map((t,h)=>d()(r,{x:i,y:s-n*(o*t)},a+Math.PI+(t%2?e:-e))).forEach((e,i)=>{t.fillStyle="rgba(255,255,0,0.5)",t.beginPath(),t.arc(e.x,e.y,n-n*(.15*(i+1)),0,2*Math.PI,!0),t.closePath(),t.fill()})}}}(j),N.addBody(N.ball),o.a.entities.forEach(function(t){const e=M[t.type];e&&(t.drawCenter=!1,N.addBody(new e(t)))});const H=.6043122389547919,U=[0,F,B+Math.PI/2,Math.PI,Math.PI+F,1.5*Math.PI+B];const z=[[960,0],[1920-k*H,540*(1-H)],[1920-k*H,540+540*H],[960,1080],[k*H,540+540*H],[k*H,540*(1-H)]].map((t,e)=>({pt:t,color:m.a[e],angle:U[e],direction:0,position:Math.PI/2,update:0}));console.log("players",z);const G={x:z[0].pt[0],y:z[0].pt[1]};z.forEach((t,e)=>{console.log("creating player",t);const i={x:t.pt[0],y:t.pt[1]},s=W(i,{x:i.x,y:i.y+55},t.angle),n=new b({x:s.x,y:s.y,radius:50,staticBody:!0,restitution:2,fillStyle:t.color,king:!0,ball:N.ball,playerId:e});N.addBody(n),t.face=n;const o=W(i,{x:i.x,y:i.y+295},t.angle);t.paddleOps={x:o.x,y:o.y,halfWidth:60,halfHeight:15,restitution:1,fillStyle:t.color,paddle:!0,drawCenter:!1,playerId:e,density:100,staticBody:!0,id:e+"paddle0",hidden:!0},t.paddleOps.points=[{x:t.paddleOps.halfWidth,y:-t.paddleOps.halfHeight},{x:t.paddleOps.halfWidth,y:t.paddleOps.halfHeight},{x:-t.paddleOps.halfWidth,y:t.paddleOps.halfHeight},{x:-t.paddleOps.halfWidth,y:-t.paddleOps.halfHeight}],t.paddleOps.points=t.paddleOps.points.map(e=>W({x:0,y:0},e,t.angle));const a=new M.Polygon(t.paddleOps);N.addBody(a),t.paddles=[a],t.anchor=new M.Circle({x:t.pt[0],y:t.pt[1],radius:.1,staticBody:!0,playerId:e,hidden:!0}),N.addBody(t.anchor),a.distance=O(t.anchor,a);const r=new I.Distance({bodyId1:t.anchor.id,bodyId2:a.id,id:Math.random()+"j"});N.addJoint(r),y.forEach((s,n)=>{const o={x:s[0]+960,y:s[1],halfWidth:25,halfHeight:12.5,staticBody:!0,restitution:1.5,playerId:e,fillStyle:t.color,brick:!0,preAngle:t.angle},a=W(G,o,t.angle);o.x=a.x,o.y=a.y,o.x+=i.x-z[0].pt[0],o.y+=i.y-z[0].pt[1],o.points=[{x:o.halfWidth,y:-o.halfHeight},{x:o.halfWidth,y:o.halfHeight},{x:-o.halfWidth,y:o.halfHeight},{x:-o.halfWidth,y:-o.halfHeight}],o.points=o.points.map(e=>W({x:0,y:0},e,t.angle)),o.prex=o.x,o.prey=o.y;const r=new x(o);N.addBody(r)})}),N.measurements={fullW:1920,fullH:1080,hexSide:783.79773844413,sideW:k,sint1:.6889532509648748,ang1:F,sint2:.7248057794927981,ang2:B},N.players=z,console.log(N),window.game=N,N.run(),N.box.applyForceDegrees("ball",360*Math.random(),400)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3V0aWxzL3JhZGlhbnNGcm9tQ2VudGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy91dGlscy9yb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9ib3gyZC9lbnRpdGllcy9DaXJjbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3V0aWxzL3NjYWxlUG9pbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9ib3gyZC9lbnRpdGllcy9FbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL0dhbWVBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3V0aWxzL3BvaW50SW5Qb2x5Z29uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy91dGlscy90cmFuc2xhdGVQb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL2JveDJkL2pvaW50cy9Kb2ludC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvYm94MmQvZW50aXRpZXMvUG9seWdvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL0dhbWVDb3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9JbnB1dE1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL1RvdWNoQWN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9Nb3VzZUFjdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvdXRpbHMvaW5zaWRlQ2FudmFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9SZXNvdXJjZU1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL2hhcy5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9zb3VuZHMvU291bmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3NvdW5kcy9XZWJBdWRpby5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvQW5pbWF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9BbmltRnJhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3V0aWxzL2RlZ3JlZXNUb1JhZGlhbnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3V0aWxzL3JhZGlhbnNUb0RlZ3JlZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3V0aWxzL2Rpc3RhbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9TcHJpdGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL2JveDJkL0JveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYm94RGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29sb3JzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oYW1tZXJqcy9oYW1tZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3NoaW1zL0F1ZGlvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvdXRpbHMvcmVtb3ZlRXh0ZW5zaW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvdXRpbHMvYXZlcmFnZVBvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvdXRpbHMvZGVncmVlc0Zyb21DZW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3V0aWxzL3JvdGF0ZURlZ3JlZXNBcm91bmRDZW50ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL3JlaW5lci9DcmVhdHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvYm94MmQvZW50aXRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL2JveDJkL2VudGl0aWVzL011bHRpUG9seWdvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvYm94MmQvZW50aXRpZXMvUmVjdGFuZ2xlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9ib3gyZC9qb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zyb3plbmpzL2JveDJkL2pvaW50cy9EaXN0YW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvYm94MmQvam9pbnRzL1ByaXNtYXRpYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvYm94MmQvam9pbnRzL1Jldm9sdXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mcm96ZW5qcy9ib3gyZC9saXN0ZW5lcnMvQ29udGFjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZnJvemVuanMvYm94MmQvQm94R2FtZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZHJhdy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnJpY2tzLmpzIiwid2VicGFjazovLy8uL3NyYy9Ccmljay5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvRmFjZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGFuZGxlSW5wdXQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2dhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0JhbGwuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjZW50ZXIiLCJ4IiwieSIsInB0IiwiTWF0aCIsIlBJIiwiYXRhbiIsImFuZ2xlIiwic2luIiwiY29zIiwibmV3UHQiLCJ4bmV3IiwieW5ldyIsIkNBTkNFTCIsIkhFTFAiLCJCQUNLX1NQQUNFIiwiVEFCIiwiQ0xFQVIiLCJSRVRVUk4iLCJFTlRFUiIsIlNISUZUIiwiQ09OVFJPTCIsIkFMVCIsIlBBVVNFIiwiQ0FQU19MT0NLIiwiRVNDQVBFIiwiU1BBQ0UiLCJQQUdFX1VQIiwiUEFHRV9ET1dOIiwiRU5EIiwiSE9NRSIsIkxFRlQiLCJVUCIsIlJJR0hUIiwiRE9XTiIsIlBSSU5UU0NSRUVOIiwiSU5TRVJUIiwiREVMRVRFIiwiTlVNMCIsIk5VTTEiLCJOVU0yIiwiTlVNMyIsIk5VTTQiLCJOVU01IiwiTlVNNiIsIk5VTTciLCJOVU04IiwiTlVNOSIsIlNFTUlDT0xPTiIsIkVRVUFMUyIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJOIiwiTyIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiQ09OVEVYVF9NRU5VIiwiTlVNUEFEMCIsIk5VTVBBRDEiLCJOVU1QQUQyIiwiTlVNUEFEMyIsIk5VTVBBRDQiLCJOVU1QQUQ1IiwiTlVNUEFENiIsIk5VTVBBRDciLCJOVU1QQUQ4IiwiTlVNUEFEOSIsIk1VTFRJUExZIiwiQUREIiwiU0VQQVJBVE9SIiwiU1VCVFJBQ1QiLCJERUNJTUFMIiwiRElWSURFIiwiRjEiLCJGMiIsIkYzIiwiRjQiLCJGNSIsIkY2IiwiRjciLCJGOCIsIkY5IiwiRjEwIiwiRjExIiwiRjEyIiwiRjEzIiwiRjE0IiwiRjE1IiwiRjE2IiwiRjE3IiwiRjE4IiwiRjE5IiwiRjIwIiwiRjIxIiwiRjIyIiwiRjIzIiwiRjI0IiwiTlVNX0xPQ0siLCJTQ1JPTExfTE9DSyIsIlVQX0RQQUQiLCJET1dOX0RQQUQiLCJMRUZUX0RQQUQiLCJSSUdIVF9EUEFEIiwiQ09NTUEiLCJQRVJJT0QiLCJTTEFTSCIsIkJBQ0tfUVVPVEUiLCJPUEVOX0JSQUNLRVQiLCJCQUNLX1NMQVNIIiwiQ0xPU0VfQlJBQ0tFVCIsIlFVT1RFIiwiTUVUQSIsIkVudGl0eSIsImRpc3RhbmNlIiwiW29iamVjdCBPYmplY3RdIiwib3B0aW9ucyIsInN1cGVyIiwidGhpcyIsInJhZGl1cyIsImFzc2lnbiIsImN0eCIsInNjYWxlIiwib2dMaW5lV2lkdGgiLCJsaW5lV2lkdGgiLCJmaWxsU3R5bGUiLCJzdHJva2VTdHlsZSIsImJlZ2luUGF0aCIsImFyYyIsImNsb3NlUGF0aCIsImZpbGwiLCJzdHJva2UiLCJzdGF0aWNCb2R5Iiwic2F2ZSIsInRyYW5zbGF0ZSIsInJvdGF0ZSIsIm1vdmVUbyIsImxpbmVUbyIsInJlc3RvcmUiLCJkcmF3Iiwic2NhbGVTaGFwZSIsInBvaW50Iiwic2NhbGVQb2ludHMiLCJwb2ludHMiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJpZCIsInJhbmRvbSIsIkRhdGUiLCJub3ciLCJkcmF3Q2VudGVyIiwicmVzdGl0dXRpb24iLCJkZW5zaXR5IiwiZnJpY3Rpb24iLCJsaW5lYXJEYW1waW5nIiwibGluZWFyVmVsb2NpdHkiLCJhbmd1bGFyVmVsb2NpdHkiLCJhbmd1bGFyRGFtcGluZyIsIm1hc2tCaXRzIiwiY2F0ZWdvcnlCaXRzIiwiZ3JvdXBJbmRleCIsInN0YXRlIiwiY2VudGVyU3R5bGUiLCJhbHJlYWR5U2NhbGVkIiwic3RhdGljcyIsIk5PUk1BTCIsIkRFVEVDVF9JTklUQUxfUFJFU1NfT05MWSIsIlNUQVRFX1JFTEVBU0VEIiwiU1RBVEVfUFJFU1NFRCIsIlNUQVRFX1dBSVRJTkdfRk9SX1JFTEVBU0UiLCJTVEFURV9NT1ZFRCIsImJlaGF2aW9yIiwiYW1vdW50IiwicmVzZXQiLCJwcmVzcyIsInJlbGVhc2UiLCJwcmVzc0FtdCIsInJldFZhbCIsInBvbHlnb24iLCJwb2x5IiwiaW5zaWRlUG9seSIsImoiLCJsZW5ndGgiLCJ4aSIsInlpIiwieGoiLCJ5aiIsInRyYW5zbGF0ZVBvaW50cyIsInRyYW5zbGF0aW9uIiwiYm9keUlkMSIsImJvZHlJZDIiLCJib2R5UG9pbnQxIiwiam9pbnRBdHRyaWJ1dGVzIiwicG9pbnRJblBvbHlnb24iLCJ3aW5kb3ciLCJmcm96ZW5qcyIsIkdhbWVDb3JlIiwiSW5wdXRNYW5hZ2VyIiwiUmVzb3VyY2VNYW5hZ2VyIiwiTW91c2VBY3Rpb24iLCJUb3VjaEFjdGlvbiIsImtleXMiLCJBbmltYXRpb24iLCJBbmltRnJhbWUiLCJ1dGlscyIsIlNwcml0ZSIsInJlaW5lciIsIkNyZWF0dXJlIiwic291bmRzIiwiV2ViQXVkaW8iLCJib3gyZCIsImVudGl0aWVzIiwiam9pbnRzIiwiQm94IiwiQm94R2FtZSIsImlzUnVubmluZyIsImNhbnZhc0lkIiwibWF4U3RlcCIsImNvbnRleHRUeXBlIiwiaGVpZ2h0Iiwid2lkdGgiLCJyZXNvdXJjZU1hbmFnZXIiLCJpbnB1dE1hbmFnZXIiLCJsb2FkaW5nRm9yZWdyb3VuZCIsImxvYWRpbmdCYWNrZ3JvdW5kIiwiZ2FtZUFyZWFJZCIsImNhbnZhc1BlcmNlbnRhZ2UiLCJuZXdIZWlnaHQiLCJjYW52YXMiLCJuZXdXaWR0aCIsImluaXQiLCJsb2FkUmVzb3VyY2VzIiwiaW5pdElucHV0IiwibGF1bmNoTG9vcCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInNldEhlaWdodCIsInNldFdpZHRoIiwiZ2FtZUFyZWEiLCJyZXNpemUiLCJhbGVydCIsImVsYXBzZWRUaW1lIiwiY3VyclRpbWUiLCJnZXRUaW1lIiwibWluIiwicHJldlRpbWUiLCJyZXNvdXJjZXNSZWFkeSIsInVwZGF0ZUxvYWRpbmdTY3JlZW4iLCJkcmF3TG9hZGluZ1NjcmVlbiIsImhhbmRsZUlucHV0IiwicGF1c2VkIiwidXBkYXRlIiwic3RhcnRUaW1lIiwibG9vcFJ1bm5lciIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImdhbWVMb29wIiwiZm9udCIsImZpbGxUZXh0IiwiZmlsbFJlY3QiLCJ0ZXh0UHhTaXplIiwiZmxvb3IiLCJnZXRQZXJjZW50Q29tcGxldGUiLCJzdHJva2VSZWN0IiwiSGFtbWVyIiwiR2FtZUFjdGlvbiIsImluc2lkZUNhbnZhcyIsIm9uIiwiZWxlbWVudCIsImhhbmRsZXIiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRvUGl4ZWwiLCJwYXJzZUZsb2F0IiwiZ2V0TWFyZ2luRXh0ZW50cyIsIm5vZGUiLCJzdHlsZSIsImdldENvbXB1dGVkU3R5bGUiLCJtYXJnaW5MZWZ0IiwibWFyZ2luVG9wIiwidyIsIm1hcmdpblJpZ2h0IiwiaCIsIm1hcmdpbkJvdHRvbSIsImNsZWFudXAiLCJyZW1vdmUiLCJrZXlBY3Rpb25zIiwibW91c2VBY3Rpb24iLCJ0b3VjaEFjdGlvbiIsImhhbmRsZU1vdXNlIiwiaGFuZGxlVG91Y2giLCJoYW5kbGVLZXlzIiwiZW11bGF0ZU1vdXNlIiwiaGFtbWVyIiwiYm9keSIsInByZXZlbnRfZGVmYXVsdCIsImRyYWdfbWF4X3RvdWNoZXMiLCJob2xkIiwicHVzaENsZWFudXAiLCJrZXlkb3duIiwia2V5dXAiLCJ0b3VjaHN0YXJ0IiwidG91Y2htb3ZlIiwidG91Y2hlbmQiLCJtb3VzZWRvd24iLCJtb3VzZW1vdmUiLCJtb3VzZXVwIiwibm9ybWFsaXplUG9pbnQiLCJnZXN0dXJlIiwicmVtb3ZlQ2xlYW51cCIsImFyZ3MiLCJvZmYiLCJhcHBseSIsImdhbWVBY3Rpb24iLCJrZXlDb2RlIiwiaW5pdGlhbFByZXNzT25seSIsImdhIiwiZGV0ZWN0SW5pdGlhbFByZXNzT25seSIsIm1hcFRvS2V5IiwiYWRkS2V5QWN0aW9uIiwiZSIsImN1cnJlbnRQb2ludCIsInBvc2l0aW9uIiwiY29uc29sZSIsImxvZyIsInRvdWNoZXMiLCJjdXJyZW50UG9pbnRzIiwicHVzaCIsInNvbWUiLCJtb3VzZVVwIiwicG9zaXRpb25zIiwic3RhcnRQb3NpdGlvbnMiLCJwcmV2ZW50RGVmYXVsdCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImdldEtleUFjdGlvbiIsImlzUHJlc3NlZCIsImV2dCIsImNvb3Jkc00iLCJib3VuZGluZ1JlY3QiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0IiwidG9wIiwiem9vbVJhdGlvIiwicm91bmQiLCJjbGllbnRYIiwiY2xpZW50WSIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiYm9keU1hcmdpbnMiLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJ3aWR0aFRvSGVpZ2h0IiwibmV3V2lkdGhTdHlsZSIsIm5ld0hlaWdodFN0eWxlIiwiY2FudmFzUGVyY2VudGFnZVN0eWxlIiwiZGlzcGxheSIsImEiLCJiIiwiZW5kUG9zaXRpb25zIiwic3RhcnRQb3NpdGlvbiIsImVuZFBvc2l0aW9uIiwiaGFzIiwiU291bmQiLCJyZXNvdXJjZUxpc3QiLCJub3JtYWxpemVQYXRoIiwiYmFzZURpciIsInBhdGgiLCJqb2luZWRQYXRoIiwiam9pbiIsInJlcGxhY2UiLCJmbGlwWCIsImltYWdlIiwib2Zmc2NyZWVuQ2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsImZsaXBZIiwiSW1hZ2VXcmFwcGVyIiwiZmlsZW5hbWUiLCJzZWxmIiwiY29tcGxldGUiLCJpbWciLCJJbWFnZSIsInNyYyIsImFsbExvYWRlZCIsImltYWdlRGlyIiwic291bmREaXIiLCJmaWxlcyIsInNpbmdsZUZpbGUiLCJmaWxlTGlzdCIsImZpbGUiLCJ3cmFwcGVyIiwibG9hZCIsInNvdW5kIiwiZmxpcEZuIiwiaW1nMiIsImRvRmxpcCIsImZsaXBJbWFnZSIsIm51bUNvbXBsZXRlIiwiZ2xvYmFsIiwiY2hlY2siLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzcGxpdCIsInVuZGVmaW5lZCIsIkF1ZGlvQ29udGV4dCIsImRvY3VtZW50RWxlbWVudCIsImciLCJGdW5jdGlvbiIsImZvcm1hdHMiLCJhdWRpby9tcGVnIiwiYXVkaW8vd2VibSIsImF1ZGlvL29nZyIsImF1ZGlvL3dhdiIsImF1ZGlvL2FhYyIsImF1ZGlvL3gtbTRhIiwicHJvYmFibHkiLCJtYXliZSIsInZvbHVtZSIsImxvb3AiLCJjb2RlYyIsInJlc3VsdCIsImF1ZGlvIiwiQXVkaW8iLCJjYW5QbGF5VHlwZSIsInNoaWZ0IiwicmVtb3ZlRXh0ZW5zaW9uIiwiYXVkaW9Db250ZXh0IiwiaGFuZGxlU2hpdHR5Iiwic291cmNlIiwiY3JlYXRlQnVmZmVyU291cmNlIiwiYnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwic3RhcnQiLCJiYXNlbmFtZSIsIl9jaG9vc2VGb3JtYXQiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwib25sb2FkIiwiZGVjb2RlQXVkaW9EYXRhIiwidGFyZ2V0IiwicmVzcG9uc2UiLCJlcnIiLCJfbmV4dEZvcm1hdCIsInNlbmQiLCJfaW5pdEF1ZGlvIiwiZ2Fpbk5vZGUiLCJjcmVhdGVHYWluIiwiZ2FpbiIsImN1cnJGcmFtZUluZGV4IiwiYW5pbVRpbWUiLCJ0b3RhbER1cmF0aW9uIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJmcmFtZXMiLCJmcmFtZUNvdW50IiwiZnJhbWVUaW1lcyIsInlTbG90IiwiYW5pbSIsImlzRlRBcnJheSIsImN1cnJlbnRGcmFtZVRpbWUiLCJhZGRGcmFtZSIsImR1cmF0aW9uIiwiaW1hZ2VTbG90WCIsImltYWdlU2xvdFkiLCJlbmRUaW1lIiwiaW1nU2xvdFgiLCJpbWdTbG90WSIsImNmIiwiZ2V0Q3VycmVudEZyYW1lIiwicmFkQ29uc3QiLCJkZWdyZWVzIiwiZGVnQ29uc3QiLCJyYWRpYW5zIiwicDEiLCJwMiIsInNxcnQiLCJkeCIsImR5IiwibWF4U3BlZWQiLCJjb2xsaXNpb25SYWRpdXMiLCJ2IiwiYWJzIiwiY2xvbmUiLCJDb250YWN0IiwiQm94MkQiLCJCMlZlYzIiLCJDb21tb24iLCJiMlZlYzIiLCJCMkJvZHlEZWYiLCJEeW5hbWljcyIsImIyQm9keURlZiIsIkIyQm9keSIsImIyQm9keSIsIkIyRml4dHVyZURlZiIsImIyRml4dHVyZURlZiIsIkIyV29ybGQiLCJiMkZpeHR1cmUiLCJiMldvcmxkIiwiQjJQb2x5Z29uU2hhcGUiLCJDb2xsaXNpb24iLCJTaGFwZXMiLCJiMlBvbHlnb25TaGFwZSIsIkIyQ2lyY2xlU2hhcGUiLCJiMkNpcmNsZVNoYXBlIiwiaW50ZXJ2YWxSYXRlIiwiYWRhcHRpdmUiLCJib2RpZXNNYXAiLCJmaXh0dXJlc01hcCIsImpvaW50c01hcCIsImdyYXZpdHlYIiwiZ3Jhdml0eVkiLCJhbGxvd1NsZWVwIiwicmVzb2x2ZUNvbGxpc2lvbnMiLCJjb250YWN0TGlzdGVuZXIiLCJjb2xsaXNpb25zIiwicGFyc2VJbnQiLCJhZGRDb250YWN0TGlzdGVuZXIiLCJtaWxsaXMiLCJTdGVwIiwiQ2xlYXJGb3JjZXMiLCJzdGVwUmF0ZSIsImxhc3RUaW1lc3RhbXAiLCJHZXRCb2R5TGlzdCIsIm1fbmV4dCIsIklzQWN0aXZlIiwiR2V0VXNlckRhdGEiLCJHZXRQb3NpdGlvbiIsIkdldEFuZ2xlIiwiR2V0V29ybGRDZW50ZXIiLCJtX2xpbmVhclZlbG9jaXR5IiwibV9hbmd1bGFyVmVsb2NpdHkiLCJib2RpZXNTdGF0ZSIsImdldFN0YXRlIiwiZW50aXR5IiwiYm9keUVudGl0aWVzIiwiYWRkQm9keSIsInJlYWR5IiwidmVjIiwidmVjcyIsImJvZHlEZWYiLCJmaXhEZWYiLCJmaWx0ZXIiLCJ0eXBlIiwiYjJfc3RhdGljQm9keSIsImIyX2R5bmFtaWNCb2R5IiwidXNlckRhdGEiLCJDcmVhdGVCb2R5Iiwic2hhcGUiLCJDcmVhdGVGaXh0dXJlIiwiU2V0IiwiU2V0QXNBcnJheSIsInBvbHlzIiwiU2V0QXNCb3giLCJoYWxmV2lkdGgiLCJoYWxmSGVpZ2h0IiwiYm9keUlkIiwiU2V0UG9zaXRpb24iLCJzZXRBbmdsZSIsIlNldExpbmVhclZlbG9jaXR5IiwidmVsb2NpdHkiLCJTZXRBbmd1bGFyVmVsb2NpdHkiLCJwb3dlciIsIkFwcGx5SW1wdWxzZSIsIkFwcGx5Rm9yY2UiLCJTZXRBbmdsZSIsIkFwcGx5VG9ycXVlIiwidmVjdG9yIiwiU2V0R3Jhdml0eSIsIkRlc3Ryb3lGaXh0dXJlIiwiRGVzdHJveUJvZHkiLCJTZXRBd2FrZSIsImxpc3RlbmVyIiwiYjJDb250YWN0TGlzdGVuZXIiLCJiZWdpbkNvbnRhY3QiLCJCZWdpbkNvbnRhY3QiLCJjb250YWN0IiwibV9maXh0dXJlQSIsIm1fYm9keSIsIm1fdXNlckRhdGEiLCJtX2ZpeHR1cmVCIiwiZW5kQ29udGFjdCIsIkVuZENvbnRhY3QiLCJwcmVTb2x2ZSIsIlByZVNvbHZlIiwib2xkTWFuaWZvbGQiLCJwb3N0U29sdmUiLCJQb3N0U29sdmUiLCJpbXB1bHNlIiwiU2V0Q29udGFjdExpc3RlbmVyIiwiam9pbnRJZCIsIkRlc3Ryb3lKb2ludCIsImpvaW50Iiwic2NhbGVKb2ludExvY2F0aW9uIiwiYjJKb2ludCIsImNyZWF0ZUIySm9pbnQiLCJ6b25lIiwiaGlkZGVuIiwid2FsbCIsImJhY2tJbWciLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImV4cG9ydE5hbWUiLCJWRU5ET1JfUFJFRklYRVMiLCJURVNUX0VMRU1FTlQiLCJUWVBFX0ZVTkNUSU9OIiwic2V0VGltZW91dENvbnRleHQiLCJmbiIsInRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYmluZEZuIiwiaW52b2tlQXJyYXlBcmciLCJhcmciLCJlYWNoIiwib2JqIiwiaXRlcmF0b3IiLCJmb3JFYWNoIiwiZGVwcmVjYXRlIiwibWV0aG9kIiwibWVzc2FnZSIsImRlcHJlY2F0aW9uTWVzc2FnZSIsIkVycm9yIiwic3RhY2siLCJ3YXJuIiwiYXJndW1lbnRzIiwiVHlwZUVycm9yIiwib3V0cHV0IiwiaW5kZXgiLCJuZXh0S2V5IiwiZXh0ZW5kIiwiZGVzdCIsIm1lcmdlIiwiaW5oZXJpdCIsImNoaWxkIiwiYmFzZSIsInByb3BlcnRpZXMiLCJjaGlsZFAiLCJiYXNlUCIsImNvbnN0cnVjdG9yIiwiX3N1cGVyIiwiYm9vbE9yRm4iLCJ2YWwiLCJpZlVuZGVmaW5lZCIsInZhbDEiLCJ2YWwyIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJ0eXBlcyIsInNwbGl0U3RyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lcnMiLCJoYXNQYXJlbnQiLCJwYXJlbnQiLCJwYXJlbnROb2RlIiwiaW5TdHIiLCJzdHIiLCJmaW5kIiwiaW5kZXhPZiIsInRyaW0iLCJpbkFycmF5IiwiZmluZEJ5S2V5IiwidG9BcnJheSIsInNsaWNlIiwidW5pcXVlQXJyYXkiLCJzb3J0IiwicmVzdWx0cyIsInZhbHVlcyIsInByZWZpeGVkIiwicHJlZml4IiwicHJvcCIsImNhbWVsUHJvcCIsInRvVXBwZXJDYXNlIiwiX3VuaXF1ZUlkIiwiZ2V0V2luZG93Rm9yRWxlbWVudCIsImRvYyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsInBhcmVudFdpbmRvdyIsIlNVUFBPUlRfVE9VQ0giLCJTVVBQT1JUX1BPSU5URVJfRVZFTlRTIiwiU1VQUE9SVF9PTkxZX1RPVUNIIiwidGVzdCIsIkNPTVBVVEVfSU5URVJWQUwiLCJJTlBVVF9TVEFSVCIsIklOUFVUX01PVkUiLCJJTlBVVF9FTkQiLCJJTlBVVF9DQU5DRUwiLCJESVJFQ1RJT05fTk9ORSIsIkRJUkVDVElPTl9MRUZUIiwiRElSRUNUSU9OX1JJR0hUIiwiRElSRUNUSU9OX1VQIiwiRElSRUNUSU9OX0RPV04iLCJESVJFQ1RJT05fSE9SSVpPTlRBTCIsIkRJUkVDVElPTl9WRVJUSUNBTCIsIkRJUkVDVElPTl9BTEwiLCJQUk9QU19YWSIsIlBST1BTX0NMSUVOVF9YWSIsIklucHV0IiwibWFuYWdlciIsImNhbGxiYWNrIiwiaW5wdXRUYXJnZXQiLCJkb21IYW5kbGVyIiwiZXYiLCJlbmFibGUiLCJpbnB1dEhhbmRsZXIiLCJldmVudFR5cGUiLCJpbnB1dCIsInBvaW50ZXJzTGVuIiwicG9pbnRlcnMiLCJjaGFuZ2VkUG9pbnRlcnNMZW4iLCJjaGFuZ2VkUG9pbnRlcnMiLCJpc0ZpcnN0IiwiaXNGaW5hbCIsInNlc3Npb24iLCJwb2ludGVyc0xlbmd0aCIsImZpcnN0SW5wdXQiLCJzaW1wbGVDbG9uZUlucHV0RGF0YSIsImZpcnN0TXVsdGlwbGUiLCJvZmZzZXRDZW50ZXIiLCJnZXRDZW50ZXIiLCJ0aW1lU3RhbXAiLCJkZWx0YVRpbWUiLCJnZXRBbmdsZSIsImdldERpc3RhbmNlIiwib2Zmc2V0Iiwib2Zmc2V0RGVsdGEiLCJwcmV2RGVsdGEiLCJwcmV2SW5wdXQiLCJkZWx0YVgiLCJkZWx0YVkiLCJjb21wdXRlRGVsdGFYWSIsIm9mZnNldERpcmVjdGlvbiIsImdldERpcmVjdGlvbiIsIm92ZXJhbGxWZWxvY2l0eSIsImdldFZlbG9jaXR5Iiwib3ZlcmFsbFZlbG9jaXR5WCIsIm92ZXJhbGxWZWxvY2l0eVkiLCJlbmQiLCJyb3RhdGlvbiIsImdldFJvdGF0aW9uIiwibWF4UG9pbnRlcnMiLCJ2ZWxvY2l0eVgiLCJ2ZWxvY2l0eVkiLCJkaXJlY3Rpb24iLCJsYXN0IiwibGFzdEludGVydmFsIiwiY29tcHV0ZUludGVydmFsSW5wdXREYXRhIiwic3JjRXZlbnQiLCJjb21wdXRlSW5wdXREYXRhIiwiZW1pdCIsInJlY29nbml6ZSIsInByb3BzIiwiYXRhbjIiLCJldkVsIiwiZXZUYXJnZXQiLCJldldpbiIsImRlc3Ryb3kiLCJNT1VTRV9JTlBVVF9NQVAiLCJNT1VTRV9FTEVNRU5UX0VWRU5UUyIsIk1PVVNFX1dJTkRPV19FVkVOVFMiLCJNb3VzZUlucHV0IiwicHJlc3NlZCIsImJ1dHRvbiIsIndoaWNoIiwicG9pbnRlclR5cGUiLCJQT0lOVEVSX0lOUFVUX01BUCIsInBvaW50ZXJkb3duIiwicG9pbnRlcm1vdmUiLCJwb2ludGVydXAiLCJwb2ludGVyY2FuY2VsIiwicG9pbnRlcm91dCIsIklFMTBfUE9JTlRFUl9UWVBFX0VOVU0iLCIyIiwiMyIsIjQiLCI1IiwiUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyIsIlBPSU5URVJfV0lORE9XX0VWRU5UUyIsIlBvaW50ZXJFdmVudElucHV0Iiwic3RvcmUiLCJwb2ludGVyRXZlbnRzIiwiTVNQb2ludGVyRXZlbnQiLCJQb2ludGVyRXZlbnQiLCJyZW1vdmVQb2ludGVyIiwiZXZlbnRUeXBlTm9ybWFsaXplZCIsInRvTG93ZXJDYXNlIiwiaXNUb3VjaCIsInN0b3JlSW5kZXgiLCJwb2ludGVySWQiLCJzcGxpY2UiLCJTSU5HTEVfVE9VQ0hfSU5QVVRfTUFQIiwidG91Y2hjYW5jZWwiLCJTSU5HTEVfVE9VQ0hfVEFSR0VUX0VWRU5UUyIsIlNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTIiwiU2luZ2xlVG91Y2hJbnB1dCIsInN0YXJ0ZWQiLCJhbGwiLCJjaGFuZ2VkIiwiY2hhbmdlZFRvdWNoZXMiLCJjb25jYXQiLCJUT1VDSF9JTlBVVF9NQVAiLCJUT1VDSF9UQVJHRVRfRVZFTlRTIiwiVG91Y2hJbnB1dCIsInRhcmdldElkcyIsImFsbFRvdWNoZXMiLCJpZGVudGlmaWVyIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUYXJnZXRUb3VjaGVzIiwidG91Y2giLCJERURVUF9USU1FT1VUIiwiREVEVVBfRElTVEFOQ0UiLCJUb3VjaE1vdXNlSW5wdXQiLCJtb3VzZSIsInByaW1hcnlUb3VjaCIsImxhc3RUb3VjaGVzIiwic2V0TGFzdFRvdWNoIiwiZXZlbnREYXRhIiwibGFzdFRvdWNoIiwibHRzIiwiaW5wdXRFdmVudCIsImlucHV0RGF0YSIsImlzTW91c2UiLCJzb3VyY2VDYXBhYmlsaXRpZXMiLCJmaXJlc1RvdWNoRXZlbnRzIiwiUFJFRklYRURfVE9VQ0hfQUNUSU9OIiwiTkFUSVZFX1RPVUNIX0FDVElPTiIsIlRPVUNIX0FDVElPTl9BVVRPIiwiVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTiIsIlRPVUNIX0FDVElPTl9OT05FIiwiVE9VQ0hfQUNUSU9OX1BBTl9YIiwiVE9VQ0hfQUNUSU9OX1BBTl9ZIiwiVE9VQ0hfQUNUSU9OX01BUCIsInRvdWNoTWFwIiwiY3NzU3VwcG9ydHMiLCJDU1MiLCJzdXBwb3J0cyIsImdldFRvdWNoQWN0aW9uUHJvcHMiLCJzZXQiLCJjb21wdXRlIiwiYWN0aW9ucyIsInJlY29nbml6ZXJzIiwicmVjb2duaXplciIsImdldFRvdWNoQWN0aW9uIiwiaGFzUGFuWCIsImhhc1BhblkiLCJjbGVhblRvdWNoQWN0aW9ucyIsInByZXZlbnREZWZhdWx0cyIsInByZXZlbnRlZCIsImhhc05vbmUiLCJpc1RhcFBvaW50ZXIiLCJpc1RhcE1vdmVtZW50IiwiaXNUYXBUb3VjaFRpbWUiLCJwcmV2ZW50U3JjIiwiU1RBVEVfUE9TU0lCTEUiLCJTVEFURV9CRUdBTiIsIlNUQVRFX0NIQU5HRUQiLCJTVEFURV9FTkRFRCIsIlNUQVRFX1JFQ09HTklaRUQiLCJTVEFURV9DQU5DRUxMRUQiLCJSZWNvZ25pemVyIiwiZGVmYXVsdHMiLCJzaW11bHRhbmVvdXMiLCJyZXF1aXJlRmFpbCIsInN0YXRlU3RyIiwiZGlyZWN0aW9uU3RyIiwiZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlciIsIm90aGVyUmVjb2duaXplciIsIkF0dHJSZWNvZ25pemVyIiwiUGFuUmVjb2duaXplciIsInBYIiwicFkiLCJQaW5jaFJlY29nbml6ZXIiLCJQcmVzc1JlY29nbml6ZXIiLCJfdGltZXIiLCJfaW5wdXQiLCJSb3RhdGVSZWNvZ25pemVyIiwiU3dpcGVSZWNvZ25pemVyIiwiVGFwUmVjb2duaXplciIsInBUaW1lIiwicENlbnRlciIsImNvdW50IiwicHJlc2V0IiwiTWFuYWdlciIsInJlY29nbml6ZVdpdGgiLCJkcm9wUmVjb2duaXplV2l0aCIsInJlcXVpcmVGYWlsdXJlIiwiZHJvcFJlcXVpcmVGYWlsdXJlIiwiaGFzUmVxdWlyZUZhaWx1cmVzIiwiY2FuUmVjb2duaXplV2l0aCIsImV2ZW50IiwiYWRkaXRpb25hbEV2ZW50IiwidHJ5RW1pdCIsImNhbkVtaXQiLCJpbnB1dERhdGFDbG9uZSIsInByb2Nlc3MiLCJhdHRyVGVzdCIsIm9wdGlvblBvaW50ZXJzIiwiaXNSZWNvZ25pemVkIiwiaXNWYWxpZCIsInRocmVzaG9sZCIsImRpcmVjdGlvblRlc3QiLCJoYXNNb3ZlZCIsImluT3V0IiwidGltZSIsInZhbGlkUG9pbnRlcnMiLCJ2YWxpZE1vdmVtZW50IiwidmFsaWRUaW1lIiwiY2xlYXJUaW1lb3V0IiwidGFwcyIsImludGVydmFsIiwicG9zVGhyZXNob2xkIiwidmFsaWRUb3VjaFRpbWUiLCJmYWlsVGltZW91dCIsInZhbGlkSW50ZXJ2YWwiLCJ2YWxpZE11bHRpVGFwIiwidGFwQ291bnQiLCJWRVJTSU9OIiwiZG9tRXZlbnRzIiwiaW5wdXRDbGFzcyIsImNzc1Byb3BzIiwidXNlclNlbGVjdCIsInRvdWNoU2VsZWN0IiwidG91Y2hDYWxsb3V0IiwiY29udGVudFpvb21pbmciLCJ1c2VyRHJhZyIsInRhcEhpZ2hsaWdodENvbG9yIiwiaGFuZGxlcnMiLCJvbGRDc3NQcm9wcyIsInRvZ2dsZUNzc1Byb3BzIiwiaXRlbSIsImFkZCIsInN0b3AiLCJmb3JjZSIsInN0b3BwZWQiLCJjdXJSZWNvZ25pemVyIiwiZXhpc3RpbmciLCJldmVudHMiLCJkYXRhIiwiZ2VzdHVyZUV2ZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0RXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwidHJpZ2dlckRvbUV2ZW50IiwiU1RBVEVfRkFJTEVEIiwiVGFwIiwiUGFuIiwiU3dpcGUiLCJQaW5jaCIsIlJvdGF0ZSIsIlByZXNzIiwidmVuZG9ycyIsImF2ZXJhZ2VQb2ludHMiLCJkZWdyZWVzVG9SYWRpYW5zIiwicmFkaWFuc1RvRGVncmVlcyIsImRlZ3JlZXNGcm9tQ2VudGVyIiwicmFkaWFuc0Zyb21DZW50ZXIiLCJyb3RhdGVEZWdyZWVzQXJvdW5kQ2VudGVyIiwicm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlciIsIkVBU1QiLCJTVEFURV9JRExFIiwid2Fsa2luZ0FuaW1zIiwiZHlpbmdBbmltcyIsImlkbGVBbmltcyIsIlNUQVRFX0RZSU5HIiwiTk9SVEgiLCJOT1JUSEVBU1QiLCJOT1JUSFdFU1QiLCJTT1VUSCIsIlNPVVRIRUFTVCIsIlNPVVRIV0VTVCIsIldFU1QiLCJTVEFURV9XQUxLSU5HIiwiYW5pbXMiLCJDaXJjbGUiLCJNdWx0aVBvbHlnb24iLCJQb2x5Z29uIiwiUmVjdGFuZ2xlIiwic3VwIiwiRGlzdGFuY2UiLCJQcmlzbWF0aWMiLCJSZXZvbHV0ZSIsIkpvaW50IiwiQjJEaXN0YW5jZUpvaW50RGVmIiwiSm9pbnRzIiwiYjJEaXN0YW5jZUpvaW50RGVmIiwiYm9keVBvaW50MiIsImJveCIsImJvZHkxIiwiYm9keTIiLCJ2ZWMxIiwidmVjMiIsIkluaXRpYWxpemUiLCJDcmVhdGVKb2ludCIsIkIyUHJpc21hdGljSm9pbnREZWYiLCJiMlByaXNtYXRpY0pvaW50RGVmIiwiYXhpc1NjYWxlIiwiYXhpcyIsIkIyUmV2b2x1dGVKb2ludERlZiIsImIyUmV2b2x1dGVKb2ludERlZiIsImlkQSIsImlkQiIsIm5vcm1hbEltcHVsc2VzIiwiYm94VXBkYXRpbmciLCJib3hPcHRpb25zIiwidXBkYXRlRXh0ZXJuYWxTdGF0ZSIsInJlbW92ZUJvZHkiLCJhZGRKb2ludCIsInJlbW92ZUpvaW50Iiwic3JjX2RyYXciLCJmdWxsVyIsImZ1bGxIIiwiaGV4U2lkZSIsInNpZGVXIiwic2ludDEiLCJhbmcxIiwic2ludDIiLCJhbmcyIiwibWVhc3VyZW1lbnRzIiwiY2xlYXJSZWN0IiwicGxheWVycyIsImNvbG9yIiwiZmFjZSIsImRlYWQiLCJwYWRkbGVzIiwiayIsImJyaWNrcyIsInNyY19icmlja3MiLCJCcmlja19CcmljayIsIlBvbHlnb25fZGVmYXVsdCIsImxpbmVKb2luIiwiZ3JhZGllbnQiLCJjcmVhdGVMaW5lYXJHcmFkaWVudCIsInByZXkiLCJhZGRDb2xvclN0b3AiLCJwcmV4IiwicHJlQW5nbGUiLCJGYWNlX0ZhY2UiLCJDaXJjbGVfZGVmYXVsdCIsInNjYWxlZFgiLCJzY2FsZWRZIiwibGVmdEV5ZSIsInJpZ2h0RXllIiwicmFkc0wiLCJyYWRpYW5zRnJvbUNlbnRlcl9kZWZhdWx0IiwiYmFsbCIsInJhZHNSIiwibElyaXMiLCJyb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyX2RlZmF1bHQiLCJySXJpcyIsInNwZWVkIiwiaGFuZGxlRGlyZWN0aW9uIiwiZ2FtZSIsImxlZnRLZXkiLCJyaWdodEtleSIsInBsYXllcklkIiwibFByZXNzZWQiLCJzcmNfaGFuZGxlSW5wdXQiLCJpbSIsImtleXNfZGVmYXVsdCIsImFwcGx5SW1wdWxzZURlZ3JlZXMiLCJhcHBseVRvcnF1ZSIsImdhbWVfcmFkaWFuc0Zyb21DZW50ZXIiLCJnYW1lX3NjYWxlUG9pbnRzIiwiZ2FtZV9yb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyIiwicmFuZG9tQW5nbGVTcHJlYWQiLCJhc2luIiwiYWRkQXJyb3dLZXlBY3Rpb25zIiwidXBkYXRlQm94IiwiZXQiLCJlbnQiLCJicmljayIsImtpbmciLCJwYWQiLCJwYWRkbGUiLCJhbmNob3IiLCJhcHBseUZvcmNlIiwiaWR4IiwibWF4IiwibmV3UGFkZGxlUHQiLCJwYWRkbGVPcHMiLCJvcHB0IiwiZmlyc3QiLCJiYWxsUHJvcHMiLCJwdFJhZGl1cyIsInRhaWxEaXNydXB0aW9uIiwidGFpbERpc3QiLCJyYWRzIiwiYm94RGF0YV9kZWZhdWx0IiwicGN0IiwiYW5ncyIsImNwdCIsImNvbG9yc19kZWZhdWx0Iiwib3JpZ2luIiwicHB0IiwibmV3RmFjZVB0IiwiY2lyIiwiY0pvaW50IiwicmIiLCJqZHgiLCJvcHMiLCJydW4iLCJhcHBseUZvcmNlRGVncmVlcyJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsRUFBQSxHQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLEdBQUEsQ0FDQUcsRUFBQUgsRUFDQUksR0FBQSxFQUNBSCxRQUFBLElBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEVBQUEsQ0FBMENLLFlBQUEsRUFBQUMsSUFBQUwsS0FLMUNaLEVBQUFrQixFQUFBLFNBQUFoQixHQUNBLG9CQUFBaUIsZUFBQUMsYUFDQU4sT0FBQUMsZUFBQWIsRUFBQWlCLE9BQUFDLFlBQUEsQ0FBd0RDLE1BQUEsV0FFeERQLE9BQUFDLGVBQUFiLEVBQUEsY0FBaURtQixPQUFBLEtBUWpEckIsRUFBQXNCLEVBQUEsU0FBQUQsRUFBQUUsR0FFQSxHQURBLEVBQUFBLElBQUFGLEVBQUFyQixFQUFBcUIsSUFDQSxFQUFBRSxFQUFBLE9BQUFGLEVBQ0EsS0FBQUUsR0FBQSxpQkFBQUYsUUFBQUcsV0FBQSxPQUFBSCxFQUNBLElBQUFJLEVBQUFYLE9BQUFZLE9BQUEsTUFHQSxHQUZB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S0FBQSxHQUNBQyxLQUFBLEdBQ0FDLEtBQUEsR0FDQUMsS0FBQSxHQUNBQyxLQUFBLEdBQ0FDLEtBQUEsR0FDQUMsS0FBQSxHQUNBQyxLQUFBLEdBQ0FDLEtBQUEsR0FDQUMsS0FBQSxHQUNBQyxVQUFBLEdBQ0FDLE9BQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLGFBQUEsR0FDQUMsUUFBQSxHQUNBQyxRQUFBLEdBQ0FDLFFBQUEsR0FDQUMsUUFBQSxHQUNBQyxRQUFBLElBQ0FDLFFBQUEsSUFDQUMsUUFBQSxJQUNBQyxRQUFBLElBQ0FDLFFBQUEsSUFDQUMsUUFBQSxJQUNBQyxTQUFBLElBQ0FDLElBQUEsSUFDQUMsVUFBQSxJQUNBQyxTQUFBLElBQ0FDLFFBQUEsSUFDQUMsT0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxTQUFBLElBQ0FDLFlBQUEsSUFDQUMsUUFBQSxJQUNB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RUFBQWdoQyxFQUFBLEdBQUEvZ0MsR0FBQSxHQUVBK2xDLEVBQUFoOEIsT0FBQSxDQUNBLENBQU9qSyxFQUFBaW1DLEVBQUE5aEIsVUFBQWxrQixHQUFBZ21DLEVBQUE3aEIsWUFDUCxDQUFPcGtCLEVBQUFpbUMsRUFBQTloQixVQUFBbGtCLEVBQUFnbUMsRUFBQTdoQixZQUNQLENBQU9wa0IsR0FBQWltQyxFQUFBOWhCLFVBQUFsa0IsRUFBQWdtQyxFQUFBN2hCLFlBQ1AsQ0FBT3BrQixHQUFBaW1DLEVBQUE5aEIsVUFBQWxrQixHQUFBZ21DLEVBQUE3aEIsYUFHUDZoQixFQUFBaDhCLE9BQUFnOEIsRUFBQWg4QixPQUFBRyxJQUFBMDZCLEdBQ2FqQixFQUF5QixDQUFFN2pDLEVBQUEsRUFBQUMsRUFBQSxHQUFXNmtDLEVBQUFqbEMsRUFBQVMsUUFHbkQybEMsRUFBQWpFLEtBQUFpRSxFQUFBam1DLEVBQ0FpbUMsRUFBQW5FLEtBQUFtRSxFQUFBaG1DLEVBRUEsTUFBQXlYLEVBQUEsSUFBa0IrcEIsRUFBS3dFLEdBQ3ZCaEQsRUFBQWhnQixRQUFBdkwsT0FNQXVyQixFQUFBbEMsYUFBQSxDQUFxQlIsTUFwVnJCLEtBb1ZxQkMsTUFuVnJCLEtBbVZxQkMsUUFsVnJCLGdCQWtWcUJDLFFBQUFDLE1BaFZyQixrQkFnVnFCQyxPQUFBQyxNQTlVckJILGtCQThVcUJJLFFBQ3JCbUMsRUFBQWhDLFVBR0ExckIsUUFBQUMsSUFBQXl0QixHQUNBNTFCLE9BQUE0MUIsT0FHQUEsRUFBQWlELE1BQ0FqRCxFQUFBakUsSUFBQW1ILGtCQUFBLFdBQUFobUMsS0FBQW1LLFNBcldBIiwiZmlsZSI6ImhleG91dC5idW5kbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gNDgpO1xuIiwiXG5mdW5jdGlvbiByYWRpYW5zRnJvbUNlbnRlcihjZW50ZXIgPSB7eDogMC4wLCB5OiAwLjB9LCBwdCl7XG5cbiAgLy9zYW1lIHBvaW50XG4gIGlmKChjZW50ZXIueCA9PT0gcHQueCkgJiYgKGNlbnRlci55ID09PSBwdC55KSl7XG4gICAgcmV0dXJuIDA7XG4gIH1lbHNlIGlmKGNlbnRlci54ID09PSBwdC54KXtcbiAgICBpZihjZW50ZXIueSA+IHB0Lnkpe1xuICAgICAgcmV0dXJuIDA7XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gTWF0aC5QSTtcbiAgICB9XG4gIH1lbHNlIGlmKGNlbnRlci55ID09PSBwdC55KXtcbiAgICBpZihjZW50ZXIueCA+IHB0Lngpe1xuICAgICAgcmV0dXJuIDEuNSAqIE1hdGguUEk7XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gTWF0aC5QSSAvIDI7XG4gICAgfVxuICB9ZWxzZSBpZigoY2VudGVyLnggPCBwdC54KSAmJiAoY2VudGVyLnkgPiBwdC55KSl7XG4gICAgLy9xdWFkcmFudCAxXG4gICAgLy9jb25zb2xlLmxvZygncXVhZDEnLGNlbnRlci54LGNlbnRlci55LHB0LngscHQueSwnbycscHQueCAtIGNlbnRlci54LCdhJyxwdC55IC0gY2VudGVyLnkpO1xuICAgIHJldHVybiBNYXRoLmF0YW4oKHB0LnggLSBjZW50ZXIueCkvKGNlbnRlci55IC0gcHQueSkpO1xuICB9XG4gIGVsc2UgaWYoKGNlbnRlci54IDwgcHQueCkgJiYgKGNlbnRlci55IDwgcHQueSkpe1xuICAgIC8vcXVhZHJhbnQgMlxuICAgIC8vY29uc29sZS5sb2coJ3F1YWQyJyxjZW50ZXIueCxjZW50ZXIueSxwdC54LHB0LnkpO1xuICAgIHJldHVybiBNYXRoLlBJIC8gMiArIE1hdGguYXRhbigocHQueSAtIGNlbnRlci55KS8ocHQueCAtIGNlbnRlci54KSk7XG4gIH1cbiAgZWxzZSBpZigoY2VudGVyLnggPiBwdC54KSAmJiAoY2VudGVyLnkgPCBwdC55KSl7XG4gICAgLy9xdWFkcmFudCAzXG4gICAgLy9jb25zb2xlLmxvZygncXVhZDMnLGNlbnRlci54LGNlbnRlci55LHB0LngscHQueSk7XG4gICAgcmV0dXJuIE1hdGguUEkgKyBNYXRoLmF0YW4oKGNlbnRlci54IC0gcHQueCkvKHB0LnkgLSBjZW50ZXIueSkpO1xuICB9XG4gIGVsc2V7XG4gICAgLy9xdWFkcmFudCA0XG4gICAgLy9jb25zb2xlLmxvZygncXVhZDQnLGNlbnRlci54LGNlbnRlci55LHB0LngscHQueSk7XG4gICAgcmV0dXJuIDEuNSAqIE1hdGguUEkgKyBNYXRoLmF0YW4oKGNlbnRlci55IC0gcHQueSkvKGNlbnRlci54IC0gcHQueCkpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByYWRpYW5zRnJvbUNlbnRlcjtcbiIsIlxuZnVuY3Rpb24gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcihjZW50ZXIgPSB7eDogMC4wLCB5OiAwLjB9LCBwdCwgYW5nbGUpe1xuICBjb25zdCBzID0gTWF0aC5zaW4oYW5nbGUpO1xuICBjb25zdCBjID0gTWF0aC5jb3MoYW5nbGUpO1xuICBjb25zdCBuZXdQdCA9IHt9O1xuXG4gIC8vIHRyYW5zbGF0ZSBwb2ludCBiYWNrIHRvIG9yaWdpbjpcbiAgbmV3UHQueCA9IHB0LnggLSBjZW50ZXIueDtcbiAgbmV3UHQueSA9IHB0LnkgLSBjZW50ZXIueTtcblxuICAvLyByb3RhdGUgcG9pbnRcbiAgY29uc3QgeG5ldyA9IG5ld1B0LnggKiBjIC0gbmV3UHQueSAqIHM7XG4gIGNvbnN0IHluZXcgPSBuZXdQdC54ICogcyArIG5ld1B0LnkgKiBjO1xuXG4gIC8vIHRyYW5zbGF0ZSBwb2ludCBiYWNrOlxuICBuZXdQdC54ID0geG5ldyArIGNlbnRlci54O1xuICBuZXdQdC55ID0geW5ldyArIGNlbnRlci55O1xuICByZXR1cm4gbmV3UHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcjtcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xuICBDQU5DRUw6IDMsXG4gIEhFTFA6IDYsXG4gIEJBQ0tfU1BBQ0U6IDgsXG4gIFRBQjogOSxcbiAgQ0xFQVI6IDEyLFxuICBSRVRVUk46IDEzLFxuICBFTlRFUjogMTQsXG4gIFNISUZUOiAxNixcbiAgQ09OVFJPTDogMTcsXG4gIEFMVDogMTgsXG4gIFBBVVNFOiAxOSxcbiAgQ0FQU19MT0NLOiAyMCxcbiAgRVNDQVBFOiAyNyxcbiAgU1BBQ0U6IDMyLFxuICBQQUdFX1VQOiAzMyxcbiAgUEFHRV9ET1dOOiAzNCxcbiAgRU5EOiAzNSxcbiAgSE9NRTogMzYsXG4gIExFRlQ6IDM3LFxuICBVUDogMzgsXG4gIFJJR0hUOiAzOSxcbiAgRE9XTjogNDAsXG4gIFBSSU5UU0NSRUVOOiA0NCxcbiAgSU5TRVJUOiA0NSxcbiAgREVMRVRFOiA0NixcbiAgTlVNMDogNDgsXG4gIE5VTTE6IDQ5LFxuICBOVU0yOiA1MCxcbiAgTlVNMzogNTEsXG4gIE5VTTQ6IDUyLFxuICBOVU01OiA1MyxcbiAgTlVNNjogNTQsXG4gIE5VTTc6IDU1LFxuICBOVU04OiA1NixcbiAgTlVNOTogNTcsXG4gIFNFTUlDT0xPTjogNTksXG4gIEVRVUFMUzogNjEsXG4gIEE6IDY1LFxuICBCOiA2NixcbiAgQzogNjcsXG4gIEQ6IDY4LFxuICBFOiA2OSxcbiAgRjogNzAsXG4gIEc6IDcxLFxuICBIOiA3MixcbiAgSTogNzMsXG4gIEo6IDc0LFxuICBLOiA3NSxcbiAgTDogNzYsXG4gIE06IDc3LFxuICBOOiA3OCxcbiAgTzogNzksXG4gIFA6IDgwLFxuICBROiA4MSxcbiAgUjogODIsXG4gIFM6IDgzLFxuICBUOiA4NCxcbiAgVTogODUsXG4gIFY6IDg2LFxuICBXOiA4NyxcbiAgWDogODgsXG4gIFk6IDg5LFxuICBaOiA5MCxcbiAgQ09OVEVYVF9NRU5VOiA5MyxcbiAgTlVNUEFEMDogOTYsXG4gIE5VTVBBRDE6IDk3LFxuICBOVU1QQUQyOiA5OCxcbiAgTlVNUEFEMzogOTksXG4gIE5VTVBBRDQ6IDEwMCxcbiAgTlVNUEFENTogMTAxLFxuICBOVU1QQUQ2OiAxMDIsXG4gIE5VTVBBRDc6IDEwMyxcbiAgTlVNUEFEODogMTA0LFxuICBOVU1QQUQ5OiAxMDUsXG4gIE1VTFRJUExZOiAxMDYsXG4gIEFERDogMTA3LFxuICBTRVBBUkFUT1I6IDEwOCxcbiAgU1VCVFJBQ1Q6IDEwOSxcbiAgREVDSU1BTDogMTEwLFxuICBESVZJREU6IDExMSxcbiAgRjE6IDExMixcbiAgRjI6IDExMyxcbiAgRjM6IDExNCxcbiAgRjQ6IDExNSxcbiAgRjU6IDExNixcbiAgRjY6IDExNyxcbiAgRjc6IDExOCxcbiAgRjg6IDExOSxcbiAgRjk6IDEyMCxcbiAgRjEwOiAxMjEsXG4gIEYxMTogMTIyLFxuICBGMTI6IDEyMyxcbiAgRjEzOiAxMjQsXG4gIEYxNDogMTI1LFxuICBGMTU6IDEyNixcbiAgRjE2OiAxMjcsXG4gIEYxNzogMTI4LFxuICBGMTg6IDEyOSxcbiAgRjE5OiAxMzAsXG4gIEYyMDogMTMxLFxuICBGMjE6IDEzMixcbiAgRjIyOiAxMzMsXG4gIEYyMzogMTM0LFxuICBGMjQ6IDEzNSxcbiAgTlVNX0xPQ0s6IDE0NCxcbiAgU0NST0xMX0xPQ0s6IDE0NSxcbiAgVVBfRFBBRDogMTc1LFxuICBET1dOX0RQQUQ6IDE3NixcbiAgTEVGVF9EUEFEOiAxNzcsXG4gIFJJR0hUX0RQQUQ6IDE3OCxcbiAgQ09NTUE6IDE4OCxcbiAgUEVSSU9EOiAxOTAsXG4gIFNMQVNIOiAxOTEsXG4gIEJBQ0tfUVVPVEU6IDE5MixcbiAgT1BFTl9CUkFDS0VUOiAyMTksXG4gIEJBQ0tfU0xBU0g6IDIyMCxcbiAgQ0xPU0VfQlJBQ0tFVDogMjIxLFxuICBRVU9URTogMjIyLFxuICBNRVRBOiAyMjRcbn07XG4iLCIvKipcbiAqIFRoaXMgcmVwcmVzZW50cyBhIENpcmNsZSBib2R5IGFuZCBzaGFwZSBpbiBhIEJveDJkIHdvcmxkXG4gKiBAbmFtZSBDaXJjbGVcbiAqIEBjb25zdHJ1Y3RvciBDaXJjbGVcbiAqIEBleHRlbmRzIEVudGl0eVxuICovXG5cbmNvbnN0IEVudGl0eSA9IHJlcXVpcmUoJy4vRW50aXR5Jyk7XG5jb25zdCBkaXN0YW5jZSA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL2Rpc3RhbmNlJyk7XG5cbmNsYXNzIENpcmNsZSBleHRlbmRzIEVudGl0eXtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSByYWRpdXMgb2YgdGhpcyBjaXJjbGUuXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgQ2lyY2xlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5yYWRpdXMgPSAxO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgQ2lyY2xlIGF0IGEgZ2l2ZW4gc2NhbGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBDaXJjbGUjXG4gICAqIEBwYXJhbSB7Q29udGV4dH0gY3R4IFRoZSBkcmF3aW5nIGNvbnRleHRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIFRoZSBzY2FsZSBhdCB3aGljaCB0byBkcmF3XG4gICAqL1xuICBkcmF3KGN0eCwgc2NhbGUpe1xuICAgIHNjYWxlID0gc2NhbGUgfHwgdGhpcy5zY2FsZSB8fCAxO1xuICAgIHZhciBvZ0xpbmVXaWR0aCA9IGN0eC5saW5lV2lkdGg7XG4gICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoO1xuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmZpbGxTdHlsZTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZVN0eWxlO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSwgdGhpcy5yYWRpdXMgKiBzY2FsZSwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguZmlsbCgpO1xuICAgIGN0eC5zdHJva2UoKTtcblxuICAgIGlmKCF0aGlzLnN0YXRpY0JvZHkpe1xuICAgICAgY3R4LnNhdmUoKTtcbiAgICAgIGN0eC50cmFuc2xhdGUodGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlKTtcbiAgICAgIGN0eC5yb3RhdGUodGhpcy5hbmdsZSk7XG4gICAgICBjdHgudHJhbnNsYXRlKC0odGhpcy54KSAqIHNjYWxlLCAtKHRoaXMueSkgKiBzY2FsZSk7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSk7XG4gICAgICBjdHgubGluZVRvKHRoaXMueCAqIHNjYWxlLCAodGhpcy55ICogc2NhbGUpIC0gKHRoaXMucmFkaXVzICogc2NhbGUpKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIGN0eC5zdHJva2UoKTtcbiAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgfVxuICAgIGN0eC5saW5lV2lkdGggPSBvZ0xpbmVXaWR0aDtcblxuICAgIHN1cGVyLmRyYXcoY3R4LCBzY2FsZSk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyBzaGFwZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIENpcmNsZSNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIFRoZSBhbW91bnQgdGhlIHNoYXBlIHNob3VsZCBzY2FsZVxuICAgKi9cbiAgc2NhbGVTaGFwZShzY2FsZSl7XG4gICAgdGhpcy5yYWRpdXMgPSB0aGlzLnJhZGl1cyAqIHNjYWxlO1xuICAgIHN1cGVyLnNjYWxlU2hhcGUoc2NhbGUpO1xuICB9XG5cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gcG9pbnQgaXMgY29udGFpbmVkIHdpdGhpbiB0aGlzIENpcmNsZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBDaXJjbGUjXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCBBbiBvYmplY3Qgd2l0aCB4IGFuZCB5IHZhbHVlcy5cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBwb2ludCBpcyBpbiBzaGFwZSBlbHNlIGZhbHNlXG4gICAqL1xuICBwb2ludEluU2hhcGUocG9pbnQpe1xuICAgIHJldHVybiAoZGlzdGFuY2UocG9pbnQsIHRoaXMpIDw9IHRoaXMucmFkaXVzKTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ2lyY2xlO1xuIiwiXG5mdW5jdGlvbiBzY2FsZVBvaW50cyhwb2ludHMsIHNjYWxlKXtcbiAgaWYoQXJyYXkuaXNBcnJheShwb2ludHMpKXtcbiAgICBwb2ludHMgPSBwb2ludHMubWFwKGZ1bmN0aW9uKHBvaW50KXtcbiAgICAgIHJldHVybiBzY2FsZVBvaW50cyhwb2ludCwgc2NhbGUpO1xuICAgIH0pO1xuICB9IGVsc2UgaWYodHlwZW9mIHNjYWxlID09PSAnb2JqZWN0Jyl7XG4gICAgcG9pbnRzID0ge1xuICAgICAgeDogcG9pbnRzLnggKiBzY2FsZS54LFxuICAgICAgeTogcG9pbnRzLnkgKiBzY2FsZS55XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBwb2ludHMgPSB7XG4gICAgICB4OiBwb2ludHMueCAqIHNjYWxlLFxuICAgICAgeTogcG9pbnRzLnkgKiBzY2FsZVxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHBvaW50cztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzY2FsZVBvaW50cztcbiIsImZ1bmN0aW9uIGdlbklkKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKSArICdfJyArIERhdGUubm93KCk7XG59XG5cbi8qKlxuICogVGhpcyByZXByZXNlbnRzIGEgYm9keSBhbmQgc2hhcGUgaW4gYSBCb3gyZCB3b3JsZCB1c2luZyBwb3NpdGlvbnMgYW5kIHNpemVzIHJlbGF0aXZlIHRvIHRoZSBCb3gyZCB3b3JsZCBpbnN0YW5jZS5cbiAqIEBuYW1lIEVudGl0eVxuICogQGNvbnN0cnVjdG9yIEVudGl0eVxuICovXG5cbmNsYXNzIEVudGl0eSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaWQgaW4gd2hpY2ggdG8gcmVmZXJlbmNlIHRoaXMgb2JqZWN0LiBBbHNvIHRoZSB1c2VyRGF0YSBwcm9wZXJ0eSBmb3IgYm94MmQgYm9kaWVzLlxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmlkID0gb3B0aW9ucy5pZCB8fCBnZW5JZCgpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHggY29tcG9uZW50IG9mIHRoZSBlbnRpdHkncyBsb2NhdGlvblxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLnggPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHkgY29tcG9uZW50IG9mIHRoZSBlbnRpdHkncyBsb2NhdGlvblxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLnkgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNjYWxlIGluIHBpeGVscyBwZXIgbWV0ZXIgaW4gd2hpY2ggdG8gcmVwcmVzZW50IHRoaXMgRW50aXR5IGluIHRoZSBib3gyZCB3b3JsZFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLnNjYWxlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IGFuZ2xlIHRoYXQgdGhpcyBlbnRpdHkgaXMgcm90YXRlZCBhdFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmFuZ2xlID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB4IGFuZCB5IGxvY2F0aW9ucyBvZiB3aGF0IGJveDJkIGNvbnNpZGVycyB0aGUgZW5pdHkncyBjZW50ZXIgb2YgbWFzc1xuICAgICAqIEB0eXBlIHtQb2ludH1cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgIHRoaXMuY2VudGVyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gZHJhdyB0aGUgY2VudGVyIHBvaW50IG9mIGFuIGVudGl0eVxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgICB0aGlzLmRyYXdDZW50ZXIgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBlcmNlbnRhZ2Ugb2YgZm9yY2UgaW4gd2hpY2ggdGhlIGVudGl0eSB3aWxsIGJvdW5jZSBiYWNrIGZyb20gYW5vdGhlciBiYXNlZCBvbiBpdHMgZm9yY2UgcHJlLWNvbGxpc2lvblxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLnJlc3RpdHV0aW9uID0gMC4zO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR3by1kaW1lbnNpb25hbCBkZW5zaXR5IG9mIHRoZSBlbnRpdHkuICBNYXNzIC8gYXJlYS5cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5kZW5zaXR5ID0gMS4wO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFtb3VudCBvZiBmcmljdGlvbiBvbiB0aCBzdXJmYWNlIG9mIHRoaXMgZW50aXR5XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgIHRoaXMuZnJpY3Rpb24gPSAwLjk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYW1vdW50IG9mIGxpbmVhciB2ZWxvY2l0eSB0aGUgZW50aXR5IHNob3VsZCBsb3NlIG92ZXIgdGltZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmxpbmVhckRhbXBpbmcgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHZlbG9jaXR5IGluIG1ldGVycy9zZWNvbmQgZ2l2ZW4gdG8gdGhpcyBlbnRpdHkgYnkgYm94MmQgY2FsY3VsYXRpb25zXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgIHRoaXMubGluZWFyVmVsb2NpdHkgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFuZ3VsYXIgdmVsb2NpdHkgaW4gcmFkaWFucy9zZWNvbmQgZ2l2ZW4gdG8gdGhpcyBlbnRpdHkgYnkgYm94MmQgY2FsY3VsYXRpb25zXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgIHRoaXMuYW5ndWxhclZlbG9jaXR5ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBvZiBhbW91bnQgb2YgYW5ndWxhciB2ZWxvY2l0eSBhbiBlbnRpdHkgc2hvdWxkIGxvc2Ugb3ZlciB0aW1lXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgIHRoaXMuYW5ndWxhckRhbXBpbmcgPSAwO1xuXG4gICAgLyoqXG4gICAgICogSWYgdHJ1ZSwgdGhlIGVudGl0eSBkb2VzIGNoYW5nZSBpdHMgcG9zaXRpb24gYW5kIGFuZ2xlIGFzIHRoZSByZXN1bHQgb2YgYm94MmQgY2FsY3VsYXRpb25zXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLnN0YXRpY0JvZHkgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBmaWxsU3R5bGUgdG8gdXNlIGZvciB0aGUgZW50aXR5J3MgZGVmYXVsdCByZW5kZXJlclxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmZpbGxTdHlsZSA9ICdyZ2JhKDEyOCwxMjgsMTI4LDAuNSknO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0cm9rZVN0eWxlIHRvIHVzZSBmb3IgdGhlIGVudGl0eSdzIGRlZmF1bHQgcmVuZGVyZXJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5zdHJva2VTdHlsZSA9ICcjMDAwJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBsaW5lIHdpZHRoIHRvIHVzZSBmb3IgdGhlIGVudGl0eSdzIGRlZmF1bHQgcmVuZGVyZXJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5saW5lV2lkdGggPSAxO1xuXG4gICAgLyoqXG4gICAgICogVGhlIDE2IGJpdCBpbnRlZ2VyIHVzZWQgaW4gZGV0ZXJtaW5pbmcgd2hpY2ggb3RoZXIgdHlwZXMgb2YgZW50aXRpZXMgdGhpcyBib2R5IHdpbGwgY29sbGlkZSB3aXRoLlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLm1hc2tCaXRzID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSAxNiBiaXQgaW50ZWdlciB1c2VkIGluIGRlc2NyaWJpbmcgdGhlIHR5cGUgdGhhdCB0aGlzIGVuaXRpdHkgaXMgZm9yIGNvbGxpc2lvbnMuXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgIHRoaXMuY2F0ZWdvcnlCaXRzID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSAxNiBiaXQgaW50ZWdlciB1c2VkIGluIG92ZXJpZGluZyBtYXNrQml0cyBhbmQgY2F0ZWdvcnlCaXRzIGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uLlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmdyb3VwSW5kZXggPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhpcyBlbnRpdHkgd2l0aCB0aGUgc3RhdGUgcGFzc2VkIGluXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgKiBAcGFyYW0ge09iamVjdH0gc3RhdGUgU3RhdGUgdG8gbWVyZ2Ugd2l0aCB0aGlzIG9iamVjdFxuICAgKi9cbiAgdXBkYXRlKHN0YXRlKXtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIHN0YXRlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgRW50aXR5IGF0IGEgZ2l2ZW4gc2NhbGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAqIEBwYXJhbSB7Q29udGV4dH0gY3R4IFRoZSBIVE1MNSAyZCBkcmF3aW5nIGNvbnRleHRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIFRoZSBzY2FsZSB0byBkcmF3IHRoZSBlbnRpdHkgYXRcbiAgICovXG4gIGRyYXcoY3R4LCBzY2FsZSl7XG4gICAgc2NhbGUgPSBzY2FsZSB8fCB0aGlzLnNjYWxlIHx8IDE7XG4gICAgdmFyIG9nTGluZVdpZHRoID0gY3R4LmxpbmVXaWR0aDtcbiAgICBjdHgubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGg7XG4gICAgLy8gYmxhY2sgY2lyY2xlIGluIGVudGl0eSdzIGxvY2F0aW9uXG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuc3Ryb2tlU3R5bGU7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmModGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlLCA0LCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKCk7XG5cbiAgICAvLyB5ZWxsb3cgY2lyY2xlIGluIGVudGl0eSdzIGdlb21ldHJpYyBjZW50ZXJcbiAgICBpZih0aGlzLmNlbnRlciAmJiB0aGlzLmRyYXdDZW50ZXIpe1xuICAgICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuY2VudGVyU3R5bGUgfHwgJ3llbGxvdyc7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKHRoaXMuY2VudGVyLnggKiBzY2FsZSwgdGhpcy5jZW50ZXIueSAqIHNjYWxlLCAyLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICBjdHguZmlsbCgpO1xuICAgIH1cblxuICAgIGN0eC5saW5lV2lkdGggPSBvZ0xpbmVXaWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZXMgdGhlIHBvc2l0aW9uIGFuZCBkaW1lbnNpb25zIG9mIHRoaXMgc2hhcGUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIHNjYWxlIHRvIG11bHRpcGx5IHRoZSBkaW1lbnRpb25zIGJ5XG4gICAqL1xuICBzY2FsZVNoYXBlKHNjYWxlKXtcbiAgICB0aGlzLnggPSB0aGlzLnggKiBzY2FsZTtcbiAgICB0aGlzLnkgPSB0aGlzLnkgKiBzY2FsZTtcbiAgICB0aGlzLmFscmVhZHlTY2FsZWQgPSB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRW50aXR5O1xuXG4iLCIvKipcbiAqIFRoZSBHYW1lQWN0aW9uIGhhbmRsZXMgRE9NIGV2ZW50cyBmb3IgdXNlIGluIGdhbWVzLlxuICogQG5hbWUgR2FtZUFjdGlvblxuICogQGNvbnN0cnVjdG9yIEdhbWVBY3Rpb25cbiAqL1xuXG4vKipcbiAqIEEgbWFwIG9mIHN0YXRpYyBjb25zdGFudHMgZm9yIGludGVybmFsIHVzZVxuICogQHR5cGUge09iamVjdH1cbiAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICogQHByb3BlcnR5IHtOdW1iZXJ9IE5PUk1BTCBOb3JtYWwgYmVoYXZpb3IuIFRoZSBpc1ByZXNzZWQoKSBtZXRob2QgcmV0dXJucyB0cnVlIGFzIGxvbmcgYXMgdGhlIGtleSBpcyBoZWxkIGRvd24uXG4gKiBAcHJvcGVydHkge051bWJlcn0gREVURUNUX0lOSVRBTF9QUkVTU19PTkxZIEluaXRpYWwgcHJlc3MgYmVoYXZpb3IuIFRoZSBpc1ByZXNzZWQoKSBtZXRob2QgcmV0dXJucyB0cnVlIG9ubHkgYWZ0ZXIgdGhlIGtleSBpcyBmaXJzdCBwcmVzc2VkLCBhbmQgbm90IGFnYWluIHVudGlsIHRoZSBrZXkgaXMgcmVsZWFzZWQgYW5kIHByZXNzZWQgYWdhaW4uXG4gKiBAcHJvcGVydHkge051bWJlcn0gU1RBVEVfUkVMRUFTRUQgVmFsdWUgZm9yIHJlbGVhc2VkIHN0YXRlXG4gKiBAcHJvcGVydHkge051bWJlcn0gU1RBVEVfUFJFU1NFRCBWYWx1ZSBmb3IgcHJlc3NlZCBzdGF0ZVxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFNUQVRFX1dBSVRJTkdfRk9SX1JFTEVBU0UgVmFsdWUgZm9yIHdhaXRpbmcgZm9yIHJlbGVhc2Ugc3RhdGVcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBTVEFURV9NT1ZFRCBWYWx1ZSBmb3IgbW92ZWQgc3RhdGVcbiAqL1xuY29uc3Qgc3RhdGljcyA9IHtcbiAgTk9STUFMOiAwLFxuICBERVRFQ1RfSU5JVEFMX1BSRVNTX09OTFk6IDEsXG4gIFNUQVRFX1JFTEVBU0VEOiAwLFxuICBTVEFURV9QUkVTU0VEOiAxLFxuICBTVEFURV9XQUlUSU5HX0ZPUl9SRUxFQVNFOiAyLFxuICBTVEFURV9NT1ZFRDogM1xufTtcblxuY2xhc3MgR2FtZUFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgLyoqXG4gICAgICogQSBuYW1lIHRvIHJlZmVyZW5jZSB0aGUgR2FtZUFjdGlvbiB3aXRoXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUFjdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBkZXRlY3Qgb25seSB0aGUgaW50aWFsIHByZXNzIG9mIHRoZSBnYW1lIGFjdGlvblxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEdhbWVBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmJlaGF2aW9yID0gMDtcblxuICAgIC8qKlxuICAgICAqIEhvdyBtYW55IHRpbWVzIHRoZSBHYW1lQWN0aW9uIGhhcyBiZWVuIHByZXNzZWRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5hbW91bnQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIEdhbWVBY3Rpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5zdGF0ZSA9IDA7XG5cbiAgICB0aGlzLnN0YXRpY3MgPSBzdGF0aWNzO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblxuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhpcyBHYW1lQWN0aW9uIHNvIHRoYXQgaXQgYXBwZWFycyBsaWtlIGl0IGhhc24ndCBiZWVuIHByZXNzZWQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUFjdGlvbiNcbiAgICovXG4gIHJlc2V0KCkge1xuICAgIHRoaXMuc3RhdGUgPSBzdGF0aWNzLlNUQVRFX1JFTEVBU0VEO1xuICAgIHRoaXMuYW1vdW50ID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUYXBzIHRoaXMgR2FtZUFjdGlvbi4gU2FtZSBhcyBjYWxsaW5nIHByZXNzKCkgZm9sbG93ZWQgYnkgcmVsZWFzZSgpLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVBY3Rpb24jXG4gICAqL1xuICB0YXAoKSB7XG4gICAgdGhpcy5wcmVzcygpO1xuICAgIHRoaXMucmVsZWFzZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25hbHMgdGhhdCB0aGUga2V5IHdhcyBwcmVzc2VkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVBY3Rpb24jXG4gICAqL1xuICBwcmVzcygpIHtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGljcy5TVEFURV9QUkVTU0VEO1xuICAgIGlmKHRoaXMuYmVoYXZpb3IgPT09IHN0YXRpY3MuREVURUNUX0lOSVRBTF9QUkVTU19PTkxZKXtcbiAgICAgIHRoaXMucHJlc3NBbXQoMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25hbHMgdGhhdCB0aGUga2V5IHdhcyBwcmVzc2VkIGEgc3BlY2lmaWVkIG51bWJlciBvZiB0aW1lcywgb3IgdGhhdCB0aGUgbW91c2UgbW92ZSBhIHNwZWNpZmllZCBkaXN0YW5jZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgKiBAcGFyYW0ge051bWJlcn0gYW1vdW50IHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSBpcyBwcmVzc2VkXG4gICAqL1xuICBwcmVzc0FtdChhbW91bnQpIHtcbiAgICBpZiAodGhpcy5zdGF0ZSAhPT0gc3RhdGljcy5TVEFURV9XQUlUSU5HX0ZPUl9SRUxFQVNFKSB7XG4gICAgICB0aGlzLmFtb3VudCArPSBhbW91bnQ7XG4gICAgICB0aGlzLnN0YXRlID0gc3RhdGljcy5TVEFURV9XQUlUSU5HX0ZPUl9SRUxFQVNFO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIHRoYXQgdGhlIGtleSB3YXMgcmVsZWFzZWRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgKi9cbiAgcmVsZWFzZSgpIHtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGljcy5TVEFURV9SRUxFQVNFRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGtleSB3YXMgcHJlc3NlZCBvciBub3Qgc2luY2UgbGFzdCBjaGVja2VkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVBY3Rpb24jXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIGtleSBpcyBwcmVzc2VkLCBlbHNlIGZhbHNlXG4gICAqL1xuICBpc1ByZXNzZWQoKSB7XG4gICAgaWYodGhpcy5zdGF0ZSA9PT0gc3RhdGljcy5TVEFURV9QUkVTU0VEKXtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZvciBrZXlzLCB0aGlzIGlzIHRoZSBudW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcHJlc3NlZCBzaW5jZSBpdCB3YXMgbGFzdCBjaGVja2VkLlxuICAgKiBGb3IgbW91c2UgbW92ZW1lbnQsIHRoaXMgaXMgdGhlIGRpc3RhbmNlIG1vdmVkLlxuICAgKlxuICAgKiBUaGlzIFJlc2V0cyB0aGUgYW1vdW50IHRvIHplcm8gYWZ0ZXIgYmVpbmcgY2hlY2tlZCFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IE51bWJlciBvZiB0aW1lcyB0aGUga2V5IHdhcyBwcmVzc2VkIG9yIGRpc3RhbmNlIG1vdXNlIHdhcyBtb3ZlZFxuICAgKi9cbiAgZ2V0QW1vdW50KCkge1xuICAgIHZhciByZXRWYWwgPSB0aGlzLmFtb3VudDtcbiAgICBpZiAocmV0VmFsICE9PSAwKSB7XG4gICAgICBpZiAodGhpcy5zdGF0ZSA9PT0gc3RhdGljcy5TVEFURV9SRUxFQVNFRCkge1xuICAgICAgICB0aGlzLmFtb3VudCA9IDA7XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuYmVoYXZpb3IgPT09IHN0YXRpY3MuREVURUNUX0lOSVRBTF9QUkVTU19PTkxZKSB7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0aWNzLlNUQVRFX1dBSVRJTkdfRk9SX1JFTEVBU0U7XG4gICAgICAgIHRoaXMuYW1vdW50ID0gMDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldFZhbDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEdhbWVBY3Rpb247XG4iLCIndXNlIHN0cmljdCc7XG5cbi8vIFVzaW5nIFJheS1DYXN0aW5nIGZvcm11bGEgYmFzZWQgb25cbi8vIGh0dHA6Ly93d3cuZWNzZS5ycGkuZWR1L0hvbWVwYWdlcy93cmYvUmVzZWFyY2gvU2hvcnRfTm90ZXMvcG5wb2x5Lmh0bWxcbi8vIGFuZCBodHRwczovL2dpdGh1Yi5jb20vc3Vic3RhY2svcG9pbnQtaW4tcG9seWdvbi9cbi8vIFJlLXdyaXR0ZW4gZm9yIG1vc3QgcmVhZGFiaWxpdHkgYW5kIGZvciB1c2Ugd2l0aCBwb2ludCBvYmplY3RzIGluc3RlYWQgb2YgYXJyYXlzXG5cbmZ1bmN0aW9uIHBvaW50SW5Qb2x5KHBvaW50LCBwb2x5Z29uKXtcbiAgaWYoIXBvaW50IHx8ICFwb2x5Z29uKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICB2YXIgcG9seSA9IHBvbHlnb24ucG9pbnRzIHx8IHBvbHlnb247XG5cbiAgdmFyIGluc2lkZVBvbHkgPSBmYWxzZTtcbiAgdmFyIGogPSBwb2x5Lmxlbmd0aCAtIDE7XG5cbiAgZm9yKHZhciBpID0gMDsgaSA8IHBvbHkubGVuZ3RoOyBqID0gaSsrKXtcbiAgICB2YXIgeGkgPSBwb2x5W2ldLng7XG4gICAgdmFyIHlpID0gcG9seVtpXS55O1xuICAgIHZhciB4aiA9IHBvbHlbal0ueDtcbiAgICB2YXIgeWogPSBwb2x5W2pdLnk7XG5cbiAgICBpZih5aSA+IHBvaW50LnkgIT09IHlqID4gcG9pbnQueSl7XG4gICAgICBpZihwb2ludC54IDwgKHhqIC0geGkpICogKHBvaW50LnkgLSB5aSkgLyAoeWogLSB5aSkgKyB4aSl7XG4gICAgICAgIGluc2lkZVBvbHkgPSAhaW5zaWRlUG9seTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW5zaWRlUG9seTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBwb2ludEluUG9seTtcbiIsIlxuZnVuY3Rpb24gdHJhbnNsYXRlUG9pbnRzKHBvaW50cywgdHJhbnNsYXRpb24pe1xuICBpZihBcnJheS5pc0FycmF5KHBvaW50cykpe1xuICAgIHBvaW50cyA9IHBvaW50cy5tYXAoZnVuY3Rpb24ocG9pbnQpe1xuICAgICAgcmV0dXJuIHRyYW5zbGF0ZVBvaW50cyhwb2ludCwgdHJhbnNsYXRpb24pO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHBvaW50cyA9IHtcbiAgICAgIHg6IHBvaW50cy54LFxuICAgICAgeTogcG9pbnRzLnlcbiAgICB9O1xuXG4gICAgaWYodHJhbnNsYXRpb24ueCAhPSBudWxsKXtcbiAgICAgIHBvaW50cy54ICs9IHRyYW5zbGF0aW9uLng7XG4gICAgfVxuXG4gICAgaWYodHJhbnNsYXRpb24ueSAhPSBudWxsKXtcbiAgICAgIHBvaW50cy55ICs9IHRyYW5zbGF0aW9uLnk7XG4gICAgfVxuICB9XG4gIHJldHVybiBwb2ludHM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdHJhbnNsYXRlUG9pbnRzO1xuIiwiZnVuY3Rpb24gZ2VuSWQoKSB7XG4gIHJldHVybiBNYXRoLnJhbmRvbSgpICsgJ18nICsgRGF0ZS5ub3coKTtcbn1cblxuLyoqXG4gKiBUaGlzIHJlcHJlc2VudHMgYSBqb2ludCBiZXR3ZWVuIHR3byBib2RpZXMuXG4gKiBAbmFtZSBKb2ludFxuICogQGNvbnN0cnVjdG9yIEpvaW50XG4gKi9cblxuXG5jbGFzcyBKb2ludCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaWQgaW4gd2hpY2ggdG8gcmVmZXJlbmNlIHRoaXMgb2JqZWN0LiBBbHNvIHRoZSB1c2VyRGF0YSBwcm9wZXJ0eSBmb3IgYm94MmQgYm9kaWVzLlxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaWQgPSBvcHRpb25zLmlkIHx8IGdlbklkKCk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaWQgb2YgdGhlIGZpcnN0IGVudGl0eSB0aGF0IHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhpcyBqb2ludFxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEpvaW50I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5ib2R5SWQxID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpZCBvZiB0aGUgc2Vjb25kIGVudGl0eSB0aGF0IHdpbGwgYmUgYXR0YWNoZWQgdG8gdGhpcyBqb2ludFxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEpvaW50I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5ib2R5SWQyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgcG9pbnQgb24gdGhlIGZpcnN0IGVudGl0eSB3aGVyZSBiZSBhdHRhY2hlZCB0byB0aGUgc2Vjb25kIGJvZHkuIElmIG5vIHBvaW50IGlzIHNwZWNpZmllZCwgdGhlIGZpcnN0IGJvZHkgd2lsbCBiZSBhdHRhY2hlZCBhdCBpdHMgY2VudGVyIHBvaW50LlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIEpvaW50I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5ib2R5UG9pbnQxID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCB3aXRoIGFueSBvdGhlciBwcm9wZXJ0aWVzIHRoYXQgc2hvdWxkIGJlIG1peGVkIGludG8gdGhlIGJveDJkIGpvaW50IGRlZmluaXRpb24uXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAbWVtYmVyT2YgSm9pbnQjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmpvaW50QXR0cmlidXRlcyA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlcyB0aGUgcG9zaXRpb24gdGhhdCBvbiB0aGUgZmlyc3QgYm9keSB0aGF0IHRoZSBqb2ludCBpcyBjb25uZWN0ZWQgYXQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSm9pbnQjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgc2NhbGUgdG8gbXVsdGlwbHkgdGhlIGRpbWVudGlvbnMgYnlcbiAgICovXG4gIHNjYWxlSm9pbnRMb2NhdGlvbihzY2FsZSl7XG4gICAgaWYoc2NhbGUgJiYgdGhpcy5ib2R5UG9pbnQxKXtcbiAgICAgIHRoaXMuYm9keVBvaW50MS54ID0gdGhpcy5ib2R5UG9pbnQxLnggKiBzY2FsZTtcbiAgICAgIHRoaXMuYm9keVBvaW50MS55ID0gdGhpcy5ib2R5UG9pbnQxLnkgKiBzY2FsZTtcbiAgICAgIHRoaXMuYWxyZWFkeVNjYWxlZCA9IHRydWU7XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSm9pbnQ7XG4iLCIvKipcbiAqIFRoaXMgRW50aXR5IHJlcHJlc2VudHMgYSBwb2x5Z29uIHdoaWNoIGlzIGJ1aWxkIGZyb20gYW4gYXJyYXkgb2YgcG9pbnRzLlxuICogQG5hbWUgUG9seWdvblxuICogQGNvbnN0cnVjdG9yIFBvbHlnb25cbiAqIEBleHRlbmRzIEVudGl0eVxuICovXG5cbmNvbnN0IEVudGl0eSA9IHJlcXVpcmUoJy4vRW50aXR5Jyk7XG5jb25zdCBzY2FsZVBvaW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3NjYWxlUG9pbnRzJyk7XG5jb25zdCBwb2ludEluUG9seWdvbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3BvaW50SW5Qb2x5Z29uJyk7XG5jb25zdCB0cmFuc2xhdGVQb2ludHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy90cmFuc2xhdGVQb2ludHMnKTtcblxuY2xhc3MgUG9seWdvbiBleHRlbmRzIEVudGl0eSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBvYmplY3RzIHRoYXQgaGF2ZSB4IGFuZCB5IHZhbHVlcy5cbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQG1lbWJlck9mIFBvbHlnb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgUG9seWdvbiBhdCBhIGdpdmVuIHNjYWxlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUG9seWdvbiNcbiAgICogQHBhcmFtIHtDb250ZXh0fSBjdHggVGhlIGRyYXdpbmcgY29udGV4dFxuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIHNjYWxlIGF0IHdoaWNoIHRvIGRyYXdcbiAgICovXG4gIGRyYXcoY3R4LCBzY2FsZSl7XG4gICAgc2NhbGUgPSBzY2FsZSB8fCB0aGlzLnNjYWxlIHx8IDE7XG4gICAgdmFyIG9nTGluZVdpZHRoID0gY3R4LmxpbmVXaWR0aDtcbiAgICBjdHgubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGg7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNsYXRlKHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSk7XG4gICAgY3R4LnJvdGF0ZSh0aGlzLmFuZ2xlKTtcbiAgICBjdHgudHJhbnNsYXRlKC0odGhpcy54KSAqIHNjYWxlLCAtKHRoaXMueSkgKiBzY2FsZSk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuZmlsbFN0eWxlO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuc3Ryb2tlU3R5bGU7XG5cbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbygodGhpcy54ICsgdGhpcy5wb2ludHNbMF0ueCkgKiBzY2FsZSwgKHRoaXMueSArIHRoaXMucG9pbnRzWzBdLnkpICogc2NhbGUpO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5wb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICBjdHgubGluZVRvKCh0aGlzLnBvaW50c1tpXS54ICsgdGhpcy54KSAqIHNjYWxlLCAodGhpcy5wb2ludHNbaV0ueSArIHRoaXMueSkgKiBzY2FsZSk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oKHRoaXMueCArIHRoaXMucG9pbnRzWzBdLngpICogc2NhbGUsICh0aGlzLnkgKyB0aGlzLnBvaW50c1swXS55KSAqIHNjYWxlKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIGN0eC5saW5lV2lkdGggPSBvZ0xpbmVXaWR0aDtcbiAgICBzdXBlci5kcmF3KGN0eCwgc2NhbGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIHRoaXMgc2hhcGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBQb2x5Z29uI1xuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIGFtb3VudCB0aGUgc2hhcGUgc2hvdWxkIHNjYWxlXG4gICAqL1xuICBzY2FsZVNoYXBlKHNjYWxlKXtcbiAgICB0aGlzLnBvaW50cyA9IHNjYWxlUG9pbnRzKHRoaXMucG9pbnRzLCBzY2FsZSk7XG4gICAgc3VwZXIuc2NhbGVTaGFwZShzY2FsZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gcG9pbnQgaXMgY29udGFpbmVkIHdpdGhpbiB0aGlzIFBvbHlnb24uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUG9seWdvbiNcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IEFuIG9iamVjdCB3aXRoIHggYW5kIHkgdmFsdWVzLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHBvaW50IGlzIGluIHNoYXBlIGVsc2UgZmFsc2VcbiAgICovXG4gIHBvaW50SW5TaGFwZShwb2ludCl7XG4gICAgcmV0dXJuIHBvaW50SW5Qb2x5Z29uKHBvaW50LCB0cmFuc2xhdGVQb2ludHModGhpcy5wb2ludHMsIHRoaXMpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbHlnb247XG4iLCJcbndpbmRvdy5mcm96ZW5qcyA9IHtcbiAgR2FtZUNvcmUgOiByZXF1aXJlKCcuL0dhbWVDb3JlJyksXG4gIElucHV0TWFuYWdlciA6IHJlcXVpcmUoJy4vSW5wdXRNYW5hZ2VyJyksXG4gIFJlc291cmNlTWFuYWdlciA6IHJlcXVpcmUoJy4vUmVzb3VyY2VNYW5hZ2VyJyksXG4gIE1vdXNlQWN0aW9uIDogcmVxdWlyZSgnLi9Nb3VzZUFjdGlvbicpLFxuICBUb3VjaEFjdGlvbiA6IHJlcXVpcmUoJy4vVG91Y2hBY3Rpb24nKSxcbiAga2V5cyA6IHJlcXVpcmUoJy4va2V5cycpLFxuICBBbmltYXRpb246IHJlcXVpcmUoJy4vQW5pbWF0aW9uJyksXG4gIEFuaW1GcmFtZTogcmVxdWlyZSgnLi9BbmltRnJhbWUnKSxcbiAgdXRpbHMgOiByZXF1aXJlKCcuL3V0aWxzJyksXG4gIFNwcml0ZSA6IHJlcXVpcmUoJy4vU3ByaXRlJyksXG4gIHJlaW5lciA6IHtcbiAgICBDcmVhdHVyZSA6IHJlcXVpcmUoJy4vcmVpbmVyL0NyZWF0dXJlJylcbiAgfSxcbiAgc291bmRzIDoge1xuICAgIFdlYkF1ZGlvIDogcmVxdWlyZSgnLi9zb3VuZHMvV2ViQXVkaW8nKVxuICB9LFxuICBib3gyZCA6IHtcbiAgICBlbnRpdGllcyA6IHJlcXVpcmUoJy4vYm94MmQvZW50aXRpZXMnKSxcbiAgICBqb2ludHM6IHJlcXVpcmUoJy4vYm94MmQvam9pbnRzJyksXG4gICAgQm94IDogcmVxdWlyZSgnLi9ib3gyZC9Cb3gnKSxcbiAgICBCb3hHYW1lIDogcmVxdWlyZSgnLi9ib3gyZC9Cb3hHYW1lJylcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuZnJvemVuanM7XG4iLCIvKipcbiAqIFRoZSBHYW1lQ29yZSBjbGFzcyBwcm92aWRlcyB0aGUgYmFzZSB0byBidWlsZCBnYW1lcyBvbi5cbiAqIEBuYW1lIEdhbWVDb3JlXG4gKiBAY29uc3RydWN0b3IgR2FtZUNvcmVcbiAqIEBleGFtcGxlXG4gKiB2YXIgbXlHYW1lID0gbmV3IEdhbWVDb3JlKHtcbiAqICAgY2FudmFzSWQ6ICdteUNhbnZhcycsXG4gKiAgIHVwZGF0ZTogZnVuY3Rpb24obWlsbGlzKXtcbiAqICAgICAvLyBkbyB1cGRhdGluZyBvZiBnYW1lIHN0YXRlXG4gKiAgIH0sXG4gKiAgIGRyYXc6IGZ1bmN0aW9uKGNvbnRleHQpe1xuICogICAgIC8vIGRvIGRyYXdpbmcgb2YgdGhlIGdhbWVcbiAqICAgfVxuICogfSk7XG4gKlxuICogLy9zdGFydCB0aGUgZ2FtZVxuICogbXlHYW1lLnJ1bigpO1xuICovXG5cbmNvbnN0IElucHV0TWFuYWdlciA9IHJlcXVpcmUoJy4vSW5wdXRNYW5hZ2VyJyk7XG5jb25zdCBSZXNvdXJjZU1hbmFnZXIgPSByZXF1aXJlKCcuL1Jlc291cmNlTWFuYWdlcicpO1xuXG5jbGFzcyBHYW1lQ29yZSB7XG5cbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRoZSBnYW1lIHNob3VsZCBiZSBydW5uaW5nIGl0cyBsb29wXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpZCBvZiB0aGUgY2FudmFzIGVsZW1lbnQgdG8gdXNlIHJlbmRlciB0aGUgZ2FtZSBvblxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5jYW52YXNJZCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBNYXggbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBiZXR3ZWVuIHVwZGF0ZXMuIChpbiBjYXNlIHVzZXIgc3dpdGNoZXMgdGFicyBhbmQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lIHBhdXNlcylcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMubWF4U3RlcCA9IDQwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHR5cGUgb2YgY29udGV4dCB0byByZXF1ZXN0IGZyb20gdGhlIGNhbnZhcy4gIDJkIG9yIDNkXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmNvbnRleHRUeXBlID0gJzJkJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBoZWlnaHQgb2YgdGhlIEdhbWUgYW5kIGNhbnZhc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5oZWlnaHQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHdpZHRoIG9mIHRoZSBHYW1lIGFuZCBjYW52YXNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMud2lkdGggPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFJlc291cmNlTWFuYWdlciB0byBiZSB1c2VkIGZvciBnYW1lXG4gICAgICogQHR5cGUge1Jlc291cmNlTWFuYWdlcn1cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnJlc291cmNlTWFuYWdlciA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSW5wdXRNYW5hZ2VyIHRvIGJlIHVzZWQgZm9yIGdhbWVcbiAgICAgKiBAdHlwZSB7SW5wdXRNYW5hZ2VyfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaW5wdXRNYW5hZ2VyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdHlsZSB0byBiZSB1c2VkIGZvciB0aGUgZm9yZWdyb3VuZCB3aGlsZSBnYW1lIHJlc291cmNlcyBhcmUgbG9hZGluZ1xuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5sb2FkaW5nRm9yZWdyb3VuZCA9ICcjMDBGJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdHlsZSB0byBiZSB1c2VkIGZvciB0aGUgYmFja2dyb3VuZCB3aGlsZSBnYW1lIHJlc291cmNlcyBhcmUgbG9hZGluZ1xuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5sb2FkaW5nQmFja2dyb3VuZCA9ICcjRkZGJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBJRCBvZiBhIERPTSBlbGVtZW50IHRoYXQgY29udGFpbnMgdGhlIGdhbWUncyBjYW52YXNcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZ2FtZUFyZWFJZCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGVyY2VudGFnZSAoMCB0byAxLjApIG9mIHRoZSBoZWlnaHQgYW5kIHdpZHRoIHRoZSBjYW52YXMgc2hvdWxkIHVzZSB0byBmaWxsIGluIGl0cyBjb250YWluZXIgRE9NIGVsZW1lbnRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuY2FudmFzUGVyY2VudGFnZSA9IDA7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgaWYoIXRoaXMucmVzb3VyY2VNYW5hZ2VyKXtcbiAgICAgIHRoaXMucmVzb3VyY2VNYW5hZ2VyID0gbmV3IFJlc291cmNlTWFuYWdlcigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSBoZWlnaHQgb24geW91ciBHYW1lQ29yZSBpbnN0YW5jZSBhbmQgb24geW91ciBjYW52YXMgcmVmZXJlbmNlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBuZXdIZWlnaHQgVGhlIG5ldyBoZWlnaHQgZGVzaXJlZFxuICAgKi9cbiAgc2V0SGVpZ2h0KG5ld0hlaWdodCl7XG4gICAgdGhpcy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gbmV3SGVpZ2h0O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHdpZHRoIG9uIHlvdXIgR2FtZUNvcmUgaW5zdGFuY2UgYW5kIG9uIHlvdXIgY2FudmFzIHJlZmVyZW5jZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKiBAcGFyYW0ge051bWJlcn0gbmV3V2lkdGggVGhlIG5ldyB3aWR0aCBkZXNpcmVkXG4gICAqL1xuICBzZXRXaWR0aChuZXdXaWR0aCl7XG4gICAgdGhpcy53aWR0aCA9IG5ld1dpZHRoO1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gbmV3V2lkdGg7XG4gIH1cblxuICAvKipcbiAgICogU2lnbmFscyB0aGUgZ2FtZSBsb29wIHRoYXQgaXQncyB0aW1lIHRvIHF1aXRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICovXG4gIHN0b3AoKSB7XG4gICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2hlcyB0aGUgZ2FtZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICovXG4gIHJ1bigpIHtcbiAgICBpZighdGhpcy5pc1J1bm5pbmcpe1xuICAgICAgdGhpcy5pbml0KCk7XG4gICAgICB0aGlzLmxvYWRSZXNvdXJjZXModGhpcy5yZXNvdXJjZU1hbmFnZXIpO1xuICAgICAgdGhpcy5pbml0SW5wdXQodGhpcy5pbnB1dE1hbmFnZXIpO1xuICAgICAgdGhpcy5sYXVuY2hMb29wKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbiBiZSBvdmVyaWRkZW4gaW4gR2FtZUNvcmUgc3ViY2xhc3NlcyB0byBsb2FkIGltYWdlcyBhbmQgc291bmRzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAqIEBwYXJhbSB7UmVzb3VyY2VNYW5hZ2VyfSByZXNvdXJjZU1hbmFnZXJcbiAgICovXG4gIGxvYWRSZXNvdXJjZXMocmVzb3VyY2VNYW5hZ2VyKXtcblxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIHNjcmVlbiBtb2RlIGFuZCBpbml0aWF0ZXMgYW5kIG9iamVjdHMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAqL1xuICBpbml0KCkge1xuICAgIGlmKCF0aGlzLmNhbnZhcyl7XG4gICAgICB0aGlzLmNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuY2FudmFzSWQpO1xuICAgIH1cbiAgICBpZighdGhpcy5jYW52YXMpe1xuICAgICAgXG4gICAgICBhbGVydCgnU29ycnksIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGNhbnZhcy4gIEkgcmVjb21tZW5kIGFueSBicm93c2VyIGJ1dCBJbnRlcm5ldCBFeHBsb3JlcicpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZighdGhpcy5jb250ZXh0KXtcbiAgICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQodGhpcy5jb250ZXh0VHlwZSk7XG4gICAgfVxuICAgIGlmKCF0aGlzLmNvbnRleHQpe1xuICAgICAgYWxlcnQoJ1NvcnJ5LCB5b3VyIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCBhICcgKyB0aGlzLmNvbnRleHRUeXBlICsgJyBkcmF3aW5nIHN1cmZhY2Ugb24gY2FudmFzLiAgSSByZWNvbW1lbmQgYW55IGJyb3dzZXIgYnV0IEludGVybmV0IEV4cGxvcmVyJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZXRIZWlnaHQodGhpcy5oZWlnaHQgfHwgdGhpcy5jYW52YXMuaGVpZ2h0KTtcbiAgICB0aGlzLnNldFdpZHRoKHRoaXMud2lkdGggfHwgdGhpcy5jYW52YXMud2lkdGgpO1xuXG4gICAgaWYoIXRoaXMuaW5wdXRNYW5hZ2VyKXtcbiAgICAgIC8vaGFuZGxlIHJlc2l6aW5nIGlmIGdhbWVBcmVhIGFuZCBjYW52YXNQZXJjZW50YWdlIGFyZSBzcGVjaWZpZWRcbiAgICAgIGlmKHRoaXMuZ2FtZUFyZWFJZCAmJiB0aGlzLmNhbnZhc1BlcmNlbnRhZ2Upe1xuICAgICAgICB0aGlzLmlucHV0TWFuYWdlciA9IG5ldyBJbnB1dE1hbmFnZXIoe1xuICAgICAgICAgIGNhbnZhczogdGhpcy5jYW52YXMsXG4gICAgICAgICAgZ2FtZUFyZWE6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuZ2FtZUFyZWFJZCksXG4gICAgICAgICAgY2FudmFzUGVyY2VudGFnZTogdGhpcy5jYW52YXNQZXJjZW50YWdlXG4gICAgICAgIH0pO1xuICAgICAgfWVsc2V7XG4gICAgICAgIHRoaXMuaW5wdXRNYW5hZ2VyID0gbmV3IElucHV0TWFuYWdlcih7XG4gICAgICAgICAgY2FudmFzOiB0aGlzLmNhbnZhc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmlucHV0TWFuYWdlci5yZXNpemUoKTtcblxuICAgIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYW4gYmUgb3ZlcmlkZGVuIGluIHRoZSBzdWJjbGFzc2VzIHRvIG1hcCB1c2VyIGlucHV0IHRvIGFjdGlvbnNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICogQHBhcmFtIHtJbnB1dE1hbmFnZXJ9IGlucHV0TWFuYWdlclxuICAgKi9cbiAgaW5pdElucHV0KGlucHV0TWFuYWdlcikge1xuXG4gIH1cblxuICAvKipcbiAgICogQ2FuIGJlIG92ZXJpZGRlbiBpbiB0aGUgc3ViY2xhc3NlcyB0byBkZWFsIHdpdGggdXNlciBpbnB1dCBiZWZvcmUgdXBkYXRpbmcgdGhlIGdhbWUgc3RhdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICogQHBhcmFtIHtJbnB1dE1hbmFnZXJ9IGlucHV0TWFuYWdlclxuICAgKiBAcGFyYW0ge051bWJlcn0gZWxhcHNlZFRpbWUgRWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgKi9cbiAgaGFuZGxlSW5wdXQoaW5wdXRNYW5hZ2VyLGVsYXBzZWRUaW1lKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBSdW5zIHRocm91Z2ggdGhlIGdhbWUgbG9vcCB1bnRpbCBzdG9wKCkgaXMgY2FsbGVkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKi9cbiAgZ2FtZUxvb3AoKSB7XG4gICAgdGhpcy5jdXJyVGltZSA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICAgIHRoaXMuZWxhcHNlZFRpbWUgPSBNYXRoLm1pbih0aGlzLmN1cnJUaW1lIC0gdGhpcy5wcmV2VGltZSwgdGhpcy5tYXhTdGVwKTtcbiAgICB0aGlzLnByZXZUaW1lID0gdGhpcy5jdXJyVGltZTtcblxuICAgIC8vaXQncyB1c2luZyBhIHJlc291cmNlIG1hbmFnZXIsIGJ1dCByZXNvdXJjZXMgaGF2ZW4ndCBmaW5pc2hlZFxuICAgIGlmKHRoaXMucmVzb3VyY2VNYW5hZ2VyICYmICF0aGlzLnJlc291cmNlTWFuYWdlci5yZXNvdXJjZXNSZWFkeSgpKXtcbiAgICAgIHRoaXMudXBkYXRlTG9hZGluZ1NjcmVlbih0aGlzLmVsYXBzZWRUaW1lKTtcbiAgICAgIHRoaXMuZHJhd0xvYWRpbmdTY3JlZW4odGhpcy5jb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5oYW5kbGVJbnB1dCh0aGlzLmlucHV0TWFuYWdlcix0aGlzLmVsYXBzZWRUaW1lKTtcbiAgICAgIGlmKCF0aGlzLnBhdXNlZCl7XG4gICAgICAgIC8vIHVwZGF0ZVxuICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLmVsYXBzZWRUaW1lKTtcbiAgICAgIH1cbiAgICAgIC8vIGRyYXcgdGhlIHNjcmVlblxuICAgICAgdGhpcy5jb250ZXh0LnNhdmUoKTtcbiAgICAgIHRoaXMuZHJhdyh0aGlzLmNvbnRleHQpO1xuICAgICAgdGhpcy5jb250ZXh0LnJlc3RvcmUoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTGF1bmNoZXMgdGhlIGdhbWUgbG9vcC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICovXG4gIGxhdW5jaExvb3AoKXtcbiAgICB0aGlzLmVsYXBzZWRUaW1lID0gMDtcbiAgICB2YXIgc3RhcnRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICB0aGlzLmN1cnJUaW1lID0gc3RhcnRUaW1lO1xuICAgIHRoaXMucHJldlRpbWUgPSBzdGFydFRpbWU7XG5cbiAgICAvL25lZWQgdG8ga2VlcCB0aGUgY29udGV4dCBkZWZpbmVkIGhlcmUgc28gdGhlIGdhbWUgbG9vcCBoYXMgYWNjZXNzIHRvIGl0XG4gICAgdGhpcy5sb29wUnVubmVyID0gdGhpcy5sb29wUnVubmVyLmJpbmQodGhpcyk7XG4gICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLmxvb3BSdW5uZXIpO1xuICB9XG5cbiAgbG9vcFJ1bm5lcigpe1xuICAgIHRoaXMuZ2FtZUxvb3AoKTtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMubG9vcFJ1bm5lcik7XG4gIH1cblxuICAvKipcbiAgICogU2hvdWxkIGJlIG92ZXJyaWRkZW4gdG8gdXBkYXRlIHRoZSBzdGF0ZSBvZiB0aGUgZ2FtZS9hbmltYXRpb24gYmFzZWQgb24gdGhlIGFtb3VudCBvZiBlbGFwc2VkIHRpbWUgdGhhdCBoYXMgcGFzc2VkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKiBAcGFyYW0ge051bWJlcn0gZWxhcHNlZFRpbWUgRWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgKi9cbiAgdXBkYXRlKGVsYXBzZWRUaW1lKSB7XG5cblxuICB9XG5cbiAgLyoqXG4gICAqIENhbiBiZSBvdmVycmlkZGVuIHRvIHVwZGF0ZSB0aGUgc3RhdGUgb2YgdGhlIGdhbWUvYW5pbWF0aW9uIHdoaWxlIGEgY3VzdG9tIGxvYWRpbmcgc2NyZWVuIGlzIGRpc3BsYXllZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGVsYXBzZWRUaW1lIEVsYXBzZWQgdGltZSBpbiBtaWxsaXNlY29uZHNcbiAgICovXG4gIHVwZGF0ZUxvYWRpbmdTY3JlZW4oZWxhcHNlZFRpbWUpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRvIHRoZSBzY3JlZW4uIFN1YmNsYXNzZXMgb3IgaW5zdGFuY2VzIG11c3Qgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcGFpbnQgaXRlbXMgdG8gdGhlIHNjcmVlbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICogQHBhcmFtIHtDb250ZXh0fSBjb250ZXh0IEFuIEhUTUw1IGNhbnZhcyBkcmF3aW5nIGNvbnRleHQuXG4gICAqL1xuICBkcmF3KGNvbnRleHQpe1xuICAgIGlmKHRoaXMuY29udGV4dFR5cGUgPT09ICcyZCcpe1xuICAgICAgY29udGV4dC5mb250ID0gXCIxNHB4IHNhbnMtc2VyaWZcIjtcbiAgICAgIGNvbnRleHQuZmlsbFRleHQoXCJUaGlzIGdhbWUgZG9lcyBub3QgaGF2ZSBpdHMgb3duIGRyYXcgZnVuY3Rpb24hXCIsIDEwLCA1MCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBwcm9ncmVzcyBvZiB0aGUgcmVzb3VyY2UgbWFuZ2VyIHRvIHRoZSBzY3JlZW4gd2hpbGUgbG9hZGluZy5cbiAgICogU3ViY2xhc3NlcyBvciBpbnN0YW5jZXMgbWF5IG92ZXJyaWRlIGZvciBjdXN0b20gbG9hZGluZyBhbmltYXRpb25zLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKiBAcGFyYW0ge0NvbnRleHR9IGNvbnRleHQgQW4gSFRNTDUgY2FudmFzIGRyYXdpbmcgY29udGV4dC5cbiAgICovXG4gIGRyYXdMb2FkaW5nU2NyZWVuKGNvbnRleHQpe1xuICAgIGlmKHRoaXMucmVzb3VyY2VNYW5hZ2VyICYmICh0aGlzLmNvbnRleHRUeXBlID09PSAnMmQnKSl7XG4gICAgICBjb250ZXh0LmZpbGxTdHlsZSA9IHRoaXMubG9hZGluZ0JhY2tncm91bmQ7XG4gICAgICBjb250ZXh0LmZpbGxSZWN0KDAsMCwgdGhpcy53aWR0aCx0aGlzLmhlaWdodCk7XG5cbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5sb2FkaW5nRm9yZWdyb3VuZDtcbiAgICAgIGNvbnRleHQuc3Ryb2tlU3R5bGUgPSB0aGlzLmxvYWRpbmdGb3JlZ3JvdW5kO1xuXG4gICAgICB2YXIgdGV4dFB4U2l6ZSA9IE1hdGguZmxvb3IodGhpcy5oZWlnaHQvMTIpO1xuXG4gICAgICBjb250ZXh0LmZvbnQgPSBcImJvbGQgXCIgKyB0ZXh0UHhTaXplICsgXCJweCBzYW5zLXNlcmlmXCI7XG5cbiAgICAgIGNvbnRleHQuZmlsbFRleHQoXCJMb2FkaW5nLi4uIFwiICsgdGhpcy5yZXNvdXJjZU1hbmFnZXIuZ2V0UGVyY2VudENvbXBsZXRlKCkgKyBcIiVcIiwgdGhpcy53aWR0aCAqIDAuMSwgdGhpcy5oZWlnaHQgKiAwLjU1KTtcblxuICAgICAgY29udGV4dC5zdHJva2VSZWN0KHRoaXMud2lkdGggKiAwLjEsIHRoaXMuaGVpZ2h0ICogMC43LCB0aGlzLndpZHRoICogMC44LCB0aGlzLmhlaWdodCAqIDAuMSk7XG4gICAgICBjb250ZXh0LmZpbGxSZWN0KHRoaXMud2lkdGggKiAwLjEsIHRoaXMuaGVpZ2h0ICogMC43LCAodGhpcy53aWR0aCAqIDAuOCkgKiB0aGlzLnJlc291cmNlTWFuYWdlci5nZXRQZXJjZW50Q29tcGxldGUoKS8xMDAsIHRoaXMuaGVpZ2h0ICogMC4xKTtcblxuICAgICAgY29udGV4dC5saW5lV2lkdGggPSA0O1xuICAgIH1cbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2FtZUNvcmU7XG4iLCIvKipcbiAqIFRoZSBJbnB1dE1hbmFnZXIgaGFuZGxlcyBET00gZXZlbnRzIGZvciB1c2UgaW4gZ2FtZXMuXG4gKiBAbmFtZSBJbnB1dE1hbmFnZXJcbiAqIEBjb25zdHJ1Y3RvciBJbnB1dE1hbmFnZXJcbiAqL1xuXG5jb25zdCBIYW1tZXIgPSByZXF1aXJlKCdoYW1tZXJqcycpO1xuXG5jb25zdCBHYW1lQWN0aW9uID0gcmVxdWlyZSgnLi9HYW1lQWN0aW9uJyk7XG5jb25zdCBUb3VjaEFjdGlvbiA9IHJlcXVpcmUoJy4vVG91Y2hBY3Rpb24nKTtcbmNvbnN0IE1vdXNlQWN0aW9uID0gcmVxdWlyZSgnLi9Nb3VzZUFjdGlvbicpO1xuY29uc3QgaW5zaWRlQ2FudmFzID0gcmVxdWlyZSgnLi91dGlscy9pbnNpZGVDYW52YXMnKTtcbmNvbnN0IGtleXMgPSByZXF1aXJlKCcuL2tleXMnKTtcblxuZnVuY3Rpb24gb24gKGVsZW1lbnQsIG5hbWUsIGhhbmRsZXIpIHtcbiAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuICByZXR1cm4gZnVuY3Rpb24gcmVtb3ZlKCkge1xuICAgIGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihuYW1lLCBoYW5kbGVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwb3NpdGlvbihub2RlKXtcbiAgdmFyIGJvdW5kaW5nUmVjdCA9IG5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB7XG4gICAgeDogYm91bmRpbmdSZWN0LmxlZnQsXG4gICAgeTogYm91bmRpbmdSZWN0LnRvcFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRDb21wdXRlZFN0eWxlKG5vZGUpe1xuICByZXR1cm4gd2luZG93LmdldENvbXB1dGVkU3R5bGUobm9kZSwgbnVsbCkgfHwge307XG59XG5cbmZ1bmN0aW9uIHRvUGl4ZWwodmFsdWUpe1xuICByZXR1cm4gcGFyc2VGbG9hdCh2YWx1ZSkgfHwgMDtcbn1cblxuZnVuY3Rpb24gZ2V0TWFyZ2luRXh0ZW50cyhub2RlKXtcbiAgdmFyIHN0eWxlID0gZ2V0Q29tcHV0ZWRTdHlsZShub2RlKTtcbiAgdmFyIGwgPSB0b1BpeGVsKHN0eWxlLm1hcmdpbkxlZnQpO1xuICB2YXIgdCA9IHRvUGl4ZWwoc3R5bGUubWFyZ2luVG9wKTtcbiAgdmFyIHIgPSB0b1BpeGVsKHN0eWxlLm1hcmdpblJpZ2h0KTtcbiAgdmFyIGIgPSB0b1BpeGVsKHN0eWxlLm1hcmdpbkJvdHRvbSk7XG4gIHJldHVybiB7XG4gICAgdzogbCArIHIsXG4gICAgaDogdCArIGJcbiAgfTtcbn1cblxuY2xhc3MgSW5wdXRNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcblxuICAgIC8qKlxuICAgICAqIE9iamVjdCBvZiBrZXlBY3Rpb25zIGJlaW5nIGxpc3RlbmVkIGZvclxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5rZXlBY3Rpb25zID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBNb3VzZUFjdGlvbiB0byBrZWVwIHRyYWNrIG9mIHRoZSBtb3VzZSdzIHN0YXRlXG4gICAgICogQHR5cGUge01vdXNlQWN0aW9ufVxuICAgICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLm1vdXNlQWN0aW9uID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBUb3VjaEFjdGlvbiB0byBrZWVwIHRyYWNrIG9mIHRvdWNoIGV2ZW50c1xuICAgICAqIEB0eXBlIHtUb3VjaEFjdGlvbn1cbiAgICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy50b3VjaEFjdGlvbiA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgSFRNTDUgY2FudmFzIG9uIHdoaWNoIHRvIGxpc3RlbiBmb3IgZXZlbnRzXG4gICAgICogQHR5cGUge0NhbnZhc31cbiAgICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5jYW52YXMgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdG8gbGlzdGVuIGZvciBtb3VzZSBldmVudHNcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICogQGRlcHJlY2F0ZWQgTW91c2UgaXMgYWx3YXlzIGhhbmRsZWQsIHVzZSBlbXVsYXRlTW91c2UgdG8gc3BlY2lmeSBob3cgdG8gaGFuZGxlIGl0XG4gICAgICovXG4gICAgdGhpcy5oYW5kbGVNb3VzZSA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBsaXN0ZW4gZm9yIHRvdWNoIGV2ZW50c1xuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKiBAZGVwcmVjYXRlZCBUb3VjaCBpcyBhbHdheXMgaGFuZGxlZCwgdXNlIGVtdWxhdGVNb3VzZSB0byBzcGVjaWZ5IGhvdyB0byBoYW5kbGUgaXRcbiAgICAgKi9cbiAgICB0aGlzLmhhbmRsZVRvdWNoID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRvIGxpc3RlbiBmb3Iga2V5Ym9hcmQgZXZlbnRzXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaGFuZGxlS2V5cyA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgZ2FtZSdzIGNhbnZhc1xuICAgICAqIEB0eXBlIHtFbGVtZW50fVxuICAgICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmdhbWVBcmVhID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwZXJjZW50YWdlICgwIHRvIDEuMCkgb2YgdGhlIGhlaWdodCBhbmQgd2lkdGggdGhlIGNhbnZhcyBzaG91bGQgdXNlIHRvIGZpbGwgaW4gaXRzIGNvbnRhaW5lciBET00gZWxlbWVudFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuY2FudmFzUGVyY2VudGFnZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBFbXVsYXRlIG1vdXNlIGV2ZW50cyB3aGVuIHVzaW5nIHRvdWNoXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZW11bGF0ZU1vdXNlID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIEluc3RhbmNlIG9mIEhhbW1lci5qcyAtIFlvdSBjYW4gcGFzcyBpbiBhIEhhbW1lcigpIGNvbnN0cnVjdG9yIHdpdGggb3B0aW9ucyB0byBjdXN0b21pemUgeW91ciBIYW1tZXIgaW5zdGFuY2VcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAgICogQGRlZmF1bHQgSGFtbWVyIGluc3RhbmNlLCBib3VuZCB0byBkb2N1bWVudCwgd2l0aCBwcmV2ZW50X2RlZmF1bHQ6IHRydWUsIGRyYWdfbWF4X3RvdWNoZXM6IDAsIGFuZCBob2xkOiBmYWxzZVxuICAgICAqL1xuICAgIHRoaXMuaGFtbWVyID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cbiAgICBpZighdGhpcy5oYW1tZXIpe1xuICAgICAgdGhpcy5oYW1tZXIgPSBuZXcgSGFtbWVyKGRvY3VtZW50LmJvZHksIHtcbiAgICAgICAgcHJldmVudF9kZWZhdWx0OiB0cnVlLFxuICAgICAgICBkcmFnX21heF90b3VjaGVzOiAwLFxuICAgICAgICAvLyBIb2xkIHVzZXMgc2V0VGltZW91dCB3aGljaCBpcyB2ZXJ5IGJhZCBmb3IgcGVyZm9ybWFuY2VcbiAgICAgICAgLy8gVE9ETzogRG8gd2Ugd2FudCB0byBhbGxvdyB0aGlzIHRvIGJlIG92ZXJyaWRkZW4/XG4gICAgICAgIGhvbGQ6IGZhbHNlXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZighdGhpcy5rZXlBY3Rpb25zKXtcbiAgICAgIHRoaXMua2V5QWN0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsZWFudXAoaGFuZGxlcil7XG4gICAgICBoYW5kbGVyLnJlbW92ZSgpO1xuICAgIH1cblxuICAgIGlmKHRoaXMuaGFuZGxlS2V5cyl7XG4gICAgICB0aGlzLnB1c2hDbGVhbnVwKG9uKGRvY3VtZW50LCAna2V5ZG93bicsIHRoaXMua2V5ZG93bi5iaW5kKHRoaXMpKSwgY2xlYW51cCk7XG4gICAgICB0aGlzLnB1c2hDbGVhbnVwKG9uKGRvY3VtZW50LCAna2V5dXAnLCB0aGlzLmtleXVwLmJpbmQodGhpcykpLCBjbGVhbnVwKTtcbiAgICB9XG5cbiAgICBpZignb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudCl7XG4gICAgICB0aGlzLnB1c2hDbGVhbnVwKG9uKGRvY3VtZW50LCAndG91Y2hzdGFydCcsIHRoaXMudG91Y2hzdGFydC5iaW5kKHRoaXMpKSwgY2xlYW51cCk7XG4gICAgICB0aGlzLnB1c2hDbGVhbnVwKG9uKGRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy50b3VjaG1vdmUuYmluZCh0aGlzKSksIGNsZWFudXApO1xuICAgICAgdGhpcy5wdXNoQ2xlYW51cChvbihkb2N1bWVudCwgJ3RvdWNoZW5kJywgdGhpcy50b3VjaGVuZC5iaW5kKHRoaXMpKSwgY2xlYW51cCk7XG5cbiAgICB9XG4gICAgZWxzZXtcbiAgICAgIHRoaXMucHVzaENsZWFudXAob24oZG9jdW1lbnQsICdtb3VzZWRvd24nLCB0aGlzLm1vdXNlZG93bi5iaW5kKHRoaXMpKSwgY2xlYW51cCk7XG4gICAgICB0aGlzLnB1c2hDbGVhbnVwKG9uKGRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5tb3VzZW1vdmUuYmluZCh0aGlzKSksIGNsZWFudXApO1xuICAgICAgdGhpcy5wdXNoQ2xlYW51cChvbihkb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLm1vdXNldXAuYmluZCh0aGlzKSksIGNsZWFudXApO1xuICAgIH1cblxuXG4gICAgaWYoIXRoaXMubW91c2VBY3Rpb24pe1xuICAgICAgdGhpcy5tb3VzZUFjdGlvbiA9IG5ldyBNb3VzZUFjdGlvbigpO1xuICAgIH1cblxuICAgIGlmKCF0aGlzLnRvdWNoQWN0aW9uKXtcbiAgICAgIHRoaXMudG91Y2hBY3Rpb24gPSBuZXcgVG91Y2hBY3Rpb24oKTtcbiAgICB9XG5cbiAgICBpZih0aGlzLmVtdWxhdGVNb3VzZSl7XG5cbiAgICAgIC8vZGEgaGVsbCBoYW1tZXIsIGdvdHRhIGRvIHRoaXMgb3Vyc2V2bGVzIG5vdz9cblxuICAgICAgLy8gdGhpcy5vbigndG91Y2gnLCB0aGlzLm1vdXNlZG93bi5iaW5kKHRoaXMpKTtcbiAgICAgIC8vIHRoaXMub24oJ2RyYWcnLCB0aGlzLm1vdXNlbW92ZS5iaW5kKHRoaXMpKTtcbiAgICAgIC8vIHRoaXMub24oJ3JlbGVhc2UnLCB0aGlzLm1vdXNldXAuYmluZCh0aGlzKSk7XG5cbiAgICB9IGVsc2Uge1xuXG4gICAgICAvL2RhIGhlbGwgaGFtbWVyLCBnb3R0YSBkbyB0aGlzIG91cnNldmxlcyBub3c/XG4gICAgICAvLyB0aGlzLm9uKCd0b3VjaCcsIHRoaXMudG91Y2hzdGFydC5iaW5kKHRoaXMpKTtcbiAgICAgIC8vIHRoaXMub24oJ2RyYWcnLCB0aGlzLnRvdWNobW92ZS5iaW5kKHRoaXMpKTtcbiAgICAgIC8vIHRoaXMub24oJ3JlbGVhc2UnLCB0aGlzLnRvdWNoZW5kLmJpbmQodGhpcykpO1xuXG4gICAgfVxuXG4gICAgaWYodGhpcy5nYW1lQXJlYSAmJiB0aGlzLmNhbnZhc1BlcmNlbnRhZ2Upe1xuICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLnJlc2l6ZS5iaW5kKHRoaXMpO1xuXG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlc2l6ZSBjaGFuZ2VzXG5cbiAgICAgIHRoaXMucHVzaENsZWFudXAob24od2luZG93LCAncmVzaXplJywgaGFuZGxlciksIGNsZWFudXApO1xuICAgICAgdGhpcy5wdXNoQ2xlYW51cChvbih3aW5kb3csICdvcmllbnRhdGlvbmNoYW5nZScsIGhhbmRsZXIpLCBjbGVhbnVwKTtcbiAgICB9XG5cbiAgICB0aGlzLm5vcm1hbGl6ZVBvaW50ID0gdGhpcy5ub3JtYWxpemVQb2ludC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaW5zaWRlQ2FudmFzID0gdGhpcy5pbnNpZGVDYW52YXMuYmluZCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBbGxvd3MgeW91IHRvIGJpbmQgb3RoZXIgSGFtbWVyLmpzIGV2ZW50cyAoc3VjaCBhcyBTd2lwZSBvciBEb3VibGV0YXApO1xuICAgKiBXYXJuaW5nOiBPbmx5IHNldCBmbGFncyBvciB2YXJpYWJsZXMgaW4gdGhpcyBoYW5kbGVyLCBvdGhlcndpc2UgeW91ciBnYW1lIG1pZ2h0IGJlY29tZSBzbG93XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGdlc3R1cmUgVGhlIGdlc3R1cmUgdG8gYmluZFxuICAgKiBAcGFyYW0gIHtGdW5jdGlvbn0gaGFuZGxlciBFdmVudCBoYW5kbGVyIGNhbGxiYWNrXG4gICAqIEByZXR1cm4ge09iamVjdH0gT2JqZWN0IGNvbnRhaW5pbmcgdGhlIHJlbW92ZSBmdW5jdGlvbiBmb3IgcmVtb3ZpbmcgdGhlIGV2ZW50LlxuICAgKi9cbiAgb24oZ2VzdHVyZSwgaGFuZGxlcil7XG4gICAgdmFyIGhhbW1lciA9IHRoaXMuaGFtbWVyO1xuICAgIHZhciByZW1vdmVDbGVhbnVwID0gdGhpcy5yZW1vdmVDbGVhbnVwO1xuXG4gICAgaGFtbWVyLm9uKGdlc3R1cmUsIGhhbmRsZXIpO1xuICAgIHZhciBjbGVhbnVwID0gdGhpcy5wdXNoQ2xlYW51cChbZ2VzdHVyZSwgaGFuZGxlcl0sIGZ1bmN0aW9uKGFyZ3Mpe1xuICAgICAgaGFtbWVyLm9mZi5hcHBseShoYW1tZXIsIGFyZ3MpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24oKXtcbiAgICAgICAgcmVtb3ZlQ2xlYW51cChjbGVhbnVwKTtcbiAgICAgICAgY2xlYW51cCgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogRGV0ZXJtaW5lIHdoZXRoZXIgYSBwb2ludCBpcyB3aXRoaW4gdGhlIElucHV0TWFuYWdlcidzIGNhbnZhc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7UG9pbnR9IHBvaW50IFBvaW50IHRvIHRlc3RcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gV2hldGhlciBvciBub3QgdGhlIHBvaW50IGlzIGluc2lkZSB0aGlzIElucHV0TWFuYWdlcidzIGNhbnZhc1xuICAgKi9cbiAgaW5zaWRlQ2FudmFzKHBvaW50KXtcbiAgICByZXR1cm4gaW5zaWRlQ2FudmFzKHBvaW50LCB0aGlzLmNhbnZhcyk7XG4gIH1cblxuICAvKipcbiAgICogTWFwcyBhIEdhbWVBY3Rpb24gdG8gYSBzcGVjaWZpYyBrZXkuIFRoZSBrZXkgY29kZXMgYXJlIGRlZmluZWQgaW4gZG9qby5rZXlzLlxuICAgKiBJZiB0aGUga2V5IGFscmVhZHkgaGFzIGEgR2FtZUFjdGlvbiBtYXBwZWQgdG8gaXQsIHRoZSBuZXcgR2FtZUFjdGlvbiBvdmVyd3JpdGVzIGl0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtIHtHYW1lQWN0aW9ufSBnYW1lQWN0aW9uIHRoZSBHYW1lQWN0aW9uIHRvIG1hcFxuICAgKiBAcGFyYW0ge09iamVjdH0ga2V5Q29kZSBkb2pvLmtleXMga2V5IGNvZGUsIG9yIGNoYXJhY3RlclxuICAgKi9cbiAgbWFwVG9LZXkoZ2FtZUFjdGlvbiwga2V5Q29kZSl7XG4gICAgdGhpcy5rZXlBY3Rpb25zW2tleUNvZGVdID0gZ2FtZUFjdGlvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgR2FtZUFjdGlvbiB0byBhIGtleVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtIHtPYmplY3R9IGtleUNvZGUgS2V5IGNoYXJhY3RlciBvciBkb2pvL2tleXMga2V5IGNvZGVcbiAgICogQHBhcmFtIHtCb29sZWFuPX0gaW5pdGlhbFByZXNzT25seSBEbyBvbmx5IG9uZSBmaXJlIG9mIHRoZSBhY3Rpb24gcGVyIGtleXByZXNzXG4gICAqIEByZXR1cm4ge0dhbWVBY3Rpb259IEdhbWVBY3Rpb24gdGhhdCBpcyBtYXBwZWQgdG8ga2V5Q29kZVxuICAgKi9cbiAgYWRkS2V5QWN0aW9uKGtleUNvZGUsIGluaXRpYWxQcmVzc09ubHkpe1xuICAgIHZhciBnYSA9IG5ldyBHYW1lQWN0aW9uKCk7XG4gICAgaWYoaW5pdGlhbFByZXNzT25seSl7XG4gICAgICBnYS5iZWhhdmlvciA9IGdhLmRldGVjdEluaXRpYWxQcmVzc09ubHk7XG4gICAgfVxuICAgIHRoaXMubWFwVG9LZXkoZ2Esa2V5Q29kZSk7XG5cbiAgICByZXR1cm4gZ2E7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhcnJvdyBrZXkgR2FtZUFjdGlvbnNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqL1xuICBhZGRBcnJvd0tleUFjdGlvbnMoKXtcbiAgICB0aGlzLmFkZEtleUFjdGlvbihrZXlzLlVQKTtcbiAgICB0aGlzLmFkZEtleUFjdGlvbihrZXlzLkRPV04pO1xuICAgIHRoaXMuYWRkS2V5QWN0aW9uKGtleXMuTEVGVCk7XG4gICAgdGhpcy5hZGRLZXlBY3Rpb24oa2V5cy5SSUdIVCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gbW91c2V1cCBldmVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgbG93ZXJjYXNlIG5hbWUgaW5zdGVhZCAtIHNhbWUgc3ludGF4IGFzIG5vcm1hbCBldmVudCBoYW5kbGluZ1xuICAgKi9cbiAgbW91c2VVcChlKSB7XG4gICAgdGhpcy5tb3VzZXVwKGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIG1vdXNldXAgZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgbW91c2V1cChlKXtcbiAgICB0aGlzLm1vdXNlQWN0aW9uLnJlbGVhc2UodGhpcy5ub3JtYWxpemVQb2ludChlKSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gbW91c2Vkb3duIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBsb3dlcmNhc2UgbmFtZSBpbnN0ZWFkIC0gc2FtZSBzeW50YXggYXMgbm9ybWFsIGV2ZW50IGhhbmRsaW5nXG4gICAqL1xuICBtb3VzZURvd24oZSl7XG4gICAgdGhpcy5tb3VzZWRvd24oZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gbW91c2Vkb3duIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIG1vdXNlZG93bihlKXtcbiAgICAvLyBFbnN1cmUgbW91c2UgaGFzIGJlZW4gcmVsZWFzZWRcbiAgICB0aGlzLm1vdXNlQWN0aW9uLnJlbGVhc2UobnVsbCk7XG4gICAgdmFyIGN1cnJlbnRQb2ludCA9IHRoaXMubm9ybWFsaXplUG9pbnQoZSk7XG4gICAgdGhpcy5tb3VzZUFjdGlvbi5pbnNpZGVDYW52YXMgPSB0aGlzLmluc2lkZUNhbnZhcyhjdXJyZW50UG9pbnQpO1xuICAgIHRoaXMubW91c2VBY3Rpb24ucHJlc3MoY3VycmVudFBvaW50KTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIG1vdXNlbW92ZSBldmVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgbG93ZXJjYXNlIG5hbWUgaW5zdGVhZCAtIHNhbWUgc3ludGF4IGFzIG5vcm1hbCBldmVudCBoYW5kbGluZ1xuICAgKi9cbiAgbW91c2VNb3ZlKGUpe1xuICAgIHRoaXMubW91c2Vtb3ZlKGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIG1vdXNlbW92ZSBldmVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBtb3VzZW1vdmUoZSl7XG4gICAgdGhpcy5tb3VzZUFjdGlvbi5wb3NpdGlvbiA9IHRoaXMubm9ybWFsaXplUG9pbnQoZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdG91Y2hzdGFydCBldmVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqIEBkZXByZWNhdGVkIFVzZSB0aGUgbG93ZXJjYXNlIG5hbWUgaW5zdGVhZCAtIHNhbWUgc3ludGF4IGFzIG5vcm1hbCBldmVudCBoYW5kbGluZ1xuICAgKi9cbiAgdG91Y2hTdGFydChlKXtcbiAgICB0aGlzLnRvdWNoc3RhcnQoZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdG91Y2hzdGFydCBldmVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICB0b3VjaHN0YXJ0KGUpe1xuICAgIC8vIEVuc3VyZSB0b3VjaCBoYXMgYmVlbiByZWxlYXNlZFxuICAgIHRoaXMudG91Y2hBY3Rpb24ucmVsZWFzZShudWxsKTtcbiAgICBjb25zb2xlLmxvZyhlLnRvdWNoZXMsIGUpO1xuICAgIC8vVG91Y2hMaXN0IGRvZXNuJ3QgaW1wbGVtZW50IC5tYXAoKVxuICAgIGNvbnN0IGN1cnJlbnRQb2ludHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUudG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFBvaW50cy5wdXNoKHRoaXMubm9ybWFsaXplUG9pbnQoZS50b3VjaGVzW2ldKSk7XG4gICAgfVxuICAgIHRoaXMudG91Y2hBY3Rpb24uaW5zaWRlQ2FudmFzID0gY3VycmVudFBvaW50cy5zb21lKHRoaXMuaW5zaWRlQ2FudmFzKTtcbiAgICB0aGlzLnRvdWNoQWN0aW9uLnByZXNzKGN1cnJlbnRQb2ludHMpO1xuICAgIGlmKHRoaXMuZW11bGF0ZU1vdXNlKXtcbiAgICAgIHRoaXMubW91c2Vkb3duKGUudG91Y2hlc1swXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIHRvdWNoZW5kIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBsb3dlcmNhc2UgbmFtZSBpbnN0ZWFkIC0gc2FtZSBzeW50YXggYXMgbm9ybWFsIGV2ZW50IGhhbmRsaW5nXG4gICAqL1xuICB0b3VjaEVuZChlKXtcbiAgICB0aGlzLnRvdWNoZW5kKGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIHRvdWNoZW5kIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIHRvdWNoZW5kKGUpe1xuICAgIC8vVG91Y2hMaXN0IGRvZXNuJ3QgaW1wbGVtZW50IC5tYXAoKVxuICAgIGNvbnN0IGN1cnJlbnRQb2ludHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUudG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFBvaW50cy5wdXNoKHRoaXMubm9ybWFsaXplUG9pbnQoZS50b3VjaGVzW2ldKSk7XG4gICAgfVxuICAgIHRoaXMudG91Y2hBY3Rpb24ucmVsZWFzZShjdXJyZW50UG9pbnRzKTtcbiAgICBpZih0aGlzLmVtdWxhdGVNb3VzZSl7XG4gICAgICB0aGlzLm1vdXNlVXAoZS50b3VjaGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdG91Y2htb3ZlIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBsb3dlcmNhc2UgbmFtZSBpbnN0ZWFkIC0gc2FtZSBzeW50YXggYXMgbm9ybWFsIGV2ZW50IGhhbmRsaW5nXG4gICAqL1xuICB0b3VjaE1vdmUoZSl7XG4gICAgdGhpcy50b3VjaG1vdmUoZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdG91Y2htb3ZlIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIHRvdWNobW92ZShlKXtcbiAgICAvL1RvdWNoTGlzdCBkb2Vzbid0IGltcGxlbWVudCAubWFwKClcbiAgICBjb25zdCBjdXJyZW50UG9pbnRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlLnRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGN1cnJlbnRQb2ludHMucHVzaCh0aGlzLm5vcm1hbGl6ZVBvaW50KGUudG91Y2hlc1tpXSkpO1xuICAgIH1cbiAgICB0aGlzLnRvdWNoQWN0aW9uLnBvc2l0aW9ucyA9IGN1cnJlbnRQb2ludHM7XG4gICAgaWYodGhpcy50b3VjaEFjdGlvbi5zdGFydFBvc2l0aW9ucyl7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGlmKHRoaXMuZW11bGF0ZU1vdXNlKXtcbiAgICAgIHRoaXMubW91c2Vtb3ZlKGUudG91Y2hlc1swXSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHJpZXZlcyB0aGUgR2FtZUFjdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGtleUNvZGUgb24gdGhlIGV2ZW50IG9iamVjdFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqIEByZXR1cm4ge0dhbWVBY3Rpb258bnVsbH0gVGhlIEdhbWVBY3Rpb24gYXNzb2NpYXRlZCB3aXRoIHRoZSBrZXlDb2RlIGVsc2UgbnVsbFxuICAgKi9cbiAgZ2V0S2V5QWN0aW9uKGUpIHtcbiAgICBpZiAodGhpcy5rZXlBY3Rpb25zKSB7XG4gICAgICByZXR1cm4gdGhpcy5rZXlBY3Rpb25zW2Uua2V5Q29kZV0gfHwgdGhpcy5rZXlBY3Rpb25zW1N0cmluZy5mcm9tQ2hhckNvZGUoZS5rZXlDb2RlKV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBrZXlwcmVzcyBldmVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqIEBkZXByZWNhdGVkIFVzZSBrZXlkb3duIGluc3RlYWQgLSBzYW1lIHN5bnRheCBhcyBub3JtYWwgZXZlbnQgaGFuZGxpbmdcbiAgICovXG4gIGtleVByZXNzZWQoZSkge1xuICAgIHRoaXMua2V5ZG93bihlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBrZXlkb3duIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBsb3dlcmNhc2UgbmFtZSBpbnN0ZWFkIC0gc2FtZSBzeW50YXggYXMgbm9ybWFsIGV2ZW50IGhhbmRsaW5nXG4gICAqL1xuICBrZXlEb3duKGUpe1xuICAgIHRoaXMua2V5ZG93bihlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBrZXlkb3duIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIGtleWRvd24oZSkge1xuICAgIHZhciBnYW1lQWN0aW9uID0gdGhpcy5nZXRLZXlBY3Rpb24oZSk7XG4gICAgaWYgKGdhbWVBY3Rpb24gJiYgIWdhbWVBY3Rpb24uaXNQcmVzc2VkKCkpIHtcbiAgICAgIGdhbWVBY3Rpb24ucHJlc3MoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24ga2V5dXAgZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKiBAZGVwcmVjYXRlZCBVc2Uga2V5dXAgaW5zdGVhZCAtIHNhbWUgc3ludGF4IGFzIG5vcm1hbCBldmVudCBoYW5kbGluZ1xuICAgKi9cbiAga2V5UmVsZWFzZWQoZSl7XG4gICAgdGhpcy5rZXl1cChlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBrZXl1cCBldmVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBrZXl1cChlKSB7XG4gICAgdmFyIGdhbWVBY3Rpb24gPSB0aGlzLmdldEtleUFjdGlvbihlKTtcbiAgICBpZiAoZ2FtZUFjdGlvbikge1xuICAgICAgZ2FtZUFjdGlvbi5yZWxlYXNlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZ2V0IGEgbm9ybWFsaXplZCBwb2ludCBvdXQgb2YgYW4gRXZlbnQgb2JqZWN0XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZXZ0IEV2ZW50IG9iamVjdFxuICAgKiBAcmV0dXJuIHtQb2ludH0gTm9ybWFsaXplZCBwb2ludFxuICAgKiBAZGVwcmVjYXRlZCBEZXByZWNhdGVkIGluIGZhdm9yIG9mIG5vcm1hbGl6ZVBvaW50IGZ1bmN0aW9uIChTYW1lIGZ1bmN0aW9uYWxpdHksIGRpZmZlcmVudCBuYW1lKVxuICAgKi9cbiAgZ2V0TW91c2VMb2MoZXZ0KXtcbiAgICByZXR1cm4gdGhpcy5ub3JtYWxpemVQb2ludChldnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gZ2V0IGEgbm9ybWFsaXplZCBwb2ludCBvdXQgb2YgYW4gRXZlbnQgb2JqZWN0XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZXZ0IEV2ZW50IG9iamVjdFxuICAgKiBAcmV0dXJuIHtQb2ludH0gTm9ybWFsaXplZCBwb2ludFxuICAgKi9cbiAgbm9ybWFsaXplUG9pbnQoZXZ0KXtcbiAgICBpZihldnQpe1xuICAgICAgdmFyIGNvb3Jkc00gPSBwb3NpdGlvbih0aGlzLmNhbnZhcyk7XG4gICAgICBpZih0aGlzLnpvb21SYXRpbyl7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogTWF0aC5yb3VuZCgoZXZ0LmNsaWVudFggLSBjb29yZHNNLngpIC8gdGhpcy56b29tUmF0aW8pLFxuICAgICAgICAgIHk6IE1hdGgucm91bmQoKGV2dC5jbGllbnRZIC0gY29vcmRzTS55KSAvIHRoaXMuem9vbVJhdGlvKVxuICAgICAgICB9O1xuICAgICAgfWVsc2V7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgeDogTWF0aC5yb3VuZChldnQuY2xpZW50WCAtIGNvb3Jkc00ueCksXG4gICAgICAgICAgeTogTWF0aC5yb3VuZChldnQuY2xpZW50WSAtIGNvb3Jkc00ueSlcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byByZXNpemUgdGhlIGNhbnZhc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICovXG4gIHJlc2l6ZSgpe1xuICAgIGlmKHRoaXMuZ2FtZUFyZWEgJiYgdGhpcy5jYW52YXNQZXJjZW50YWdlICYmIHRoaXMuY2FudmFzKXtcbiAgICAgIHZhciBjYW52YXNXaWR0aCA9IHRoaXMuY2FudmFzLndpZHRoO1xuICAgICAgdmFyIGNhbnZhc0hlaWdodCA9IHRoaXMuY2FudmFzLmhlaWdodDtcblxuICAgICAgdmFyIGJvZHlNYXJnaW5zID0gZ2V0TWFyZ2luRXh0ZW50cyhkb2N1bWVudC5ib2R5KTtcblxuICAgICAgdmFyIG5ld1dpZHRoID0gd2luZG93LmlubmVyV2lkdGggLSBib2R5TWFyZ2lucy53O1xuICAgICAgdmFyIG5ld0hlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodCAtIGJvZHlNYXJnaW5zLmg7XG5cbiAgICAgIHZhciB3aWR0aFRvSGVpZ2h0ID0gY2FudmFzV2lkdGggLyBjYW52YXNIZWlnaHQ7XG4gICAgICB2YXIgbmV3V2lkdGhUb0hlaWdodCA9IG5ld1dpZHRoIC8gbmV3SGVpZ2h0O1xuXG4gICAgICB2YXIgbmV3V2lkdGhTdHlsZSA9ICcnO1xuICAgICAgdmFyIG5ld0hlaWdodFN0eWxlID0gJyc7XG4gICAgICBpZiAobmV3V2lkdGhUb0hlaWdodCA+IHdpZHRoVG9IZWlnaHQpIHtcbiAgICAgICAgbmV3V2lkdGggPSBuZXdIZWlnaHQgKiB3aWR0aFRvSGVpZ2h0O1xuICAgICAgICBuZXdXaWR0aFN0eWxlID0gbmV3V2lkdGggKyAncHgnO1xuICAgICAgICBuZXdIZWlnaHRTdHlsZSA9IG5ld0hlaWdodCArICdweCc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXdXaWR0aFN0eWxlID0gbmV3V2lkdGggKyAncHgnO1xuICAgICAgICBuZXdIZWlnaHRTdHlsZSA9IE1hdGgucm91bmQobmV3V2lkdGggLyB3aWR0aFRvSGVpZ2h0KSArICdweCc7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuem9vbVJhdGlvID0gbmV3V2lkdGggLyBjYW52YXNXaWR0aCAqIHRoaXMuY2FudmFzUGVyY2VudGFnZTtcblxuICAgICAgdGhpcy5nYW1lQXJlYS5zdHlsZS53aWR0aCA9IG5ld1dpZHRoU3R5bGU7XG4gICAgICB0aGlzLmdhbWVBcmVhLnN0eWxlLmhlaWdodCA9IG5ld0hlaWdodFN0eWxlO1xuXG4gICAgICB2YXIgY2FudmFzUGVyY2VudGFnZVN0eWxlID0gTWF0aC5mbG9vcih0aGlzLmNhbnZhc1BlcmNlbnRhZ2UgKiAxMDApICsgJyUnO1xuICAgICAgdGhpcy5jYW52YXMuc3R5bGUud2lkdGggPSBjYW52YXNQZXJjZW50YWdlU3R5bGU7XG4gICAgICB0aGlzLmNhbnZhcy5zdHlsZS5oZWlnaHQgPSBjYW52YXNQZXJjZW50YWdlU3R5bGU7XG4gICAgICB0aGlzLmNhbnZhcy5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICAgIHRoaXMuY2FudmFzLnN0eWxlLm1hcmdpbkxlZnQgPSAnYXV0byc7XG4gICAgICB0aGlzLmNhbnZhcy5zdHlsZS5tYXJnaW5SaWdodCA9ICdhdXRvJztcbiAgICB9XG4gIH1cblxuICBwdXNoQ2xlYW51cChhLCBiKXtcbiAgICAvLyBjb25zb2xlLmxvZygncHVzaENsZWFudXAnLCBhLCBiKTtcbiAgfVxuXG59XG5cbm1vZHVsZS5leHBvcnRzID0gSW5wdXRNYW5hZ2VyO1xuIiwiLyoqXG4gKiBBIEdhbWVBY3Rpb24gdGhhdCBoYW5kbGVzIFRvdWNoIGV2ZW50c1xuICogQG5hbWUgVG91Y2hBY3Rpb25cbiAqIEBjb25zdHJ1Y3RvciBUb3VjaEFjdGlvblxuICogQGV4dGVuZHMge0dhbWVBY3Rpb259XG4gKi9cblxuY29uc3QgR2FtZUFjdGlvbiA9IHJlcXVpcmUoJy4vR2FtZUFjdGlvbicpO1xuXG5jbGFzcyBUb3VjaEFjdGlvbiBleHRlbmRzIEdhbWVBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgcG9zaXRpb25zIHdoZXJlIHRvdWNoc3RhcnQgaGFwcGVuZWRcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQG1lbWJlck9mIFRvdWNoQWN0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5zdGFydFBvc2l0aW9ucyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBwb3NpdGlvbnMgd2hlcmUgdG91Y2hlbmQgaGFwcGVuZWRcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQG1lbWJlck9mIFRvdWNoQWN0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5lbmRQb3NpdGlvbnMgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQXJyYXkgb2YgcG9zaXRpb25zIHdoZXJlIHRvdWNobW92ZSBoYXBwZW5lZFxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKiBAbWVtYmVyT2YgVG91Y2hBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnBvc2l0aW9ucyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXZXRoZXIgYW55IG9mIHRoZSB0b3VjaCBhY3Rpb25zIG9yaWdpbmF0ZWQgaW5zaWRlIHRoZSBjYW52YXNcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgVG91Y2hBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmluc2lkZUNhbnZhcyA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXG4gIH1cblxuICAvKipcbiAgICogU2lnbmFscyB0aGF0IHRoZSB0b3VjaCB3YXMgaW5pdGlhdGVkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFRvdWNoQWN0aW9uI1xuICAgKiBAcGFyYW0ge0FycmF5fSBzdGFydFBvc2l0aW9ucyBBcnJheSBvZiBwb2ludHMgd2hlcmUgdG91Y2ggd2FzIHByZXNzZWRcbiAgICovXG4gIHByZXNzKHN0YXJ0UG9zaXRpb25zKXtcbiAgICB0aGlzLnN0YXJ0UG9zaXRpb25zID0gc3RhcnRQb3NpdGlvbnM7XG4gICAgdGhpcy5wb3NpdGlvbnMgPSBzdGFydFBvc2l0aW9ucztcbiAgICBzdXBlci5wcmVzcyhzdGFydFBvc2l0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogU2lnbmFscyB0aGF0IHRoZSB0b3VjaCB3YXMgcmVsZWFzZWRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBUb3VjaEFjdGlvbiNcbiAgICogQHBhcmFtIHtBcnJheX0gZW5kUG9zaXRpb25zIEFycmF5IG9mIHBvaW50cyB3aGVyZSB0b3VjaCB3YXMgcmVsZWFzZWRcbiAgICovXG4gIHJlbGVhc2UoZW5kUG9zaXRpb25zKXtcbiAgICB0aGlzLmVuZFBvc2l0aW9ucyA9IGVuZFBvc2l0aW9ucztcbiAgICBzdXBlci5yZWxlYXNlKGVuZFBvc2l0aW9ucyk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBUb3VjaEFjdGlvbjtcbiIsIi8qKlxuICogQSBHYW1lQWN0aW9uIHRoYXQgaGFuZGxlcyBNb3VzZSBldmVudHNcbiAqIEBuYW1lIE1vdXNlQWN0aW9uXG4gKiBAY29uc3RydWN0b3IgTW91c2VBY3Rpb25cbiAqIEBleHRlbmRzIHtHYW1lQWN0aW9ufVxuICovXG5cbmNvbnN0IEdhbWVBY3Rpb24gPSByZXF1aXJlKCcuL0dhbWVBY3Rpb24nKTtcblxuY2xhc3MgTW91c2VBY3Rpb24gZXh0ZW5kcyBHYW1lQWN0aW9uIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIFBvc2l0aW9uIHdoZXJlIG1vdXNlZG93biBoYXBwZW5lZFxuICAgICAqIEB0eXBlIHtQb2ludH1cbiAgICAgKiBAbWVtYmVyT2YgTW91c2VBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gd2hlcmUgbW91c2V1cCBoYXBwZW5lZFxuICAgICAqIEB0eXBlIHtQb2ludH1cbiAgICAgKiBAbWVtYmVyT2YgTW91c2VBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmVuZFBvc2l0aW9uID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFBvc2l0aW9uIHdoZXJlIG1vdXNlbW92ZSBoYXBwZW5lZFxuICAgICAqIEB0eXBlIHtQb2ludH1cbiAgICAgKiBAbWVtYmVyT2YgTW91c2VBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnBvc2l0aW9uID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdldGhlciB0aGUgbW91c2UgYWN0aW9uIG9yaWdpbmF0ZWQgaW5zaWRlIHRoZSBjYW52YXNcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgTW91c2VBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmluc2lkZUNhbnZhcyA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXG4gIH1cblxuICAvKipcbiAgICogU2lnbmFscyB0aGF0IHRoZSBtb3VzZSB3YXMgcHJlc3NlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgKi9cbiAgcHJlc3Moc3RhcnRQb3NpdGlvbil7XG4gICAgdGhpcy5zdGFydFBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbjtcbiAgICB0aGlzLnBvc2l0aW9uID0gc3RhcnRQb3NpdGlvbjtcbiAgICBzdXBlci5wcmVzcyhzdGFydFBvc2l0aW9uKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIHRoYXQgdGhlIG1vdXNlIHdhcyByZWxlYXNlZFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIE1vdXNlQWN0aW9uI1xuICAgKiBAcGFyYW0gIHtQb2ludH0gZW5kUG9zaXRpb24gVGhlIHBvaW50IHdoZXJlIG1vdXNlIHdhcyByZWxlYXNlZFxuICAgKi9cbiAgcmVsZWFzZShlbmRQb3NpdGlvbil7XG4gICAgdGhpcy5lbmRQb3NpdGlvbiA9IGVuZFBvc2l0aW9uIHx8IHRoaXMucG9zaXRpb247XG4gICAgc3VwZXIucmVsZWFzZShlbmRQb3NpdGlvbik7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBNb3VzZUFjdGlvbjtcbiIsImZ1bmN0aW9uIGluc2lkZUNhbnZhcyhwdCwgY2FudmFzKXtcbiAgaWYoKHB0LnggPCAwKSB8fCAocHQueCA+ICBjYW52YXMud2lkdGgpIHx8IChwdC55IDwgMCkgfHwgKHB0LnkgPiBjYW52YXMuaGVpZ2h0KSl7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zaWRlQ2FudmFzO1xuIiwiLyoqXG4gKiBUaGUgUmVzb3VyY2VNYW5hZ2VyIGhhbmRsZXMgbG9hZGluZyBpbWFnZXMgYW5kIHNvdW5kcyBmb3IgdXNlIGluIGdhbWVzLlxuICogQG5hbWUgUmVzb3VyY2VNYW5hZ2VyXG4gKiBAY29uc3RydWN0b3IgUmVzb3VyY2VNYW5hZ2VyXG4gKi9cblxuICd1c2Ugc3RyaWN0JztcblxuY29uc3QgaGFzID0gcmVxdWlyZSgnLi9oYXMnKTtcbmNvbnN0IFNvdW5kID0gcmVxdWlyZSgnLi9zb3VuZHMvU291bmQnKTtcbmNvbnN0IFdlYkF1ZGlvID0gcmVxdWlyZSgnLi9zb3VuZHMvV2ViQXVkaW8nKTtcblxudmFyIHJlc291cmNlTGlzdCA9IHt9O1xuXG4vL1RPRE86IG1vdmUgdGhlc2UgdG8gaXRzIG93biBtb2R1bGUgZm9yIHVuaXQgdGVzdGluZz9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgoYmFzZURpciwgcGF0aCl7XG4gIHZhciBqb2luZWRQYXRoID0gcGF0aDtcbiAgaWYoYmFzZURpcil7XG4gICAgam9pbmVkUGF0aCA9IFtiYXNlRGlyLCBwYXRoXS5qb2luKCcvJyk7XG4gIH1cbiAgcmV0dXJuIGpvaW5lZFBhdGgucmVwbGFjZSgvXFwvezIsfS9nLCAnLycpO1xufVxuXG5mdW5jdGlvbiBmbGlwWChpbWFnZSl7XG4gIHZhciBvZmZzY3JlZW5DYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgb2Zmc2NyZWVuQ2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgb2Zmc2NyZWVuQ2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG4gIHZhciBjdHggPSBvZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICBjdHgudHJhbnNsYXRlKG9mZnNjcmVlbkNhbnZhcy53aWR0aCwgMCk7XG4gIGN0eC5zY2FsZSgtMSwgMSk7XG4gIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICByZXR1cm4gb2Zmc2NyZWVuQ2FudmFzLnRvRGF0YVVSTCgpO1xufVxuXG5mdW5jdGlvbiBmbGlwWShpbWFnZSl7XG4gIHZhciBvZmZzY3JlZW5DYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgb2Zmc2NyZWVuQ2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgb2Zmc2NyZWVuQ2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG4gIHZhciBjdHggPSBvZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICBjdHgudHJhbnNsYXRlKDAsIG9mZnNjcmVlbkNhbnZhcy5oZWlnaHQpO1xuICBjdHguc2NhbGUoMSwgLTEpO1xuICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgcmV0dXJuIG9mZnNjcmVlbkNhbnZhcy50b0RhdGFVUkwoKTtcbn1cblxuY2xhc3MgSW1hZ2VXcmFwcGVyIHtcbiAgY29uc3RydWN0b3IoZmlsZW5hbWUpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLm5hbWUgPSBmaWxlbmFtZTtcbiAgICBzZWxmLmNvbXBsZXRlID0gZmFsc2U7XG4gICAgc2VsZi5pbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBzZWxmLmltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmNvbXBsZXRlID0gdHJ1ZTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICBsb2FkKCl7XG4gICAgdGhpcy5pbWcuc3JjID0gdGhpcy5uYW1lO1xuICB9XG59XG5cblxuY2xhc3MgUmVzb3VyY2VNYW5hZ2VyIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBhbGwgdGhlIHJlc291cmNlcyBoYXZlIGJlZW4gbG9hZGVkXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIFJlc291cmNlTWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYWxsTG9hZGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBkaXJlY3RvcnkgdG8gbG9hZCBpbWFnZXMgZnJvbVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIFJlc291cmNlTWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaW1hZ2VEaXIgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgZGlyZWN0b3J5IHRvIGxvYWQgc291bmRzIGZyb21cbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnNvdW5kRGlyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIGFsbCB0aGUgcmVzb3VyY2VzIGJ5IHRoZWlyIFVSTHNcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnJlc291cmNlTGlzdCA9IHJlc291cmNlTGlzdDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cbiAgICAvLyBUT0RPIG5vdCBzdXJlIGEgYmV0dGVyIHdheVxuICAgIGlmKCF0aGlzLlNvdW5kKXtcbiAgICAgIGlmKGhhcygnV2ViQXVkaW8nKSl7XG4gICAgICAgIHRoaXMuU291bmQgPSBXZWJBdWRpbztcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHRoaXMuU291bmQgPSBTb3VuZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgYW4gaW1hZ2UgKG9yIGEgY29sbGVjdGlvbiBvZiBpbWFnZXMpLCBhbmQgdHJhY2tzIGlmIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmVzb3VyY2VNYW5hZ2VyI1xuICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gZmlsZXMgRmlsZW5hbWUgb2YgdGhlIGltYWdlIHJlbGF0aXZlIHRoZSBHYW1lJ3MgSFRNTCBwYWdlLlxuICAgKiBAcmV0dXJucyB7SW1hZ2V8QXJyYXl9IFJldHVybiB0eXBlIGJhc2VkIG9uIGFyZ3VtZW50OiBJbWFnZSBpZiBTdHJpbmcgb3IgQXJyYXkgb2YgSW1hZ2VzIGlmIEFycmF5XG4gICAqL1xuICBsb2FkSW1hZ2UoZmlsZXMpe1xuICAgIGxldCBzaW5nbGVGaWxlID0gZmFsc2U7XG4gICAgaWYoIUFycmF5LmlzQXJyYXkoZmlsZXMpKSB7XG4gICAgICBzaW5nbGVGaWxlID0gdHJ1ZTtcbiAgICAgIGZpbGVzID0gW2ZpbGVzXTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlTGlzdCA9IGZpbGVzLm1hcCgoZmlsZSkgPT4ge1xuICAgICAgY29uc3QgZmlsZW5hbWUgPSBub3JtYWxpemVQYXRoKHRoaXMuaW1hZ2VEaXIsIGZpbGUpO1xuICAgICAgLy9pZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIGltYWdlLCBqdXN0IHJldHVybiBpdFxuICAgICAgaWYodGhpcy5yZXNvdXJjZUxpc3RbZmlsZW5hbWVdKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzb3VyY2VMaXN0W2ZpbGVuYW1lXS5pbWc7XG4gICAgICB9XG4gICAgICB0aGlzLmFsbExvYWRlZCA9IGZhbHNlO1xuXG4gICAgICBjb25zdCB3cmFwcGVyID0gbmV3IEltYWdlV3JhcHBlcihmaWxlbmFtZSk7XG4gICAgICAvLyBOZWVkIHRvIGV4cGxpY2l0bHkgY2FsbCBsb2FkIGJlY2F1c2UgZmxpcEltYWdlIGFsc28gdXNlcyB0aGlzIG9iamVjdFxuICAgICAgLy8gd2hpY2ggaXMgcHJvYmFibHkgYSBiYWQgaWRlYSBhbmQgc2hvdWxkIGNoYW5nZSBpbiBmdXR1cmVcbiAgICAgIC8vIFRPRE86IGRpZmZlcmVudCBvYmplY3RzIGZvciBmbGlwcGVkIGltYWdlIGFuZCByZWd1bGFyIGltYWdlXG4gICAgICB3cmFwcGVyLmxvYWQoKTtcbiAgICAgIHRoaXMucmVzb3VyY2VMaXN0W2ZpbGVuYW1lXSA9IHdyYXBwZXI7XG4gICAgICByZXR1cm4gd3JhcHBlci5pbWc7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2luZ2xlRmlsZSA/IGZpbGVMaXN0WzBdIDogZmlsZUxpc3Q7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgYSBzb3VuZCBmaWxlIChvciBhIGNvbGxlY3Rpb24gb2Ygc291bmQgZmlsZXMpLCBhbmQgdHJhY2tzIGlmIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmVzb3VyY2VNYW5hZ2VyI1xuICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gZmlsZW5hbWUgRmlsZW5hbWUgb2YgdGhlIHNvdW5kIHJlbGF0aXZlIHRoZSBHYW1lJ3MgSFRNTCBwYWdlLlxuICAgKiBAcmV0dXJucyB7U291bmR8QXJyYXl9IFJldHVybiB0eXBlIGJhc2VkIG9uIGFyZ3VtZW50OiBTb3VuZCBPYmplY3QgaWYgU3RyaW5nIG9yIEFycmF5IG9mIFNvdW5kIE9iamVjdHMgaWYgQXJyYXlcbiAgICovXG4gIGxvYWRTb3VuZChmaWxlcyl7XG4gICAgbGV0IHNpbmdsZUZpbGUgPSBmYWxzZTtcbiAgICBpZighQXJyYXkuaXNBcnJheShmaWxlcykpIHtcbiAgICAgIHNpbmdsZUZpbGUgPSB0cnVlO1xuICAgICAgZmlsZXMgPSBbZmlsZXNdO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbGVMaXN0ID0gZmlsZXMubWFwKChmaWxlKSA9PiB7XG4gICAgICBjb25zdCBmaWxlbmFtZSA9IG5vcm1hbGl6ZVBhdGgodGhpcy5zb3VuZERpciwgZmlsZSk7XG4gICAgICAvL2lmIHdlIGFscmVhZHkgaGF2ZSB0aGUgc291bmQsIGp1c3QgcmV0dXJuIGl0XG4gICAgICBpZih0aGlzLnJlc291cmNlTGlzdFtmaWxlbmFtZV0pe1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNvdXJjZUxpc3RbZmlsZW5hbWVdO1xuICAgICAgfVxuICAgICAgdGhpcy5hbGxMb2FkZWQgPSBmYWxzZTtcblxuICAgICAgY29uc3Qgc291bmQgPSBuZXcgdGhpcy5Tb3VuZChmaWxlbmFtZSk7XG4gICAgICB0aGlzLnJlc291cmNlTGlzdFtmaWxlbmFtZV0gPSBzb3VuZDtcbiAgICAgIHJldHVybiBzb3VuZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBzaW5nbGVGaWxlID8gZmlsZUxpc3RbMF0gOiBmaWxlTGlzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGbGlwcyBhbiBpbWFnZSB1c2luZyB0aGUgbG9naWMgaW4gYSBmbGlwIGZ1bmN0aW9uIHBhc3NlZCBhbmQgYXR0YWNoZXMgdG8gcmVzb3VyY2UgbWFuYWdlciB3aXRoIG5hbWVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAqIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IG5hbWUgTmFtZSBmb3IgY2FjaGluZyBmbGlwcGVkIGltYWdlXG4gICAqIEBwYXJhbSAge0ltYWdlfSBpbWFnZSBJbWFnZSB0byBiZSBmbGlwcGVkXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbGlwRm4gRnVuY3Rpb24gY29udGFpbmluZyBsb2dpYyB0byBmbGlwIGltYWdlXG4gICAqIEByZXR1cm4ge0ltYWdlfSBGbGlwcGVkIGltYWdlXG4gICAqL1xuICBmbGlwSW1hZ2UobmFtZSwgaW1hZ2UsIGZsaXBGbil7XG4gICAgdGhpcy5hbGxMb2FkZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IHdyYXBwZXIgPSBuZXcgSW1hZ2VXcmFwcGVyKG5hbWUpO1xuICAgIHRoaXMucmVzb3VyY2VMaXN0W25hbWVdID0gd3JhcHBlcjtcbiAgICBjb25zdCBpbWcyID0gbmV3IEltYWdlKCk7XG4gICAgZnVuY3Rpb24gZG9GbGlwKCkge1xuICAgICAgd3JhcHBlci5pbWcuc3JjID0gZmxpcEZuKGltZzIpO1xuICAgICAgaW1nMi5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgZG9GbGlwKTtcbiAgICB9XG4gICAgaW1nMi5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZG9GbGlwKTtcbiAgICBpbWcyLnNyYyA9IGltYWdlLnNyYztcblxuICAgIHJldHVybiB3cmFwcGVyLmltZztcbiAgfVxuXG4gIC8qKlxuICAgKiBGbGlwIGltYWdlIGFsb25nIHgtYXhpcyB1c2luZyBkZWZhdWx0IGZsaXAgbG9naWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAqIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IG5hbWUgTmFtZSBmb3IgY2FjaGluZyBmbGlwcGVkIGltYWdlXG4gICAqIEBwYXJhbSAge0ltYWdlfSBpbWFnZSBJbWFnZSB0byBiZSBmbGlwcGVkXG4gICAqIEByZXR1cm4ge0ltYWdlfSBGbGlwcGVkIGltYWdlXG4gICAqL1xuICBmbGlwSW1hZ2VYKG5hbWUsIGltYWdlKXtcbiAgICByZXR1cm4gdGhpcy5mbGlwSW1hZ2UobmFtZSwgaW1hZ2UsIGZsaXBYKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGbGlwIGltYWdlIGFsb25nIHRoZSB5LWF4aXMgdXNpbmcgZGVmYXVsdCBmbGlwIGxvZ2ljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmVzb3VyY2VNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtTdHJpbmd8TnVtYmVyfSBuYW1lIE5hbWUgZm9yIGNhY2hpbmcgZmxpcHBlZCBpbWFnZVxuICAgKiBAcGFyYW0gIHtJbWFnZX0gaW1hZ2UgSW1hZ2UgdG8gYmUgZmxpcHBlZFxuICAgKiBAcmV0dXJuIHtJbWFnZX0gRmxpcHBlZCBpbWFnZVxuICAgKi9cbiAgZmxpcEltYWdlWShuYW1lLCBpbWFnZSl7XG4gICAgcmV0dXJuIHRoaXMuZmxpcEltYWdlKG5hbWUsIGltYWdlLCBmbGlwWSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHJlc291cmNlcyBoYXZlIGZpbmlzaGVkIGxvYWRpbmdcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAqL1xuICByZXNvdXJjZXNSZWFkeSgpe1xuICAgIGlmKHRoaXMuYWxsTG9hZGVkKXtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IodmFyIGZpbGVuYW1lIGluIHRoaXMucmVzb3VyY2VMaXN0KXtcbiAgICAgICAgdmFyIHJlc291cmNlID0gdGhpcy5yZXNvdXJjZUxpc3RbZmlsZW5hbWVdO1xuICAgICAgICBpZighcmVzb3VyY2UuY29tcGxldGUpe1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5hbGxMb2FkZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHBlcmNlbnQgb2YgcmVzb3VyY2VzIGxvYWRlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAqIEByZXR1cm4ge051bWJlcn0gVGhlIHBlcmNlbnQgb2YgcmVzb3VyY2VzIGxvYWRlZFxuICAgKi9cbiAgZ2V0UGVyY2VudENvbXBsZXRlKCl7XG4gICAgdmFyIG51bUNvbXBsZXRlID0gMC4wO1xuICAgIHZhciBsZW5ndGggPSAwO1xuICAgIGZvcih2YXIgZmlsZW5hbWUgaW4gdGhpcy5yZXNvdXJjZUxpc3Qpe1xuICAgICAgdmFyIHJlc291cmNlID0gdGhpcy5yZXNvdXJjZUxpc3RbZmlsZW5hbWVdO1xuICAgICAgbGVuZ3RoKys7XG4gICAgICBpZihyZXNvdXJjZS5jb21wbGV0ZSl7XG4gICAgICAgIG51bUNvbXBsZXRlID0gbnVtQ29tcGxldGUgKyAxLjA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGxlbmd0aCA9PT0gMCl7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoKG51bUNvbXBsZXRlIC8gbGVuZ3RoKSAqIDEwMC4wKTtcbiAgICB9XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc291cmNlTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaGFja3kgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIGhhc1xuXG5jb25zdCBnbG9iYWxBdWRpb0NvbnRleHQgPSByZXF1aXJlKCcuL3NoaW1zL0F1ZGlvQ29udGV4dCcpO1xuXG5cbmZ1bmN0aW9uIGhhcyhjaGVjayl7XG5cbiAgaWYoY2hlY2sgPT0gJ3NoaXR0eVNvdW5kJyl7XG4gICAgcmV0dXJuICEhKChoYXMoJ2FuZHJvaWQnKSB8fCBoYXMoJ2lvcycpKSAmJiBoYXMoJ3dlYmtpdCcpKTtcbiAgfVxuICBlbHNlIGlmKGNoZWNrID09ICdhbmRyb2lkJyl7XG4gICAgcmV0dXJuIChwYXJzZUZsb2F0KG5hdmlnYXRvci51c2VyQWdlbnQuc3BsaXQoXCJBbmRyb2lkIFwiKVsxXSkgfHwgdW5kZWZpbmVkKTtcbiAgfVxuICBlbHNlIGlmKGNoZWNrID09ICdpb3MnKXtcbiAgICAvL1RPRE8gbmVlZCBzb21ldGhpbmcgZm9yIHRoaXNcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZWxzZSBpZihjaGVjayA9PSAnd2Via2l0Jyl7XG4gICAgcmV0dXJuIChwYXJzZUZsb2F0KG5hdmlnYXRvci51c2VyQWdlbnQuc3BsaXQoXCJXZWJLaXQvXCIpWzFdKSB8fCB1bmRlZmluZWQpO1xuICB9XG4gIGVsc2UgaWYoY2hlY2sgPT0gJ1dlYkF1ZGlvJyl7XG4gICAgcmV0dXJuICEhZ2xvYmFsLkF1ZGlvQ29udGV4dDtcbiAgfVxuICBlbHNlIGlmIChjaGVjayA9PT0gJ3RvdWNoJykge1xuICAgIHJldHVybiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyoqXG4gKiBBbiBBdWRpbyBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIGEgZ2VuZXJpYyBBUElcbiAqIEBuYW1lIFNvdW5kXG4gKiBAY29uc3RydWN0b3IgU291bmRcbiAqL1xuXG5cbi8qKlxuICogTWFwIG9mIGF1ZGlvIHR5cGVzIGFuZCBjb2RlY3MgdXNlZCBpbiBmYWxsYmFjayBsb2FkaW5nIG9mIHNvdW5kcyA8YnI+XG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSFRNTC9TdXBwb3J0ZWRfbWVkaWFfZm9ybWF0c1xuICogQHR5cGUge09iamVjdH1cbiAqIEBtZW1iZXJPZiBTb3VuZCNcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8vbXBlZycgJy5tcDMnXG4gKiBAcHJvcGVydHkge1N0cmluZ30gJ2F1ZGlvL3dlYm0nICcud2VibSdcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8vb2dnJyAnLm9nZydcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8vd2F2JyAnLndhdidcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8vYWFjJyAnLmFhYydcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8veC1tNGEnICcubTRhJ1xuICogQGV4YW1wbGVcbiAqIC8vIFRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGZvcm1hdHM6XG4gKiAvLyBEbyB0aGlzIGJlZm9yZSBsb2FkaW5nIGFueSBzb3VuZHNcbiAqIHJlcXVpcmUoW1xuICogICAnZnJvemVuL3NvdW5kcy9Tb3VuZCdcbiAqIF0sIGZ1bmN0aW9uKFNvdW5kKXtcbiAqICAgU291bmQucHJvdG90eXBlLmZvcm1hdHMgPSB7XG4gKiAgICAgJ2F1ZGlvL21wZWcnOiAnLm1wMycsXG4gKiAgICAgJ2F1ZGlvL3dlYm0nOiAnLndlYm0nXG4gKiAgIH07XG4gKiB9KTtcbiAqL1xuY29uc3QgZm9ybWF0cyA9IHtcbiAgJ2F1ZGlvL21wZWcnOiAnLm1wMycsXG4gICdhdWRpby93ZWJtJzogJy53ZWJtJyxcbiAgJ2F1ZGlvL29nZyc6ICcub2dnJyxcbiAgJ2F1ZGlvL3dhdic6ICcud2F2JyxcbiAgJ2F1ZGlvL2FhYyc6ICcuYWFjJyxcbiAgJ2F1ZGlvL3gtbTRhJzogJy5tNGEnXG59O1xuXG5cblxuY2xhc3MgU291bmQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIEF1ZGlvIG9iamVjdCAtIHR5cGljYWxseSB0aGUgZmlsZW5hbWVcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBtZW1iZXJPZiBTb3VuZCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTaWduYWxzIGlmIHRoZSBBdWRpbyBvYmplY3QgaGFzIGNvbXBsZXRlZCBsb2FkaW5nXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5jb21wbGV0ZSA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyB0aGUgYnJvd3NlciBcInByb2JhYmx5XCIgY2FuIHBsYXlcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5wcm9iYWJseSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyB0aGUgYnJvd3NlciBcIm1heWJlXCIgY2FuIHBsYXlcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5tYXliZSA9IFtdO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblxuICAgIHRoaXMuZm9ybWF0cyA9IGZvcm1hdHM7XG5cbiAgICBpZih0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpe1xuICAgICAgdGhpcy5sb2FkKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIHRoZSBzb3VuZCBieSBmaWxlbmFtZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGZpbGVuYW1lIFRoZSBmaWxlbmFtZSBvZiB0aGUgZmlsZSB0byBsb2FkXG4gICAqL1xuICBsb2FkKGZpbGVuYW1lKXtcbiAgICB0aGlzLm5hbWUgPSBmaWxlbmFtZTtcbiAgICB0aGlzLmNvbXBsZXRlID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb29wIHRoZSBzb3VuZCBhdCBhIGNlcnRhaW4gdm9sdW1lXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgU291bmQjXG4gICAqIEBwYXJhbSAge051bWJlcn0gdm9sdW1lIFZhbHVlIG9mIHZvbHVtZSAtIGJldHdlZW4gMCBhbmQgMVxuICAgKi9cbiAgbG9vcCh2b2x1bWUpe31cblxuICAvKipcbiAgICogUGxheSB0aGUgc291bmQgYXQgYSBjZXJ0YWluIHZvbHVtZSBhbmQgc3RhcnQgdGltZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHZvbHVtZSAgICBWYWx1ZSBvZiB2b2x1bWUgLSBiZXR3ZWVuIDAgYW5kIDFcbiAgICogQHBhcmFtICB7TnVtYmVyfSBzdGFydFRpbWUgVmFsdWUgb2YgbWlsbGlzZWNvbmRzIGludG8gdGhlIHRyYWNrIHRvIHN0YXJ0XG4gICAqL1xuICBwbGF5KHZvbHVtZSwgc3RhcnRUaW1lKXt9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB1c2VkIHRvIGNvbnN0cnVjdCBBdWRpbyBvYmplY3RzIGludGVybmFsbHlcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBTb3VuZCNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7TnVtYmVyfSB2b2x1bWUgVmFsdWUgb2Ygdm9sdW1lIC0gYmV0d2VlbiAwIGFuZCAxXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IGxvb3AgV2hldGhlciBvciBub3QgdG8gbG9vcCBhdWRpb1xuICAgKiBAcmV0dXJuIHtBdWRpb30gQXVkaW8gb2JqZWN0IHRoYXQgd2FzIGNvbnN0cnVjdGVkXG4gICAqL1xuICBfaW5pdEF1ZGlvKHZvbHVtZSwgbG9vcCl7fVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdXNlZCB0byBnZW5lcmF0ZSBhIGNhY2hlIG9mIGV4dGVuc2lvbnMgKHByb2JhYmx5L21heWJlIGFycmF5cykgdG8gdHJ5IGxvYWRpbmdcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBTb3VuZCNcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybiB7U3RyaW5nfSBGaXJzdCBleHRlbnNpb24gdG8gdHJ5IGxvYWRpbmdcbiAgICovXG4gIF9jaG9vc2VGb3JtYXQoKXtcbiAgICBpZighdGhpcy5wcm9iYWJseS5sZW5ndGggJiYgIXRoaXMubWF5YmUubGVuZ3RoKXtcbiAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIGJlc3QgZXh0ZW5zaW9uIGlmIHdlIGhhdmUgbm8gY2FjaGVcbiAgICAgIHZhciBhdWRpbyA9IG5ldyBBdWRpbygpO1xuICAgICAgdmFyIGNvZGVjO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGZvcihjb2RlYyBpbiB0aGlzLmZvcm1hdHMpe1xuICAgICAgICByZXN1bHQgPSBhdWRpby5jYW5QbGF5VHlwZShjb2RlYyk7XG4gICAgICAgIGlmKHJlc3VsdCA9PT0gJ3Byb2JhYmx5Jyl7XG4gICAgICAgICAgdGhpcy5wcm9iYWJseS5wdXNoKHRoaXMuZm9ybWF0c1tjb2RlY10pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYocmVzdWx0ID09PSAnbWF5YmUnKXtcbiAgICAgICAgICB0aGlzLm1heWJlLnB1c2godGhpcy5mb3JtYXRzW2NvZGVjXSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0aGlzLnByb2JhYmx5Lmxlbmd0aCl7XG4gICAgICByZXR1cm4gdGhpcy5wcm9iYWJseVswXTtcbiAgICB9XG5cbiAgICBpZih0aGlzLm1heWJlLmxlbmd0aCl7XG4gICAgICByZXR1cm4gdGhpcy5tYXliZVswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHVzZWQgdG8gcmVtb3ZlIGEgZXh0ZW5zaW9uIHRoYXQgZGlkbid0IHdvcmsgYW5kIHJldHVybiB0aGUgbmV4dCB2aWFibGUgZXh0ZW5zaW9uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgU291bmQjXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gTmV4dCBleHRlbnNpb24gdG8gdHJ5IGxvYWRpbmdcbiAgICovXG4gIF9uZXh0Rm9ybWF0KCl7XG4gICAgaWYodGhpcy5wcm9iYWJseS5sZW5ndGggPiAxKXtcbiAgICAgIHRoaXMucHJvYmFibHkuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0aGlzLnByb2JhYmx5WzBdO1xuICAgIH1cblxuICAgIGlmKHRoaXMucHJvYmFibHkubGVuZ3RoID09PSAxKXtcbiAgICAgIHRoaXMucHJvYmFibHkubGVuZ3RoID0gMDtcbiAgICAgIGlmKHRoaXMubWF5YmUubGVuZ3RoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF5YmVbMF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYodGhpcy5tYXliZS5sZW5ndGggPiAxKXtcbiAgICAgIHRoaXMubWF5YmUuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0aGlzLm1heWJlWzBdO1xuICAgIH1cblxuICAgIGlmKHRoaXMubWF5YmUubGVuZ3RoID09PSAxKXtcbiAgICAgIHRoaXMubWF5YmUubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNvdW5kO1xuIiwiLyoqXG4gKiBBbiBBdWRpbyBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIFdlYkF1ZGlvIGludG8gYSBnZW5lcmljIEFQSVxuICogQG5hbWUgV2ViQXVkaW9cbiAqIEBjb25zdHJ1Y3RvciBXZWJBdWRpb1xuICogQGV4dGVuZHMgU291bmRcbiAqL1xuXG5jb25zdCBTb3VuZCA9IHJlcXVpcmUoJy4vU291bmQnKTtcbmNvbnN0IHJlbW92ZUV4dGVuc2lvbiA9IHJlcXVpcmUoJy4uL3V0aWxzL3JlbW92ZUV4dGVuc2lvbicpO1xuY29uc3QgaGFzID0gcmVxdWlyZSgnLi4vaGFzJyk7XG5cbnZhciBhdWRpb0NvbnRleHQgPSBudWxsO1xuXG5cbmlmKGhhcygnV2ViQXVkaW8nKSl7XG4gIGF1ZGlvQ29udGV4dCA9IG5ldyB3aW5kb3cuQXVkaW9Db250ZXh0KCk7XG59XG5cbmlmKGhhcygnc2hpdHR5U291bmQnKSl7XG4gIC8vIFNpbWlsYXIgc3RyYXRlZ3kgdG8gaHR0cHM6Ly9naXRodWIuY29tL0NyZWF0ZUpTL1NvdW5kSlNcbiAgZnVuY3Rpb24gaGFuZGxlU2hpdHR5KCkge1xuICAgIGNvbnN0IHNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICBzb3VyY2UuYnVmZmVyID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlcigxLCAxLCAyMjA1MCk7XG4gICAgc291cmNlLmNvbm5lY3QoYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICBzb3VyY2Uuc3RhcnQoMCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVNoaXR0eSk7XG4gIH1cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVNoaXR0eSk7XG59XG5cbmNsYXNzIFdlYkF1ZGlvIGV4dGVuZHMgU291bmQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFdlYkF1ZGlvIEF1ZGlvQ29udGV4dCAtIHVzZWQgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGEgc291bmRcbiAgICAgKiBAdHlwZSB7QXVkaW9Db250ZXh0fVxuICAgICAqIEBtZW1iZXJPZiBXZWJBdWRpbyNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gYXVkaW9Db250ZXh0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNvdW5kIGJ1ZmZlclxuICAgICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAgICogQG1lbWJlck9mIFdlYkF1ZGlvI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5idWZmZXIgPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGxvYWQoZmlsZW5hbWUpe1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMubmFtZSA9IGZpbGVuYW1lO1xuXG4gICAgdmFyIGJhc2VuYW1lID0gcmVtb3ZlRXh0ZW5zaW9uKGZpbGVuYW1lKTtcbiAgICBpZihiYXNlbmFtZSA9PT0gZmlsZW5hbWUpe1xuICAgICAgZmlsZW5hbWUgPSBiYXNlbmFtZSArIHRoaXMuX2Nob29zZUZvcm1hdCgpO1xuICAgIH1cbiAgICAvLyBmaWxlbmFtZSA9IHJlcS50b1VybChmaWxlbmFtZSk7XG5cbiAgICBmdW5jdGlvbiBkZWNvZGVBdWRpb0RhdGEoZSl7XG4gICAgICAvLyBEZWNvZGUgYXN5bmNocm9ub3VzbHlcbiAgICAgIHNlbGYuYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShlLnRhcmdldC5yZXNwb25zZSxcbiAgICAgICAgZnVuY3Rpb24oYnVmZmVyKXtcbiAgICAgICAgICBzZWxmLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgICBzZWxmLmNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICB2YXIgZm9ybWF0ID0gc2VsZi5fbmV4dEZvcm1hdCgpO1xuICAgICAgICAgIGlmKGZvcm1hdCl7XG4gICAgICAgICAgICBzZWxmLmxvYWQoc2VsZi5uYW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBicm93c2VyIGhhcyBBdWRpb0NvbnRleHQsIGl0J3MgbmV3IGVub3VnaCBmb3IgWE1MSHR0cFJlcXVlc3RcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHJlcXVlc3Qub3BlbignR0VUJywgZmlsZW5hbWUsIHRydWUpO1xuICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcblxuICAgIHJlcXVlc3Qub25sb2FkID0gZGVjb2RlQXVkaW9EYXRhO1xuICAgIHJlcXVlc3Quc2VuZCgpO1xuICB9XG5cbiAgbG9vcCh2b2x1bWUpe1xuICAgIC8vIFJldHVybiBlYXJseSBpZiB3ZSBkb24ndCBoYXZlIGEgYnVmZmVyIHRvIHByb3RlY3QgZnJvbSB1bmxvYWRlZCByZXNvdXJjZXNcbiAgICBpZighdGhpcy5idWZmZXIpe1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhdWRpbyA9IHRoaXMuX2luaXRBdWRpbyh2b2x1bWUsIHRydWUpO1xuICAgIGF1ZGlvLnN0YXJ0KDApO1xuICB9XG5cbiAgcGxheSh2b2x1bWUsIHN0YXJ0VGltZSl7XG4gICAgLy8gUmV0dXJuIGVhcmx5IGlmIHdlIGRvbid0IGhhdmUgYSBidWZmZXIgdG8gcHJvdGVjdCBmcm9tIHVubG9hZGVkIHJlc291cmNlc1xuICAgIGlmKCF0aGlzLmJ1ZmZlcil7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhcnRUaW1lID0gc3RhcnRUaW1lIHx8IDA7XG5cbiAgICB2YXIgYXVkaW8gPSB0aGlzLl9pbml0QXVkaW8odm9sdW1lLCBmYWxzZSk7XG4gICAgYXVkaW8uc3RhcnQoc3RhcnRUaW1lKTtcbiAgfVxuXG4gIF9pbml0QXVkaW8odm9sdW1lLCBsb29wKXtcbiAgICBsb29wID0gdHlwZW9mIGxvb3AgPT09ICdib29sZWFuJyA/IGxvb3AgOiBmYWxzZTtcblxuICAgIHZhciBzb3VyY2UgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICBzb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgc291cmNlLmxvb3AgPSBsb29wO1xuICAgIGlmKHZvbHVtZSl7XG4gICAgICB2YXIgZ2Fpbk5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgICBnYWluTm9kZS5nYWluLnZhbHVlID0gdm9sdW1lO1xuICAgICAgc291cmNlLmNvbm5lY3QoZ2Fpbk5vZGUpO1xuICAgICAgZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvdXJjZS5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYkF1ZGlvO1xuIiwiLyoqXG4gKiBSZXByZXNlbnRzIGEgc2VyaWVzIG9mIGZyYW1lcyB0aGF0IGNhbiBiZSByZW5kZXJlZCBhcyBhbiBhbmltYXRpb24uXG4gKiBAbmFtZSBBbmltYXRpb25cbiAqIEBjb25zdHJ1Y3RvciBBbmltYXRpb25cbiAqL1xuXG5jb25zdCBBbmltRnJhbWUgPSByZXF1aXJlKCcuL0FuaW1GcmFtZScpO1xuXG5cbmNsYXNzIEFuaW1hdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZnJhbWUgYmVpbmcgdXNlZCB0byByZW5kZXIgdGhpcyBBbmltYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmN1cnJGcmFtZUluZGV4ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCB0aGlzIGFuaW1hdGlvbiBoYXMgYmVlbiBydW5uaW5nXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5hbmltVGltZSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmb3IgYSBjb21wbGV0ZSBjeWNsZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEFuaW1hdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMudG90YWxEdXJhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGVpZ2h0IGluIHBpeGVsc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEFuaW1hdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaGVpZ2h0ID0gNjQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggaW4gcGl4ZWxzXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IDY0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIHRvIHJlbmRlclxuICAgICAqIEB0eXBlIHtJbWFnZX1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5pbWFnZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb2Zmc2V0IG9mIHRoZSBvZiBwaXhlbHMgaW4gdGhlIHggc2xvdCBmcm9tIHRoZSBzb3VyY2UgaW1hZ2VcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLm9mZnNldFggPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9mZnNldCBvZiB0aGUgb2YgcGl4ZWxzIGluIHRoZSB5IHNsb3QgZnJvbSB0aGUgc291cmNlIGltYWdlXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5vZmZzZXRZID0gMDtcblxuICAgIHRoaXMuZnJhbWVzID0gdW5kZWZpbmVkO1xuXG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5zdGFydCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gY3JlYXRlIGFuIGFuaW1hdGlvbiBmcm9tIGEgc2hlZXQgb2YgdGlsZXNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAqIEBwYXJhbSAge051bWJlcn0gZnJhbWVDb3VudCBOdW1iZXIgb2YgZnJhbWVzIGluIHRoZSBhbmltYXRpb25cbiAgICogQHBhcmFtICB7TnVtYmVyfEFycmF5fSBmcmFtZVRpbWVzIFZhbHVlIG9yIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGFtb3VudCBvZiB0aW1lIHBlciBmcmFtZVxuICAgKiBAcGFyYW0gIHtJbWFnZX0gaW1nIEltYWdlIHNoZWV0IHRvIGNyZWF0ZSBhbmltYXRpb24gZnJvbVxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHcgV2lkdGggb2YgZWFjaCB0aWxlIGluIHBpeGVsc1xuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGggSGVpZ2h0IG9mIGVhY2ggdGlsZSBpbiBwaXhlbHNcbiAgICogQHBhcmFtICB7TnVtYmVyfSB5U2xvdCBTbG90IG9uIFkgYXhpcyB0byBzdGFydCBjcmVhdGluZyB0aWxlc1xuICAgKiBAcmV0dXJuIHtBbmltYXRpb259IEFuaW1hdGlvbiBnZW5lcmF0ZWQgdXNpbmcgcGFyYW1ldGVyc1xuICAgKi9cbiAgY3JlYXRlRnJvbVNoZWV0KGZyYW1lQ291bnQsIGZyYW1lVGltZXMsIGltZywgdywgaCwgeVNsb3Qpe1xuICAgIHZhciBhbmltID0gbmV3IEFuaW1hdGlvbih7XG4gICAgICBpbWFnZTogaW1nLFxuICAgICAgaGVpZ2h0OiBoLFxuICAgICAgd2lkdGg6IHdcbiAgICB9KTtcblxuICAgIHZhciBpc0ZUQXJyYXkgPSBBcnJheS5pc0FycmF5KGZyYW1lVGltZXMpO1xuXG4gICAgdmFyIGN1cnJlbnRGcmFtZVRpbWUgPSAxO1xuICAgIGlmKCF5U2xvdCl7XG4gICAgICB5U2xvdCA9IDA7XG4gICAgfVxuICAgIGZvcih2YXIgaiA9IDA7IGogPCBmcmFtZUNvdW50OyBqKyspe1xuICAgICAgaWYoaXNGVEFycmF5KXtcbiAgICAgICAgY3VycmVudEZyYW1lVGltZSA9IGZyYW1lVGltZXNbal07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50RnJhbWVUaW1lID0gZnJhbWVUaW1lcztcbiAgICAgIH1cbiAgICAgIGFuaW0uYWRkRnJhbWUoY3VycmVudEZyYW1lVGltZSwgaiwgeVNsb3QpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlIG9mIHRoaXMgYW5pbWF0aW9uLiBUaGUgbGlzdCBvZiBmcmFtZXNcbiAgICogYXJlIHNoYXJlZCBiZXR3ZWVuIHRoZSB0d28gQW5pbWF0aW9ucywgYnV0IGVhY2ggQW5pbWF0aW9uXG4gICAqIGNhbiBiZSBhbmltYXRlZCBpbmRlcGVuZGVudGx5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEFuaW1hdGlvbiNcbiAgICovXG4gIGNsb25lKCl7XG4gICAgcmV0dXJuIG5ldyBBbmltYXRpb24oe1xuICAgICAgaW1hZ2U6IHRoaXMuaW1hZ2UsXG4gICAgICBmcmFtZXM6IHRoaXMuZnJhbWVzLFxuICAgICAgdG90YWxEdXJhdGlvbjogdGhpcy50b3RhbER1cmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBpbWFnZSB0byB0aGUgYW5pbWF0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBkdXJhdGlvbiAodGltZSB0byBkaXNwbGF5IHRoZSBpbWFnZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gRHVyYXRpb24gb2YgdGhlIGZyYW1lXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpbWFnZVNsb3RYIFNsb3Qgb24gdGhlIFggYXhpcyBmb3IgdGhlIGZyYW1lXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpbWFnZVNsb3RZIFNsb3Qgb24gdGhlIFkgYXhpcyBmb3IgdGhlIGZyYW1lXG4gICAqL1xuICBhZGRGcmFtZShkdXJhdGlvbiwgaW1hZ2VTbG90WCwgaW1hZ2VTbG90WSl7XG4gICAgaWYoIXRoaXMuZnJhbWVzKXtcbiAgICAgIHRoaXMuZnJhbWVzID0gW107XG4gICAgfVxuICAgIHRoaXMudG90YWxEdXJhdGlvbiArPSBkdXJhdGlvbjtcbiAgICB0aGlzLmZyYW1lcy5wdXNoKG5ldyBBbmltRnJhbWUoe1xuICAgICAgZW5kVGltZTogdGhpcy50b3RhbER1cmF0aW9uLFxuICAgICAgaW1hZ2U6IHRoaXMuaW1hZ2UsXG4gICAgICBpbWdTbG90WDogaW1hZ2VTbG90WCxcbiAgICAgIGltZ1Nsb3RZOiBpbWFnZVNsb3RZXG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGlzIGFuaW1hdGlvbiBvdmVyIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAqL1xuICBzdGFydCgpe1xuICAgIHRoaXMuYW5pbVRpbWUgPSAwO1xuICAgIHRoaXMuY3VyckZyYW1lSW5kZXggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhpcyBhbmltYXRpb24ncyBjdXJyZW50IGltYWdlIChmcmFtZSksIGlmIG5lY2Nlc2FyeS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGFwc2VkVGltZSBFbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gICAqL1xuICB1cGRhdGUoZWxhcHNlZFRpbWUpe1xuICAgIGlmICh0aGlzLmZyYW1lcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLmFuaW1UaW1lICs9IGVsYXBzZWRUaW1lO1xuXG4gICAgICBpZiAodGhpcy5hbmltVGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5hbmltVGltZSA9IHRoaXMuYW5pbVRpbWUgJSB0aGlzLnRvdGFsRHVyYXRpb247XG4gICAgICAgIHRoaXMuY3VyckZyYW1lSW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodGhpcy5hbmltVGltZSA+IHRoaXMuZnJhbWVzW3RoaXMuY3VyckZyYW1lSW5kZXhdLmVuZFRpbWUpIHtcbiAgICAgICAgdGhpcy5jdXJyRnJhbWVJbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoaXMgQW5pbWF0aW9uJ3MgY3VycmVudCBhbmltYXRpb24gZnJhbWUuIFJldHVybnMgbnVsbCBpZiB0aGlzIGFuaW1hdGlvbiBoYXMgbm8gZnJhbWVzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEFuaW1hdGlvbiNcbiAgICogQHJldHVybiB7QW5pbWF0aW9uRnJhbWV8bnVsbH0gVGhlIGFuaW1hdGlvbiBmcmFtZSBhdCB0aGUgY3VycmVudCBmcmFtZSBpbmRleCBvciBudWxsIGlmIG5vIGZyYW1lcyBhcmUgYXZhaWxhYmxlXG4gICAqL1xuICBnZXRDdXJyZW50RnJhbWUoKXtcbiAgICBpZiAodGhpcy5mcmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZnJhbWVzW3RoaXMuY3VyckZyYW1lSW5kZXhdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgY3VycmVudCBmcmFtZSBpbnRvIGEgMmQgY29udGV4dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAqIEBwYXJhbSB7Q29udGV4dH0gY29udGV4dCBUaGUgSFRNTDUgZHJhd2luZyBjYW52YXNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHggVGhlIHggY29vcmRpbmF0ZSBpbiB0aGUgZ3JhcGhpY3MgY29udGV4dFxuICAgKiBAcGFyYW0ge051bWJlcn0geSBUaGUgeSBjb29yZGluYXRlIGluIHRoZSBncmFwaGljcyBjb250ZXh0XG4gICAqL1xuICBkcmF3KGNvbnRleHQsIHgsIHkpe1xuICAgIHZhciBjZiA9IHRoaXMuZ2V0Q3VycmVudEZyYW1lKCk7XG4gICAgY29udGV4dC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgY2YuaW1nU2xvdFggKiB0aGlzLndpZHRoICsgdGhpcy5vZmZzZXRYLCBjZi5pbWdTbG90WSAqIHRoaXMuaGVpZ2h0ICsgdGhpcy5vZmZzZXRZLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgeCwgeSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0aW9uO1xuIiwiLyoqXG4gKiBSZXByZXNlbnRzIGEgYSBzaW5nbGUgZnJhbWUgaW4gYW4gYW5pbWF0aW9uLlxuICogQG5hbWUgQW5pbWF0aW9uRnJhbWVcbiAqIEBjb25zdHJ1Y3RvciBBbmltYXRpb25GcmFtZVxuICogQHBhcmFtIHtPYmplY3R9IG1peGluIE9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gbWl4aW5cbiAqL1xuXG5jbGFzcyBBbmltRnJhbWUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVuZGluZyB0aW1lIGluIG1pbGxpc2Vjb25kcyBvZiB0aGlzIGZyYW1lIHJlbGF0aXZlIHRvIGl0cyBBbmltYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBBbmltYXRpb25GcmFtZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZW5kVGltZSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgZ3JvdXAgb2YgZnJhbWVzIGNvbnRhaW5lZCBpbiBhIHNpbmdsZSBpbWFnZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEFuaW1hdGlvbkZyYW1lI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5pbWdTbG90WCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmVydGljYWwgcG9zaXRpb24gb2YgdGhlIGdyb3VwIG9mIGZyYW1lcyBjb250YWluZWQgaW4gYSBzaW5nbGUgaW1hZ2VcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBBbmltYXRpb25GcmFtZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaW1nU2xvdFkgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIHRvIHJlbmRlclxuICAgICAqIEB0eXBlIHtJbWFnZX1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uRnJhbWUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmltYWdlID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1GcmFtZTtcbiIsImNvbnN0IHJhZENvbnN0ID0gTWF0aC5QSSAvIDE4MC4wO1xuXG5mdW5jdGlvbiBkZWdyZWVzVG9SYWRpYW5zKGRlZ3JlZXMpe1xuICByZXR1cm4gZGVncmVlcyAqIHJhZENvbnN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZ3JlZXNUb1JhZGlhbnM7XG4iLCJcbmNvbnN0IGRlZ0NvbnN0ID0gMTgwLjAgLyBNYXRoLlBJO1xuXG5mdW5jdGlvbiByYWRpYW5zVG9EZWdyZWVzKHJhZGlhbnMpe1xuICByZXR1cm4gcmFkaWFucyAqIGRlZ0NvbnN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJhZGlhbnNUb0RlZ3JlZXM7XG4iLCJmdW5jdGlvbiBkaXN0YW5jZShwMSwgcDIpe1xuICByZXR1cm4gTWF0aC5zcXJ0KCAoKHAyLnggLSBwMS54KSAqIChwMi54IC0gcDEueCkpICsgKChwMi55IC0gcDEueSkgKiAocDIueSAtIHAxLnkpKSApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRpc3RhbmNlO1xuIiwiLyoqXG4gKiBUaGUgU3ByaXRlIGNsYXNzIHJlcHJlc2VudHMgYSBzaW1wbGUgYW5pbWF0ZWQgY2hhcmFjdGVyIGZvciBhIGdhbWVcbiAqIEBuYW1lIFNwcml0ZVxuICogQGNvbnN0cnVjdG9yIFNwcml0ZVxuICovXG5cbmNsYXNzIFNwcml0ZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgeCBwb3NpdGlvbiBvZiB0aGUgc3ByaXRlIGluIHBpeGVsc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMueCA9IDAuMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB5IHBvc2l0aW9uIG9mIHRoZSBzcHJpdGUgaW4gcGl4ZWxzXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgU3ByaXRlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy55ID0gMC4wO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHggY29tcG9uZW50IG9mIHRoZSB2ZWxvY2l0eSBpbiBwaXhlbHMgcGVyIHNlY29uZFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZHggPSAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgeSBjb21wb25lbnQgb2YgdGhlIHZlbG9jaXR5IGluIHBpeGVscyBwZXIgc2Vjb25kXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgU3ByaXRlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5keSA9IDAuMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXggc3BlZWQgYSBzcHJpdGUgY2FuIG1vdmUgaW4gZWl0aGVyIGRpcmVjdGlvblxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMubWF4U3BlZWQgPSAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmFtZSBvZiB0aGlzIFNwcml0ZVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcmFkaXVzIG9mIHRoaXMgc3ByaXRlIGluIHBpeGVscyBmb3Igc2ltcGxlIGNvbGxpc2lvbiBkZXRlY3Rpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBTcHJpdGUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmNvbGxpc2lvblJhZGl1cyA9IDQwO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoaXMgU3ByaXRlJ3MgQW5pbWF0aW9uIGFuZCBpdHMgcG9zaXRpb24gYmFzZWQgb24gdGhlIHZlbG9jaXR5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGVsYXBzZWRUaW1lIFRoZSBlbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBwcmV2aW91cyB1cGRhdGVcbiAgICovXG4gIHVwZGF0ZShlbGFwc2VkVGltZSl7XG4gICAgdGhpcy54ICs9IHRoaXMuZHggKiBlbGFwc2VkVGltZTtcbiAgICB0aGlzLnkgKz0gdGhpcy5keSAqIGVsYXBzZWRUaW1lO1xuICAgIHRoaXMuYW5pbS51cGRhdGUoZWxhcHNlZFRpbWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG1heFNwZWVkIHVwIHRvIHRoZSBzcGVlZCBsaW1pdFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHYgU3BlZWQgbGltaXRcbiAgICogQHJldHVybiB7TnVtYmVyfSBtYXhTcGVlZCB1cCB0byBzcGVlZCBsaW1pdFxuICAgKi9cbiAgbGltaXRTcGVlZCh2KXtcbiAgICBpZih0aGlzLm1heFNwZWVkKXtcbiAgICAgIGlmKE1hdGguYWJzKHYpID4gdGhpcy5tYXhTcGVlZCl7XG4gICAgICAgIGlmKHYgPiAwKXtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tYXhTcGVlZDtcbiAgICAgICAgfWVsc2UgaWYodiA8IDApe1xuICAgICAgICAgIHJldHVybiB0aGlzLm1heFNwZWVkO1xuICAgICAgICB9ZWxzZXtcbiAgICAgICAgICByZXR1cm4gIDA7XG4gICAgICAgIH1cbiAgICAgIH1lbHNle1xuICAgICAgICByZXR1cm4gdjtcbiAgICAgIH1cbiAgICB9ZWxzZXtcbiAgICAgIHJldHVybiB2O1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoaXMgU3ByaXRlJ3MgY3VycmVudCBhbmltYXRpb24gZnJhbWUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgU3ByaXRlI1xuICAgKiBAcmV0dXJuIHtBbmltYXRpb25GcmFtZX0gVGhlIGN1cnJlbnQgZnJhbWUgb2YgdGhlIEFuaW1hdGlvblxuICAgKi9cbiAgZ2V0Q3VycmVudEZyYW1lKCl7XG4gICAgaWYodGhpcy5hbmltKXtcbiAgICAgIHJldHVybiB0aGlzLmFuaW0uZ2V0Q3VycmVudEZyYW1lKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBzcHJpdGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBTcHJpdGUjXG4gICAqIEBwYXJhbSB7Q29udGV4dH0gY29udGV4dCBUaGUgSFRNTDUgZHJhd2luZyBjb250ZXh0XG4gICAqL1xuICBkcmF3KGNvbnRleHQpe1xuICAgIGlmKHRoaXMuYW5pbSl7XG4gICAgICB0aGlzLmFuaW0uZHJhdyhjb250ZXh0LCB0aGlzLngsIHRoaXMueSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENsb25lcyB0aGUgaW5zdGFuY2Ugb2YgU3ByaXRlIGl0IGlzIGNhbGxlZCB1cG9uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgU3ByaXRlI1xuICAgKiBAcmV0dXJuIHtTcHJpdGV9IEEgY2xvbmUgb2YgdGhlIFNwcml0ZVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgcmV0dXJuIG5ldyBTcHJpdGUoe1xuICAgICAgYW5pbTogdGhpcy5hbmltLmNsb25lKClcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNwcml0ZTtcblxuIiwiLyoqXG4gKiBUaGlzIHdyYXBzIHRoZSBib3gyZCB3b3JsZCB0aGF0IGNvbnRhaW5zIGJvZGllcywgc2hhcGVzLCBhbmQgcGVyZm9ybXMgdGhlIHBoeXNpY3MgY2FsY3VsYXRpb25zLlxuICogQG5hbWUgQm94XG4gKiBAY29uc3RydWN0b3IgQm94XG4gKi9cblxuY29uc3QgQ29udGFjdCA9IHJlcXVpcmUoJy4vbGlzdGVuZXJzL0NvbnRhY3QnKTtcblxuXG5jb25zb2xlLmxvZyhCb3gyRCwgJ0JveDJEJywgZ2xvYmFsLCB3aW5kb3cpO1xuXG4vLyBib3gyZCBnbG9iYWxzXG5jb25zdCBCMlZlYzIgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzI7XG5jb25zdCBCMkJvZHlEZWYgPSBCb3gyRC5EeW5hbWljcy5iMkJvZHlEZWY7XG5jb25zdCBCMkJvZHkgPSBCb3gyRC5EeW5hbWljcy5iMkJvZHk7XG5jb25zdCBCMkZpeHR1cmVEZWYgPSBCb3gyRC5EeW5hbWljcy5iMkZpeHR1cmVEZWY7XG5jb25zdCBCMkZpeHR1cmUgPSBCb3gyRC5EeW5hbWljcy5iMkZpeHR1cmU7XG5jb25zdCBCMldvcmxkID0gQm94MkQuRHluYW1pY3MuYjJXb3JsZDtcbmNvbnN0IEIyUG9seWdvblNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMlBvbHlnb25TaGFwZTtcbmNvbnN0IEIyQ2lyY2xlU2hhcGUgPSBCb3gyRC5Db2xsaXNpb24uU2hhcGVzLmIyQ2lyY2xlU2hhcGU7XG5cbmNsYXNzIEJveCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIGN5Y2xlcyBwZXIgc2Vjb25kIGV4cGVjdGVkIGluIHVwZGF0ZSBjYWxjdWF0aW9uc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaW50ZXJ2YWxSYXRlID0gNjA7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byB0cnkgdG8gY29tcGVuc2F0ZSBjYWxjdWxhdGlvbnMgYmFzZWQgb24gcGVyZm9ybWFuY2VcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgQm94I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5hZGFwdGl2ZSA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQSBtYXAgb2YgdGhlIGJvZGllcyBpbiB0aGUgYm94MmQgd29ybGQgcmVmZXJlbmNlZCBieSB0aGVpciBnaXZlbiB1c2VyRGF0YVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYm9kaWVzTWFwID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIHRoZSBmaXh0dXJlcyBpbiB0aGUgYm94MmQgd29ybGQgcmVmZXJlbmNlZCBieSB0aGVpciBnaXZlbiB1c2VyRGF0YVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZml4dHVyZXNNYXAgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSBtYXAgb2YgdGhlIGpvaW50cyBpbiB0aGUgYm94MmQgd29ybGQgcmVmZXJlbmNlZCBieSB0aGVpciBnaXZlbiB1c2VyRGF0YVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuam9pbnRzTWFwID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpbnN0YW5jZSBvZiB0aGUgQm94MkQuRHluYW1pY3MuYjJXb3JsZCB3b3JsZCBjbGFzcyB0aGF0IHRoZSBib2RpZXMsIGZpeHR1cmVzLCBhbmQgam9pbnRzIGFyZSB1c2VkIGluLlxuICAgICAqIEB0eXBlIHtCMldvcmxkfVxuICAgICAqIEBtZW1iZXJPZiBCb3gjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmIyV29ybGQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHggY29tcG9uZW50IG9mIHRoZSBiMldvcmxkJ3MgZ3Jhdml0eSBpbiBtZXRlcnMvc2Vjb25kIHNxdWFyZWRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBCb3gjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmdyYXZpdHlYID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgYjJXb3JsZCdzIGdyYXZpdHkgaW4gbWV0ZXJzL3NlY29uZCBzcXVhcmVkXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgQm94I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5ncmF2aXR5WSA9IDkuODtcblxuICAgIC8qKlxuICAgICAqIEFsbG93IGJveDJkIHRvIHNraXAgcGh5c2ljcyBjYWxjdWxhdGlvbnMgb24gYm9kaWVzIGF0IHJlc3QgZm9yIHBlcmZvcm1hbmNlXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYWxsb3dTbGVlcCA9IHRydWU7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIGFkZCBhIGxpc3RlbmVyIHRvIGNvbGxpc2lvbiBldmVudHMuIERlZmF1bHQgYmVoYXZpb3IgYWRkcyBjb2xsaXNpb24gZGF0YSB0byBlbnRpdGllcyBvbiB1cGRhdGUgY3ljbGVcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgQm94I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5yZXNvbHZlQ29sbGlzaW9ucyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQSBjb250YWN0IGxpc3RlbmVyIGZvciBjYWxsYmFja3Mgb24gY29sbGlzaW9uIGV2ZW50cy4gRGVmYXVsdCBpcyB0aGlzIGJveCBpdHNlbGYuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAbWVtYmVyT2YgQm94I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5jb250YWN0TGlzdGVuZXIgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogTWFwIG9mIGNvbGxpc2lvbnMuIEluc3RhbnRpYXRlZCBpbiB1cGRhdGUgaWYgcmVzb2x2ZUNvbGxpc2lvbnMgaXMgdHJ1ZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuY29sbGlzaW9ucyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbnVtYmVyIG9mIHBpeGVscyB0aGF0IHJlcHJlc250IG9uZSBtZXRlciBpbiB0aGUgYm94MmQgd29ybGQuICgzMCBwaXhlbHMgfiAxIG1ldGVyIGluIGJveDJkKVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuc2NhbGUgPSAzMDtcblxuICAgIHRoaXMuYm9kaWVzTWFwID0ge307XG4gICAgdGhpcy5maXh0dXJlc01hcCA9IHt9O1xuICAgIHRoaXMuam9pbnRzTWFwID0ge307XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblxuICAgIHRoaXMuYjJXb3JsZCA9IG5ldyBCMldvcmxkKG5ldyBCMlZlYzIodGhpcy5ncmF2aXR5WCwgdGhpcy5ncmF2aXR5WSksIHRoaXMuYWxsb3dTbGVlcCk7XG5cbiAgICBpZih0aGlzLmludGVydmFsUmF0ZSl7XG4gICAgICB0aGlzLmludGVydmFsUmF0ZSA9IHBhcnNlSW50KHRoaXMuaW50ZXJ2YWxSYXRlLCAxMCk7XG4gICAgfVxuXG5cbiAgICBpZih0aGlzLnJlc29sdmVDb2xsaXNpb25zKXtcbiAgICAgIHRoaXMuY29udGFjdExpc3RlbmVyID0gbmV3IENvbnRhY3QoKTtcbiAgICB9XG5cbiAgICBpZih0aGlzLmNvbnRhY3RMaXN0ZW5lcil7XG4gICAgICB0aGlzLmFkZENvbnRhY3RMaXN0ZW5lcih0aGlzLmNvbnRhY3RMaXN0ZW5lcik7XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSBib3gyZCBwaHlzaWNzIGNhbGN1bGF0aW9uc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtICB7TnVtYmVyfSBtaWxsaXMgVGhlIG1pbGxpc2Vjb25kcyB1c2VkIHRvIGRldGVybWluZSBmcmFtZXJhdGUgZm9yIGJveDJkIHN0ZXBcbiAgICogQHJldHVybiB7TnVtYmVyfSBUaGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0aGUgdXBkYXRlIHRvb2tcbiAgICovXG4gIHVwZGF0ZShtaWxsaXMpIHtcbiAgICAvLyBjb25zb2xlLmxvZygndXBkYXRlIG1pbGxpcycsIG1pbGxpcyk7XG5cbiAgICBpZih0aGlzLmNvbnRhY3RMaXN0ZW5lciAmJiB0aGlzLmNvbnRhY3RMaXN0ZW5lci5yZXNldCl7XG4gICAgICB0aGlzLmNvbnRhY3RMaXN0ZW5lci5yZXNldCgpO1xuICAgIH1cblxuICAgIHZhciBzdGFydCA9IERhdGUubm93KCk7XG4gICAgaWYobWlsbGlzKXtcbiAgICAgIHRoaXMuYjJXb3JsZC5TdGVwKG1pbGxpcyAvIDEwMDAgLyogZnJhbWUtcmF0ZSAqLywgMTAgLyogdmVsb2NpdHkgaXRlcmF0aW9ucyAqLywgMTAgLypwb3NpdGlvbiBpdGVyYXRpb25zKi8pO1xuICAgICAgdGhpcy5iMldvcmxkLkNsZWFyRm9yY2VzKCk7XG4gICAgfWVsc2V7XG4gICAgICB2YXIgc3RlcFJhdGUgPSAodGhpcy5hZGFwdGl2ZSkgPyAoc3RhcnQgLSB0aGlzLmxhc3RUaW1lc3RhbXApIC8gMTAwMCA6ICgxIC8gdGhpcy5pbnRlcnZhbFJhdGUpO1xuICAgICAgdGhpcy5iMldvcmxkLlN0ZXAoc3RlcFJhdGUgLyogZnJhbWUtcmF0ZSAqLywgMTAgLyogdmVsb2NpdHkgaXRlcmF0aW9ucyAqLywgMTAgLypwb3NpdGlvbiBpdGVyYXRpb25zKi8pO1xuICAgICAgdGhpcy5iMldvcmxkLkNsZWFyRm9yY2VzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIChEYXRlLm5vdygpIC0gc3RhcnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIG9iamVjdHMgaW4gdGhlIGJveDJkIHdvcmxkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgc3RhdGUgb2YgdGhlIGJveDJkIHdvcmxkXG4gICAqL1xuICBnZXRTdGF0ZSgpIHtcbiAgICB2YXIgc3RhdGUgPSB7fTtcbiAgICAgIGZvciAodmFyIGIgPSB0aGlzLmIyV29ybGQuR2V0Qm9keUxpc3QoKTsgYjsgYiA9IGIubV9uZXh0KSB7XG4gICAgICAgIGlmIChiLklzQWN0aXZlKCkgJiYgdHlwZW9mIGIuR2V0VXNlckRhdGEoKSAhPT0gJ3VuZGVmaW5lZCcgJiYgYi5HZXRVc2VyRGF0YSgpICE9PSBudWxsKSB7XG4gICAgICAgICAgc3RhdGVbYi5HZXRVc2VyRGF0YSgpXSA9IHtcbiAgICAgICAgICAgIHg6IGIuR2V0UG9zaXRpb24oKS54LFxuICAgICAgICAgICAgeTogYi5HZXRQb3NpdGlvbigpLnksXG4gICAgICAgICAgICBhbmdsZTogYi5HZXRBbmdsZSgpLFxuICAgICAgICAgICAgY2VudGVyOiB7XG4gICAgICAgICAgICAgIHg6IGIuR2V0V29ybGRDZW50ZXIoKS54LFxuICAgICAgICAgICAgICB5OiBiLkdldFdvcmxkQ2VudGVyKCkueVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGxpbmVhclZlbG9jaXR5OiBiLm1fbGluZWFyVmVsb2NpdHksXG4gICAgICAgICAgICBhbmd1bGFyVmVsb2NpdHk6IGIubV9hbmd1bGFyVmVsb2NpdHlcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmKHRoaXMuY29udGFjdExpc3RlbmVyICYmIHRoaXMuY29udGFjdExpc3RlbmVyLmNvbGxpc2lvbnMpe1xuICAgICAgICAgICAgc3RhdGVbYi5HZXRVc2VyRGF0YSgpXS5jb2xsaXNpb25zID0gdGhpcy5jb250YWN0TGlzdGVuZXIuY29sbGlzaW9uc1tiLkdldFVzZXJEYXRhKCldIHx8IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgc3RhdGUgaW4gdGhlIEVudGl0eSBvYmplY3RzIHRoYXQgYXJlIG1vZGlmaWVkIGJ5IGJveDJkIGNhbGN1bGF0aW9ucy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBlbnRpdGllcyBBbiBhcnJheSBvciBtYXAgb2YgRW50aXR5IG9iamVjdHNcbiAgICovXG4gIHVwZGF0ZUV4dGVybmFsU3RhdGUoZW50aXRpZXMpe1xuICAgIC8vdXBkYXRlIHRoZSBkeWFubWljIHNoYXBlcyB3aXRoIGJveDJkIGNhbGN1bGF0aW9uc1xuICAgIHZhciBib2RpZXNTdGF0ZSA9IHRoaXMuZ2V0U3RhdGUoKTtcbiAgICBmb3IgKHZhciBpZCBpbiBib2RpZXNTdGF0ZSkge1xuICAgICAgdmFyIGVudGl0eSA9IGVudGl0aWVzW2lkXTtcbiAgICAgIC8vdXBkYXRlIGFueSBkeW5hbWljIGJvZGllc1xuICAgICAgaWYgKGVudGl0eSAmJiAhZW50aXR5LnN0YXRpY0JvZHkpe1xuICAgICAgICBlbnRpdHkudXBkYXRlKGJvZGllc1N0YXRlW2lkXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG1hcCBvZiBlbnRpdGllcyB0byB0aGUgQm94XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge09iamVjdH0gYm9keUVudGl0aWVzIE1hcCBvZiBlbnRpdGllc1xuICAgKi9cbiAgc2V0Qm9kaWVzKGJvZHlFbnRpdGllcykge1xuICAgIGZvcih2YXIgaWQgaW4gYm9keUVudGl0aWVzKSB7XG4gICAgICB2YXIgZW50aXR5ID0gYm9keUVudGl0aWVzW2lkXTtcbiAgICAgIHRoaXMuYWRkQm9keShlbnRpdHkpO1xuICAgIH1cbiAgICB0aGlzLnJlYWR5ID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYW4gRW50aXR5IHRvIHRoZSBib3gyZCB3b3JsZCB3aGljaCB3aWxsIGludGVybmFsbHkgYmUgY29udmVydGVkIHRvIGEgYm94MmQgYm9keSBhbmQgZml4dHVyZSAoYXV0byBzY2FsZWQgd2l0aCBCb3gncyBzY2FsZSBwcm9wZXJ0eSBpZiB0aGUgZW50aXR5IGhhc24ndCBiZWVuIHNjYWxlZCB5ZXQpXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge0VudGl0eX0gZW50aXR5IEFueSBFbnRpdHkgb2JqZWN0XG4gICAqL1xuICBhZGRCb2R5KGVudGl0eSkge1xuICAgIC8qanNoaW50IGVxbnVsbDp0cnVlICovXG5cbiAgICBpZighZW50aXR5LmFscmVhZHlTY2FsZWQpe1xuICAgICAgZW50aXR5LnNjYWxlU2hhcGUoMSAvIHRoaXMuc2NhbGUpO1xuICAgICAgZW50aXR5LnNjYWxlID0gdGhpcy5zY2FsZTtcbiAgICB9XG5cbiAgICB2YXIgYm9keURlZiA9IG5ldyBCMkJvZHlEZWYoKTtcbiAgICB2YXIgZml4RGVmID0gbmV3IEIyRml4dHVyZURlZigpO1xuICAgIHZhciBpLGoscG9pbnRzLHZlYyx2ZWNzO1xuICAgIGZpeERlZi5yZXN0aXR1dGlvbiA9IGVudGl0eS5yZXN0aXR1dGlvbjtcbiAgICBmaXhEZWYuZGVuc2l0eSA9IGVudGl0eS5kZW5zaXR5O1xuICAgIGZpeERlZi5mcmljdGlvbiA9IGVudGl0eS5mcmljdGlvbjtcblxuXG4gICAgLy90aGVzZSB0aHJlZSBwcm9wcyBhcmUgZm9yIGN1c3RvbSBjb2xsaXNpb24gZmlsdGVyaW5nXG4gICAgaWYoZW50aXR5Lm1hc2tCaXRzICE9IG51bGwpe1xuICAgICAgZml4RGVmLmZpbHRlci5tYXNrQml0cyA9IGVudGl0eS5tYXNrQml0cztcbiAgICB9XG4gICAgaWYoZW50aXR5LmNhdGVnb3J5Qml0cyAhPSBudWxsKXtcbiAgICAgIGZpeERlZi5maWx0ZXIuY2F0ZWdvcnlCaXRzID0gZW50aXR5LmNhdGVnb3J5Qml0cztcbiAgICB9XG4gICAgaWYoZW50aXR5Lmdyb3VwSW5kZXggIT0gbnVsbCl7XG4gICAgICBmaXhEZWYuZmlsdGVyLmdyb3VwSW5kZXggPSBlbnRpdHkuZ3JvdXBJbmRleDtcbiAgICB9XG5cbiAgICBpZihlbnRpdHkuc3RhdGljQm9keSl7XG4gICAgICBib2R5RGVmLnR5cGUgPSAgQjJCb2R5LmIyX3N0YXRpY0JvZHk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJvZHlEZWYudHlwZSA9IEIyQm9keS5iMl9keW5hbWljQm9keTtcbiAgICB9XG5cbiAgICBib2R5RGVmLnBvc2l0aW9uLnggPSBlbnRpdHkueDtcbiAgICBib2R5RGVmLnBvc2l0aW9uLnkgPSBlbnRpdHkueTtcbiAgICBib2R5RGVmLnVzZXJEYXRhID0gZW50aXR5LmlkO1xuICAgIGJvZHlEZWYuYW5nbGUgPSBlbnRpdHkuYW5nbGU7XG4gICAgYm9keURlZi5saW5lYXJEYW1waW5nID0gZW50aXR5LmxpbmVhckRhbXBpbmc7XG4gICAgYm9keURlZi5hbmd1bGFyRGFtcGluZyA9IGVudGl0eS5hbmd1bGFyRGFtcGluZztcbiAgICB2YXIgYm9keSA9IHRoaXMuYjJXb3JsZC5DcmVhdGVCb2R5KGJvZHlEZWYpO1xuXG5cbiAgICBpZiAoZW50aXR5LnJhZGl1cykgeyAvL2NpcmNsZVxuICAgICAgZml4RGVmLnNoYXBlID0gbmV3IEIyQ2lyY2xlU2hhcGUoZW50aXR5LnJhZGl1cyk7XG4gICAgICBib2R5LkNyZWF0ZUZpeHR1cmUoZml4RGVmKTtcbiAgICB9IGVsc2UgaWYgKGVudGl0eS5wb2ludHMpIHsgLy9wb2x5Z29uXG4gICAgICBwb2ludHMgPSBbXTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBlbnRpdHkucG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZlYyA9IG5ldyBCMlZlYzIoKTtcbiAgICAgICAgdmVjLlNldChlbnRpdHkucG9pbnRzW2ldLngsIGVudGl0eS5wb2ludHNbaV0ueSk7XG4gICAgICAgIHBvaW50c1tpXSA9IHZlYztcbiAgICAgIH1cbiAgICAgIGZpeERlZi5zaGFwZSA9IG5ldyBCMlBvbHlnb25TaGFwZSgpO1xuICAgICAgZml4RGVmLnNoYXBlLlNldEFzQXJyYXkocG9pbnRzLCBwb2ludHMubGVuZ3RoKTtcbiAgICAgIGJvZHkuQ3JlYXRlRml4dHVyZShmaXhEZWYpO1xuICAgIH0gZWxzZSBpZihlbnRpdHkucG9seXMpIHsgLy9jb21wbGV4IG9iamVjdFxuICAgICAgICBmb3IgKGogPSAwOyBqIDwgZW50aXR5LnBvbHlzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBwb2ludHMgPSBlbnRpdHkucG9seXNbal07XG4gICAgICAgICAgICB2ZWNzID0gW107XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmVjID0gbmV3IEIyVmVjMigpO1xuICAgICAgICAgICAgICAgIHZlYy5TZXQocG9pbnRzW2ldLngsIHBvaW50c1tpXS55KTtcbiAgICAgICAgICAgICAgICB2ZWNzW2ldID0gdmVjO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZml4RGVmLnNoYXBlID0gbmV3IEIyUG9seWdvblNoYXBlKCk7XG4gICAgICAgICAgICBmaXhEZWYuc2hhcGUuU2V0QXNBcnJheSh2ZWNzLCB2ZWNzLmxlbmd0aCk7XG4gICAgICAgICAgICBib2R5LkNyZWF0ZUZpeHR1cmUoZml4RGVmKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7IC8vcmVjdGFuZ2xlXG4gICAgICBmaXhEZWYuc2hhcGUgPSBuZXcgQjJQb2x5Z29uU2hhcGUoKTtcbiAgICAgIGZpeERlZi5zaGFwZS5TZXRBc0JveChlbnRpdHkuaGFsZldpZHRoLCBlbnRpdHkuaGFsZkhlaWdodCk7XG4gICAgICBib2R5LkNyZWF0ZUZpeHR1cmUoZml4RGVmKTtcbiAgICB9XG5cblxuICAgIHRoaXMuYm9kaWVzTWFwW2VudGl0eS5pZF0gPSBib2R5O1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcG9zaXRpb24gb2YgYW4gZW50aXR5LlxuICAgKlxuICAgKiBUaGlzIG11c3QgYmUgZG9uZSBvdXRzaWRlIG9mIHRoZSB1cGRhdGUoKSBpdGVyYXRpb24hXG4gICAqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge051bWJlcn0gYm9keUlkIFRoZSBpZCBvZiB0aGUgRW50aXR5L0JvZHlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHggVGhlIG5ldyB4IGNvb3JkaW5hdGUgaW4gYm94MmQgc3BhY2VcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHkgVGhlIG5ldyB5IGNvb3JkaW5hdGUgaW4gYm94MmQgc3BhY2VcbiAgICovXG4gIHNldFBvc2l0aW9uKGJvZHlJZCwgeCwgeSl7XG4gICAgdmFyIGJvZHkgPSB0aGlzLmJvZGllc01hcFtib2R5SWRdO1xuICAgIGJvZHkuU2V0UG9zaXRpb24obmV3IEIyVmVjMih4LCB5KSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBhbmdsZSBvZiBhbiBlbnRpdHkuXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib2R5SWQgVGhlIGlkIG9mIHRoZSBFbnRpdHkvQm9keVxuICAgKiBAcGFyYW0ge051bWJlcn0gYW5nbGUgVGhlIG5ldyBhbmdsZSBvZiB0aGUgYm9keSBpbiByYWRpYW5zXG4gICAqL1xuICBzZXRBbmdsZShib2R5SWQsIGFuZ2xlKXtcbiAgICB2YXIgYm9keSA9IHRoaXMuYm9kaWVzTWFwW2JvZHlJZF07XG4gICAgY29uc29sZS5sb2coJ3NldCBhbmdsZScsIGJvZHkuc2V0QW5nbGUsIGJvZHkpO1xuICAgIGJvZHkuc2V0QW5nbGUoYW5nbGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgbGluZWFyIHZlbG9jaXR5IG9mIGFuIGVudGl0eS5cbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJvZHlJZCBUaGUgaWQgb2YgdGhlIEVudGl0eS9Cb2R5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSBuZXcgeCBjb21wb25lbnQgb2YgdGhlIHZlbG9jaXR5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSBuZXcgeSBjb21wb25lbnQgb2YgdGhlIHZlbG9jaXR5XG4gICAqL1xuICBzZXRMaW5lYXJWZWxvY2l0eShib2R5SWQsIHgsIHkpe1xuICAgIHZhciBib2R5ID0gdGhpcy5ib2RpZXNNYXBbYm9keUlkXTtcbiAgICBib2R5LlNldExpbmVhclZlbG9jaXR5KG5ldyBCMlZlYzIoeCwgeSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgYW5ndWxhciB2ZWxvY2l0eSBvZiBhbiBlbnRpdHkuXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib2R5SWQgVGhlIGlkIG9mIHRoZSBFbnRpdHkvQm9keVxuICAgKiBAcGFyYW0ge051bWJlcn0gdmVsb2NpdHkgVGhlIGFuZ3VsYXIgdmVsb2NpdHkgZm9yIHRoZSBib2R5XG4gICAqL1xuICBzZXRBbmd1bGFyVmVsb2NpdHkoYm9keUlkLCB2ZWxvY2l0eSl7XG4gICAgdmFyIGJvZHkgPSB0aGlzLmJvZGllc01hcFtib2R5SWRdO1xuICAgIGJvZHkuU2V0QW5ndWxhclZlbG9jaXR5KHZlbG9jaXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBhbiBpbXB1bHNlIHRvIGEgYm9keSBhdCBhbiBhbmdsZSBpbiBkZWdyZWVzXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib2R5SWQgVGhlIGlkIG9mIHRoZSBFbnRpdHkvQm9keVxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVncmVlcyBUaGUgYW5nbGUgaW4gd2hpY2ggdG8gYXBwbHkgdGhlIGltcHVsc2UuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwb3dlciBUaGUgaW1wdWxzZSBwb3dlci5cbiAgICovXG4gIGFwcGx5SW1wdWxzZURlZ3JlZXMoYm9keUlkLCBkZWdyZWVzLCBwb3dlcikge1xuICAgIHZhciBib2R5ID0gdGhpcy5ib2RpZXNNYXBbYm9keUlkXTtcbiAgICBib2R5LkFwcGx5SW1wdWxzZShcbiAgICAgIG5ldyBCMlZlYzIoTWF0aC5zaW4oZGVncmVlcyAqIChNYXRoLlBJIC8gMTgwKSkgKiBwb3dlcixcbiAgICAgIE1hdGguY29zKGRlZ3JlZXMgKiAoTWF0aC5QSSAvIDE4MCkpICogcG93ZXIgKiAtMSksXG4gICAgICBib2R5LkdldFdvcmxkQ2VudGVyKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IGEgZm9yY2UgdG8gYSBib2R5IGF0IGFuIGFuZ2xlIGluIGRlZ3JlZXNcbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJvZHlJZCBUaGUgaWQgb2YgdGhlIEVudGl0eS9Cb2R5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWdyZWVzIFRoZSBhbmdsZSBpbiB3aGljaCB0byBhcHBseSB0aGUgZm9yY2UuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwb3dlciBUaGUgcG93ZXIgb2YgdGhlIGZvcmNlLiAoVGhlIGFiaWxpdHkgdG8gZGVzdHJveSBhIHBsYW5ldCBpcyBpbnNpZ25pZmljYW50IG5leHQgdG8gdGhpcylcbiAgICovXG4gIGFwcGx5Rm9yY2VEZWdyZWVzKGJvZHlJZCwgZGVncmVlcywgcG93ZXIpIHtcbiAgICB2YXIgYm9keSA9IHRoaXMuYm9kaWVzTWFwW2JvZHlJZF07XG4gICAgYm9keS5BcHBseUZvcmNlKFxuICAgICAgbmV3IEIyVmVjMihNYXRoLnNpbihkZWdyZWVzICogKE1hdGguUEkgLyAxODApKSAqIHBvd2VyLFxuICAgICAgTWF0aC5jb3MoZGVncmVlcyAqIChNYXRoLlBJIC8gMTgwKSkgKiBwb3dlciAqIC0xKSxcbiAgICAgIGJvZHkuR2V0V29ybGRDZW50ZXIoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYW4gaW1wdWxzZSB0byBhIGJvZHkgYXQgYW4gYW5nbGUgaW4gcmFkaWFuc1xuICAgKlxuICAgKiBUaGlzIG11c3QgYmUgZG9uZSBvdXRzaWRlIG9mIHRoZSB1cGRhdGUoKSBpdGVyYXRpb24hXG4gICAqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge051bWJlcn0gYm9keUlkIFRoZSBpZCBvZiB0aGUgRW50aXR5L0JvZHlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGlhbnMgVGhlIGFuZ2xlIGluIHdoaWNoIHRvIGFwcGx5IHRoZSBpbXB1bHNlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gcG93ZXIgVGhlIGltcHVsc2UgcG93ZXIuXG4gICAqL1xuICBhcHBseUltcHVsc2UoYm9keUlkLCByYWRpYW5zLCBwb3dlcikge1xuICAgIHZhciBib2R5ID0gdGhpcy5ib2RpZXNNYXBbYm9keUlkXTtcbiAgICBib2R5LkFwcGx5SW1wdWxzZShcbiAgICAgIG5ldyBCMlZlYzIoTWF0aC5zaW4ocmFkaWFucykgKiBwb3dlcixcbiAgICAgIE1hdGguY29zKHJhZGlhbnMpICogcG93ZXIgKiAtMSksXG4gICAgICBib2R5LkdldFdvcmxkQ2VudGVyKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IGEgZm9yY2UgdG8gYSBib2R5IGF0IGFuIGFuZ2xlIGluIHJhZGlhbnNcbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJvZHlJZCBUaGUgaWQgb2YgdGhlIEVudGl0eS9Cb2R5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpYW5zIFRoZSBhbmdsZSBpbiB3aGljaCB0byBhcHBseSB0aGUgZm9yY2UuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwb3dlciBUaGUgcG93ZXIgb2YgdGhlIGZvcmNlLiAoVGhlIGFiaWxpdHkgdG8gZGVzdHJveSBhIHBsYW5ldCBpcyBpbnNpZ25pZmljYW50IG5leHQgdG8gdGhpcylcbiAgICovXG4gIGFwcGx5Rm9yY2UoYm9keUlkLCByYWRpYW5zLCBwb3dlcikge1xuICAgIHZhciBib2R5ID0gdGhpcy5ib2RpZXNNYXBbYm9keUlkXTtcbiAgICBib2R5LkFwcGx5Rm9yY2UoXG4gICAgICBuZXcgQjJWZWMyKE1hdGguc2luKHJhZGlhbnMpICogcG93ZXIsXG4gICAgICBNYXRoLmNvcyhyYWRpYW5zKSAqIHBvd2VyICogLTEpLFxuICAgICAgYm9keS5HZXRXb3JsZENlbnRlcigpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGFuZ2xlIG9mIGEgZHluYW1pYyBib2R5IGluIHJhZGlhbnNcbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJvZHlJZCBUaGUgaWQgb2YgdGhlIEVudGl0eS9Cb2R5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpYW5zIFRoZSBhbmdsZSB0byBzZXQgdGhlIGJvZHkgdG8uXG4gICAqL1xuICBzZXRBbmdsZShib2R5SWQsIHJhZGlhbnMpIHtcbiAgICB2YXIgYm9keSA9IHRoaXMuYm9kaWVzTWFwW2JvZHlJZF07XG4gICAgYm9keS5TZXRBbmdsZShyYWRpYW5zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGFuZ3VsYXJ5IHZlbG9jaXR5IG9mIGEgZHluYW1pYyBib2R5XG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib2R5SWQgVGhlIGlkIG9mIHRoZSBFbnRpdHkvQm9keVxuICAgKiBAcGFyYW0ge051bWJlcn0gdmVsb2NpdHkgVGhlIHZlbG9jaXR5IHRvIHNldCB0aGUgYm9keSB0by5cbiAgICovXG4gIHNldEFuZ2x1bGFyVmVsb2NpdHkoYm9keUlkLCB2ZWxvY2l0eSkge1xuICAgIHZhciBib2R5ID0gdGhpcy5ib2RpZXNNYXBbYm9keUlkXTtcbiAgICBib2R5LlNldEFuZ3VsYXJWZWxvY2l0eSh2ZWxvY2l0eSk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBBcHBseSB0b3JxdWUgKHJvdGF0aW9uIGZvcmNlKSB0byBhIGJvZHkuXG4gICAqIFBvc2l0aXZlIHZhbHVlcyBhcmUgY2xvY2t3aXNlLCBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGNvdW50ZXItY2xvY2t3aXNlLlxuICAgKlxuICAgKiBUaGlzIG11c3QgYmUgZG9uZSBvdXRzaWRlIG9mIHRoZSB1cGRhdGUoKSBpdGVyYXRpb24hXG4gICAqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge051bWJlcn0gYm9keUlkIFRoZSBpZCBvZiB0aGUgRW50aXR5L0JvZHlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHBvd2VyIFRoZSBwb3dlciBvZiB0aGUgdG9ycXVlLlxuICAgKi9cbiAgYXBwbHlUb3JxdWUoYm9keUlkLCBwb3dlcikge1xuICAgIHZhciBib2R5ID0gdGhpcy5ib2RpZXNNYXBbYm9keUlkXTtcbiAgICBib2R5LkFwcGx5VG9ycXVlKHBvd2VyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB3b3JsZCdzIGdyYXZpdHlcbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtPYmplY3R9IHZlY3RvciBBbiBvYmplY3Qgd2l0aCB4IGFuZCB5IHZhbHVlcyBpbiBtZXRlcnMgcGVyIHNlY29uZCBzcXVhcmVkLlxuICAgKi9cbiAgc2V0R3Jhdml0eSh2ZWN0b3IpIHtcbiAgICB0aGlzLmIyV29ybGQuU2V0R3Jhdml0eShuZXcgQjJWZWMyKHZlY3Rvci54LCB2ZWN0b3IueSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIGJvZHkgZnJvbSB0aGUgYm94MmQgd29ybGRcbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJvZHlJZCBUaGUgaWQgb2YgdGhlIEVudGl0eS9Cb2R5XG4gICAqL1xuICByZW1vdmVCb2R5KGlkKSB7XG4gICAgaWYodGhpcy5ib2RpZXNNYXBbaWRdKXtcbiAgICAgIGlmKHRoaXMuZml4dHVyZXNNYXBbaWRdKXtcbiAgICAgICAgdGhpcy5ib2RpZXNNYXBbaWRdLkRlc3Ryb3lGaXh0dXJlKHRoaXMuZml4dHVyZXNNYXBbaWRdKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYjJXb3JsZC5EZXN0cm95Qm9keSh0aGlzLmJvZGllc01hcFtpZF0pO1xuICAgICAgLy9kZWxldGUgdGhpcy5maXh0dXJlc01hcFtpZF07XG4gICAgICBkZWxldGUgdGhpcy5ib2RpZXNNYXBbaWRdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXYWtlIHVwIGEgYm9keSBpbiB0aGUgYm94MmQgd29ybGQgc28gdGhhdCBib3gyZCB3aWxsIGNvbnRpbnVlIHRvIHJ1biBjYWxjdWxhdGlvbnMgb24gaXQuXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib2R5SWQgVGhlIGlkIG9mIHRoZSBFbnRpdHkvQm9keVxuICAgKi9cbiAgd2FrZVVwQm9keShpZCkge1xuICAgIGlmKHRoaXMuYm9kaWVzTWFwW2lkXSl7XG4gICAgICB0aGlzLmJvZGllc01hcFtpZF0uU2V0QXdha2UodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGNvbnRhY3RMaXN0ZW5lciB0byB0aGUgYjJXb3JsZFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtPYmplY3R9IGNhbGxiYWNrcyBPYmplY3QgY29udGFpbmluZyBhIGJlZ2luQ29udGFudCwgZW5kQ29udGFjdCBhbmQvb3IgcHJlU29sdmUvcG9zdFNvbHZlIGtleXMgYW5kIGNhbGxiYWNrc1xuICAgKi9cbiAgYWRkQ29udGFjdExpc3RlbmVyKGNvbnRhY3RMaXN0ZW5lcil7XG4gICAgdmFyIGxpc3RlbmVyID0gbmV3IEJveDJELkR5bmFtaWNzLmIyQ29udGFjdExpc3RlbmVyKCk7XG4gICAgaWYoY29udGFjdExpc3RlbmVyLmJlZ2luQ29udGFjdCl7XG4gICAgICBsaXN0ZW5lci5CZWdpbkNvbnRhY3QgPSBmdW5jdGlvbihjb250YWN0KXtcbiAgICAgICAgY29udGFjdExpc3RlbmVyLmJlZ2luQ29udGFjdChjb250YWN0Lm1fZml4dHVyZUEubV9ib2R5Lm1fdXNlckRhdGEsIGNvbnRhY3QubV9maXh0dXJlQi5tX2JvZHkubV91c2VyRGF0YSwgY29udGFjdCk7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZihjb250YWN0TGlzdGVuZXIuZW5kQ29udGFjdCl7XG4gICAgICBsaXN0ZW5lci5FbmRDb250YWN0ID0gZnVuY3Rpb24oY29udGFjdCl7XG4gICAgICAgIGNvbnRhY3RMaXN0ZW5lci5lbmRDb250YWN0KGNvbnRhY3QubV9maXh0dXJlQS5tX2JvZHkubV91c2VyRGF0YSwgY29udGFjdC5tX2ZpeHR1cmVCLm1fYm9keS5tX3VzZXJEYXRhLCBjb250YWN0KTtcbiAgICAgIH07XG4gICAgfVxuICAgIGlmKGNvbnRhY3RMaXN0ZW5lci5wcmVTb2x2ZSl7XG4gICAgICBsaXN0ZW5lci5QcmVTb2x2ZSA9IGZ1bmN0aW9uKGNvbnRhY3QsIG9sZE1hbmlmb2xkKXtcbiAgICAgICAgY29udGFjdExpc3RlbmVyLnByZVNvbHZlKGNvbnRhY3QubV9maXh0dXJlQS5tX2JvZHkubV91c2VyRGF0YSwgY29udGFjdC5tX2ZpeHR1cmVCLm1fYm9keS5tX3VzZXJEYXRhLCBvbGRNYW5pZm9sZCwgY29udGFjdCk7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoY29udGFjdExpc3RlbmVyLnBvc3RTb2x2ZSl7XG4gICAgICBsaXN0ZW5lci5Qb3N0U29sdmUgPSBmdW5jdGlvbihjb250YWN0LCBpbXB1bHNlKXtcbiAgICAgICAgY29udGFjdExpc3RlbmVyLnBvc3RTb2x2ZShjb250YWN0Lm1fZml4dHVyZUEubV9ib2R5Lm1fdXNlckRhdGEsIGNvbnRhY3QubV9maXh0dXJlQi5tX2JvZHkubV91c2VyRGF0YSwgaW1wdWxzZSwgY29udGFjdCk7XG4gICAgICB9O1xuICAgIH1cbiAgICB0aGlzLmIyV29ybGQuU2V0Q29udGFjdExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBqb2ludCBmcm9tIHRoZSB3b3JsZC5cbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uLCBhbmQgQkVGT1JFIGFueSBib2RpZXMgY29ubmVjdGVkIHRvIHRoZSBqb2ludCBhcmUgcmVtb3ZlZCFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBqb2ludElkIFRoZSBpZCBvZiBqb2ludCB0byBiZSBkZXN0cm95ZWQuXG4gICAqL1xuICByZW1vdmVKb2ludChqb2ludElkKSB7XG4gICAgaWYodGhpcy5qb2ludHNNYXBbam9pbnRJZF0pe1xuICAgICAgdGhpcy5iMldvcmxkLkRlc3Ryb3lKb2ludCh0aGlzLmpvaW50c01hcFtqb2ludElkXSk7XG4gICAgICBkZWxldGUgdGhpcy5qb2ludHNNYXBbam9pbnRJZF07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGpvaW50IHRvIHRoZSBib3gyZCB3b3JsZC5cbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtKb2ludH0gQSBqb2ludCBkZWZpbml0aW9uLlxuICAgKi9cbiAgYWRkSm9pbnQoam9pbnQpIHtcbiAgICBpZihqb2ludCAmJiBqb2ludC5pZCAmJiAhdGhpcy5qb2ludHNNYXBbam9pbnQuaWRdKXtcblxuICAgICAgaWYoIWpvaW50LmFscmVhZHlTY2FsZWQgJiYgam9pbnQuc2NhbGVKb2ludExvY2F0aW9uKXtcbiAgICAgICAgam9pbnQuc2NhbGVKb2ludExvY2F0aW9uKDEgLyB0aGlzLnNjYWxlKTtcbiAgICAgICAgam9pbnQuc2NhbGUgPSB0aGlzLnNjYWxlO1xuICAgICAgfVxuXG4gICAgICB2YXIgYjJKb2ludCA9IGpvaW50LmNyZWF0ZUIySm9pbnQodGhpcyk7XG4gICAgICBpZihiMkpvaW50KXtcbiAgICAgICAgdGhpcy5qb2ludHNNYXBbam9pbnQuaWRdID0gYjJKb2ludDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCb3g7XG5cbiIsImNvbnN0IHdhbGxSZXN0aXR1dGlvbiA9IDE7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBcImVudGl0aWVzXCI6IFtcbiAgICB7XG4gICAgICBcInBvaW50c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogLTEwMCxcbiAgICAgICAgICBcInlcIjogLTEwMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IDU2OC4xMDExMyxcbiAgICAgICAgICBcInlcIjogLTEwMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IDU2OC4xMDExMyxcbiAgICAgICAgICBcInlcIjogMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IDAsXG4gICAgICAgICAgXCJ5XCI6IDU0MFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IC0xMDAsXG4gICAgICAgICAgXCJ5XCI6IDU0MFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIFwieFwiOiAwLFxuICAgICAgXCJ5XCI6IDAsXG4gICAgICBcInN0YXRpY0JvZHlcIjogdHJ1ZSxcbiAgICAgIFwiem9uZVwiOiBmYWxzZSxcbiAgICAgIFwidHlwZVwiOiBcIlBvbHlnb25cIixcbiAgICAgIFwiaWRcIjogXCJ1bGVmdHdcIixcbiAgICAgIFwiaGlkZGVuXCI6IHRydWUsXG4gICAgICBcIndhbGxcIjogdHJ1ZSxcbiAgICAgIFwicmVzdGl0dXRpb25cIjogd2FsbFJlc3RpdHV0aW9uXG4gICAgfSxcbiAgICB7XG4gICAgICBcInBvaW50c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogLTEwMCxcbiAgICAgICAgICBcInlcIjogNTQwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogMCxcbiAgICAgICAgICBcInlcIjogNTQwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogNTY4LjEwMTEzLFxuICAgICAgICAgIFwieVwiOiAxMDgwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogNTY4LjEwMTEzLFxuICAgICAgICAgIFwieVwiOiAxMTgwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogLTEwMCxcbiAgICAgICAgICBcInlcIjogMTE4MFxuICAgICAgICB9LFxuICAgICAgXSxcbiAgICAgIFwieFwiOiAwLFxuICAgICAgXCJ5XCI6IDAsXG4gICAgICBcInN0YXRpY0JvZHlcIjogdHJ1ZSxcbiAgICAgIFwiem9uZVwiOiBmYWxzZSxcbiAgICAgIFwidHlwZVwiOiBcIlBvbHlnb25cIixcbiAgICAgIFwicmVzdGl0dXRpb25cIjogd2FsbFJlc3RpdHV0aW9uLFxuICAgICAgXCJoaWRkZW5cIjogdHJ1ZSxcbiAgICAgIFwid2FsbFwiOiB0cnVlLFxuICAgICAgXCJpZFwiOiBcImxsZWZ0d1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInBvaW50c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogMTM1MS44OTg4NyxcbiAgICAgICAgICBcInlcIjogLTEwMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IDIwMjAsXG4gICAgICAgICAgXCJ5XCI6IC0xMDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAyMDIwLFxuICAgICAgICAgIFwieVwiOiA1NDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAxOTIwLFxuICAgICAgICAgIFwieVwiOiA1NDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAxMzUxLjg5ODg3LFxuICAgICAgICAgIFwieVwiOiAwXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgXCJ4XCI6IDAsXG4gICAgICBcInlcIjogMCxcbiAgICAgIFwic3RhdGljQm9keVwiOiB0cnVlLFxuICAgICAgXCJ6b25lXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IFwiUG9seWdvblwiLFxuICAgICAgXCJyZXN0aXR1dGlvblwiOiB3YWxsUmVzdGl0dXRpb24sXG4gICAgICBcImlkXCI6IFwidXJpZ2h0dHdcIixcbiAgICAgIFwiaGlkZGVuXCI6IHRydWUsXG4gICAgfSxcbiAgICB7XG4gICAgICBcInBvaW50c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogMTM1MS44OTg4NyxcbiAgICAgICAgICBcInlcIjogMTA4MFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IDE5MjAsXG4gICAgICAgICAgXCJ5XCI6IDU0MFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IDIwMjAsXG4gICAgICAgICAgXCJ5XCI6IDU0MFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IDIwMjAsXG4gICAgICAgICAgXCJ5XCI6IDExODBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAxMzUxLjg5ODg3LFxuICAgICAgICAgIFwieVwiOiAxMTgwXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgXCJ4XCI6IDAsXG4gICAgICBcInlcIjogMCxcbiAgICAgIFwic3RhdGljQm9keVwiOiB0cnVlLFxuICAgICAgXCJ6b25lXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IFwiUG9seWdvblwiLFxuICAgICAgXCJyZXN0aXR1dGlvblwiOiB3YWxsUmVzdGl0dXRpb24sXG4gICAgICBcImlkXCI6IFwibHJpZ2h0dHdcIixcbiAgICAgIFwiaGlkZGVuXCI6IHRydWUsXG4gICAgICBcIndhbGxcIjogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieFwiOiA5NjAsXG4gICAgICBcInlcIjogMTE4MCxcbiAgICAgIFwiaGFsZldpZHRoXCI6IDEwMDAsXG4gICAgICBcImhhbGZIZWlnaHRcIjogMTAwLFxuICAgICAgXCJzdGF0aWNCb2R5XCI6IHRydWUsXG4gICAgICBcInpvbmVcIjogZmFsc2UsXG4gICAgICBcInR5cGVcIjogXCJSZWN0YW5nbGVcIixcbiAgICAgIFwiaWRcIjogXCJib3R0b213XCIsXG4gICAgICBcInJlc3RpdHV0aW9uXCI6IHdhbGxSZXN0aXR1dGlvbixcbiAgICAgIFwiaGlkZGVuXCI6IHRydWUsXG4gICAgICBcIndhbGxcIjogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIFwieFwiOiA5NjAsXG4gICAgICBcInlcIjogLTEwMCxcbiAgICAgIFwiaGFsZldpZHRoXCI6IDEwMDAsXG4gICAgICBcImhhbGZIZWlnaHRcIjogMTAwLFxuICAgICAgXCJzdGF0aWNCb2R5XCI6IHRydWUsXG4gICAgICBcInpvbmVcIjogZmFsc2UsXG4gICAgICBcInR5cGVcIjogXCJSZWN0YW5nbGVcIixcbiAgICAgIFwiaWRcIjogXCJ0b3B3XCIsXG4gICAgICBcInJlc3RpdHV0aW9uXCI6IHdhbGxSZXN0aXR1dGlvbixcbiAgICAgIFwiaGlkZGVuXCI6IHRydWUsXG4gICAgICBcIndhbGxcIjogdHJ1ZSxcbiAgICB9LFxuICBdLFxuICBcImpvaW50c1wiOiBbXG4gIF0sXG4gIFwiY2FudmFzXCI6IHtcbiAgICBcImhlaWdodFwiOiA2MDAsXG4gICAgXCJ3aWR0aFwiOiA4MDBcbiAgfSxcbiAgXCJiYWNrSW1nXCI6IG51bGxcbn07IiwiY29uc3QgY29sb3JzID0gW1xuICAnIzAwREQwMCcsXG4gICcjREQwMDAwJyxcbiAgJyNFRUVFRUUnLFxuICAnI0EwNTIyRCcsXG4gICcjMDAwMEREJyxcbiAgJyNGRjhDMDAnLFxuXTtcblxubW9kdWxlLmV4cG9ydHMgPSBjb2xvcnM7IiwiLyohIEhhbW1lci5KUyAtIHYyLjAuNyAtIDIwMTYtMDQtMjJcbiAqIGh0dHA6Ly9oYW1tZXJqcy5naXRodWIuaW8vXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE2IEpvcmlrIFRhbmdlbGRlcjtcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAqL1xuKGZ1bmN0aW9uKHdpbmRvdywgZG9jdW1lbnQsIGV4cG9ydE5hbWUsIHVuZGVmaW5lZCkge1xuICAndXNlIHN0cmljdCc7XG5cbnZhciBWRU5ET1JfUFJFRklYRVMgPSBbJycsICd3ZWJraXQnLCAnTW96JywgJ01TJywgJ21zJywgJ28nXTtcbnZhciBURVNUX0VMRU1FTlQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblxudmFyIFRZUEVfRlVOQ1RJT04gPSAnZnVuY3Rpb24nO1xuXG52YXIgcm91bmQgPSBNYXRoLnJvdW5kO1xudmFyIGFicyA9IE1hdGguYWJzO1xudmFyIG5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIHNldCBhIHRpbWVvdXQgd2l0aCBhIGdpdmVuIHNjb3BlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxuICogQHBhcmFtIHtOdW1iZXJ9IHRpbWVvdXRcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7bnVtYmVyfVxuICovXG5mdW5jdGlvbiBzZXRUaW1lb3V0Q29udGV4dChmbiwgdGltZW91dCwgY29udGV4dCkge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGJpbmRGbihmbiwgY29udGV4dCksIHRpbWVvdXQpO1xufVxuXG4vKipcbiAqIGlmIHRoZSBhcmd1bWVudCBpcyBhbiBhcnJheSwgd2Ugd2FudCB0byBleGVjdXRlIHRoZSBmbiBvbiBlYWNoIGVudHJ5XG4gKiBpZiBpdCBhaW50IGFuIGFycmF5IHdlIGRvbid0IHdhbnQgdG8gZG8gYSB0aGluZy5cbiAqIHRoaXMgaXMgdXNlZCBieSBhbGwgdGhlIG1ldGhvZHMgdGhhdCBhY2NlcHQgYSBzaW5nbGUgYW5kIGFycmF5IGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfEFycmF5fSBhcmdcbiAqIEBwYXJhbSB7U3RyaW5nfSBmblxuICogQHBhcmFtIHtPYmplY3R9IFtjb250ZXh0XVxuICogQHJldHVybnMge0Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGludm9rZUFycmF5QXJnKGFyZywgZm4sIGNvbnRleHQpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShhcmcpKSB7XG4gICAgICAgIGVhY2goYXJnLCBjb250ZXh0W2ZuXSwgY29udGV4dCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogd2FsayBvYmplY3RzIGFuZCBhcnJheXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICovXG5mdW5jdGlvbiBlYWNoKG9iaiwgaXRlcmF0b3IsIGNvbnRleHQpIHtcbiAgICB2YXIgaTtcblxuICAgIGlmICghb2JqKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAob2JqLmZvckVhY2gpIHtcbiAgICAgICAgb2JqLmZvckVhY2goaXRlcmF0b3IsIGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAob2JqLmxlbmd0aCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IG9iai5sZW5ndGgpIHtcbiAgICAgICAgICAgIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgb2JqLmhhc093blByb3BlcnR5KGkpICYmIGl0ZXJhdG9yLmNhbGwoY29udGV4dCwgb2JqW2ldLCBpLCBvYmopO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vKipcbiAqIHdyYXAgYSBtZXRob2Qgd2l0aCBhIGRlcHJlY2F0aW9uIHdhcm5pbmcgYW5kIHN0YWNrIHRyYWNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBtZXRob2RcbiAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge1N0cmluZ30gbWVzc2FnZVxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIG5ldyBmdW5jdGlvbiB3cmFwcGluZyB0aGUgc3VwcGxpZWQgbWV0aG9kLlxuICovXG5mdW5jdGlvbiBkZXByZWNhdGUobWV0aG9kLCBuYW1lLCBtZXNzYWdlKSB7XG4gICAgdmFyIGRlcHJlY2F0aW9uTWVzc2FnZSA9ICdERVBSRUNBVEVEIE1FVEhPRDogJyArIG5hbWUgKyAnXFxuJyArIG1lc3NhZ2UgKyAnIEFUIFxcbic7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZSA9IG5ldyBFcnJvcignZ2V0LXN0YWNrLXRyYWNlJyk7XG4gICAgICAgIHZhciBzdGFjayA9IGUgJiYgZS5zdGFjayA/IGUuc3RhY2sucmVwbGFjZSgvXlteXFwoXSs/W1xcbiRdL2dtLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eXFxzK2F0XFxzKy9nbSwgJycpXG4gICAgICAgICAgICAucmVwbGFjZSgvXk9iamVjdC48YW5vbnltb3VzPlxccypcXCgvZ20sICd7YW5vbnltb3VzfSgpQCcpIDogJ1Vua25vd24gU3RhY2sgVHJhY2UnO1xuXG4gICAgICAgIHZhciBsb2cgPSB3aW5kb3cuY29uc29sZSAmJiAod2luZG93LmNvbnNvbGUud2FybiB8fCB3aW5kb3cuY29uc29sZS5sb2cpO1xuICAgICAgICBpZiAobG9nKSB7XG4gICAgICAgICAgICBsb2cuY2FsbCh3aW5kb3cuY29uc29sZSwgZGVwcmVjYXRpb25NZXNzYWdlLCBzdGFjayk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG59XG5cbi8qKlxuICogZXh0ZW5kIG9iamVjdC5cbiAqIG1lYW5zIHRoYXQgcHJvcGVydGllcyBpbiBkZXN0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIG9uZXMgaW4gc3JjLlxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxuICogQHBhcmFtIHsuLi5PYmplY3R9IG9iamVjdHNfdG9fYXNzaWduXG4gKiBAcmV0dXJucyB7T2JqZWN0fSB0YXJnZXRcbiAqL1xudmFyIGFzc2lnbjtcbmlmICh0eXBlb2YgT2JqZWN0LmFzc2lnbiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIGFzc2lnbiA9IGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQpIHtcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gdW5kZWZpbmVkIHx8IHRhcmdldCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQ2Fubm90IGNvbnZlcnQgdW5kZWZpbmVkIG9yIG51bGwgdG8gb2JqZWN0Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgb3V0cHV0ID0gT2JqZWN0KHRhcmdldCk7XG4gICAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgIGlmIChzb3VyY2UgIT09IHVuZGVmaW5lZCAmJiBzb3VyY2UgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBuZXh0S2V5IGluIHNvdXJjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlLmhhc093blByb3BlcnR5KG5leHRLZXkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRbbmV4dEtleV0gPSBzb3VyY2VbbmV4dEtleV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICB9O1xufSBlbHNlIHtcbiAgICBhc3NpZ24gPSBPYmplY3QuYXNzaWduO1xufVxuXG4vKipcbiAqIGV4dGVuZCBvYmplY3QuXG4gKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgaW4gZGVzdCB3aWxsIGJlIG92ZXJ3cml0dGVuIGJ5IHRoZSBvbmVzIGluIHNyYy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gc3JjXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFttZXJnZT1mYWxzZV1cbiAqIEByZXR1cm5zIHtPYmplY3R9IGRlc3RcbiAqL1xudmFyIGV4dGVuZCA9IGRlcHJlY2F0ZShmdW5jdGlvbiBleHRlbmQoZGVzdCwgc3JjLCBtZXJnZSkge1xuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMoc3JjKTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBrZXlzLmxlbmd0aCkge1xuICAgICAgICBpZiAoIW1lcmdlIHx8IChtZXJnZSAmJiBkZXN0W2tleXNbaV1dID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgICAgICBkZXN0W2tleXNbaV1dID0gc3JjW2tleXNbaV1dO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIGRlc3Q7XG59LCAnZXh0ZW5kJywgJ1VzZSBgYXNzaWduYC4nKTtcblxuLyoqXG4gKiBtZXJnZSB0aGUgdmFsdWVzIGZyb20gc3JjIGluIHRoZSBkZXN0LlxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIHRoYXQgZXhpc3QgaW4gZGVzdCB3aWxsIG5vdCBiZSBvdmVyd3JpdHRlbiBieSBzcmNcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZXN0XG4gKiBAcGFyYW0ge09iamVjdH0gc3JjXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBkZXN0XG4gKi9cbnZhciBtZXJnZSA9IGRlcHJlY2F0ZShmdW5jdGlvbiBtZXJnZShkZXN0LCBzcmMpIHtcbiAgICByZXR1cm4gZXh0ZW5kKGRlc3QsIHNyYywgdHJ1ZSk7XG59LCAnbWVyZ2UnLCAnVXNlIGBhc3NpZ25gLicpO1xuXG4vKipcbiAqIHNpbXBsZSBjbGFzcyBpbmhlcml0YW5jZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2hpbGRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGJhc2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBbcHJvcGVydGllc11cbiAqL1xuZnVuY3Rpb24gaW5oZXJpdChjaGlsZCwgYmFzZSwgcHJvcGVydGllcykge1xuICAgIHZhciBiYXNlUCA9IGJhc2UucHJvdG90eXBlLFxuICAgICAgICBjaGlsZFA7XG5cbiAgICBjaGlsZFAgPSBjaGlsZC5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKGJhc2VQKTtcbiAgICBjaGlsZFAuY29uc3RydWN0b3IgPSBjaGlsZDtcbiAgICBjaGlsZFAuX3N1cGVyID0gYmFzZVA7XG5cbiAgICBpZiAocHJvcGVydGllcykge1xuICAgICAgICBhc3NpZ24oY2hpbGRQLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG59XG5cbi8qKlxuICogc2ltcGxlIGZ1bmN0aW9uIGJpbmRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge09iamVjdH0gY29udGV4dFxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5mdW5jdGlvbiBiaW5kRm4oZm4sIGNvbnRleHQpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gYm91bmRGbigpIHtcbiAgICAgICAgcmV0dXJuIGZuLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBsZXQgYSBib29sZWFuIHZhbHVlIGFsc28gYmUgYSBmdW5jdGlvbiB0aGF0IG11c3QgcmV0dXJuIGEgYm9vbGVhblxuICogdGhpcyBmaXJzdCBpdGVtIGluIGFyZ3Mgd2lsbCBiZSB1c2VkIGFzIHRoZSBjb250ZXh0XG4gKiBAcGFyYW0ge0Jvb2xlYW58RnVuY3Rpb259IHZhbFxuICogQHBhcmFtIHtBcnJheX0gW2FyZ3NdXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gYm9vbE9yRm4odmFsLCBhcmdzKSB7XG4gICAgaWYgKHR5cGVvZiB2YWwgPT0gVFlQRV9GVU5DVElPTikge1xuICAgICAgICByZXR1cm4gdmFsLmFwcGx5KGFyZ3MgPyBhcmdzWzBdIHx8IHVuZGVmaW5lZCA6IHVuZGVmaW5lZCwgYXJncyk7XG4gICAgfVxuICAgIHJldHVybiB2YWw7XG59XG5cbi8qKlxuICogdXNlIHRoZSB2YWwyIHdoZW4gdmFsMSBpcyB1bmRlZmluZWRcbiAqIEBwYXJhbSB7Kn0gdmFsMVxuICogQHBhcmFtIHsqfSB2YWwyXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gaWZVbmRlZmluZWQodmFsMSwgdmFsMikge1xuICAgIHJldHVybiAodmFsMSA9PT0gdW5kZWZpbmVkKSA/IHZhbDIgOiB2YWwxO1xufVxuXG4vKipcbiAqIGFkZEV2ZW50TGlzdGVuZXIgd2l0aCBtdWx0aXBsZSBldmVudHMgYXQgb25jZVxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAqL1xuZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiByZW1vdmVFdmVudExpc3RlbmVyIHdpdGggbXVsdGlwbGUgZXZlbnRzIGF0IG9uY2VcbiAqIEBwYXJhbSB7RXZlbnRUYXJnZXR9IHRhcmdldFxuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyXG4gKi9cbmZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRhcmdldCwgdHlwZXMsIGhhbmRsZXIpIHtcbiAgICBlYWNoKHNwbGl0U3RyKHR5cGVzKSwgZnVuY3Rpb24odHlwZSkge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBmYWxzZSk7XG4gICAgfSk7XG59XG5cbi8qKlxuICogZmluZCBpZiBhIG5vZGUgaXMgaW4gdGhlIGdpdmVuIHBhcmVudFxuICogQG1ldGhvZCBoYXNQYXJlbnRcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IG5vZGVcbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IHBhcmVudFxuICogQHJldHVybiB7Qm9vbGVhbn0gZm91bmRcbiAqL1xuZnVuY3Rpb24gaGFzUGFyZW50KG5vZGUsIHBhcmVudCkge1xuICAgIHdoaWxlIChub2RlKSB7XG4gICAgICAgIGlmIChub2RlID09IHBhcmVudCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIHNtYWxsIGluZGV4T2Ygd3JhcHBlclxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHBhcmFtIHtTdHJpbmd9IGZpbmRcbiAqIEByZXR1cm5zIHtCb29sZWFufSBmb3VuZFxuICovXG5mdW5jdGlvbiBpblN0cihzdHIsIGZpbmQpIHtcbiAgICByZXR1cm4gc3RyLmluZGV4T2YoZmluZCkgPiAtMTtcbn1cblxuLyoqXG4gKiBzcGxpdCBzdHJpbmcgb24gd2hpdGVzcGFjZVxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybnMge0FycmF5fSB3b3Jkc1xuICovXG5mdW5jdGlvbiBzcGxpdFN0cihzdHIpIHtcbiAgICByZXR1cm4gc3RyLnRyaW0oKS5zcGxpdCgvXFxzKy9nKTtcbn1cblxuLyoqXG4gKiBmaW5kIGlmIGEgYXJyYXkgY29udGFpbnMgdGhlIG9iamVjdCB1c2luZyBpbmRleE9mIG9yIGEgc2ltcGxlIHBvbHlGaWxsXG4gKiBAcGFyYW0ge0FycmF5fSBzcmNcbiAqIEBwYXJhbSB7U3RyaW5nfSBmaW5kXG4gKiBAcGFyYW0ge1N0cmluZ30gW2ZpbmRCeUtleV1cbiAqIEByZXR1cm4ge0Jvb2xlYW58TnVtYmVyfSBmYWxzZSB3aGVuIG5vdCBmb3VuZCwgb3IgdGhlIGluZGV4XG4gKi9cbmZ1bmN0aW9uIGluQXJyYXkoc3JjLCBmaW5kLCBmaW5kQnlLZXkpIHtcbiAgICBpZiAoc3JjLmluZGV4T2YgJiYgIWZpbmRCeUtleSkge1xuICAgICAgICByZXR1cm4gc3JjLmluZGV4T2YoZmluZCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHNyYy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICgoZmluZEJ5S2V5ICYmIHNyY1tpXVtmaW5kQnlLZXldID09IGZpbmQpIHx8ICghZmluZEJ5S2V5ICYmIHNyY1tpXSA9PT0gZmluZCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxufVxuXG4vKipcbiAqIGNvbnZlcnQgYXJyYXktbGlrZSBvYmplY3RzIHRvIHJlYWwgYXJyYXlzXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHRvQXJyYXkob2JqKSB7XG4gICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKG9iaiwgMCk7XG59XG5cbi8qKlxuICogdW5pcXVlIGFycmF5IHdpdGggb2JqZWN0cyBiYXNlZCBvbiBhIGtleSAobGlrZSAnaWQnKSBvciBqdXN0IGJ5IHRoZSBhcnJheSdzIHZhbHVlXG4gKiBAcGFyYW0ge0FycmF5fSBzcmMgW3tpZDoxfSx7aWQ6Mn0se2lkOjF9XVxuICogQHBhcmFtIHtTdHJpbmd9IFtrZXldXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtzb3J0PUZhbHNlXVxuICogQHJldHVybnMge0FycmF5fSBbe2lkOjF9LHtpZDoyfV1cbiAqL1xuZnVuY3Rpb24gdW5pcXVlQXJyYXkoc3JjLCBrZXksIHNvcnQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHZhciB2YWx1ZXMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG5cbiAgICB3aGlsZSAoaSA8IHNyYy5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHZhbCA9IGtleSA/IHNyY1tpXVtrZXldIDogc3JjW2ldO1xuICAgICAgICBpZiAoaW5BcnJheSh2YWx1ZXMsIHZhbCkgPCAwKSB7XG4gICAgICAgICAgICByZXN1bHRzLnB1c2goc3JjW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZXNbaV0gPSB2YWw7XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICBpZiAoc29ydCkge1xuICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc29ydCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0cyA9IHJlc3VsdHMuc29ydChmdW5jdGlvbiBzb3J0VW5pcXVlQXJyYXkoYSwgYikge1xuICAgICAgICAgICAgICAgIHJldHVybiBhW2tleV0gPiBiW2tleV07XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHRzO1xufVxuXG4vKipcbiAqIGdldCB0aGUgcHJlZml4ZWQgcHJvcGVydHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcm9wZXJ0eVxuICogQHJldHVybnMge1N0cmluZ3xVbmRlZmluZWR9IHByZWZpeGVkXG4gKi9cbmZ1bmN0aW9uIHByZWZpeGVkKG9iaiwgcHJvcGVydHkpIHtcbiAgICB2YXIgcHJlZml4LCBwcm9wO1xuICAgIHZhciBjYW1lbFByb3AgPSBwcm9wZXJ0eVswXS50b1VwcGVyQ2FzZSgpICsgcHJvcGVydHkuc2xpY2UoMSk7XG5cbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBWRU5ET1JfUFJFRklYRVMubGVuZ3RoKSB7XG4gICAgICAgIHByZWZpeCA9IFZFTkRPUl9QUkVGSVhFU1tpXTtcbiAgICAgICAgcHJvcCA9IChwcmVmaXgpID8gcHJlZml4ICsgY2FtZWxQcm9wIDogcHJvcGVydHk7XG5cbiAgICAgICAgaWYgKHByb3AgaW4gb2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcDtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogZ2V0IGEgdW5pcXVlIGlkXG4gKiBAcmV0dXJucyB7bnVtYmVyfSB1bmlxdWVJZFxuICovXG52YXIgX3VuaXF1ZUlkID0gMTtcbmZ1bmN0aW9uIHVuaXF1ZUlkKCkge1xuICAgIHJldHVybiBfdW5pcXVlSWQrKztcbn1cblxuLyoqXG4gKiBnZXQgdGhlIHdpbmRvdyBvYmplY3Qgb2YgYW4gZWxlbWVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHJldHVybnMge0RvY3VtZW50Vmlld3xXaW5kb3d9XG4gKi9cbmZ1bmN0aW9uIGdldFdpbmRvd0ZvckVsZW1lbnQoZWxlbWVudCkge1xuICAgIHZhciBkb2MgPSBlbGVtZW50Lm93bmVyRG9jdW1lbnQgfHwgZWxlbWVudDtcbiAgICByZXR1cm4gKGRvYy5kZWZhdWx0VmlldyB8fCBkb2MucGFyZW50V2luZG93IHx8IHdpbmRvdyk7XG59XG5cbnZhciBNT0JJTEVfUkVHRVggPSAvbW9iaWxlfHRhYmxldHxpcChhZHxob25lfG9kKXxhbmRyb2lkL2k7XG5cbnZhciBTVVBQT1JUX1RPVUNIID0gKCdvbnRvdWNoc3RhcnQnIGluIHdpbmRvdyk7XG52YXIgU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyA9IHByZWZpeGVkKHdpbmRvdywgJ1BvaW50ZXJFdmVudCcpICE9PSB1bmRlZmluZWQ7XG52YXIgU1VQUE9SVF9PTkxZX1RPVUNIID0gU1VQUE9SVF9UT1VDSCAmJiBNT0JJTEVfUkVHRVgudGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxudmFyIElOUFVUX1RZUEVfVE9VQ0ggPSAndG91Y2gnO1xudmFyIElOUFVUX1RZUEVfUEVOID0gJ3Blbic7XG52YXIgSU5QVVRfVFlQRV9NT1VTRSA9ICdtb3VzZSc7XG52YXIgSU5QVVRfVFlQRV9LSU5FQ1QgPSAna2luZWN0JztcblxudmFyIENPTVBVVEVfSU5URVJWQUwgPSAyNTtcblxudmFyIElOUFVUX1NUQVJUID0gMTtcbnZhciBJTlBVVF9NT1ZFID0gMjtcbnZhciBJTlBVVF9FTkQgPSA0O1xudmFyIElOUFVUX0NBTkNFTCA9IDg7XG5cbnZhciBESVJFQ1RJT05fTk9ORSA9IDE7XG52YXIgRElSRUNUSU9OX0xFRlQgPSAyO1xudmFyIERJUkVDVElPTl9SSUdIVCA9IDQ7XG52YXIgRElSRUNUSU9OX1VQID0gODtcbnZhciBESVJFQ1RJT05fRE9XTiA9IDE2O1xuXG52YXIgRElSRUNUSU9OX0hPUklaT05UQUwgPSBESVJFQ1RJT05fTEVGVCB8IERJUkVDVElPTl9SSUdIVDtcbnZhciBESVJFQ1RJT05fVkVSVElDQUwgPSBESVJFQ1RJT05fVVAgfCBESVJFQ1RJT05fRE9XTjtcbnZhciBESVJFQ1RJT05fQUxMID0gRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUw7XG5cbnZhciBQUk9QU19YWSA9IFsneCcsICd5J107XG52YXIgUFJPUFNfQ0xJRU5UX1hZID0gWydjbGllbnRYJywgJ2NsaWVudFknXTtcblxuLyoqXG4gKiBjcmVhdGUgbmV3IGlucHV0IHR5cGUgbWFuYWdlclxuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0lucHV0fVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIElucHV0KG1hbmFnZXIsIGNhbGxiYWNrKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XG4gICAgdGhpcy5jYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIHRoaXMuZWxlbWVudCA9IG1hbmFnZXIuZWxlbWVudDtcbiAgICB0aGlzLnRhcmdldCA9IG1hbmFnZXIub3B0aW9ucy5pbnB1dFRhcmdldDtcblxuICAgIC8vIHNtYWxsZXIgd3JhcHBlciBhcm91bmQgdGhlIGhhbmRsZXIsIGZvciB0aGUgc2NvcGUgYW5kIHRoZSBlbmFibGVkIHN0YXRlIG9mIHRoZSBtYW5hZ2VyLFxuICAgIC8vIHNvIHdoZW4gZGlzYWJsZWQgdGhlIGlucHV0IGV2ZW50cyBhcmUgY29tcGxldGVseSBieXBhc3NlZC5cbiAgICB0aGlzLmRvbUhhbmRsZXIgPSBmdW5jdGlvbihldikge1xuICAgICAgICBpZiAoYm9vbE9yRm4obWFuYWdlci5vcHRpb25zLmVuYWJsZSwgW21hbmFnZXJdKSkge1xuICAgICAgICAgICAgc2VsZi5oYW5kbGVyKGV2KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB0aGlzLmluaXQoKTtcblxufVxuXG5JbnB1dC5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogc2hvdWxkIGhhbmRsZSB0aGUgaW5wdXRFdmVudCBkYXRhIGFuZCB0cmlnZ2VyIHRoZSBjYWxsYmFja1xuICAgICAqIEB2aXJ0dWFsXG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24oKSB7IH0sXG5cbiAgICAvKipcbiAgICAgKiBiaW5kIHRoZSBldmVudHNcbiAgICAgKi9cbiAgICBpbml0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ldkVsICYmIGFkZEV2ZW50TGlzdGVuZXJzKHRoaXMuZWxlbWVudCwgdGhpcy5ldkVsLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmV2VGFyZ2V0ICYmIGFkZEV2ZW50TGlzdGVuZXJzKHRoaXMudGFyZ2V0LCB0aGlzLmV2VGFyZ2V0LCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmV2V2luICYmIGFkZEV2ZW50TGlzdGVuZXJzKGdldFdpbmRvd0ZvckVsZW1lbnQodGhpcy5lbGVtZW50KSwgdGhpcy5ldldpbiwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdW5iaW5kIHRoZSBldmVudHNcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5ldkVsICYmIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMuZWxlbWVudCwgdGhpcy5ldkVsLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmV2VGFyZ2V0ICYmIHJlbW92ZUV2ZW50TGlzdGVuZXJzKHRoaXMudGFyZ2V0LCB0aGlzLmV2VGFyZ2V0LCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmV2V2luICYmIHJlbW92ZUV2ZW50TGlzdGVuZXJzKGdldFdpbmRvd0ZvckVsZW1lbnQodGhpcy5lbGVtZW50KSwgdGhpcy5ldldpbiwgdGhpcy5kb21IYW5kbGVyKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIGNyZWF0ZSBuZXcgaW5wdXQgdHlwZSBtYW5hZ2VyXG4gKiBjYWxsZWQgYnkgdGhlIE1hbmFnZXIgY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7SGFtbWVyfSBtYW5hZ2VyXG4gKiBAcmV0dXJucyB7SW5wdXR9XG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUlucHV0SW5zdGFuY2UobWFuYWdlcikge1xuICAgIHZhciBUeXBlO1xuICAgIHZhciBpbnB1dENsYXNzID0gbWFuYWdlci5vcHRpb25zLmlucHV0Q2xhc3M7XG5cbiAgICBpZiAoaW5wdXRDbGFzcykge1xuICAgICAgICBUeXBlID0gaW5wdXRDbGFzcztcbiAgICB9IGVsc2UgaWYgKFNVUFBPUlRfUE9JTlRFUl9FVkVOVFMpIHtcbiAgICAgICAgVHlwZSA9IFBvaW50ZXJFdmVudElucHV0O1xuICAgIH0gZWxzZSBpZiAoU1VQUE9SVF9PTkxZX1RPVUNIKSB7XG4gICAgICAgIFR5cGUgPSBUb3VjaElucHV0O1xuICAgIH0gZWxzZSBpZiAoIVNVUFBPUlRfVE9VQ0gpIHtcbiAgICAgICAgVHlwZSA9IE1vdXNlSW5wdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgVHlwZSA9IFRvdWNoTW91c2VJbnB1dDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyAoVHlwZSkobWFuYWdlciwgaW5wdXRIYW5kbGVyKTtcbn1cblxuLyoqXG4gKiBoYW5kbGUgaW5wdXQgZXZlbnRzXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFR5cGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBpbnB1dEhhbmRsZXIobWFuYWdlciwgZXZlbnRUeXBlLCBpbnB1dCkge1xuICAgIHZhciBwb2ludGVyc0xlbiA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aDtcbiAgICB2YXIgY2hhbmdlZFBvaW50ZXJzTGVuID0gaW5wdXQuY2hhbmdlZFBvaW50ZXJzLmxlbmd0aDtcbiAgICB2YXIgaXNGaXJzdCA9IChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiAocG9pbnRlcnNMZW4gLSBjaGFuZ2VkUG9pbnRlcnNMZW4gPT09IDApKTtcbiAgICB2YXIgaXNGaW5hbCA9IChldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSAmJiAocG9pbnRlcnNMZW4gLSBjaGFuZ2VkUG9pbnRlcnNMZW4gPT09IDApKTtcblxuICAgIGlucHV0LmlzRmlyc3QgPSAhIWlzRmlyc3Q7XG4gICAgaW5wdXQuaXNGaW5hbCA9ICEhaXNGaW5hbDtcblxuICAgIGlmIChpc0ZpcnN0KSB7XG4gICAgICAgIG1hbmFnZXIuc2Vzc2lvbiA9IHt9O1xuICAgIH1cblxuICAgIC8vIHNvdXJjZSBldmVudCBpcyB0aGUgbm9ybWFsaXplZCB2YWx1ZSBvZiB0aGUgZG9tRXZlbnRzXG4gICAgLy8gbGlrZSAndG91Y2hzdGFydCwgbW91c2V1cCwgcG9pbnRlcmRvd24nXG4gICAgaW5wdXQuZXZlbnRUeXBlID0gZXZlbnRUeXBlO1xuXG4gICAgLy8gY29tcHV0ZSBzY2FsZSwgcm90YXRpb24gZXRjXG4gICAgY29tcHV0ZUlucHV0RGF0YShtYW5hZ2VyLCBpbnB1dCk7XG5cbiAgICAvLyBlbWl0IHNlY3JldCBldmVudFxuICAgIG1hbmFnZXIuZW1pdCgnaGFtbWVyLmlucHV0JywgaW5wdXQpO1xuXG4gICAgbWFuYWdlci5yZWNvZ25pemUoaW5wdXQpO1xuICAgIG1hbmFnZXIuc2Vzc2lvbi5wcmV2SW5wdXQgPSBpbnB1dDtcbn1cblxuLyoqXG4gKiBleHRlbmQgdGhlIGRhdGEgd2l0aCBzb21lIHVzYWJsZSBwcm9wZXJ0aWVzIGxpa2Ugc2NhbGUsIHJvdGF0ZSwgdmVsb2NpdHkgZXRjXG4gKiBAcGFyYW0ge09iamVjdH0gbWFuYWdlclxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVJbnB1dERhdGEobWFuYWdlciwgaW5wdXQpIHtcbiAgICB2YXIgc2Vzc2lvbiA9IG1hbmFnZXIuc2Vzc2lvbjtcbiAgICB2YXIgcG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycztcbiAgICB2YXIgcG9pbnRlcnNMZW5ndGggPSBwb2ludGVycy5sZW5ndGg7XG5cbiAgICAvLyBzdG9yZSB0aGUgZmlyc3QgaW5wdXQgdG8gY2FsY3VsYXRlIHRoZSBkaXN0YW5jZSBhbmQgZGlyZWN0aW9uXG4gICAgaWYgKCFzZXNzaW9uLmZpcnN0SW5wdXQpIHtcbiAgICAgICAgc2Vzc2lvbi5maXJzdElucHV0ID0gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpO1xuICAgIH1cblxuICAgIC8vIHRvIGNvbXB1dGUgc2NhbGUgYW5kIHJvdGF0aW9uIHdlIG5lZWQgdG8gc3RvcmUgdGhlIG11bHRpcGxlIHRvdWNoZXNcbiAgICBpZiAocG9pbnRlcnNMZW5ndGggPiAxICYmICFzZXNzaW9uLmZpcnN0TXVsdGlwbGUpIHtcbiAgICAgICAgc2Vzc2lvbi5maXJzdE11bHRpcGxlID0gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpO1xuICAgIH0gZWxzZSBpZiAocG9pbnRlcnNMZW5ndGggPT09IDEpIHtcbiAgICAgICAgc2Vzc2lvbi5maXJzdE11bHRpcGxlID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGZpcnN0SW5wdXQgPSBzZXNzaW9uLmZpcnN0SW5wdXQ7XG4gICAgdmFyIGZpcnN0TXVsdGlwbGUgPSBzZXNzaW9uLmZpcnN0TXVsdGlwbGU7XG4gICAgdmFyIG9mZnNldENlbnRlciA9IGZpcnN0TXVsdGlwbGUgPyBmaXJzdE11bHRpcGxlLmNlbnRlciA6IGZpcnN0SW5wdXQuY2VudGVyO1xuXG4gICAgdmFyIGNlbnRlciA9IGlucHV0LmNlbnRlciA9IGdldENlbnRlcihwb2ludGVycyk7XG4gICAgaW5wdXQudGltZVN0YW1wID0gbm93KCk7XG4gICAgaW5wdXQuZGVsdGFUaW1lID0gaW5wdXQudGltZVN0YW1wIC0gZmlyc3RJbnB1dC50aW1lU3RhbXA7XG5cbiAgICBpbnB1dC5hbmdsZSA9IGdldEFuZ2xlKG9mZnNldENlbnRlciwgY2VudGVyKTtcbiAgICBpbnB1dC5kaXN0YW5jZSA9IGdldERpc3RhbmNlKG9mZnNldENlbnRlciwgY2VudGVyKTtcblxuICAgIGNvbXB1dGVEZWx0YVhZKHNlc3Npb24sIGlucHV0KTtcbiAgICBpbnB1dC5vZmZzZXREaXJlY3Rpb24gPSBnZXREaXJlY3Rpb24oaW5wdXQuZGVsdGFYLCBpbnB1dC5kZWx0YVkpO1xuXG4gICAgdmFyIG92ZXJhbGxWZWxvY2l0eSA9IGdldFZlbG9jaXR5KGlucHV0LmRlbHRhVGltZSwgaW5wdXQuZGVsdGFYLCBpbnB1dC5kZWx0YVkpO1xuICAgIGlucHV0Lm92ZXJhbGxWZWxvY2l0eVggPSBvdmVyYWxsVmVsb2NpdHkueDtcbiAgICBpbnB1dC5vdmVyYWxsVmVsb2NpdHlZID0gb3ZlcmFsbFZlbG9jaXR5Lnk7XG4gICAgaW5wdXQub3ZlcmFsbFZlbG9jaXR5ID0gKGFicyhvdmVyYWxsVmVsb2NpdHkueCkgPiBhYnMob3ZlcmFsbFZlbG9jaXR5LnkpKSA/IG92ZXJhbGxWZWxvY2l0eS54IDogb3ZlcmFsbFZlbG9jaXR5Lnk7XG5cbiAgICBpbnB1dC5zY2FsZSA9IGZpcnN0TXVsdGlwbGUgPyBnZXRTY2FsZShmaXJzdE11bHRpcGxlLnBvaW50ZXJzLCBwb2ludGVycykgOiAxO1xuICAgIGlucHV0LnJvdGF0aW9uID0gZmlyc3RNdWx0aXBsZSA/IGdldFJvdGF0aW9uKGZpcnN0TXVsdGlwbGUucG9pbnRlcnMsIHBvaW50ZXJzKSA6IDA7XG5cbiAgICBpbnB1dC5tYXhQb2ludGVycyA9ICFzZXNzaW9uLnByZXZJbnB1dCA/IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA6ICgoaW5wdXQucG9pbnRlcnMubGVuZ3RoID5cbiAgICAgICAgc2Vzc2lvbi5wcmV2SW5wdXQubWF4UG9pbnRlcnMpID8gaW5wdXQucG9pbnRlcnMubGVuZ3RoIDogc2Vzc2lvbi5wcmV2SW5wdXQubWF4UG9pbnRlcnMpO1xuXG4gICAgY29tcHV0ZUludGVydmFsSW5wdXREYXRhKHNlc3Npb24sIGlucHV0KTtcblxuICAgIC8vIGZpbmQgdGhlIGNvcnJlY3QgdGFyZ2V0XG4gICAgdmFyIHRhcmdldCA9IG1hbmFnZXIuZWxlbWVudDtcbiAgICBpZiAoaGFzUGFyZW50KGlucHV0LnNyY0V2ZW50LnRhcmdldCwgdGFyZ2V0KSkge1xuICAgICAgICB0YXJnZXQgPSBpbnB1dC5zcmNFdmVudC50YXJnZXQ7XG4gICAgfVxuICAgIGlucHV0LnRhcmdldCA9IHRhcmdldDtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZURlbHRhWFkoc2Vzc2lvbiwgaW5wdXQpIHtcbiAgICB2YXIgY2VudGVyID0gaW5wdXQuY2VudGVyO1xuICAgIHZhciBvZmZzZXQgPSBzZXNzaW9uLm9mZnNldERlbHRhIHx8IHt9O1xuICAgIHZhciBwcmV2RGVsdGEgPSBzZXNzaW9uLnByZXZEZWx0YSB8fCB7fTtcbiAgICB2YXIgcHJldklucHV0ID0gc2Vzc2lvbi5wcmV2SW5wdXQgfHwge307XG5cbiAgICBpZiAoaW5wdXQuZXZlbnRUeXBlID09PSBJTlBVVF9TVEFSVCB8fCBwcmV2SW5wdXQuZXZlbnRUeXBlID09PSBJTlBVVF9FTkQpIHtcbiAgICAgICAgcHJldkRlbHRhID0gc2Vzc2lvbi5wcmV2RGVsdGEgPSB7XG4gICAgICAgICAgICB4OiBwcmV2SW5wdXQuZGVsdGFYIHx8IDAsXG4gICAgICAgICAgICB5OiBwcmV2SW5wdXQuZGVsdGFZIHx8IDBcbiAgICAgICAgfTtcblxuICAgICAgICBvZmZzZXQgPSBzZXNzaW9uLm9mZnNldERlbHRhID0ge1xuICAgICAgICAgICAgeDogY2VudGVyLngsXG4gICAgICAgICAgICB5OiBjZW50ZXIueVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGlucHV0LmRlbHRhWCA9IHByZXZEZWx0YS54ICsgKGNlbnRlci54IC0gb2Zmc2V0LngpO1xuICAgIGlucHV0LmRlbHRhWSA9IHByZXZEZWx0YS55ICsgKGNlbnRlci55IC0gb2Zmc2V0LnkpO1xufVxuXG4vKipcbiAqIHZlbG9jaXR5IGlzIGNhbGN1bGF0ZWQgZXZlcnkgeCBtc1xuICogQHBhcmFtIHtPYmplY3R9IHNlc3Npb25cbiAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICovXG5mdW5jdGlvbiBjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEoc2Vzc2lvbiwgaW5wdXQpIHtcbiAgICB2YXIgbGFzdCA9IHNlc3Npb24ubGFzdEludGVydmFsIHx8IGlucHV0LFxuICAgICAgICBkZWx0YVRpbWUgPSBpbnB1dC50aW1lU3RhbXAgLSBsYXN0LnRpbWVTdGFtcCxcbiAgICAgICAgdmVsb2NpdHksIHZlbG9jaXR5WCwgdmVsb2NpdHlZLCBkaXJlY3Rpb247XG5cbiAgICBpZiAoaW5wdXQuZXZlbnRUeXBlICE9IElOUFVUX0NBTkNFTCAmJiAoZGVsdGFUaW1lID4gQ09NUFVURV9JTlRFUlZBTCB8fCBsYXN0LnZlbG9jaXR5ID09PSB1bmRlZmluZWQpKSB7XG4gICAgICAgIHZhciBkZWx0YVggPSBpbnB1dC5kZWx0YVggLSBsYXN0LmRlbHRhWDtcbiAgICAgICAgdmFyIGRlbHRhWSA9IGlucHV0LmRlbHRhWSAtIGxhc3QuZGVsdGFZO1xuXG4gICAgICAgIHZhciB2ID0gZ2V0VmVsb2NpdHkoZGVsdGFUaW1lLCBkZWx0YVgsIGRlbHRhWSk7XG4gICAgICAgIHZlbG9jaXR5WCA9IHYueDtcbiAgICAgICAgdmVsb2NpdHlZID0gdi55O1xuICAgICAgICB2ZWxvY2l0eSA9IChhYnModi54KSA+IGFicyh2LnkpKSA/IHYueCA6IHYueTtcbiAgICAgICAgZGlyZWN0aW9uID0gZ2V0RGlyZWN0aW9uKGRlbHRhWCwgZGVsdGFZKTtcblxuICAgICAgICBzZXNzaW9uLmxhc3RJbnRlcnZhbCA9IGlucHV0O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHVzZSBsYXRlc3QgdmVsb2NpdHkgaW5mbyBpZiBpdCBkb2Vzbid0IG92ZXJ0YWtlIGEgbWluaW11bSBwZXJpb2RcbiAgICAgICAgdmVsb2NpdHkgPSBsYXN0LnZlbG9jaXR5O1xuICAgICAgICB2ZWxvY2l0eVggPSBsYXN0LnZlbG9jaXR5WDtcbiAgICAgICAgdmVsb2NpdHlZID0gbGFzdC52ZWxvY2l0eVk7XG4gICAgICAgIGRpcmVjdGlvbiA9IGxhc3QuZGlyZWN0aW9uO1xuICAgIH1cblxuICAgIGlucHV0LnZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gICAgaW5wdXQudmVsb2NpdHlYID0gdmVsb2NpdHlYO1xuICAgIGlucHV0LnZlbG9jaXR5WSA9IHZlbG9jaXR5WTtcbiAgICBpbnB1dC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG59XG5cbi8qKlxuICogY3JlYXRlIGEgc2ltcGxlIGNsb25lIGZyb20gdGhlIGlucHV0IHVzZWQgZm9yIHN0b3JhZ2Ugb2YgZmlyc3RJbnB1dCBhbmQgZmlyc3RNdWx0aXBsZVxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBjbG9uZWRJbnB1dERhdGFcbiAqL1xuZnVuY3Rpb24gc2ltcGxlQ2xvbmVJbnB1dERhdGEoaW5wdXQpIHtcbiAgICAvLyBtYWtlIGEgc2ltcGxlIGNvcHkgb2YgdGhlIHBvaW50ZXJzIGJlY2F1c2Ugd2Ugd2lsbCBnZXQgYSByZWZlcmVuY2UgaWYgd2UgZG9uJ3RcbiAgICAvLyB3ZSBvbmx5IG5lZWQgY2xpZW50WFkgZm9yIHRoZSBjYWxjdWxhdGlvbnNcbiAgICB2YXIgcG9pbnRlcnMgPSBbXTtcbiAgICB2YXIgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBpbnB1dC5wb2ludGVycy5sZW5ndGgpIHtcbiAgICAgICAgcG9pbnRlcnNbaV0gPSB7XG4gICAgICAgICAgICBjbGllbnRYOiByb3VuZChpbnB1dC5wb2ludGVyc1tpXS5jbGllbnRYKSxcbiAgICAgICAgICAgIGNsaWVudFk6IHJvdW5kKGlucHV0LnBvaW50ZXJzW2ldLmNsaWVudFkpXG4gICAgICAgIH07XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB0aW1lU3RhbXA6IG5vdygpLFxuICAgICAgICBwb2ludGVyczogcG9pbnRlcnMsXG4gICAgICAgIGNlbnRlcjogZ2V0Q2VudGVyKHBvaW50ZXJzKSxcbiAgICAgICAgZGVsdGFYOiBpbnB1dC5kZWx0YVgsXG4gICAgICAgIGRlbHRhWTogaW5wdXQuZGVsdGFZXG4gICAgfTtcbn1cblxuLyoqXG4gKiBnZXQgdGhlIGNlbnRlciBvZiBhbGwgdGhlIHBvaW50ZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBwb2ludGVyc1xuICogQHJldHVybiB7T2JqZWN0fSBjZW50ZXIgY29udGFpbnMgYHhgIGFuZCBgeWAgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBnZXRDZW50ZXIocG9pbnRlcnMpIHtcbiAgICB2YXIgcG9pbnRlcnNMZW5ndGggPSBwb2ludGVycy5sZW5ndGg7XG5cbiAgICAvLyBubyBuZWVkIHRvIGxvb3Agd2hlbiBvbmx5IG9uZSB0b3VjaFxuICAgIGlmIChwb2ludGVyc0xlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeDogcm91bmQocG9pbnRlcnNbMF0uY2xpZW50WCksXG4gICAgICAgICAgICB5OiByb3VuZChwb2ludGVyc1swXS5jbGllbnRZKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciB4ID0gMCwgeSA9IDAsIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgcG9pbnRlcnNMZW5ndGgpIHtcbiAgICAgICAgeCArPSBwb2ludGVyc1tpXS5jbGllbnRYO1xuICAgICAgICB5ICs9IHBvaW50ZXJzW2ldLmNsaWVudFk7XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB4OiByb3VuZCh4IC8gcG9pbnRlcnNMZW5ndGgpLFxuICAgICAgICB5OiByb3VuZCh5IC8gcG9pbnRlcnNMZW5ndGgpXG4gICAgfTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIHZlbG9jaXR5IGJldHdlZW4gdHdvIHBvaW50cy4gdW5pdCBpcyBpbiBweCBwZXIgbXMuXG4gKiBAcGFyYW0ge051bWJlcn0gZGVsdGFUaW1lXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqIEByZXR1cm4ge09iamVjdH0gdmVsb2NpdHkgYHhgIGFuZCBgeWBcbiAqL1xuZnVuY3Rpb24gZ2V0VmVsb2NpdHkoZGVsdGFUaW1lLCB4LCB5KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeCAvIGRlbHRhVGltZSB8fCAwLFxuICAgICAgICB5OiB5IC8gZGVsdGFUaW1lIHx8IDBcbiAgICB9O1xufVxuXG4vKipcbiAqIGdldCB0aGUgZGlyZWN0aW9uIGJldHdlZW4gdHdvIHBvaW50c1xuICogQHBhcmFtIHtOdW1iZXJ9IHhcbiAqIEBwYXJhbSB7TnVtYmVyfSB5XG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGRpcmVjdGlvblxuICovXG5mdW5jdGlvbiBnZXREaXJlY3Rpb24oeCwgeSkge1xuICAgIGlmICh4ID09PSB5KSB7XG4gICAgICAgIHJldHVybiBESVJFQ1RJT05fTk9ORTtcbiAgICB9XG5cbiAgICBpZiAoYWJzKHgpID49IGFicyh5KSkge1xuICAgICAgICByZXR1cm4geCA8IDAgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVDtcbiAgICB9XG4gICAgcmV0dXJuIHkgPCAwID8gRElSRUNUSU9OX1VQIDogRElSRUNUSU9OX0RPV047XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSBhYnNvbHV0ZSBkaXN0YW5jZSBiZXR3ZWVuIHR3byBwb2ludHNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwMSB7eCwgeX1cbiAqIEBwYXJhbSB7T2JqZWN0fSBwMiB7eCwgeX1cbiAqIEBwYXJhbSB7QXJyYXl9IFtwcm9wc10gY29udGFpbmluZyB4IGFuZCB5IGtleXNcbiAqIEByZXR1cm4ge051bWJlcn0gZGlzdGFuY2VcbiAqL1xuZnVuY3Rpb24gZ2V0RGlzdGFuY2UocDEsIHAyLCBwcm9wcykge1xuICAgIGlmICghcHJvcHMpIHtcbiAgICAgICAgcHJvcHMgPSBQUk9QU19YWTtcbiAgICB9XG4gICAgdmFyIHggPSBwMltwcm9wc1swXV0gLSBwMVtwcm9wc1swXV0sXG4gICAgICAgIHkgPSBwMltwcm9wc1sxXV0gLSBwMVtwcm9wc1sxXV07XG5cbiAgICByZXR1cm4gTWF0aC5zcXJ0KCh4ICogeCkgKyAoeSAqIHkpKTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIGFuZ2xlIGJldHdlZW4gdHdvIGNvb3JkaW5hdGVzXG4gKiBAcGFyYW0ge09iamVjdH0gcDFcbiAqIEBwYXJhbSB7T2JqZWN0fSBwMlxuICogQHBhcmFtIHtBcnJheX0gW3Byb3BzXSBjb250YWluaW5nIHggYW5kIHkga2V5c1xuICogQHJldHVybiB7TnVtYmVyfSBhbmdsZVxuICovXG5mdW5jdGlvbiBnZXRBbmdsZShwMSwgcDIsIHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcykge1xuICAgICAgICBwcm9wcyA9IFBST1BTX1hZO1xuICAgIH1cbiAgICB2YXIgeCA9IHAyW3Byb3BzWzBdXSAtIHAxW3Byb3BzWzBdXSxcbiAgICAgICAgeSA9IHAyW3Byb3BzWzFdXSAtIHAxW3Byb3BzWzFdXTtcbiAgICByZXR1cm4gTWF0aC5hdGFuMih5LCB4KSAqIDE4MCAvIE1hdGguUEk7XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSByb3RhdGlvbiBkZWdyZWVzIGJldHdlZW4gdHdvIHBvaW50ZXJzZXRzXG4gKiBAcGFyYW0ge0FycmF5fSBzdGFydCBhcnJheSBvZiBwb2ludGVyc1xuICogQHBhcmFtIHtBcnJheX0gZW5kIGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHJvdGF0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldFJvdGF0aW9uKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZ2V0QW5nbGUoZW5kWzFdLCBlbmRbMF0sIFBST1BTX0NMSUVOVF9YWSkgKyBnZXRBbmdsZShzdGFydFsxXSwgc3RhcnRbMF0sIFBST1BTX0NMSUVOVF9YWSk7XG59XG5cbi8qKlxuICogY2FsY3VsYXRlIHRoZSBzY2FsZSBmYWN0b3IgYmV0d2VlbiB0d28gcG9pbnRlcnNldHNcbiAqIG5vIHNjYWxlIGlzIDEsIGFuZCBnb2VzIGRvd24gdG8gMCB3aGVuIHBpbmNoZWQgdG9nZXRoZXIsIGFuZCBiaWdnZXIgd2hlbiBwaW5jaGVkIG91dFxuICogQHBhcmFtIHtBcnJheX0gc3RhcnQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGVuZCBhcnJheSBvZiBwb2ludGVyc1xuICogQHJldHVybiB7TnVtYmVyfSBzY2FsZVxuICovXG5mdW5jdGlvbiBnZXRTY2FsZShzdGFydCwgZW5kKSB7XG4gICAgcmV0dXJuIGdldERpc3RhbmNlKGVuZFswXSwgZW5kWzFdLCBQUk9QU19DTElFTlRfWFkpIC8gZ2V0RGlzdGFuY2Uoc3RhcnRbMF0sIHN0YXJ0WzFdLCBQUk9QU19DTElFTlRfWFkpO1xufVxuXG52YXIgTU9VU0VfSU5QVVRfTUFQID0ge1xuICAgIG1vdXNlZG93bjogSU5QVVRfU1RBUlQsXG4gICAgbW91c2Vtb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIG1vdXNldXA6IElOUFVUX0VORFxufTtcblxudmFyIE1PVVNFX0VMRU1FTlRfRVZFTlRTID0gJ21vdXNlZG93bic7XG52YXIgTU9VU0VfV0lORE9XX0VWRU5UUyA9ICdtb3VzZW1vdmUgbW91c2V1cCc7XG5cbi8qKlxuICogTW91c2UgZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIE1vdXNlSW5wdXQoKSB7XG4gICAgdGhpcy5ldkVsID0gTU9VU0VfRUxFTUVOVF9FVkVOVFM7XG4gICAgdGhpcy5ldldpbiA9IE1PVVNFX1dJTkRPV19FVkVOVFM7XG5cbiAgICB0aGlzLnByZXNzZWQgPSBmYWxzZTsgLy8gbW91c2Vkb3duIHN0YXRlXG5cbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KE1vdXNlSW5wdXQsIElucHV0LCB7XG4gICAgLyoqXG4gICAgICogaGFuZGxlIG1vdXNlIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldlxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIE1FaGFuZGxlcihldikge1xuICAgICAgICB2YXIgZXZlbnRUeXBlID0gTU9VU0VfSU5QVVRfTUFQW2V2LnR5cGVdO1xuXG4gICAgICAgIC8vIG9uIHN0YXJ0IHdlIHdhbnQgdG8gaGF2ZSB0aGUgbGVmdCBtb3VzZSBidXR0b24gZG93blxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQgJiYgZXYuYnV0dG9uID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX01PVkUgJiYgZXYud2hpY2ggIT09IDEpIHtcbiAgICAgICAgICAgIGV2ZW50VHlwZSA9IElOUFVUX0VORDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1vdXNlIG11c3QgYmUgZG93blxuICAgICAgICBpZiAoIXRoaXMucHJlc3NlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgICAgdGhpcy5wcmVzc2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgZXZlbnRUeXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogW2V2XSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogW2V2XSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX01PVVNFLFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG52YXIgUE9JTlRFUl9JTlBVVF9NQVAgPSB7XG4gICAgcG9pbnRlcmRvd246IElOUFVUX1NUQVJULFxuICAgIHBvaW50ZXJtb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHBvaW50ZXJ1cDogSU5QVVRfRU5ELFxuICAgIHBvaW50ZXJjYW5jZWw6IElOUFVUX0NBTkNFTCxcbiAgICBwb2ludGVyb3V0OiBJTlBVVF9DQU5DRUxcbn07XG5cbi8vIGluIElFMTAgdGhlIHBvaW50ZXIgdHlwZXMgaXMgZGVmaW5lZCBhcyBhbiBlbnVtXG52YXIgSUUxMF9QT0lOVEVSX1RZUEVfRU5VTSA9IHtcbiAgICAyOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgIDM6IElOUFVUX1RZUEVfUEVOLFxuICAgIDQ6IElOUFVUX1RZUEVfTU9VU0UsXG4gICAgNTogSU5QVVRfVFlQRV9LSU5FQ1QgLy8gc2VlIGh0dHBzOi8vdHdpdHRlci5jb20vamFjb2Jyb3NzaS9zdGF0dXMvNDgwNTk2NDM4NDg5ODkwODE2XG59O1xuXG52YXIgUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyA9ICdwb2ludGVyZG93bic7XG52YXIgUE9JTlRFUl9XSU5ET1dfRVZFTlRTID0gJ3BvaW50ZXJtb3ZlIHBvaW50ZXJ1cCBwb2ludGVyY2FuY2VsJztcblxuLy8gSUUxMCBoYXMgcHJlZml4ZWQgc3VwcG9ydCwgYW5kIGNhc2Utc2Vuc2l0aXZlXG5pZiAod2luZG93Lk1TUG9pbnRlckV2ZW50ICYmICF3aW5kb3cuUG9pbnRlckV2ZW50KSB7XG4gICAgUE9JTlRFUl9FTEVNRU5UX0VWRU5UUyA9ICdNU1BvaW50ZXJEb3duJztcbiAgICBQT0lOVEVSX1dJTkRPV19FVkVOVFMgPSAnTVNQb2ludGVyTW92ZSBNU1BvaW50ZXJVcCBNU1BvaW50ZXJDYW5jZWwnO1xufVxuXG4vKipcbiAqIFBvaW50ZXIgZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIFBvaW50ZXJFdmVudElucHV0KCkge1xuICAgIHRoaXMuZXZFbCA9IFBPSU5URVJfRUxFTUVOVF9FVkVOVFM7XG4gICAgdGhpcy5ldldpbiA9IFBPSU5URVJfV0lORE9XX0VWRU5UUztcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnN0b3JlID0gKHRoaXMubWFuYWdlci5zZXNzaW9uLnBvaW50ZXJFdmVudHMgPSBbXSk7XG59XG5cbmluaGVyaXQoUG9pbnRlckV2ZW50SW5wdXQsIElucHV0LCB7XG4gICAgLyoqXG4gICAgICogaGFuZGxlIG1vdXNlIGV2ZW50c1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBldlxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFBFaGFuZGxlcihldikge1xuICAgICAgICB2YXIgc3RvcmUgPSB0aGlzLnN0b3JlO1xuICAgICAgICB2YXIgcmVtb3ZlUG9pbnRlciA9IGZhbHNlO1xuXG4gICAgICAgIHZhciBldmVudFR5cGVOb3JtYWxpemVkID0gZXYudHlwZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoJ21zJywgJycpO1xuICAgICAgICB2YXIgZXZlbnRUeXBlID0gUE9JTlRFUl9JTlBVVF9NQVBbZXZlbnRUeXBlTm9ybWFsaXplZF07XG4gICAgICAgIHZhciBwb2ludGVyVHlwZSA9IElFMTBfUE9JTlRFUl9UWVBFX0VOVU1bZXYucG9pbnRlclR5cGVdIHx8IGV2LnBvaW50ZXJUeXBlO1xuXG4gICAgICAgIHZhciBpc1RvdWNoID0gKHBvaW50ZXJUeXBlID09IElOUFVUX1RZUEVfVE9VQ0gpO1xuXG4gICAgICAgIC8vIGdldCBpbmRleCBvZiB0aGUgZXZlbnQgaW4gdGhlIHN0b3JlXG4gICAgICAgIHZhciBzdG9yZUluZGV4ID0gaW5BcnJheShzdG9yZSwgZXYucG9pbnRlcklkLCAncG9pbnRlcklkJyk7XG5cbiAgICAgICAgLy8gc3RhcnQgYW5kIG1vdXNlIG11c3QgYmUgZG93blxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQgJiYgKGV2LmJ1dHRvbiA9PT0gMCB8fCBpc1RvdWNoKSkge1xuICAgICAgICAgICAgaWYgKHN0b3JlSW5kZXggPCAwKSB7XG4gICAgICAgICAgICAgICAgc3RvcmUucHVzaChldik7XG4gICAgICAgICAgICAgICAgc3RvcmVJbmRleCA9IHN0b3JlLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgICAgIHJlbW92ZVBvaW50ZXIgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaXQgbm90IGZvdW5kLCBzbyB0aGUgcG9pbnRlciBoYXNuJ3QgYmVlbiBkb3duIChzbyBpdCdzIHByb2JhYmx5IGEgaG92ZXIpXG4gICAgICAgIGlmIChzdG9yZUluZGV4IDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdXBkYXRlIHRoZSBldmVudCBpbiB0aGUgc3RvcmVcbiAgICAgICAgc3RvcmVbc3RvcmVJbmRleF0gPSBldjtcblxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgZXZlbnRUeXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogc3RvcmUsXG4gICAgICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IFtldl0sXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogcG9pbnRlclR5cGUsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHJlbW92ZVBvaW50ZXIpIHtcbiAgICAgICAgICAgIC8vIHJlbW92ZSBmcm9tIHRoZSBzdG9yZVxuICAgICAgICAgICAgc3RvcmUuc3BsaWNlKHN0b3JlSW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbnZhciBTSU5HTEVfVE9VQ0hfSU5QVVRfTUFQID0ge1xuICAgIHRvdWNoc3RhcnQ6IElOUFVUX1NUQVJULFxuICAgIHRvdWNobW92ZTogSU5QVVRfTU9WRSxcbiAgICB0b3VjaGVuZDogSU5QVVRfRU5ELFxuICAgIHRvdWNoY2FuY2VsOiBJTlBVVF9DQU5DRUxcbn07XG5cbnZhciBTSU5HTEVfVE9VQ0hfVEFSR0VUX0VWRU5UUyA9ICd0b3VjaHN0YXJ0JztcbnZhciBTSU5HTEVfVE9VQ0hfV0lORE9XX0VWRU5UUyA9ICd0b3VjaHN0YXJ0IHRvdWNobW92ZSB0b3VjaGVuZCB0b3VjaGNhbmNlbCc7XG5cbi8qKlxuICogVG91Y2ggZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIFNpbmdsZVRvdWNoSW5wdXQoKSB7XG4gICAgdGhpcy5ldlRhcmdldCA9IFNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTO1xuICAgIHRoaXMuZXZXaW4gPSBTSU5HTEVfVE9VQ0hfV0lORE9XX0VWRU5UUztcbiAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoU2luZ2xlVG91Y2hJbnB1dCwgSW5wdXQsIHtcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBURWhhbmRsZXIoZXYpIHtcbiAgICAgICAgdmFyIHR5cGUgPSBTSU5HTEVfVE9VQ0hfSU5QVVRfTUFQW2V2LnR5cGVdO1xuXG4gICAgICAgIC8vIHNob3VsZCB3ZSBoYW5kbGUgdGhlIHRvdWNoIGV2ZW50cz9cbiAgICAgICAgaWYgKHR5cGUgPT09IElOUFVUX1NUQVJUKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLnN0YXJ0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0b3VjaGVzID0gbm9ybWFsaXplU2luZ2xlVG91Y2hlcy5jYWxsKHRoaXMsIGV2LCB0eXBlKTtcblxuICAgICAgICAvLyB3aGVuIGRvbmUsIHJlc2V0IHRoZSBzdGFydGVkIHN0YXRlXG4gICAgICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgdG91Y2hlc1swXS5sZW5ndGggLSB0b3VjaGVzWzFdLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5zdGFydGVkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmNhbGxiYWNrKHRoaXMubWFuYWdlciwgdHlwZSwge1xuICAgICAgICAgICAgcG9pbnRlcnM6IHRvdWNoZXNbMF0sXG4gICAgICAgICAgICBjaGFuZ2VkUG9pbnRlcnM6IHRvdWNoZXNbMV0sXG4gICAgICAgICAgICBwb2ludGVyVHlwZTogSU5QVVRfVFlQRV9UT1VDSCxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBAdGhpcyB7VG91Y2hJbnB1dH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBldlxuICogQHBhcmFtIHtOdW1iZXJ9IHR5cGUgZmxhZ1xuICogQHJldHVybnMge3VuZGVmaW5lZHxBcnJheX0gW2FsbCwgY2hhbmdlZF1cbiAqL1xuZnVuY3Rpb24gbm9ybWFsaXplU2luZ2xlVG91Y2hlcyhldiwgdHlwZSkge1xuICAgIHZhciBhbGwgPSB0b0FycmF5KGV2LnRvdWNoZXMpO1xuICAgIHZhciBjaGFuZ2VkID0gdG9BcnJheShldi5jaGFuZ2VkVG91Y2hlcyk7XG5cbiAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgIGFsbCA9IHVuaXF1ZUFycmF5KGFsbC5jb25jYXQoY2hhbmdlZCksICdpZGVudGlmaWVyJywgdHJ1ZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFthbGwsIGNoYW5nZWRdO1xufVxuXG52YXIgVE9VQ0hfSU5QVVRfTUFQID0ge1xuICAgIHRvdWNoc3RhcnQ6IElOUFVUX1NUQVJULFxuICAgIHRvdWNobW92ZTogSU5QVVRfTU9WRSxcbiAgICB0b3VjaGVuZDogSU5QVVRfRU5ELFxuICAgIHRvdWNoY2FuY2VsOiBJTlBVVF9DQU5DRUxcbn07XG5cbnZhciBUT1VDSF9UQVJHRVRfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcblxuLyoqXG4gKiBNdWx0aS11c2VyIHRvdWNoIGV2ZW50cyBpbnB1dFxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBJbnB1dFxuICovXG5mdW5jdGlvbiBUb3VjaElucHV0KCkge1xuICAgIHRoaXMuZXZUYXJnZXQgPSBUT1VDSF9UQVJHRVRfRVZFTlRTO1xuICAgIHRoaXMudGFyZ2V0SWRzID0ge307XG5cbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KFRvdWNoSW5wdXQsIElucHV0LCB7XG4gICAgaGFuZGxlcjogZnVuY3Rpb24gTVRFaGFuZGxlcihldikge1xuICAgICAgICB2YXIgdHlwZSA9IFRPVUNIX0lOUFVUX01BUFtldi50eXBlXTtcbiAgICAgICAgdmFyIHRvdWNoZXMgPSBnZXRUb3VjaGVzLmNhbGwodGhpcywgZXYsIHR5cGUpO1xuICAgICAgICBpZiAoIXRvdWNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCB0eXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogdG91Y2hlc1swXSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogdG91Y2hlc1sxXSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEB0aGlzIHtUb3VjaElucHV0fVxuICogQHBhcmFtIHtPYmplY3R9IGV2XG4gKiBAcGFyYW0ge051bWJlcn0gdHlwZSBmbGFnXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfEFycmF5fSBbYWxsLCBjaGFuZ2VkXVxuICovXG5mdW5jdGlvbiBnZXRUb3VjaGVzKGV2LCB0eXBlKSB7XG4gICAgdmFyIGFsbFRvdWNoZXMgPSB0b0FycmF5KGV2LnRvdWNoZXMpO1xuICAgIHZhciB0YXJnZXRJZHMgPSB0aGlzLnRhcmdldElkcztcblxuICAgIC8vIHdoZW4gdGhlcmUgaXMgb25seSBvbmUgdG91Y2gsIHRoZSBwcm9jZXNzIGNhbiBiZSBzaW1wbGlmaWVkXG4gICAgaWYgKHR5cGUgJiAoSU5QVVRfU1RBUlQgfCBJTlBVVF9NT1ZFKSAmJiBhbGxUb3VjaGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB0YXJnZXRJZHNbYWxsVG91Y2hlc1swXS5pZGVudGlmaWVyXSA9IHRydWU7XG4gICAgICAgIHJldHVybiBbYWxsVG91Y2hlcywgYWxsVG91Y2hlc107XG4gICAgfVxuXG4gICAgdmFyIGksXG4gICAgICAgIHRhcmdldFRvdWNoZXMsXG4gICAgICAgIGNoYW5nZWRUb3VjaGVzID0gdG9BcnJheShldi5jaGFuZ2VkVG91Y2hlcyksXG4gICAgICAgIGNoYW5nZWRUYXJnZXRUb3VjaGVzID0gW10sXG4gICAgICAgIHRhcmdldCA9IHRoaXMudGFyZ2V0O1xuXG4gICAgLy8gZ2V0IHRhcmdldCB0b3VjaGVzIGZyb20gdG91Y2hlc1xuICAgIHRhcmdldFRvdWNoZXMgPSBhbGxUb3VjaGVzLmZpbHRlcihmdW5jdGlvbih0b3VjaCkge1xuICAgICAgICByZXR1cm4gaGFzUGFyZW50KHRvdWNoLnRhcmdldCwgdGFyZ2V0KTtcbiAgICB9KTtcblxuICAgIC8vIGNvbGxlY3QgdG91Y2hlc1xuICAgIGlmICh0eXBlID09PSBJTlBVVF9TVEFSVCkge1xuICAgICAgICBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0YXJnZXRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGFyZ2V0SWRzW3RhcmdldFRvdWNoZXNbaV0uaWRlbnRpZmllcl0gPSB0cnVlO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZmlsdGVyIGNoYW5nZWQgdG91Y2hlcyB0byBvbmx5IGNvbnRhaW4gdG91Y2hlcyB0aGF0IGV4aXN0IGluIHRoZSBjb2xsZWN0ZWQgdGFyZ2V0IGlkc1xuICAgIGkgPSAwO1xuICAgIHdoaWxlIChpIDwgY2hhbmdlZFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICh0YXJnZXRJZHNbY2hhbmdlZFRvdWNoZXNbaV0uaWRlbnRpZmllcl0pIHtcbiAgICAgICAgICAgIGNoYW5nZWRUYXJnZXRUb3VjaGVzLnB1c2goY2hhbmdlZFRvdWNoZXNbaV0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYW51cCByZW1vdmVkIHRvdWNoZXNcbiAgICAgICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICAgICAgZGVsZXRlIHRhcmdldElkc1tjaGFuZ2VkVG91Y2hlc1tpXS5pZGVudGlmaWVyXTtcbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgfVxuXG4gICAgaWYgKCFjaGFuZ2VkVGFyZ2V0VG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiBbXG4gICAgICAgIC8vIG1lcmdlIHRhcmdldFRvdWNoZXMgd2l0aCBjaGFuZ2VkVGFyZ2V0VG91Y2hlcyBzbyBpdCBjb250YWlucyBBTEwgdG91Y2hlcywgaW5jbHVkaW5nICdlbmQnIGFuZCAnY2FuY2VsJ1xuICAgICAgICB1bmlxdWVBcnJheSh0YXJnZXRUb3VjaGVzLmNvbmNhdChjaGFuZ2VkVGFyZ2V0VG91Y2hlcyksICdpZGVudGlmaWVyJywgdHJ1ZSksXG4gICAgICAgIGNoYW5nZWRUYXJnZXRUb3VjaGVzXG4gICAgXTtcbn1cblxuLyoqXG4gKiBDb21iaW5lZCB0b3VjaCBhbmQgbW91c2UgaW5wdXRcbiAqXG4gKiBUb3VjaCBoYXMgYSBoaWdoZXIgcHJpb3JpdHkgdGhlbiBtb3VzZSwgYW5kIHdoaWxlIHRvdWNoaW5nIG5vIG1vdXNlIGV2ZW50cyBhcmUgYWxsb3dlZC5cbiAqIFRoaXMgYmVjYXVzZSB0b3VjaCBkZXZpY2VzIGFsc28gZW1pdCBtb3VzZSBldmVudHMgd2hpbGUgZG9pbmcgYSB0b3VjaC5cbiAqXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cblxudmFyIERFRFVQX1RJTUVPVVQgPSAyNTAwO1xudmFyIERFRFVQX0RJU1RBTkNFID0gMjU7XG5cbmZ1bmN0aW9uIFRvdWNoTW91c2VJbnB1dCgpIHtcbiAgICBJbnB1dC5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdmFyIGhhbmRsZXIgPSBiaW5kRm4odGhpcy5oYW5kbGVyLCB0aGlzKTtcbiAgICB0aGlzLnRvdWNoID0gbmV3IFRvdWNoSW5wdXQodGhpcy5tYW5hZ2VyLCBoYW5kbGVyKTtcbiAgICB0aGlzLm1vdXNlID0gbmV3IE1vdXNlSW5wdXQodGhpcy5tYW5hZ2VyLCBoYW5kbGVyKTtcblxuICAgIHRoaXMucHJpbWFyeVRvdWNoID0gbnVsbDtcbiAgICB0aGlzLmxhc3RUb3VjaGVzID0gW107XG59XG5cbmluaGVyaXQoVG91Y2hNb3VzZUlucHV0LCBJbnB1dCwge1xuICAgIC8qKlxuICAgICAqIGhhbmRsZSBtb3VzZSBhbmQgdG91Y2ggZXZlbnRzXG4gICAgICogQHBhcmFtIHtIYW1tZXJ9IG1hbmFnZXJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gaW5wdXRFdmVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dERhdGFcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBUTUVoYW5kbGVyKG1hbmFnZXIsIGlucHV0RXZlbnQsIGlucHV0RGF0YSkge1xuICAgICAgICB2YXIgaXNUb3VjaCA9IChpbnB1dERhdGEucG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9UT1VDSCksXG4gICAgICAgICAgICBpc01vdXNlID0gKGlucHV0RGF0YS5wb2ludGVyVHlwZSA9PSBJTlBVVF9UWVBFX01PVVNFKTtcblxuICAgICAgICBpZiAoaXNNb3VzZSAmJiBpbnB1dERhdGEuc291cmNlQ2FwYWJpbGl0aWVzICYmIGlucHV0RGF0YS5zb3VyY2VDYXBhYmlsaXRpZXMuZmlyZXNUb3VjaEV2ZW50cykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2hlbiB3ZSdyZSBpbiBhIHRvdWNoIGV2ZW50LCByZWNvcmQgdG91Y2hlcyB0byAgZGUtZHVwZSBzeW50aGV0aWMgbW91c2UgZXZlbnRcbiAgICAgICAgaWYgKGlzVG91Y2gpIHtcbiAgICAgICAgICAgIHJlY29yZFRvdWNoZXMuY2FsbCh0aGlzLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzTW91c2UgJiYgaXNTeW50aGV0aWNFdmVudC5jYWxsKHRoaXMsIGlucHV0RGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sobWFuYWdlciwgaW5wdXRFdmVudCwgaW5wdXREYXRhKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgICB0aGlzLnRvdWNoLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5tb3VzZS5kZXN0cm95KCk7XG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIHJlY29yZFRvdWNoZXMoZXZlbnRUeXBlLCBldmVudERhdGEpIHtcbiAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgdGhpcy5wcmltYXJ5VG91Y2ggPSBldmVudERhdGEuY2hhbmdlZFBvaW50ZXJzWzBdLmlkZW50aWZpZXI7XG4gICAgICAgIHNldExhc3RUb3VjaC5jYWxsKHRoaXMsIGV2ZW50RGF0YSk7XG4gICAgfSBlbHNlIGlmIChldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICBzZXRMYXN0VG91Y2guY2FsbCh0aGlzLCBldmVudERhdGEpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2V0TGFzdFRvdWNoKGV2ZW50RGF0YSkge1xuICAgIHZhciB0b3VjaCA9IGV2ZW50RGF0YS5jaGFuZ2VkUG9pbnRlcnNbMF07XG5cbiAgICBpZiAodG91Y2guaWRlbnRpZmllciA9PT0gdGhpcy5wcmltYXJ5VG91Y2gpIHtcbiAgICAgICAgdmFyIGxhc3RUb3VjaCA9IHt4OiB0b3VjaC5jbGllbnRYLCB5OiB0b3VjaC5jbGllbnRZfTtcbiAgICAgICAgdGhpcy5sYXN0VG91Y2hlcy5wdXNoKGxhc3RUb3VjaCk7XG4gICAgICAgIHZhciBsdHMgPSB0aGlzLmxhc3RUb3VjaGVzO1xuICAgICAgICB2YXIgcmVtb3ZlTGFzdFRvdWNoID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB2YXIgaSA9IGx0cy5pbmRleE9mKGxhc3RUb3VjaCk7XG4gICAgICAgICAgICBpZiAoaSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgbHRzLnNwbGljZShpLCAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgc2V0VGltZW91dChyZW1vdmVMYXN0VG91Y2gsIERFRFVQX1RJTUVPVVQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gaXNTeW50aGV0aWNFdmVudChldmVudERhdGEpIHtcbiAgICB2YXIgeCA9IGV2ZW50RGF0YS5zcmNFdmVudC5jbGllbnRYLCB5ID0gZXZlbnREYXRhLnNyY0V2ZW50LmNsaWVudFk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxhc3RUb3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB0ID0gdGhpcy5sYXN0VG91Y2hlc1tpXTtcbiAgICAgICAgdmFyIGR4ID0gTWF0aC5hYnMoeCAtIHQueCksIGR5ID0gTWF0aC5hYnMoeSAtIHQueSk7XG4gICAgICAgIGlmIChkeCA8PSBERURVUF9ESVNUQU5DRSAmJiBkeSA8PSBERURVUF9ESVNUQU5DRSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG52YXIgUFJFRklYRURfVE9VQ0hfQUNUSU9OID0gcHJlZml4ZWQoVEVTVF9FTEVNRU5ULnN0eWxlLCAndG91Y2hBY3Rpb24nKTtcbnZhciBOQVRJVkVfVE9VQ0hfQUNUSU9OID0gUFJFRklYRURfVE9VQ0hfQUNUSU9OICE9PSB1bmRlZmluZWQ7XG5cbi8vIG1hZ2ljYWwgdG91Y2hBY3Rpb24gdmFsdWVcbnZhciBUT1VDSF9BQ1RJT05fQ09NUFVURSA9ICdjb21wdXRlJztcbnZhciBUT1VDSF9BQ1RJT05fQVVUTyA9ICdhdXRvJztcbnZhciBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OID0gJ21hbmlwdWxhdGlvbic7IC8vIG5vdCBpbXBsZW1lbnRlZFxudmFyIFRPVUNIX0FDVElPTl9OT05FID0gJ25vbmUnO1xudmFyIFRPVUNIX0FDVElPTl9QQU5fWCA9ICdwYW4teCc7XG52YXIgVE9VQ0hfQUNUSU9OX1BBTl9ZID0gJ3Bhbi15JztcbnZhciBUT1VDSF9BQ1RJT05fTUFQID0gZ2V0VG91Y2hBY3Rpb25Qcm9wcygpO1xuXG4vKipcbiAqIFRvdWNoIEFjdGlvblxuICogc2V0cyB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHkgb3IgdXNlcyB0aGUganMgYWx0ZXJuYXRpdmVcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gVG91Y2hBY3Rpb24obWFuYWdlciwgdmFsdWUpIHtcbiAgICB0aGlzLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgIHRoaXMuc2V0KHZhbHVlKTtcbn1cblxuVG91Y2hBY3Rpb24ucHJvdG90eXBlID0ge1xuICAgIC8qKlxuICAgICAqIHNldCB0aGUgdG91Y2hBY3Rpb24gdmFsdWUgb24gdGhlIGVsZW1lbnQgb3IgZW5hYmxlIHRoZSBwb2x5ZmlsbFxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgLy8gZmluZCBvdXQgdGhlIHRvdWNoLWFjdGlvbiBieSB0aGUgZXZlbnQgaGFuZGxlcnNcbiAgICAgICAgaWYgKHZhbHVlID09IFRPVUNIX0FDVElPTl9DT01QVVRFKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuY29tcHV0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKE5BVElWRV9UT1VDSF9BQ1RJT04gJiYgdGhpcy5tYW5hZ2VyLmVsZW1lbnQuc3R5bGUgJiYgVE9VQ0hfQUNUSU9OX01BUFt2YWx1ZV0pIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbGVtZW50LnN0eWxlW1BSRUZJWEVEX1RPVUNIX0FDVElPTl0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFjdGlvbnMgPSB2YWx1ZS50b0xvd2VyQ2FzZSgpLnRyaW0oKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICoganVzdCByZS1zZXQgdGhlIHRvdWNoQWN0aW9uIHZhbHVlXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZXQodGhpcy5tYW5hZ2VyLm9wdGlvbnMudG91Y2hBY3Rpb24pO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjb21wdXRlIHRoZSB2YWx1ZSBmb3IgdGhlIHRvdWNoQWN0aW9uIHByb3BlcnR5IGJhc2VkIG9uIHRoZSByZWNvZ25pemVyJ3Mgc2V0dGluZ3NcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfSB2YWx1ZVxuICAgICAqL1xuICAgIGNvbXB1dGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuICAgICAgICBlYWNoKHRoaXMubWFuYWdlci5yZWNvZ25pemVycywgZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICAgICAgaWYgKGJvb2xPckZuKHJlY29nbml6ZXIub3B0aW9ucy5lbmFibGUsIFtyZWNvZ25pemVyXSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb25zID0gYWN0aW9ucy5jb25jYXQocmVjb2duaXplci5nZXRUb3VjaEFjdGlvbigpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBjbGVhblRvdWNoQWN0aW9ucyhhY3Rpb25zLmpvaW4oJyAnKSk7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHRoaXMgbWV0aG9kIGlzIGNhbGxlZCBvbiBlYWNoIGlucHV0IGN5Y2xlIGFuZCBwcm92aWRlcyB0aGUgcHJldmVudGluZyBvZiB0aGUgYnJvd3NlciBiZWhhdmlvclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIHByZXZlbnREZWZhdWx0czogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHNyY0V2ZW50ID0gaW5wdXQuc3JjRXZlbnQ7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBpbnB1dC5vZmZzZXREaXJlY3Rpb247XG5cbiAgICAgICAgLy8gaWYgdGhlIHRvdWNoIGFjdGlvbiBkaWQgcHJldmVudGVkIG9uY2UgdGhpcyBzZXNzaW9uXG4gICAgICAgIGlmICh0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQpIHtcbiAgICAgICAgICAgIHNyY0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgYWN0aW9ucyA9IHRoaXMuYWN0aW9ucztcbiAgICAgICAgdmFyIGhhc05vbmUgPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fTk9ORSkgJiYgIVRPVUNIX0FDVElPTl9NQVBbVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgICAgICB2YXIgaGFzUGFuWSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWSkgJiYgIVRPVUNIX0FDVElPTl9NQVBbVE9VQ0hfQUNUSU9OX1BBTl9ZXTtcbiAgICAgICAgdmFyIGhhc1BhblggPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1gpICYmICFUT1VDSF9BQ1RJT05fTUFQW1RPVUNIX0FDVElPTl9QQU5fWF07XG5cbiAgICAgICAgaWYgKGhhc05vbmUpIHtcbiAgICAgICAgICAgIC8vZG8gbm90IHByZXZlbnQgZGVmYXVsdHMgaWYgdGhpcyBpcyBhIHRhcCBnZXN0dXJlXG5cbiAgICAgICAgICAgIHZhciBpc1RhcFBvaW50ZXIgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IDE7XG4gICAgICAgICAgICB2YXIgaXNUYXBNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgMjtcbiAgICAgICAgICAgIHZhciBpc1RhcFRvdWNoVGltZSA9IGlucHV0LmRlbHRhVGltZSA8IDI1MDtcblxuICAgICAgICAgICAgaWYgKGlzVGFwUG9pbnRlciAmJiBpc1RhcE1vdmVtZW50ICYmIGlzVGFwVG91Y2hUaW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc1BhblggJiYgaGFzUGFuWSkge1xuICAgICAgICAgICAgLy8gYHBhbi14IHBhbi15YCBtZWFucyBicm93c2VyIGhhbmRsZXMgYWxsIHNjcm9sbGluZy9wYW5uaW5nLCBkbyBub3QgcHJldmVudFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc05vbmUgfHxcbiAgICAgICAgICAgIChoYXNQYW5ZICYmIGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB8fFxuICAgICAgICAgICAgKGhhc1BhblggJiYgZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJldmVudFNyYyhzcmNFdmVudCk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FsbCBwcmV2ZW50RGVmYXVsdCB0byBwcmV2ZW50IHRoZSBicm93c2VyJ3MgZGVmYXVsdCBiZWhhdmlvciAoc2Nyb2xsaW5nIGluIG1vc3QgY2FzZXMpXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHNyY0V2ZW50XG4gICAgICovXG4gICAgcHJldmVudFNyYzogZnVuY3Rpb24oc3JjRXZlbnQpIHtcbiAgICAgICAgdGhpcy5tYW5hZ2VyLnNlc3Npb24ucHJldmVudGVkID0gdHJ1ZTtcbiAgICAgICAgc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG59O1xuXG4vKipcbiAqIHdoZW4gdGhlIHRvdWNoQWN0aW9ucyBhcmUgY29sbGVjdGVkIHRoZXkgYXJlIG5vdCBhIHZhbGlkIHZhbHVlLCBzbyB3ZSBuZWVkIHRvIGNsZWFuIHRoaW5ncyB1cC4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGFjdGlvbnNcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBjbGVhblRvdWNoQWN0aW9ucyhhY3Rpb25zKSB7XG4gICAgLy8gbm9uZVxuICAgIGlmIChpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fTk9ORSkpIHtcbiAgICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9OT05FO1xuICAgIH1cblxuICAgIHZhciBoYXNQYW5YID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9YKTtcbiAgICB2YXIgaGFzUGFuWSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWSk7XG5cbiAgICAvLyBpZiBib3RoIHBhbi14IGFuZCBwYW4teSBhcmUgc2V0IChkaWZmZXJlbnQgcmVjb2duaXplcnNcbiAgICAvLyBmb3IgZGlmZmVyZW50IGRpcmVjdGlvbnMsIGUuZy4gaG9yaXpvbnRhbCBwYW4gYnV0IHZlcnRpY2FsIHN3aXBlPylcbiAgICAvLyB3ZSBuZWVkIG5vbmUgKGFzIG90aGVyd2lzZSB3aXRoIHBhbi14IHBhbi15IGNvbWJpbmVkIG5vbmUgb2YgdGhlc2VcbiAgICAvLyByZWNvZ25pemVycyB3aWxsIHdvcmssIHNpbmNlIHRoZSBicm93c2VyIHdvdWxkIGhhbmRsZSBhbGwgcGFubmluZ1xuICAgIGlmIChoYXNQYW5YICYmIGhhc1BhblkpIHtcbiAgICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9OT05FO1xuICAgIH1cblxuICAgIC8vIHBhbi14IE9SIHBhbi15XG4gICAgaWYgKGhhc1BhblggfHwgaGFzUGFuWSkge1xuICAgICAgICByZXR1cm4gaGFzUGFuWCA/IFRPVUNIX0FDVElPTl9QQU5fWCA6IFRPVUNIX0FDVElPTl9QQU5fWTtcbiAgICB9XG5cbiAgICAvLyBtYW5pcHVsYXRpb25cbiAgICBpZiAoaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTikpIHtcbiAgICAgICAgcmV0dXJuIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT047XG4gICAgfVxuXG4gICAgcmV0dXJuIFRPVUNIX0FDVElPTl9BVVRPO1xufVxuXG5mdW5jdGlvbiBnZXRUb3VjaEFjdGlvblByb3BzKCkge1xuICAgIGlmICghTkFUSVZFX1RPVUNIX0FDVElPTikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciB0b3VjaE1hcCA9IHt9O1xuICAgIHZhciBjc3NTdXBwb3J0cyA9IHdpbmRvdy5DU1MgJiYgd2luZG93LkNTUy5zdXBwb3J0cztcbiAgICBbJ2F1dG8nLCAnbWFuaXB1bGF0aW9uJywgJ3Bhbi15JywgJ3Bhbi14JywgJ3Bhbi14IHBhbi15JywgJ25vbmUnXS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCkge1xuXG4gICAgICAgIC8vIElmIGNzcy5zdXBwb3J0cyBpcyBub3Qgc3VwcG9ydGVkIGJ1dCB0aGVyZSBpcyBuYXRpdmUgdG91Y2gtYWN0aW9uIGFzc3VtZSBpdCBzdXBwb3J0c1xuICAgICAgICAvLyBhbGwgdmFsdWVzLiBUaGlzIGlzIHRoZSBjYXNlIGZvciBJRSAxMCBhbmQgMTEuXG4gICAgICAgIHRvdWNoTWFwW3ZhbF0gPSBjc3NTdXBwb3J0cyA/IHdpbmRvdy5DU1Muc3VwcG9ydHMoJ3RvdWNoLWFjdGlvbicsIHZhbCkgOiB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiB0b3VjaE1hcDtcbn1cblxuLyoqXG4gKiBSZWNvZ25pemVyIGZsb3cgZXhwbGFpbmVkOyAqXG4gKiBBbGwgcmVjb2duaXplcnMgaGF2ZSB0aGUgaW5pdGlhbCBzdGF0ZSBvZiBQT1NTSUJMRSB3aGVuIGEgaW5wdXQgc2Vzc2lvbiBzdGFydHMuXG4gKiBUaGUgZGVmaW5pdGlvbiBvZiBhIGlucHV0IHNlc3Npb24gaXMgZnJvbSB0aGUgZmlyc3QgaW5wdXQgdW50aWwgdGhlIGxhc3QgaW5wdXQsIHdpdGggYWxsIGl0J3MgbW92ZW1lbnQgaW4gaXQuICpcbiAqIEV4YW1wbGUgc2Vzc2lvbiBmb3IgbW91c2UtaW5wdXQ6IG1vdXNlZG93biAtPiBtb3VzZW1vdmUgLT4gbW91c2V1cFxuICpcbiAqIE9uIGVhY2ggcmVjb2duaXppbmcgY3ljbGUgKHNlZSBNYW5hZ2VyLnJlY29nbml6ZSkgdGhlIC5yZWNvZ25pemUoKSBtZXRob2QgaXMgZXhlY3V0ZWRcbiAqIHdoaWNoIGRldGVybWluZXMgd2l0aCBzdGF0ZSBpdCBzaG91bGQgYmUuXG4gKlxuICogSWYgdGhlIHJlY29nbml6ZXIgaGFzIHRoZSBzdGF0ZSBGQUlMRUQsIENBTkNFTExFRCBvciBSRUNPR05JWkVEIChlcXVhbHMgRU5ERUQpLCBpdCBpcyByZXNldCB0b1xuICogUE9TU0lCTEUgdG8gZ2l2ZSBpdCBhbm90aGVyIGNoYW5nZSBvbiB0aGUgbmV4dCBjeWNsZS5cbiAqXG4gKiAgICAgICAgICAgICAgIFBvc3NpYmxlXG4gKiAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgKy0tLS0tKy0tLS0tLS0tLS0tLS0tLStcbiAqICAgICAgICAgICAgfCAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgKy0tLS0tKy0tLS0tKyAgICAgICAgICAgICAgIHxcbiAqICAgICAgfCAgICAgICAgICAgfCAgICAgICAgICAgICAgIHxcbiAqICAgRmFpbGVkICAgICAgQ2FuY2VsbGVkICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICArLS0tLS0tLSstLS0tLS0rXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgUmVjb2duaXplZCAgICAgICBCZWdhblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDaGFuZ2VkXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRW5kZWQvUmVjb2duaXplZFxuICovXG52YXIgU1RBVEVfUE9TU0lCTEUgPSAxO1xudmFyIFNUQVRFX0JFR0FOID0gMjtcbnZhciBTVEFURV9DSEFOR0VEID0gNDtcbnZhciBTVEFURV9FTkRFRCA9IDg7XG52YXIgU1RBVEVfUkVDT0dOSVpFRCA9IFNUQVRFX0VOREVEO1xudmFyIFNUQVRFX0NBTkNFTExFRCA9IDE2O1xudmFyIFNUQVRFX0ZBSUxFRCA9IDMyO1xuXG4vKipcbiAqIFJlY29nbml6ZXJcbiAqIEV2ZXJ5IHJlY29nbml6ZXIgbmVlZHMgdG8gZXh0ZW5kIGZyb20gdGhpcyBjbGFzcy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqL1xuZnVuY3Rpb24gUmVjb2duaXplcihvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gYXNzaWduKHt9LCB0aGlzLmRlZmF1bHRzLCBvcHRpb25zIHx8IHt9KTtcblxuICAgIHRoaXMuaWQgPSB1bmlxdWVJZCgpO1xuXG4gICAgdGhpcy5tYW5hZ2VyID0gbnVsbDtcblxuICAgIC8vIGRlZmF1bHQgaXMgZW5hYmxlIHRydWVcbiAgICB0aGlzLm9wdGlvbnMuZW5hYmxlID0gaWZVbmRlZmluZWQodGhpcy5vcHRpb25zLmVuYWJsZSwgdHJ1ZSk7XG5cbiAgICB0aGlzLnN0YXRlID0gU1RBVEVfUE9TU0lCTEU7XG5cbiAgICB0aGlzLnNpbXVsdGFuZW91cyA9IHt9O1xuICAgIHRoaXMucmVxdWlyZUZhaWwgPSBbXTtcbn1cblxuUmVjb2duaXplci5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7fSxcblxuICAgIC8qKlxuICAgICAqIHNldCBvcHRpb25zXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIHtSZWNvZ25pemVyfVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBhc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICAvLyBhbHNvIHVwZGF0ZSB0aGUgdG91Y2hBY3Rpb24sIGluIGNhc2Ugc29tZXRoaW5nIGNoYW5nZWQgYWJvdXQgdGhlIGRpcmVjdGlvbnMvZW5hYmxlZCBzdGF0ZVxuICAgICAgICB0aGlzLm1hbmFnZXIgJiYgdGhpcy5tYW5hZ2VyLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVjb2duaXplIHNpbXVsdGFuZW91cyB3aXRoIGFuIG90aGVyIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIHJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVjb2duaXplV2l0aCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzaW11bHRhbmVvdXMgPSB0aGlzLnNpbXVsdGFuZW91cztcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICBpZiAoIXNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdKSB7XG4gICAgICAgICAgICBzaW11bHRhbmVvdXNbb3RoZXJSZWNvZ25pemVyLmlkXSA9IG90aGVyUmVjb2duaXplcjtcbiAgICAgICAgICAgIG90aGVyUmVjb2duaXplci5yZWNvZ25pemVXaXRoKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkcm9wIHRoZSBzaW11bHRhbmVvdXMgbGluay4gaXQgZG9lc250IHJlbW92ZSB0aGUgbGluayBvbiB0aGUgb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgZHJvcFJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAnZHJvcFJlY29nbml6ZVdpdGgnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVjb2duaXplciBjYW4gb25seSBydW4gd2hlbiBhbiBvdGhlciBpcyBmYWlsaW5nXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIHJlcXVpcmVGYWlsdXJlOiBmdW5jdGlvbihvdGhlclJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKG90aGVyUmVjb2duaXplciwgJ3JlcXVpcmVGYWlsdXJlJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlcXVpcmVGYWlsID0gdGhpcy5yZXF1aXJlRmFpbDtcbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICBpZiAoaW5BcnJheShyZXF1aXJlRmFpbCwgb3RoZXJSZWNvZ25pemVyKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHJlcXVpcmVGYWlsLnB1c2gob3RoZXJSZWNvZ25pemVyKTtcbiAgICAgICAgICAgIG90aGVyUmVjb2duaXplci5yZXF1aXJlRmFpbHVyZSh0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZHJvcCB0aGUgcmVxdWlyZUZhaWx1cmUgbGluay4gaXQgZG9lcyBub3QgcmVtb3ZlIHRoZSBsaW5rIG9uIHRoZSBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBkcm9wUmVxdWlyZUZhaWx1cmU6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAnZHJvcFJlcXVpcmVGYWlsdXJlJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgb3RoZXJSZWNvZ25pemVyID0gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHRoaXMpO1xuICAgICAgICB2YXIgaW5kZXggPSBpbkFycmF5KHRoaXMucmVxdWlyZUZhaWwsIG90aGVyUmVjb2duaXplcik7XG4gICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLnJlcXVpcmVGYWlsLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGhhcyByZXF1aXJlIGZhaWx1cmVzIGJvb2xlYW5cbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBoYXNSZXF1aXJlRmFpbHVyZXM6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZXF1aXJlRmFpbC5sZW5ndGggPiAwO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBpZiB0aGUgcmVjb2duaXplciBjYW4gcmVjb2duaXplIHNpbXVsdGFuZW91cyB3aXRoIGFuIG90aGVyIHJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgICAqL1xuICAgIGNhblJlY29nbml6ZVdpdGg6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICByZXR1cm4gISF0aGlzLnNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBZb3Ugc2hvdWxkIHVzZSBgdHJ5RW1pdGAgaW5zdGVhZCBvZiBgZW1pdGAgZGlyZWN0bHkgdG8gY2hlY2tcbiAgICAgKiB0aGF0IGFsbCB0aGUgbmVlZGVkIHJlY29nbml6ZXJzIGhhcyBmYWlsZWQgYmVmb3JlIGVtaXR0aW5nLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBpbnB1dFxuICAgICAqL1xuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZTtcblxuICAgICAgICBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgICAgICAgICBzZWxmLm1hbmFnZXIuZW1pdChldmVudCwgaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gJ3BhbnN0YXJ0JyBhbmQgJ3Bhbm1vdmUnXG4gICAgICAgIGlmIChzdGF0ZSA8IFNUQVRFX0VOREVEKSB7XG4gICAgICAgICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCArIHN0YXRlU3RyKHN0YXRlKSk7XG4gICAgICAgIH1cblxuICAgICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCk7IC8vIHNpbXBsZSAnZXZlbnROYW1lJyBldmVudHNcblxuICAgICAgICBpZiAoaW5wdXQuYWRkaXRpb25hbEV2ZW50KSB7IC8vIGFkZGl0aW9uYWwgZXZlbnQocGFubGVmdCwgcGFucmlnaHQsIHBpbmNoaW4sIHBpbmNob3V0Li4uKVxuICAgICAgICAgICAgZW1pdChpbnB1dC5hZGRpdGlvbmFsRXZlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcGFuZW5kIGFuZCBwYW5jYW5jZWxcbiAgICAgICAgaWYgKHN0YXRlID49IFNUQVRFX0VOREVEKSB7XG4gICAgICAgICAgICBlbWl0KHNlbGYub3B0aW9ucy5ldmVudCArIHN0YXRlU3RyKHN0YXRlKSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhhdCBhbGwgdGhlIHJlcXVpcmUgZmFpbHVyZSByZWNvZ25pemVycyBoYXMgZmFpbGVkLFxuICAgICAqIGlmIHRydWUsIGl0IGVtaXRzIGEgZ2VzdHVyZSBldmVudCxcbiAgICAgKiBvdGhlcndpc2UsIHNldHVwIHRoZSBzdGF0ZSB0byBGQUlMRUQuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICovXG4gICAgdHJ5RW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgaWYgKHRoaXMuY2FuRW1pdCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbWl0KGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBpdCdzIGZhaWxpbmcgYW55d2F5XG4gICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9GQUlMRUQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbiB3ZSBlbWl0P1xuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGNhbkVtaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgdGhpcy5yZXF1aXJlRmFpbC5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghKHRoaXMucmVxdWlyZUZhaWxbaV0uc3RhdGUgJiAoU1RBVEVfRkFJTEVEIHwgU1RBVEVfUE9TU0lCTEUpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdXBkYXRlIHRoZSByZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuICAgIHJlY29nbml6ZTogZnVuY3Rpb24oaW5wdXREYXRhKSB7XG4gICAgICAgIC8vIG1ha2UgYSBuZXcgY29weSBvZiB0aGUgaW5wdXREYXRhXG4gICAgICAgIC8vIHNvIHdlIGNhbiBjaGFuZ2UgdGhlIGlucHV0RGF0YSB3aXRob3V0IG1lc3NpbmcgdXAgdGhlIG90aGVyIHJlY29nbml6ZXJzXG4gICAgICAgIHZhciBpbnB1dERhdGFDbG9uZSA9IGFzc2lnbih7fSwgaW5wdXREYXRhKTtcblxuICAgICAgICAvLyBpcyBpcyBlbmFibGVkIGFuZCBhbGxvdyByZWNvZ25pemluZz9cbiAgICAgICAgaWYgKCFib29sT3JGbih0aGlzLm9wdGlvbnMuZW5hYmxlLCBbdGhpcywgaW5wdXREYXRhQ2xvbmVdKSkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlc2V0IHdoZW4gd2UndmUgcmVhY2hlZCB0aGUgZW5kXG4gICAgICAgIGlmICh0aGlzLnN0YXRlICYgKFNUQVRFX1JFQ09HTklaRUQgfCBTVEFURV9DQU5DRUxMRUQgfCBTVEFURV9GQUlMRUQpKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfUE9TU0lCTEU7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5wcm9jZXNzKGlucHV0RGF0YUNsb25lKTtcblxuICAgICAgICAvLyB0aGUgcmVjb2duaXplciBoYXMgcmVjb2duaXplZCBhIGdlc3R1cmVcbiAgICAgICAgLy8gc28gdHJpZ2dlciBhbiBldmVudFxuICAgICAgICBpZiAodGhpcy5zdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQgfCBTVEFURV9FTkRFRCB8IFNUQVRFX0NBTkNFTExFRCkpIHtcbiAgICAgICAgICAgIHRoaXMudHJ5RW1pdChpbnB1dERhdGFDbG9uZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmV0dXJuIHRoZSBzdGF0ZSBvZiB0aGUgcmVjb2duaXplclxuICAgICAqIHRoZSBhY3R1YWwgcmVjb2duaXppbmcgaGFwcGVucyBpbiB0aGlzIG1ldGhvZFxuICAgICAqIEB2aXJ0dWFsXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqIEByZXR1cm5zIHtDb25zdH0gU1RBVEVcbiAgICAgKi9cbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dERhdGEpIHsgfSwgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdGhlIHByZWZlcnJlZCB0b3VjaC1hY3Rpb25cbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEByZXR1cm5zIHtBcnJheX1cbiAgICAgKi9cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7IH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxsZWQgd2hlbiB0aGUgZ2VzdHVyZSBpc24ndCBhbGxvd2VkIHRvIHJlY29nbml6ZVxuICAgICAqIGxpa2Ugd2hlbiBhbm90aGVyIGlzIGJlaW5nIHJlY29nbml6ZWQgb3IgaXQgaXMgZGlzYWJsZWRcbiAgICAgKiBAdmlydHVhbFxuICAgICAqL1xuICAgIHJlc2V0OiBmdW5jdGlvbigpIHsgfVxufTtcblxuLyoqXG4gKiBnZXQgYSB1c2FibGUgc3RyaW5nLCB1c2VkIGFzIGV2ZW50IHBvc3RmaXhcbiAqIEBwYXJhbSB7Q29uc3R9IHN0YXRlXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBzdGF0ZVxuICovXG5mdW5jdGlvbiBzdGF0ZVN0cihzdGF0ZSkge1xuICAgIGlmIChzdGF0ZSAmIFNUQVRFX0NBTkNFTExFRCkge1xuICAgICAgICByZXR1cm4gJ2NhbmNlbCc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0VOREVEKSB7XG4gICAgICAgIHJldHVybiAnZW5kJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfQ0hBTkdFRCkge1xuICAgICAgICByZXR1cm4gJ21vdmUnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9CRUdBTikge1xuICAgICAgICByZXR1cm4gJ3N0YXJ0JztcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIGRpcmVjdGlvbiBjb25zIHRvIHN0cmluZ1xuICogQHBhcmFtIHtDb25zdH0gZGlyZWN0aW9uXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5mdW5jdGlvbiBkaXJlY3Rpb25TdHIoZGlyZWN0aW9uKSB7XG4gICAgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fRE9XTikge1xuICAgICAgICByZXR1cm4gJ2Rvd24nO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9VUCkge1xuICAgICAgICByZXR1cm4gJ3VwJztcbiAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiA9PSBESVJFQ1RJT05fTEVGVCkge1xuICAgICAgICByZXR1cm4gJ2xlZnQnO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9SSUdIVCkge1xuICAgICAgICByZXR1cm4gJ3JpZ2h0JztcbiAgICB9XG4gICAgcmV0dXJuICcnO1xufVxuXG4vKipcbiAqIGdldCBhIHJlY29nbml6ZXIgYnkgbmFtZSBpZiBpdCBpcyBib3VuZCB0byBhIG1hbmFnZXJcbiAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IG90aGVyUmVjb2duaXplclxuICogQHBhcmFtIHtSZWNvZ25pemVyfSByZWNvZ25pemVyXG4gKiBAcmV0dXJucyB7UmVjb2duaXplcn1cbiAqL1xuZnVuY3Rpb24gZ2V0UmVjb2duaXplckJ5TmFtZUlmTWFuYWdlcihvdGhlclJlY29nbml6ZXIsIHJlY29nbml6ZXIpIHtcbiAgICB2YXIgbWFuYWdlciA9IHJlY29nbml6ZXIubWFuYWdlcjtcbiAgICBpZiAobWFuYWdlcikge1xuICAgICAgICByZXR1cm4gbWFuYWdlci5nZXQob3RoZXJSZWNvZ25pemVyKTtcbiAgICB9XG4gICAgcmV0dXJuIG90aGVyUmVjb2duaXplcjtcbn1cblxuLyoqXG4gKiBUaGlzIHJlY29nbml6ZXIgaXMganVzdCB1c2VkIGFzIGEgYmFzZSBmb3IgdGhlIHNpbXBsZSBhdHRyaWJ1dGUgcmVjb2duaXplcnMuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gQXR0clJlY29nbml6ZXIoKSB7XG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufVxuXG5pbmhlcml0KEF0dHJSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBBdHRyUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAgICAgKiBAZGVmYXVsdCAxXG4gICAgICAgICAqL1xuICAgICAgICBwb2ludGVyczogMVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGNoZWNrIGlmIGl0IHRoZSByZWNvZ25pemVyIHJlY2VpdmVzIHZhbGlkIGlucHV0LCBsaWtlIGlucHV0LmRpc3RhbmNlID4gMTAuXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IHJlY29nbml6ZWRcbiAgICAgKi9cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvblBvaW50ZXJzID0gdGhpcy5vcHRpb25zLnBvaW50ZXJzO1xuICAgICAgICByZXR1cm4gb3B0aW9uUG9pbnRlcnMgPT09IDAgfHwgaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25Qb2ludGVycztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogUHJvY2VzcyB0aGUgaW5wdXQgYW5kIHJldHVybiB0aGUgc3RhdGUgZm9yIHRoZSByZWNvZ25pemVyXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICogQHJldHVybnMgeyp9IFN0YXRlXG4gICAgICovXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHN0YXRlID0gdGhpcy5zdGF0ZTtcbiAgICAgICAgdmFyIGV2ZW50VHlwZSA9IGlucHV0LmV2ZW50VHlwZTtcblxuICAgICAgICB2YXIgaXNSZWNvZ25pemVkID0gc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEKTtcbiAgICAgICAgdmFyIGlzVmFsaWQgPSB0aGlzLmF0dHJUZXN0KGlucHV0KTtcblxuICAgICAgICAvLyBvbiBjYW5jZWwgaW5wdXQgYW5kIHdlJ3ZlIHJlY29nbml6ZWQgYmVmb3JlLCByZXR1cm4gU1RBVEVfQ0FOQ0VMTEVEXG4gICAgICAgIGlmIChpc1JlY29nbml6ZWQgJiYgKGV2ZW50VHlwZSAmIElOUFVUX0NBTkNFTCB8fCAhaXNWYWxpZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0NBTkNFTExFRDtcbiAgICAgICAgfSBlbHNlIGlmIChpc1JlY29nbml6ZWQgfHwgaXNWYWxpZCkge1xuICAgICAgICAgICAgaWYgKGV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZSB8IFNUQVRFX0VOREVEO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghKHN0YXRlICYgU1RBVEVfQkVHQU4pKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRFX0JFR0FOO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfQ0hBTkdFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFBhblxuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvd24gYW5kIG1vdmVkIGluIHRoZSBhbGxvd2VkIGRpcmVjdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gUGFuUmVjb2duaXplcigpIHtcbiAgICBBdHRyUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5wWCA9IG51bGw7XG4gICAgdGhpcy5wWSA9IG51bGw7XG59XG5cbmluaGVyaXQoUGFuUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFBhblJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3BhbicsXG4gICAgICAgIHRocmVzaG9sZDogMTAsXG4gICAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgICBkaXJlY3Rpb246IERJUkVDVElPTl9BTExcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSBbXTtcbiAgICAgICAgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgICAgICBhY3Rpb25zLnB1c2goVE9VQ0hfQUNUSU9OX1BBTl9YKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWN0aW9ucztcbiAgICB9LFxuXG4gICAgZGlyZWN0aW9uVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHZhciBoYXNNb3ZlZCA9IHRydWU7XG4gICAgICAgIHZhciBkaXN0YW5jZSA9IGlucHV0LmRpc3RhbmNlO1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gaW5wdXQuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgeCA9IGlucHV0LmRlbHRhWDtcbiAgICAgICAgdmFyIHkgPSBpbnB1dC5kZWx0YVk7XG5cbiAgICAgICAgLy8gbG9jayB0byBheGlzP1xuICAgICAgICBpZiAoIShkaXJlY3Rpb24gJiBvcHRpb25zLmRpcmVjdGlvbikpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICAgICAgZGlyZWN0aW9uID0gKHggPT09IDApID8gRElSRUNUSU9OX05PTkUgOiAoeCA8IDApID8gRElSRUNUSU9OX0xFRlQgOiBESVJFQ1RJT05fUklHSFQ7XG4gICAgICAgICAgICAgICAgaGFzTW92ZWQgPSB4ICE9IHRoaXMucFg7XG4gICAgICAgICAgICAgICAgZGlzdGFuY2UgPSBNYXRoLmFicyhpbnB1dC5kZWx0YVgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAoeSA9PT0gMCkgPyBESVJFQ1RJT05fTk9ORSA6ICh5IDwgMCkgPyBESVJFQ1RJT05fVVAgOiBESVJFQ1RJT05fRE9XTjtcbiAgICAgICAgICAgICAgICBoYXNNb3ZlZCA9IHkgIT0gdGhpcy5wWTtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKGlucHV0LmRlbHRhWSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgICAgICByZXR1cm4gaGFzTW92ZWQgJiYgZGlzdGFuY2UgPiBvcHRpb25zLnRocmVzaG9sZCAmJiBkaXJlY3Rpb24gJiBvcHRpb25zLmRpcmVjdGlvbjtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBBdHRyUmVjb2duaXplci5wcm90b3R5cGUuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgICh0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4gfHwgKCEodGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKSAmJiB0aGlzLmRpcmVjdGlvblRlc3QoaW5wdXQpKSk7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG5cbiAgICAgICAgdGhpcy5wWCA9IGlucHV0LmRlbHRhWDtcbiAgICAgICAgdGhpcy5wWSA9IGlucHV0LmRlbHRhWTtcblxuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uU3RyKGlucHV0LmRpcmVjdGlvbik7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuICAgICAgICAgICAgaW5wdXQuYWRkaXRpb25hbEV2ZW50ID0gdGhpcy5vcHRpb25zLmV2ZW50ICsgZGlyZWN0aW9uO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3N1cGVyLmVtaXQuY2FsbCh0aGlzLCBpbnB1dCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogUGluY2hcbiAqIFJlY29nbml6ZWQgd2hlbiB0d28gb3IgbW9yZSBwb2ludGVycyBhcmUgbW92aW5nIHRvd2FyZCAoem9vbS1pbikgb3IgYXdheSBmcm9tIGVhY2ggb3RoZXIgKHpvb20tb3V0KS5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gUGluY2hSZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoUGluY2hSZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUGluY2hSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdwaW5jaCcsXG4gICAgICAgIHRocmVzaG9sZDogMCxcbiAgICAgICAgcG9pbnRlcnM6IDJcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgKE1hdGguYWJzKGlucHV0LnNjYWxlIC0gMSkgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkIHx8IHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTik7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmIChpbnB1dC5zY2FsZSAhPT0gMSkge1xuICAgICAgICAgICAgdmFyIGluT3V0ID0gaW5wdXQuc2NhbGUgPCAxID8gJ2luJyA6ICdvdXQnO1xuICAgICAgICAgICAgaW5wdXQuYWRkaXRpb25hbEV2ZW50ID0gdGhpcy5vcHRpb25zLmV2ZW50ICsgaW5PdXQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3VwZXIuZW1pdC5jYWxsKHRoaXMsIGlucHV0KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBQcmVzc1xuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvd24gZm9yIHggbXMgd2l0aG91dCBhbnkgbW92ZW1lbnQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gUHJlc3NSZWNvZ25pemVyKCkge1xuICAgIFJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICB0aGlzLl9pbnB1dCA9IG51bGw7XG59XG5cbmluaGVyaXQoUHJlc3NSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQcmVzc1JlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3ByZXNzJyxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIHRpbWU6IDI1MSwgLy8gbWluaW1hbCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIHByZXNzZWRcbiAgICAgICAgdGhyZXNob2xkOiA5IC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fQVVUT107XG4gICAgfSxcblxuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuICAgICAgICB2YXIgdmFsaWRQb2ludGVycyA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gb3B0aW9ucy5wb2ludGVycztcbiAgICAgICAgdmFyIHZhbGlkTW92ZW1lbnQgPSBpbnB1dC5kaXN0YW5jZSA8IG9wdGlvbnMudGhyZXNob2xkO1xuICAgICAgICB2YXIgdmFsaWRUaW1lID0gaW5wdXQuZGVsdGFUaW1lID4gb3B0aW9ucy50aW1lO1xuXG4gICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cbiAgICAgICAgLy8gd2Ugb25seSBhbGxvdyBsaXR0bGUgbW92ZW1lbnRcbiAgICAgICAgLy8gYW5kIHdlJ3ZlIHJlYWNoZWQgYW4gZW5kIGV2ZW50LCBzbyBhIHRhcCBpcyBwb3NzaWJsZVxuICAgICAgICBpZiAoIXZhbGlkTW92ZW1lbnQgfHwgIXZhbGlkUG9pbnRlcnMgfHwgKGlucHV0LmV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmICF2YWxpZFRpbWUpKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgICAgIHRoaXMuX3RpbWVyID0gc2V0VGltZW91dENvbnRleHQoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgdGhpcy50cnlFbWl0KCk7XG4gICAgICAgICAgICB9LCBvcHRpb25zLnRpbWUsIHRoaXMpO1xuICAgICAgICB9IGVsc2UgaWYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkge1xuICAgICAgICAgICAgcmV0dXJuIFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU1RBVEVfUkVDT0dOSVpFRCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlucHV0ICYmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9FTkQpKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQgKyAndXAnLCBpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pbnB1dC50aW1lU3RhbXAgPSBub3coKTtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5faW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogUm90YXRlXG4gKiBSZWNvZ25pemVkIHdoZW4gdHdvIG9yIG1vcmUgcG9pbnRlciBhcmUgbW92aW5nIGluIGEgY2lyY3VsYXIgbW90aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBSb3RhdGVSZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoUm90YXRlUmVjb2duaXplciwgQXR0clJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFJvdGF0ZVJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3JvdGF0ZScsXG4gICAgICAgIHRocmVzaG9sZDogMCxcbiAgICAgICAgcG9pbnRlcnM6IDJcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9OT05FXTtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdXBlci5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgKE1hdGguYWJzKGlucHV0LnJvdGF0aW9uKSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgfHwgdGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBTd2lwZVxuICogUmVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIG1vdmluZyBmYXN0ICh2ZWxvY2l0eSksIHdpdGggZW5vdWdoIGRpc3RhbmNlIGluIHRoZSBhbGxvd2VkIGRpcmVjdGlvbi5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgQXR0clJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gU3dpcGVSZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoU3dpcGVSZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgU3dpcGVSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICdzd2lwZScsXG4gICAgICAgIHRocmVzaG9sZDogMTAsXG4gICAgICAgIHZlbG9jaXR5OiAwLjMsXG4gICAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUwsXG4gICAgICAgIHBvaW50ZXJzOiAxXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFBhblJlY29nbml6ZXIucHJvdG90eXBlLmdldFRvdWNoQWN0aW9uLmNhbGwodGhpcyk7XG4gICAgfSxcblxuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gdGhpcy5vcHRpb25zLmRpcmVjdGlvbjtcbiAgICAgICAgdmFyIHZlbG9jaXR5O1xuXG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiAoRElSRUNUSU9OX0hPUklaT05UQUwgfCBESVJFQ1RJT05fVkVSVElDQUwpKSB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0Lm92ZXJhbGxWZWxvY2l0eTtcbiAgICAgICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fSE9SSVpPTlRBTCkge1xuICAgICAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC5vdmVyYWxsVmVsb2NpdHlYO1xuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9WRVJUSUNBTCkge1xuICAgICAgICAgICAgdmVsb2NpdHkgPSBpbnB1dC5vdmVyYWxsVmVsb2NpdHlZO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICBkaXJlY3Rpb24gJiBpbnB1dC5vZmZzZXREaXJlY3Rpb24gJiZcbiAgICAgICAgICAgIGlucHV0LmRpc3RhbmNlID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCAmJlxuICAgICAgICAgICAgaW5wdXQubWF4UG9pbnRlcnMgPT0gdGhpcy5vcHRpb25zLnBvaW50ZXJzICYmXG4gICAgICAgICAgICBhYnModmVsb2NpdHkpID4gdGhpcy5vcHRpb25zLnZlbG9jaXR5ICYmIGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORDtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGRpcmVjdGlvblN0cihpbnB1dC5vZmZzZXREaXJlY3Rpb24pO1xuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLm1hbmFnZXIuZW1pdCh0aGlzLm9wdGlvbnMuZXZlbnQgKyBkaXJlY3Rpb24sIGlucHV0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgaW5wdXQpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEEgdGFwIGlzIGVjb2duaXplZCB3aGVuIHRoZSBwb2ludGVyIGlzIGRvaW5nIGEgc21hbGwgdGFwL2NsaWNrLiBNdWx0aXBsZSB0YXBzIGFyZSByZWNvZ25pemVkIGlmIHRoZXkgb2NjdXJcbiAqIGJldHdlZW4gdGhlIGdpdmVuIGludGVydmFsIGFuZCBwb3NpdGlvbi4gVGhlIGRlbGF5IG9wdGlvbiBjYW4gYmUgdXNlZCB0byByZWNvZ25pemUgbXVsdGktdGFwcyB3aXRob3V0IGZpcmluZ1xuICogYSBzaW5nbGUgdGFwLlxuICpcbiAqIFRoZSBldmVudERhdGEgZnJvbSB0aGUgZW1pdHRlZCBldmVudCBjb250YWlucyB0aGUgcHJvcGVydHkgYHRhcENvdW50YCwgd2hpY2ggY29udGFpbnMgdGhlIGFtb3VudCBvZlxuICogbXVsdGktdGFwcyBiZWluZyByZWNvZ25pemVkLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFRhcFJlY29nbml6ZXIoKSB7XG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgLy8gcHJldmlvdXMgdGltZSBhbmQgY2VudGVyLFxuICAgIC8vIHVzZWQgZm9yIHRhcCBjb3VudGluZ1xuICAgIHRoaXMucFRpbWUgPSBmYWxzZTtcbiAgICB0aGlzLnBDZW50ZXIgPSBmYWxzZTtcblxuICAgIHRoaXMuX3RpbWVyID0gbnVsbDtcbiAgICB0aGlzLl9pbnB1dCA9IG51bGw7XG4gICAgdGhpcy5jb3VudCA9IDA7XG59XG5cbmluaGVyaXQoVGFwUmVjb2duaXplciwgUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUGluY2hSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgZXZlbnQ6ICd0YXAnLFxuICAgICAgICBwb2ludGVyczogMSxcbiAgICAgICAgdGFwczogMSxcbiAgICAgICAgaW50ZXJ2YWw6IDMwMCwgLy8gbWF4IHRpbWUgYmV0d2VlbiB0aGUgbXVsdGktdGFwIHRhcHNcbiAgICAgICAgdGltZTogMjUwLCAvLyBtYXggdGltZSBvZiB0aGUgcG9pbnRlciB0byBiZSBkb3duIChsaWtlIGZpbmdlciBvbiB0aGUgc2NyZWVuKVxuICAgICAgICB0aHJlc2hvbGQ6IDksIC8vIGEgbWluaW1hbCBtb3ZlbWVudCBpcyBvaywgYnV0IGtlZXAgaXQgbG93XG4gICAgICAgIHBvc1RocmVzaG9sZDogMTAgLy8gYSBtdWx0aS10YXAgY2FuIGJlIGEgYml0IG9mZiB0aGUgaW5pdGlhbCBwb3NpdGlvblxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTl07XG4gICAgfSxcblxuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zO1xuXG4gICAgICAgIHZhciB2YWxpZFBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25zLnBvaW50ZXJzO1xuICAgICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICAgIHZhciB2YWxpZFRvdWNoVGltZSA9IGlucHV0LmRlbHRhVGltZSA8IG9wdGlvbnMudGltZTtcblxuICAgICAgICB0aGlzLnJlc2V0KCk7XG5cbiAgICAgICAgaWYgKChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkgJiYgKHRoaXMuY291bnQgPT09IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mYWlsVGltZW91dCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2Ugb25seSBhbGxvdyBsaXR0bGUgbW92ZW1lbnRcbiAgICAgICAgLy8gYW5kIHdlJ3ZlIHJlYWNoZWQgYW4gZW5kIGV2ZW50LCBzbyBhIHRhcCBpcyBwb3NzaWJsZVxuICAgICAgICBpZiAodmFsaWRNb3ZlbWVudCAmJiB2YWxpZFRvdWNoVGltZSAmJiB2YWxpZFBvaW50ZXJzKSB7XG4gICAgICAgICAgICBpZiAoaW5wdXQuZXZlbnRUeXBlICE9IElOUFVUX0VORCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHZhciB2YWxpZEludGVydmFsID0gdGhpcy5wVGltZSA/IChpbnB1dC50aW1lU3RhbXAgLSB0aGlzLnBUaW1lIDwgb3B0aW9ucy5pbnRlcnZhbCkgOiB0cnVlO1xuICAgICAgICAgICAgdmFyIHZhbGlkTXVsdGlUYXAgPSAhdGhpcy5wQ2VudGVyIHx8IGdldERpc3RhbmNlKHRoaXMucENlbnRlciwgaW5wdXQuY2VudGVyKSA8IG9wdGlvbnMucG9zVGhyZXNob2xkO1xuXG4gICAgICAgICAgICB0aGlzLnBUaW1lID0gaW5wdXQudGltZVN0YW1wO1xuICAgICAgICAgICAgdGhpcy5wQ2VudGVyID0gaW5wdXQuY2VudGVyO1xuXG4gICAgICAgICAgICBpZiAoIXZhbGlkTXVsdGlUYXAgfHwgIXZhbGlkSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb3VudCArPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9pbnB1dCA9IGlucHV0O1xuXG4gICAgICAgICAgICAvLyBpZiB0YXAgY291bnQgbWF0Y2hlcyB3ZSBoYXZlIHJlY29nbml6ZWQgaXQsXG4gICAgICAgICAgICAvLyBlbHNlIGl0IGhhcyBiZWdhbiByZWNvZ25pemluZy4uLlxuICAgICAgICAgICAgdmFyIHRhcENvdW50ID0gdGhpcy5jb3VudCAlIG9wdGlvbnMudGFwcztcbiAgICAgICAgICAgIGlmICh0YXBDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIG5vIGZhaWxpbmcgcmVxdWlyZW1lbnRzLCBpbW1lZGlhdGVseSB0cmlnZ2VyIHRoZSB0YXAgZXZlbnRcbiAgICAgICAgICAgICAgICAvLyBvciB3YWl0IGFzIGxvbmcgYXMgdGhlIG11bHRpdGFwIGludGVydmFsIHRvIHRyaWdnZXJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaGFzUmVxdWlyZUZhaWx1cmVzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9SRUNPR05JWkVEO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50cnlFbWl0KCk7XG4gICAgICAgICAgICAgICAgICAgIH0sIG9wdGlvbnMuaW50ZXJ2YWwsIHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfSxcblxuICAgIGZhaWxUaW1lb3V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9GQUlMRUQ7XG4gICAgICAgIH0sIHRoaXMub3B0aW9ucy5pbnRlcnZhbCwgdGhpcyk7XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfSxcblxuICAgIHJlc2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09IFNUQVRFX1JFQ09HTklaRUQpIHtcbiAgICAgICAgICAgIHRoaXMuX2lucHV0LnRhcENvdW50ID0gdGhpcy5jb3VudDtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCwgdGhpcy5faW5wdXQpO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbi8qKlxuICogU2ltcGxlIHdheSB0byBjcmVhdGUgYSBtYW5hZ2VyIHdpdGggYSBkZWZhdWx0IHNldCBvZiByZWNvZ25pemVycy5cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IGVsZW1lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBIYW1tZXIoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMucmVjb2duaXplcnMgPSBpZlVuZGVmaW5lZChvcHRpb25zLnJlY29nbml6ZXJzLCBIYW1tZXIuZGVmYXVsdHMucHJlc2V0KTtcbiAgICByZXR1cm4gbmV3IE1hbmFnZXIoZWxlbWVudCwgb3B0aW9ucyk7XG59XG5cbi8qKlxuICogQGNvbnN0IHtzdHJpbmd9XG4gKi9cbkhhbW1lci5WRVJTSU9OID0gJzIuMC43JztcblxuLyoqXG4gKiBkZWZhdWx0IHNldHRpbmdzXG4gKiBAbmFtZXNwYWNlXG4gKi9cbkhhbW1lci5kZWZhdWx0cyA9IHtcbiAgICAvKipcbiAgICAgKiBzZXQgaWYgRE9NIGV2ZW50cyBhcmUgYmVpbmcgdHJpZ2dlcmVkLlxuICAgICAqIEJ1dCB0aGlzIGlzIHNsb3dlciBhbmQgdW51c2VkIGJ5IHNpbXBsZSBpbXBsZW1lbnRhdGlvbnMsIHNvIGRpc2FibGVkIGJ5IGRlZmF1bHQuXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgKi9cbiAgICBkb21FdmVudHM6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogVGhlIHZhbHVlIGZvciB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHkvZmFsbGJhY2suXG4gICAgICogV2hlbiBzZXQgdG8gYGNvbXB1dGVgIGl0IHdpbGwgbWFnaWNhbGx5IHNldCB0aGUgY29ycmVjdCB2YWx1ZSBiYXNlZCBvbiB0aGUgYWRkZWQgcmVjb2duaXplcnMuXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAZGVmYXVsdCBjb21wdXRlXG4gICAgICovXG4gICAgdG91Y2hBY3Rpb246IFRPVUNIX0FDVElPTl9DT01QVVRFLFxuXG4gICAgLyoqXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAqL1xuICAgIGVuYWJsZTogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEVYUEVSSU1FTlRBTCBGRUFUVVJFIC0tIGNhbiBiZSByZW1vdmVkL2NoYW5nZWRcbiAgICAgKiBDaGFuZ2UgdGhlIHBhcmVudCBpbnB1dCB0YXJnZXQgZWxlbWVudC5cbiAgICAgKiBJZiBOdWxsLCB0aGVuIGl0IGlzIGJlaW5nIHNldCB0aGUgdG8gbWFpbiBlbGVtZW50LlxuICAgICAqIEB0eXBlIHtOdWxsfEV2ZW50VGFyZ2V0fVxuICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgKi9cbiAgICBpbnB1dFRhcmdldDogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIGZvcmNlIGFuIGlucHV0IGNsYXNzXG4gICAgICogQHR5cGUge051bGx8RnVuY3Rpb259XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGlucHV0Q2xhc3M6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBEZWZhdWx0IHJlY29nbml6ZXIgc2V0dXAgd2hlbiBjYWxsaW5nIGBIYW1tZXIoKWBcbiAgICAgKiBXaGVuIGNyZWF0aW5nIGEgbmV3IE1hbmFnZXIgdGhlc2Ugd2lsbCBiZSBza2lwcGVkLlxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKi9cbiAgICBwcmVzZXQ6IFtcbiAgICAgICAgLy8gUmVjb2duaXplckNsYXNzLCBvcHRpb25zLCBbcmVjb2duaXplV2l0aCwgLi4uXSwgW3JlcXVpcmVGYWlsdXJlLCAuLi5dXG4gICAgICAgIFtSb3RhdGVSZWNvZ25pemVyLCB7ZW5hYmxlOiBmYWxzZX1dLFxuICAgICAgICBbUGluY2hSZWNvZ25pemVyLCB7ZW5hYmxlOiBmYWxzZX0sIFsncm90YXRlJ11dLFxuICAgICAgICBbU3dpcGVSZWNvZ25pemVyLCB7ZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTH1dLFxuICAgICAgICBbUGFuUmVjb2duaXplciwge2RpcmVjdGlvbjogRElSRUNUSU9OX0hPUklaT05UQUx9LCBbJ3N3aXBlJ11dLFxuICAgICAgICBbVGFwUmVjb2duaXplcl0sXG4gICAgICAgIFtUYXBSZWNvZ25pemVyLCB7ZXZlbnQ6ICdkb3VibGV0YXAnLCB0YXBzOiAyfSwgWyd0YXAnXV0sXG4gICAgICAgIFtQcmVzc1JlY29nbml6ZXJdXG4gICAgXSxcblxuICAgIC8qKlxuICAgICAqIFNvbWUgQ1NTIHByb3BlcnRpZXMgY2FuIGJlIHVzZWQgdG8gaW1wcm92ZSB0aGUgd29ya2luZyBvZiBIYW1tZXIuXG4gICAgICogQWRkIHRoZW0gdG8gdGhpcyBtZXRob2QgYW5kIHRoZXkgd2lsbCBiZSBzZXQgd2hlbiBjcmVhdGluZyBhIG5ldyBNYW5hZ2VyLlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKi9cbiAgICBjc3NQcm9wczoge1xuICAgICAgICAvKipcbiAgICAgICAgICogRGlzYWJsZXMgdGV4dCBzZWxlY3Rpb24gdG8gaW1wcm92ZSB0aGUgZHJhZ2dpbmcgZ2VzdHVyZS4gTWFpbmx5IGZvciBkZXNrdG9wIGJyb3dzZXJzLlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHVzZXJTZWxlY3Q6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGlzYWJsZSB0aGUgV2luZG93cyBQaG9uZSBncmlwcGVycyB3aGVuIHByZXNzaW5nIGFuIGVsZW1lbnQuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdG91Y2hTZWxlY3Q6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGlzYWJsZXMgdGhlIGRlZmF1bHQgY2FsbG91dCBzaG93biB3aGVuIHlvdSB0b3VjaCBhbmQgaG9sZCBhIHRvdWNoIHRhcmdldC5cbiAgICAgICAgICogT24gaU9TLCB3aGVuIHlvdSB0b3VjaCBhbmQgaG9sZCBhIHRvdWNoIHRhcmdldCBzdWNoIGFzIGEgbGluaywgU2FmYXJpIGRpc3BsYXlzXG4gICAgICAgICAqIGEgY2FsbG91dCBjb250YWluaW5nIGluZm9ybWF0aW9uIGFib3V0IHRoZSBsaW5rLiBUaGlzIHByb3BlcnR5IGFsbG93cyB5b3UgdG8gZGlzYWJsZSB0aGF0IGNhbGxvdXQuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdG91Y2hDYWxsb3V0OiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB3aGV0aGVyIHpvb21pbmcgaXMgZW5hYmxlZC4gVXNlZCBieSBJRTEwPlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIGNvbnRlbnRab29taW5nOiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNwZWNpZmllcyB0aGF0IGFuIGVudGlyZSBlbGVtZW50IHNob3VsZCBiZSBkcmFnZ2FibGUgaW5zdGVhZCBvZiBpdHMgY29udGVudHMuIE1haW5seSBmb3IgZGVza3RvcCBicm93c2Vycy5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB1c2VyRHJhZzogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBPdmVycmlkZXMgdGhlIGhpZ2hsaWdodCBjb2xvciBzaG93biB3aGVuIHRoZSB1c2VyIHRhcHMgYSBsaW5rIG9yIGEgSmF2YVNjcmlwdFxuICAgICAgICAgKiBjbGlja2FibGUgZWxlbWVudCBpbiBpT1MuIFRoaXMgcHJvcGVydHkgb2JleXMgdGhlIGFscGhhIHZhbHVlLCBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdyZ2JhKDAsMCwwLDApJ1xuICAgICAgICAgKi9cbiAgICAgICAgdGFwSGlnaGxpZ2h0Q29sb3I6ICdyZ2JhKDAsMCwwLDApJ1xuICAgIH1cbn07XG5cbnZhciBTVE9QID0gMTtcbnZhciBGT1JDRURfU1RPUCA9IDI7XG5cbi8qKlxuICogTWFuYWdlclxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIE1hbmFnZXIoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IGFzc2lnbih7fSwgSGFtbWVyLmRlZmF1bHRzLCBvcHRpb25zIHx8IHt9KTtcblxuICAgIHRoaXMub3B0aW9ucy5pbnB1dFRhcmdldCA9IHRoaXMub3B0aW9ucy5pbnB1dFRhcmdldCB8fCBlbGVtZW50O1xuXG4gICAgdGhpcy5oYW5kbGVycyA9IHt9O1xuICAgIHRoaXMuc2Vzc2lvbiA9IHt9O1xuICAgIHRoaXMucmVjb2duaXplcnMgPSBbXTtcbiAgICB0aGlzLm9sZENzc1Byb3BzID0ge307XG5cbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIHRoaXMuaW5wdXQgPSBjcmVhdGVJbnB1dEluc3RhbmNlKHRoaXMpO1xuICAgIHRoaXMudG91Y2hBY3Rpb24gPSBuZXcgVG91Y2hBY3Rpb24odGhpcywgdGhpcy5vcHRpb25zLnRvdWNoQWN0aW9uKTtcblxuICAgIHRvZ2dsZUNzc1Byb3BzKHRoaXMsIHRydWUpO1xuXG4gICAgZWFjaCh0aGlzLm9wdGlvbnMucmVjb2duaXplcnMsIGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgdmFyIHJlY29nbml6ZXIgPSB0aGlzLmFkZChuZXcgKGl0ZW1bMF0pKGl0ZW1bMV0pKTtcbiAgICAgICAgaXRlbVsyXSAmJiByZWNvZ25pemVyLnJlY29nbml6ZVdpdGgoaXRlbVsyXSk7XG4gICAgICAgIGl0ZW1bM10gJiYgcmVjb2duaXplci5yZXF1aXJlRmFpbHVyZShpdGVtWzNdKTtcbiAgICB9LCB0aGlzKTtcbn1cblxuTWFuYWdlci5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogc2V0IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxuICAgICAqL1xuICAgIHNldDogZnVuY3Rpb24ob3B0aW9ucykge1xuICAgICAgICBhc3NpZ24odGhpcy5vcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICAvLyBPcHRpb25zIHRoYXQgbmVlZCBhIGxpdHRsZSBtb3JlIHNldHVwXG4gICAgICAgIGlmIChvcHRpb25zLnRvdWNoQWN0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmlucHV0VGFyZ2V0KSB7XG4gICAgICAgICAgICAvLyBDbGVhbiB1cCBleGlzdGluZyBldmVudCBsaXN0ZW5lcnMgYW5kIHJlaW5pdGlhbGl6ZVxuICAgICAgICAgICAgdGhpcy5pbnB1dC5kZXN0cm95KCk7XG4gICAgICAgICAgICB0aGlzLmlucHV0LnRhcmdldCA9IG9wdGlvbnMuaW5wdXRUYXJnZXQ7XG4gICAgICAgICAgICB0aGlzLmlucHV0LmluaXQoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogc3RvcCByZWNvZ25pemluZyBmb3IgdGhpcyBzZXNzaW9uLlxuICAgICAqIFRoaXMgc2Vzc2lvbiB3aWxsIGJlIGRpc2NhcmRlZCwgd2hlbiBhIG5ldyBbaW5wdXRdc3RhcnQgZXZlbnQgaXMgZmlyZWQuXG4gICAgICogV2hlbiBmb3JjZWQsIHRoZSByZWNvZ25pemVyIGN5Y2xlIGlzIHN0b3BwZWQgaW1tZWRpYXRlbHkuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBbZm9yY2VdXG4gICAgICovXG4gICAgc3RvcDogZnVuY3Rpb24oZm9yY2UpIHtcbiAgICAgICAgdGhpcy5zZXNzaW9uLnN0b3BwZWQgPSBmb3JjZSA/IEZPUkNFRF9TVE9QIDogU1RPUDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcnVuIHRoZSByZWNvZ25pemVycyFcbiAgICAgKiBjYWxsZWQgYnkgdGhlIGlucHV0SGFuZGxlciBmdW5jdGlvbiBvbiBldmVyeSBtb3ZlbWVudCBvZiB0aGUgcG9pbnRlcnMgKHRvdWNoZXMpXG4gICAgICogaXQgd2Fsa3MgdGhyb3VnaCBhbGwgdGhlIHJlY29nbml6ZXJzIGFuZCB0cmllcyB0byBkZXRlY3QgdGhlIGdlc3R1cmUgdGhhdCBpcyBiZWluZyBtYWRlXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuICAgIHJlY29nbml6ZTogZnVuY3Rpb24oaW5wdXREYXRhKSB7XG4gICAgICAgIHZhciBzZXNzaW9uID0gdGhpcy5zZXNzaW9uO1xuICAgICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBydW4gdGhlIHRvdWNoLWFjdGlvbiBwb2x5ZmlsbFxuICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnByZXZlbnREZWZhdWx0cyhpbnB1dERhdGEpO1xuXG4gICAgICAgIHZhciByZWNvZ25pemVyO1xuICAgICAgICB2YXIgcmVjb2duaXplcnMgPSB0aGlzLnJlY29nbml6ZXJzO1xuXG4gICAgICAgIC8vIHRoaXMgaG9sZHMgdGhlIHJlY29nbml6ZXIgdGhhdCBpcyBiZWluZyByZWNvZ25pemVkLlxuICAgICAgICAvLyBzbyB0aGUgcmVjb2duaXplcidzIHN0YXRlIG5lZWRzIHRvIGJlIEJFR0FOLCBDSEFOR0VELCBFTkRFRCBvciBSRUNPR05JWkVEXG4gICAgICAgIC8vIGlmIG5vIHJlY29nbml6ZXIgaXMgZGV0ZWN0aW5nIGEgdGhpbmcsIGl0IGlzIHNldCB0byBgbnVsbGBcbiAgICAgICAgdmFyIGN1clJlY29nbml6ZXIgPSBzZXNzaW9uLmN1clJlY29nbml6ZXI7XG5cbiAgICAgICAgLy8gcmVzZXQgd2hlbiB0aGUgbGFzdCByZWNvZ25pemVyIGlzIHJlY29nbml6ZWRcbiAgICAgICAgLy8gb3Igd2hlbiB3ZSdyZSBpbiBhIG5ldyBzZXNzaW9uXG4gICAgICAgIGlmICghY3VyUmVjb2duaXplciB8fCAoY3VyUmVjb2duaXplciAmJiBjdXJSZWNvZ25pemVyLnN0YXRlICYgU1RBVEVfUkVDT0dOSVpFRCkpIHtcbiAgICAgICAgICAgIGN1clJlY29nbml6ZXIgPSBzZXNzaW9uLmN1clJlY29nbml6ZXIgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHJlY29nbml6ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmVjb2duaXplciA9IHJlY29nbml6ZXJzW2ldO1xuXG4gICAgICAgICAgICAvLyBmaW5kIG91dCBpZiB3ZSBhcmUgYWxsb3dlZCB0cnkgdG8gcmVjb2duaXplIHRoZSBpbnB1dCBmb3IgdGhpcyBvbmUuXG4gICAgICAgICAgICAvLyAxLiAgIGFsbG93IGlmIHRoZSBzZXNzaW9uIGlzIE5PVCBmb3JjZWQgc3RvcHBlZCAoc2VlIHRoZSAuc3RvcCgpIG1ldGhvZClcbiAgICAgICAgICAgIC8vIDIuICAgYWxsb3cgaWYgd2Ugc3RpbGwgaGF2ZW4ndCByZWNvZ25pemVkIGEgZ2VzdHVyZSBpbiB0aGlzIHNlc3Npb24sIG9yIHRoZSB0aGlzIHJlY29nbml6ZXIgaXMgdGhlIG9uZVxuICAgICAgICAgICAgLy8gICAgICB0aGF0IGlzIGJlaW5nIHJlY29nbml6ZWQuXG4gICAgICAgICAgICAvLyAzLiAgIGFsbG93IGlmIHRoZSByZWNvZ25pemVyIGlzIGFsbG93ZWQgdG8gcnVuIHNpbXVsdGFuZW91cyB3aXRoIHRoZSBjdXJyZW50IHJlY29nbml6ZWQgcmVjb2duaXplci5cbiAgICAgICAgICAgIC8vICAgICAgdGhpcyBjYW4gYmUgc2V0dXAgd2l0aCB0aGUgYHJlY29nbml6ZVdpdGgoKWAgbWV0aG9kIG9uIHRoZSByZWNvZ25pemVyLlxuICAgICAgICAgICAgaWYgKHNlc3Npb24uc3RvcHBlZCAhPT0gRk9SQ0VEX1NUT1AgJiYgKCAvLyAxXG4gICAgICAgICAgICAgICAgICAgICFjdXJSZWNvZ25pemVyIHx8IHJlY29nbml6ZXIgPT0gY3VyUmVjb2duaXplciB8fCAvLyAyXG4gICAgICAgICAgICAgICAgICAgIHJlY29nbml6ZXIuY2FuUmVjb2duaXplV2l0aChjdXJSZWNvZ25pemVyKSkpIHsgLy8gM1xuICAgICAgICAgICAgICAgIHJlY29nbml6ZXIucmVjb2duaXplKGlucHV0RGF0YSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlY29nbml6ZXIucmVzZXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaWYgdGhlIHJlY29nbml6ZXIgaGFzIGJlZW4gcmVjb2duaXppbmcgdGhlIGlucHV0IGFzIGEgdmFsaWQgZ2VzdHVyZSwgd2Ugd2FudCB0byBzdG9yZSB0aGlzIG9uZSBhcyB0aGVcbiAgICAgICAgICAgIC8vIGN1cnJlbnQgYWN0aXZlIHJlY29nbml6ZXIuIGJ1dCBvbmx5IGlmIHdlIGRvbid0IGFscmVhZHkgaGF2ZSBhbiBhY3RpdmUgcmVjb2duaXplclxuICAgICAgICAgICAgaWYgKCFjdXJSZWNvZ25pemVyICYmIHJlY29nbml6ZXIuc3RhdGUgJiAoU1RBVEVfQkVHQU4gfCBTVEFURV9DSEFOR0VEIHwgU1RBVEVfRU5ERUQpKSB7XG4gICAgICAgICAgICAgICAgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplciA9IHJlY29nbml6ZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZ2V0IGEgcmVjb2duaXplciBieSBpdHMgZXZlbnQgbmFtZS5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ8U3RyaW5nfSByZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ8TnVsbH1cbiAgICAgKi9cbiAgICBnZXQ6IGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKHJlY29nbml6ZXIgaW5zdGFuY2VvZiBSZWNvZ25pemVyKSB7XG4gICAgICAgICAgICByZXR1cm4gcmVjb2duaXplcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVjb2duaXplcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChyZWNvZ25pemVyc1tpXS5vcHRpb25zLmV2ZW50ID09IHJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb2duaXplcnNbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGFkZCBhIHJlY29nbml6ZXIgdG8gdGhlIG1hbmFnZXJcbiAgICAgKiBleGlzdGluZyByZWNvZ25pemVycyB3aXRoIHRoZSBzYW1lIGV2ZW50IG5hbWUgd2lsbCBiZSByZW1vdmVkXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSByZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ8TWFuYWdlcn1cbiAgICAgKi9cbiAgICBhZGQ6IGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKHJlY29nbml6ZXIsICdhZGQnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZW1vdmUgZXhpc3RpbmdcbiAgICAgICAgdmFyIGV4aXN0aW5nID0gdGhpcy5nZXQocmVjb2duaXplci5vcHRpb25zLmV2ZW50KTtcbiAgICAgICAgaWYgKGV4aXN0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShleGlzdGluZyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLnJlY29nbml6ZXJzLnB1c2gocmVjb2duaXplcik7XG4gICAgICAgIHJlY29nbml6ZXIubWFuYWdlciA9IHRoaXM7XG5cbiAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHJlY29nbml6ZXI7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHJlbW92ZSBhIHJlY29nbml6ZXIgYnkgbmFtZSBvciBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7TWFuYWdlcn1cbiAgICAgKi9cbiAgICByZW1vdmU6IGZ1bmN0aW9uKHJlY29nbml6ZXIpIHtcbiAgICAgICAgaWYgKGludm9rZUFycmF5QXJnKHJlY29nbml6ZXIsICdyZW1vdmUnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICByZWNvZ25pemVyID0gdGhpcy5nZXQocmVjb2duaXplcik7XG5cbiAgICAgICAgLy8gbGV0J3MgbWFrZSBzdXJlIHRoaXMgcmVjb2duaXplciBleGlzdHNcbiAgICAgICAgaWYgKHJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBpbkFycmF5KHJlY29nbml6ZXJzLCByZWNvZ25pemVyKTtcblxuICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgIHJlY29nbml6ZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgICAgICAgICAgdGhpcy50b3VjaEFjdGlvbi51cGRhdGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBiaW5kIGV2ZW50XG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSB0aGlzXG4gICAgICovXG4gICAgb246IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICBlYWNoKHNwbGl0U3RyKGV2ZW50cyksIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBoYW5kbGVyc1tldmVudF0gPSBoYW5kbGVyc1tldmVudF0gfHwgW107XG4gICAgICAgICAgICBoYW5kbGVyc1tldmVudF0ucHVzaChoYW5kbGVyKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1bmJpbmQgZXZlbnQsIGxlYXZlIGVtaXQgYmxhbmsgdG8gcmVtb3ZlIGFsbCBoYW5kbGVyc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudHNcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaGFuZGxlcl1cbiAgICAgKiBAcmV0dXJucyB7RXZlbnRFbWl0dGVyfSB0aGlzXG4gICAgICovXG4gICAgb2ZmOiBmdW5jdGlvbihldmVudHMsIGhhbmRsZXIpIHtcbiAgICAgICAgaWYgKGV2ZW50cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzO1xuICAgICAgICBlYWNoKHNwbGl0U3RyKGV2ZW50cyksIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICBpZiAoIWhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgaGFuZGxlcnNbZXZlbnRdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVyc1tldmVudF0gJiYgaGFuZGxlcnNbZXZlbnRdLnNwbGljZShpbkFycmF5KGhhbmRsZXJzW2V2ZW50XSwgaGFuZGxlciksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGVtaXQgZXZlbnQgdG8gdGhlIGxpc3RlbmVyc1xuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gICAgICovXG4gICAgZW1pdDogZnVuY3Rpb24oZXZlbnQsIGRhdGEpIHtcbiAgICAgICAgLy8gd2UgYWxzbyB3YW50IHRvIHRyaWdnZXIgZG9tIGV2ZW50c1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmRvbUV2ZW50cykge1xuICAgICAgICAgICAgdHJpZ2dlckRvbUV2ZW50KGV2ZW50LCBkYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5vIGhhbmRsZXJzLCBzbyBza2lwIGl0IGFsbFxuICAgICAgICB2YXIgaGFuZGxlcnMgPSB0aGlzLmhhbmRsZXJzW2V2ZW50XSAmJiB0aGlzLmhhbmRsZXJzW2V2ZW50XS5zbGljZSgpO1xuICAgICAgICBpZiAoIWhhbmRsZXJzIHx8ICFoYW5kbGVycy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGEudHlwZSA9IGV2ZW50O1xuICAgICAgICBkYXRhLnByZXZlbnREZWZhdWx0ID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkYXRhLnNyY0V2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IGhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgaGFuZGxlcnNbaV0oZGF0YSk7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZGVzdHJveSB0aGUgbWFuYWdlciBhbmQgdW5iaW5kcyBhbGwgZXZlbnRzXG4gICAgICogaXQgZG9lc24ndCB1bmJpbmQgZG9tIGV2ZW50cywgdGhhdCBpcyB0aGUgdXNlciBvd24gcmVzcG9uc2liaWxpdHlcbiAgICAgKi9cbiAgICBkZXN0cm95OiBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ICYmIHRvZ2dsZUNzc1Byb3BzKHRoaXMsIGZhbHNlKTtcblxuICAgICAgICB0aGlzLmhhbmRsZXJzID0ge307XG4gICAgICAgIHRoaXMuc2Vzc2lvbiA9IHt9O1xuICAgICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gbnVsbDtcbiAgICB9XG59O1xuXG4vKipcbiAqIGFkZC9yZW1vdmUgdGhlIGNzcyBwcm9wZXJ0aWVzIGFzIGRlZmluZWQgaW4gbWFuYWdlci5vcHRpb25zLmNzc1Byb3BzXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gYWRkXG4gKi9cbmZ1bmN0aW9uIHRvZ2dsZUNzc1Byb3BzKG1hbmFnZXIsIGFkZCkge1xuICAgIHZhciBlbGVtZW50ID0gbWFuYWdlci5lbGVtZW50O1xuICAgIGlmICghZWxlbWVudC5zdHlsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBwcm9wO1xuICAgIGVhY2gobWFuYWdlci5vcHRpb25zLmNzc1Byb3BzLCBmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xuICAgICAgICBwcm9wID0gcHJlZml4ZWQoZWxlbWVudC5zdHlsZSwgbmFtZSk7XG4gICAgICAgIGlmIChhZGQpIHtcbiAgICAgICAgICAgIG1hbmFnZXIub2xkQ3NzUHJvcHNbcHJvcF0gPSBlbGVtZW50LnN0eWxlW3Byb3BdO1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IHZhbHVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWxlbWVudC5zdHlsZVtwcm9wXSA9IG1hbmFnZXIub2xkQ3NzUHJvcHNbcHJvcF0gfHwgJyc7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBpZiAoIWFkZCkge1xuICAgICAgICBtYW5hZ2VyLm9sZENzc1Byb3BzID0ge307XG4gICAgfVxufVxuXG4vKipcbiAqIHRyaWdnZXIgZG9tIGV2ZW50XG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhXG4gKi9cbmZ1bmN0aW9uIHRyaWdnZXJEb21FdmVudChldmVudCwgZGF0YSkge1xuICAgIHZhciBnZXN0dXJlRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnRXZlbnQnKTtcbiAgICBnZXN0dXJlRXZlbnQuaW5pdEV2ZW50KGV2ZW50LCB0cnVlLCB0cnVlKTtcbiAgICBnZXN0dXJlRXZlbnQuZ2VzdHVyZSA9IGRhdGE7XG4gICAgZGF0YS50YXJnZXQuZGlzcGF0Y2hFdmVudChnZXN0dXJlRXZlbnQpO1xufVxuXG5hc3NpZ24oSGFtbWVyLCB7XG4gICAgSU5QVVRfU1RBUlQ6IElOUFVUX1NUQVJULFxuICAgIElOUFVUX01PVkU6IElOUFVUX01PVkUsXG4gICAgSU5QVVRfRU5EOiBJTlBVVF9FTkQsXG4gICAgSU5QVVRfQ0FOQ0VMOiBJTlBVVF9DQU5DRUwsXG5cbiAgICBTVEFURV9QT1NTSUJMRTogU1RBVEVfUE9TU0lCTEUsXG4gICAgU1RBVEVfQkVHQU46IFNUQVRFX0JFR0FOLFxuICAgIFNUQVRFX0NIQU5HRUQ6IFNUQVRFX0NIQU5HRUQsXG4gICAgU1RBVEVfRU5ERUQ6IFNUQVRFX0VOREVELFxuICAgIFNUQVRFX1JFQ09HTklaRUQ6IFNUQVRFX1JFQ09HTklaRUQsXG4gICAgU1RBVEVfQ0FOQ0VMTEVEOiBTVEFURV9DQU5DRUxMRUQsXG4gICAgU1RBVEVfRkFJTEVEOiBTVEFURV9GQUlMRUQsXG5cbiAgICBESVJFQ1RJT05fTk9ORTogRElSRUNUSU9OX05PTkUsXG4gICAgRElSRUNUSU9OX0xFRlQ6IERJUkVDVElPTl9MRUZULFxuICAgIERJUkVDVElPTl9SSUdIVDogRElSRUNUSU9OX1JJR0hULFxuICAgIERJUkVDVElPTl9VUDogRElSRUNUSU9OX1VQLFxuICAgIERJUkVDVElPTl9ET1dOOiBESVJFQ1RJT05fRE9XTixcbiAgICBESVJFQ1RJT05fSE9SSVpPTlRBTDogRElSRUNUSU9OX0hPUklaT05UQUwsXG4gICAgRElSRUNUSU9OX1ZFUlRJQ0FMOiBESVJFQ1RJT05fVkVSVElDQUwsXG4gICAgRElSRUNUSU9OX0FMTDogRElSRUNUSU9OX0FMTCxcblxuICAgIE1hbmFnZXI6IE1hbmFnZXIsXG4gICAgSW5wdXQ6IElucHV0LFxuICAgIFRvdWNoQWN0aW9uOiBUb3VjaEFjdGlvbixcblxuICAgIFRvdWNoSW5wdXQ6IFRvdWNoSW5wdXQsXG4gICAgTW91c2VJbnB1dDogTW91c2VJbnB1dCxcbiAgICBQb2ludGVyRXZlbnRJbnB1dDogUG9pbnRlckV2ZW50SW5wdXQsXG4gICAgVG91Y2hNb3VzZUlucHV0OiBUb3VjaE1vdXNlSW5wdXQsXG4gICAgU2luZ2xlVG91Y2hJbnB1dDogU2luZ2xlVG91Y2hJbnB1dCxcblxuICAgIFJlY29nbml6ZXI6IFJlY29nbml6ZXIsXG4gICAgQXR0clJlY29nbml6ZXI6IEF0dHJSZWNvZ25pemVyLFxuICAgIFRhcDogVGFwUmVjb2duaXplcixcbiAgICBQYW46IFBhblJlY29nbml6ZXIsXG4gICAgU3dpcGU6IFN3aXBlUmVjb2duaXplcixcbiAgICBQaW5jaDogUGluY2hSZWNvZ25pemVyLFxuICAgIFJvdGF0ZTogUm90YXRlUmVjb2duaXplcixcbiAgICBQcmVzczogUHJlc3NSZWNvZ25pemVyLFxuXG4gICAgb246IGFkZEV2ZW50TGlzdGVuZXJzLFxuICAgIG9mZjogcmVtb3ZlRXZlbnRMaXN0ZW5lcnMsXG4gICAgZWFjaDogZWFjaCxcbiAgICBtZXJnZTogbWVyZ2UsXG4gICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgYXNzaWduOiBhc3NpZ24sXG4gICAgaW5oZXJpdDogaW5oZXJpdCxcbiAgICBiaW5kRm46IGJpbmRGbixcbiAgICBwcmVmaXhlZDogcHJlZml4ZWRcbn0pO1xuXG4vLyB0aGlzIHByZXZlbnRzIGVycm9ycyB3aGVuIEhhbW1lciBpcyBsb2FkZWQgaW4gdGhlIHByZXNlbmNlIG9mIGFuIEFNRFxuLy8gIHN0eWxlIGxvYWRlciBidXQgYnkgc2NyaXB0IHRhZywgbm90IGJ5IHRoZSBsb2FkZXIuXG52YXIgZnJlZUdsb2JhbCA9ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6ICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcgPyBzZWxmIDoge30pKTsgLy8ganNoaW50IGlnbm9yZTpsaW5lXG5mcmVlR2xvYmFsLkhhbW1lciA9IEhhbW1lcjtcblxuaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIEhhbW1lcjtcbiAgICB9KTtcbn0gZWxzZSBpZiAodHlwZW9mIG1vZHVsZSAhPSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICAgIG1vZHVsZS5leHBvcnRzID0gSGFtbWVyO1xufSBlbHNlIHtcbiAgICB3aW5kb3dbZXhwb3J0TmFtZV0gPSBIYW1tZXI7XG59XG5cbn0pKHdpbmRvdywgZG9jdW1lbnQsICdIYW1tZXInKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHZlbmRvcnMgPSBbJ21zJywgJ21veicsICd3ZWJraXQnLCAnbyddO1xuXG5mb3IodmFyIHggPSAwOyB4IDwgdmVuZG9ycy5sZW5ndGggJiYgIXdpbmRvdy5BdWRpb0NvbnRleHQ7ICsreCkge1xuICB3aW5kb3cuQXVkaW9Db250ZXh0ID0gd2luZG93W3ZlbmRvcnNbeF0rJ0F1ZGlvQ29udGV4dCddO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdpbmRvdy5BdWRpb0NvbnRleHQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHJlbW92ZUV4dGVuc2lvbihwYXRoKXtcbiAgLy8gb25seSBzdHJpcHMgb2ZmIGV4dGVuc2lvbnMgdGhhdCBoYXZlIGxlbmd0aCBvZiA0IG9yIGxlc3NcbiAgLy8gcmVnZXggZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE4MTgzMTAvcmVndWxhci1leHByZXNzaW9uLXRvLXJlbW92ZS1hLWZpbGVzLWV4dGVuc2lvblxuICByZXR1cm4gcGF0aC5yZXBsYWNlKC8oLiopXFwuW14uXXsxLDR9JC8sICcnKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZW1vdmVFeHRlbnNpb247XG4iLCJjb25zdCBhdmVyYWdlUG9pbnRzID0gcmVxdWlyZSgnLi91dGlscy9hdmVyYWdlUG9pbnRzJyk7XG5jb25zdCBkZWdyZWVzVG9SYWRpYW5zID0gcmVxdWlyZSgnLi91dGlscy9kZWdyZWVzVG9SYWRpYW5zJyk7XG5jb25zdCByYWRpYW5zVG9EZWdyZWVzID0gcmVxdWlyZSgnLi91dGlscy9yYWRpYW5zVG9EZWdyZWVzJyk7XG5jb25zdCBwb2ludEluUG9seWdvbiA9IHJlcXVpcmUoJy4vdXRpbHMvcG9pbnRJblBvbHlnb24nKTtcbmNvbnN0IGRpc3RhbmNlID0gcmVxdWlyZSgnLi91dGlscy9kaXN0YW5jZScpO1xuY29uc3QgZGVncmVlc0Zyb21DZW50ZXIgPSByZXF1aXJlKCcuL3V0aWxzL2RlZ3JlZXNGcm9tQ2VudGVyJyk7XG5jb25zdCByYWRpYW5zRnJvbUNlbnRlciA9IHJlcXVpcmUoJy4vdXRpbHMvcmFkaWFuc0Zyb21DZW50ZXInKTtcbmNvbnN0IHNjYWxlUG9pbnRzID0gcmVxdWlyZSgnLi91dGlscy9zY2FsZVBvaW50cycpO1xuY29uc3QgdHJhbnNsYXRlUG9pbnRzID0gcmVxdWlyZSgnLi91dGlscy90cmFuc2xhdGVQb2ludHMnKTtcbmNvbnN0IGluc2lkZUNhbnZhcyA9IHJlcXVpcmUoJy4vdXRpbHMvaW5zaWRlQ2FudmFzJyk7XG5jb25zdCByb3RhdGVEZWdyZWVzQXJvdW5kQ2VudGVyID0gcmVxdWlyZSgnLi91dGlscy9yb3RhdGVEZWdyZWVzQXJvdW5kQ2VudGVyJyk7XG5jb25zdCByb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyID0gcmVxdWlyZSgnLi91dGlscy9yb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyJyk7XG5cblxuLyoqXG4gKiBNYXRoIHV0aWxpdHkgbGlicmFyaWVzXG4gKiBAZXhwb3J0cyB1dGlsc1xuICovXG5jb25zdCB1dGlscyA9IHtcbiAgLyoqXG4gICAqIEdldHMgdGhlIGF2ZXJhZ2UgcG9pbnQgdmFsdWUgaW4gYW4gYXJyYXkgb2YgcG9pbnRzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtBcnJheX0gcG9pbnRzXG4gICAqIEByZXR1cm4ge09iamVjdH0gQW4gb2JqZWN0IHdpdGggeCBhbmQgeSB2YWx1ZXNcbiAgICovXG4gIGF2ZXJhZ2VQb2ludHMsXG5cbiAgLyoqXG4gICAqIENvbnZlcnQgZGVncmVlcyB0byByYWlkYW5zXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVncmVlc1xuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEEgdmFsdWUgaW4gcmFkaWFuc1xuICAgKi9cbiAgZGVncmVlc1RvUmFkaWFucyxcblxuICAvKipcbiAgICogQ29udmVydCByYWRpYW5zIHRvIGRlZ3JlZXNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpYW5zXG4gICAqIEByZXR1cm4ge051bWJlcn0gQSB2YWx1ZSBpbiBkZWdyZWVzXG4gICAqL1xuICByYWRpYW5zVG9EZWdyZWVzLFxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBwb2ludCBpcyBpbiBhIHBvbHlnb25cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEBwYXJhbSB7QXJyYXl9IHBvbHlnb24gQXJyYXkgb2YgcG9pbnRzXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgdGhlIHBvaW50IGlzIGluc2lkZSB0aGUgcG9seWdvblxuICAgKi9cbiAgcG9pbnRJblBvbHlnb24sXG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGRpc3RhbmNlIGJldHdlZW4gMiBwb2ludHNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludDEgT2JqZWN0IHdpdGggYW4geCBhbmQgeSB2YWx1ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnQyIE9iamVjdCB3aXRoIGFuIHggYW5kIHkgdmFsdWVcbiAgICogQHJldHVybiB7TnVtYmVyfSBUaGUgZGlzdGFuY2VcbiAgICovXG4gIGRpc3RhbmNlLFxuXG4gIC8qKlxuICAgKiBEZWdyZWVzIGEgcG9pbnQgaXMgb2Zmc2V0IGZyb20gYSBjZW50ZXIgcG9pbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjZW50ZXIgT2JqZWN0IHdpdGggYW4geCBhbmQgeSB2YWx1ZVxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnQgT2JqZWN0IHdpdGggYW4geCBhbmQgeSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEEgdmFsdWUgaW4gZGVncmVlc1xuICAgKi9cbiAgZGVncmVlc0Zyb21DZW50ZXIsXG5cbiAgLyoqXG4gICAqIFJhZGlhbnMgYSBwb2ludCBpcyBvZmZzZXQgZnJvbSBhIGNlbnRlciBwb2ludFxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGNlbnRlciBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEByZXR1cm4ge051bWJlcn0gQSB2YWx1ZSBpbiByYWRpYW5zXG4gICAqL1xuICByYWRpYW5zRnJvbUNlbnRlcixcblxuICAvKipcbiAgICogU2NhbGUgYSBwb2ludCBvciBhcnJheSBvZiBwb2ludHMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gcG9pbnRzIEEgcG9pbnQgb3IgYXJyYXkgb2YgcG9pbnRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBzY2FsZSBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEByZXR1cm4ge09iamVjdHxBcnJheX0gQSBzY2FsZWQgcG9pbnQgb3IgYXJyYXkgb2YgcG9pbnRzXG4gICAqL1xuICBzY2FsZVBvaW50cyxcblxuICAvKipcbiAgICogVHJhbnNsYXRlIGEgcG9pbnQgb3IgYXJyYXkgb2YgcG9pbnRzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gcG9pbnRzIEEgcG9pbnQgb3IgYXJyYXkgb2YgcG9pbnRzXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvZmZzZXQgT2JqZWN0IHdpdGggYW4geCBhbmQgeSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtPYmplY3R8QXJyYXl9IEEgdHJhbnNsYXRlZCBwb2ludCBvciBhcnJheSBvZiBwb2ludHNcbiAgICovXG4gIHRyYW5zbGF0ZVBvaW50cyxcblxuICAvKipcbiAgICogQ2hlY2sgd2hldGhlciBhIHBvaW50IGlzIGluc2lkZSBhIGNhbnZhc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IEEgcG9pbnQgdG8gdGVzdFxuICAgKiBAcGFyYW0ge09iamVjdH0gY2FudmFzIE9iamVjdCB3aXRoIGhlaWdodCBhbmQgd2lkdGggcHJvcGVydGllc1xuICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIGluc2lkZSBjYW52YXMgZWxzZSBmYWxzZVxuICAgKi9cbiAgaW5zaWRlQ2FudmFzLFxuXG4gIC8qKlxuICAgKiBHZXQgYSBwb2ludCBiYXNlZCBhcm91bmQgdGhlIHJvdGF0aW9uIGluIHJhZGlhbnMgb2Ygb25lIHBvaW50IGFyb3VuZCBhIGNlbnRlclxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGNlbnRlciBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBhbmdsZSBhbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqIEByZXR1cm4ge09iamVjdH0gQSBuZXcgcG9pbnQgdGhhdCBoYXMgYmVlbiByb3RhdGVkXG4gICAqL1xuICByb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyLFxuXG4gIC8qKlxuICAgKiBHZXQgYSBwb2ludCBiYXNlZCBhcm91bmQgdGhlIHJvdGF0aW9uIGluIGRlZ3JlZXMgb2Ygb25lIHBvaW50IGFyb3VuZCBhIGNlbnRlclxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGNlbnRlciBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBhbmdsZSBhbiBhbmdsZSBpbiBkZWdyZWVzXG4gICAqIEByZXR1cm4ge09iamVjdH0gQSBuZXcgcG9pbnQgdGhhdCBoYXMgYmVlbiByb3RhdGVkXG4gICAqL1xuICByb3RhdGVEZWdyZWVzQXJvdW5kQ2VudGVyLFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB1dGlscztcbiIsIlxuZnVuY3Rpb24gYXZlcmFnZVBvaW50cyhwb2ludHMpe1xuICB2YXIgcmV0VmFsID0ge3g6IDAsIHk6IDB9O1xuICBwb2ludHMuZm9yRWFjaChwb2ludHMsIGZ1bmN0aW9uKHBvaW50KXtcbiAgICByZXRWYWwueCs9IHBvaW50Lng7XG4gICAgcmV0VmFsLnkrPSBwb2ludC55O1xuICB9KTtcbiAgcmV0VmFsLnggPSByZXRWYWwueCAvIHBvaW50cy5sZW5ndGg7XG4gIHJldFZhbC55ID0gcmV0VmFsLnkgLyBwb2ludHMubGVuZ3RoO1xuICByZXR1cm4gcmV0VmFsO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGF2ZXJhZ2VQb2ludHM7XG4iLCJjb25zdCByYWRpYW5zVG9EZWdyZWVzID0gcmVxdWlyZSgnLi9yYWRpYW5zVG9EZWdyZWVzJyk7XG5jb25zdCByYWRpYW5zRnJvbUNlbnRlciA9IHJlcXVpcmUoJy4vcmFkaWFuc0Zyb21DZW50ZXInKTtcblxuZnVuY3Rpb24gZGVncmVlc0Zyb21DZW50ZXIoY2VudGVyLCBwdCl7XG4gIHJldHVybiByYWRpYW5zVG9EZWdyZWVzKHJhZGlhbnNGcm9tQ2VudGVyKGNlbnRlciwgcHQpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWdyZWVzRnJvbUNlbnRlcjtcbiIsImNvbnN0IHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIgPSByZXF1aXJlKCcuL3JvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXInKTtcbmNvbnN0IGRlZ3JlZXNUb1JhZGlhbnMgPSByZXF1aXJlKCcuL2RlZ3JlZXNUb1JhZGlhbnMnKTsgXG5cbmZ1bmN0aW9uIHJvdGF0ZURlZ3JlZXNBcm91bmRDZW50ZXIoY2VudGVyLCBwdCwgYW5nbGUpIHtcbiAgcmV0dXJuIHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIoY2VudGVyLCBwdCwgZGVncmVlc1RvUmFkaWFucyhhbmdsZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdGF0ZURlZ3JlZXNBcm91bmRDZW50ZXI7IiwiLyoqXG4gKiBUaGlzIHR5cGUgb2Ygc3ByaXRlIGlzIGJhc2VkIG9mZiBvZiB0aGUgZXhjZWxsZW50IGltYWdlcyBmcm9tIFJlaW5lcidzIHRpbGVzZXRzOiBodHRwOi8vd3d3LnJlaW5lcnN0aWxlc2V0cy5kZS9cbiAqIDxicj5cbiAqIGNyZWF0dXJlcyBoYXZlIHdhbGtpbmcsIGlkbGUsIGFuZCBkeWluZyBhbmltYXRpb25zIGluIDggaXNvbWV0cmljIGRpcmVjdGlvbnNcbiAqIFRoZSBhbmltYXRpb25zIGRpcmVjdGlvbnMgYXJlIGluIEUsTixORSxOVyxTLFNFLFNXLFcgKGFscGhhYmV0aWNhbCkgb3JkZXIgc2ltcGx5IGJlY2F1c2UgdGhhdCdzXG4gKiBob3cgdGhleSB3ZXJlIHN0aXRjaGVkIHRvZ2V0aGVyIHVzaW5nIEltYWdlTWFnaWNrLlxuICpcbiAqIEBuYW1lIENyZWF0dXJlXG4gKiBAY29uc3RydWN0b3IgQ3JlYXR1cmVcbiAqIEBleHRlbmRzIFNwcml0ZVxuICovXG5cbmNvbnN0IFNwcml0ZSA9IHJlcXVpcmUoJy4uL1Nwcml0ZScpO1xuY29uc3QgQW5pbWF0aW9uID0gcmVxdWlyZSgnLi4vQW5pbWF0aW9uJyk7XG5cblxuLyoqXG4qIEEgbWFwIG9mIHN0YXRpYyBjb25zdGFudHMgZm9yIGludGVybmFsIHVzZVxuKiBAdHlwZSB7T2JqZWN0fVxuKiBAbWVtYmVyT2YgQ3JlYXR1cmUjXG4qIEBwcm9wZXJ0eSB7TnVtYmVyfSBFQVNUIGEgZGlyZWN0aW9uIHRoZSBjcmVhdHVyZSBjYW4gZmFjZVxuKiBAcHJvcGVydHkge051bWJlcn0gTk9SVEggYSBkaXJlY3Rpb24gdGhlIGNyZWF0dXJlIGNhbiBmYWNlXG4qIEBwcm9wZXJ0eSB7TnVtYmVyfSBOT1JUSEVBU1QgYSBkaXJlY3Rpb24gdGhlIGNyZWF0dXJlIGNhbiBmYWNlXG4qIEBwcm9wZXJ0eSB7TnVtYmVyfSBOT1JUSFdFU1QgYSBkaXJlY3Rpb24gdGhlIGNyZWF0dXJlIGNhbiBmYWNlXG4qIEBwcm9wZXJ0eSB7TnVtYmVyfSBTT1VUSCBhIGRpcmVjdGlvbiB0aGUgY3JlYXR1cmUgY2FuIGZhY2VcbiogQHByb3BlcnR5IHtOdW1iZXJ9IFNPVVRIRUFTVCBhIGRpcmVjdGlvbiB0aGUgY3JlYXR1cmUgY2FuIGZhY2VcbiogQHByb3BlcnR5IHtOdW1iZXJ9IFNPVVRIV0VTVCBhIGRpcmVjdGlvbiB0aGUgY3JlYXR1cmUgY2FuIGZhY2VcbiogQHByb3BlcnR5IHtOdW1iZXJ9IFdFU1QgYSBkaXJlY3Rpb24gdGhlIGNyZWF0dXJlIGNhbiBmYWNlXG4qIEBwcm9wZXJ0eSB7TnVtYmVyfSBTVEFURV9XQUxLSU5HIGEgc3RhdGUgdGhlIGNyZWF0dXJlIGNhbiBiZSBpblxuKiBAcHJvcGVydHkge051bWJlcn0gU1RBVEVfRFlJTkcgYSBzdGF0ZSB0aGUgY3JlYXR1cmUgY2FuIGJlIGluXG4qIEBwcm9wZXJ0eSB7TnVtYmVyfSBTVEFURV9JRExFIGEgc3RhdGUgdGhlIGNyZWF0dXJlIGNhbiBiZSBpblxuKi9cbmNvbnN0IEVBU1QgPSAwO1xuY29uc3QgTk9SVEggPSAxO1xuY29uc3QgTk9SVEhFQVNUID0gMjtcbmNvbnN0IE5PUlRIV0VTVCA9IDM7XG5jb25zdCBTT1VUSCA9IDQ7XG5jb25zdCBTT1VUSEVBU1QgPSA1O1xuY29uc3QgU09VVEhXRVNUID0gNjtcbmNvbnN0IFdFU1QgPSA3O1xuY29uc3QgU1RBVEVfV0FMS0lORyA9IDA7XG5jb25zdCBTVEFURV9EWUlORyA9IDE7XG5jb25zdCBTVEFURV9JRExFID0gMjtcblxuXG5jbGFzcyBDcmVhdHVyZSBleHRlbmRzIFNwcml0ZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBjcmVhdHVyZS4gV2lsbCBiZSBhIHZhbHVlIGZyb20gdGhlIHN0YXRpYyBjb25zdGFudHMuXG4gICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICogQG1lbWJlck9mIENyZWF0dXJlI1xuICAgICogQGRlZmF1bHRcbiAgICAqL1xuICAgIHRoaXMuc3RhdGUgPSBTVEFURV9JRExFO1xuXG4gICAgLyoqXG4gICAgKiBBbiBhcnJheSBvZiBBbmltYXRpb24gb2JqZWN0cyAob25lIGZvciBlYWNoIGRpcmVjdGlvbikgdG8gZGlzcGxheSB0aGUgY3JlYXR1cmUgaW4gYSB3YWxraW5nIHN0YXRlXG4gICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgKiBAbWVtYmVyT2YgQ3JlYXR1cmUjXG4gICAgKiBAZGVmYXVsdFxuICAgICovXG4gICAgdGhpcy53YWxraW5nQW5pbXMgPSBbXTtcblxuICAgIC8qKlxuICAgICogQW4gYXJyYXkgb2YgQW5pbWF0aW9uIG9iamVjdHMgKG9uZSBmb3IgZWFjaCBkaXJlY3Rpb24pIHRvIGRpc3BsYXkgdGhlIGNyZWF0dXJlIGluIGEgZHlpbmcgc3RhdGVcbiAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAqIEBtZW1iZXJPZiBDcmVhdHVyZSNcbiAgICAqIEBkZWZhdWx0XG4gICAgKi9cbiAgICB0aGlzLmR5aW5nQW5pbXMgPSBbXTtcblxuICAgIC8qKlxuICAgICogQW4gYXJyYXkgb2YgQW5pbWF0aW9uIG9iamVjdHMgKG9uZSBmb3IgZWFjaCBkaXJlY3Rpb24pIHRvIGRpc3BsYXkgdGhlIGNyZWF0dXJlIGluIGFuIGlkbGUgc3RhdGVcbiAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAqIEBtZW1iZXJPZiBDcmVhdHVyZSNcbiAgICAqIEBkZWZhdWx0XG4gICAgKi9cbiAgICB0aGlzLmlkbGVBbmltcyA9IFtdO1xuXG4gICAgLyoqXG4gICAgKiBUaGUgY3VycmVudCBkaXJlY3Rpb24gdGhhdCB0aGUgY3JlYXR1cmUgaXMgcG9pbnRlZC4gV2lsbCBiZSBhIHZhbHVlIGZyb20gdGhlIHN0YXRpYyBjb25zdGFuc3RzLlxuICAgICogQHR5cGUge051bWJlcn1cbiAgICAqIEBtZW1iZXJPZiBDcmVhdHVyZSNcbiAgICAqIEBkZWZhdWx0XG4gICAgKi9cbiAgICB0aGlzLmRpcmVjdGlvbiA9IEVBU1Q7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhpcyBjcmVhdHVyZSdzIGN1cnJlbnQgZGlyZWN0aW9uIChmcmFtZSksIGFuZCBjaGFuZ2VzIHdoaWNoIGFuaW1hdGlvbiBpdCBzaG91bGQgYmUgdXNpbmcgaWYgbmVjY2VzYXJ5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIENyZWF0dXJlI1xuICAgKiBAcGFyYW0ge051bWJlcn0gZWxhcHNlZFRpbWUgRWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgKi9cbiAgdXBkYXRlRGlyZWN0aW9uKGVsYXBzZWRUaW1lKXtcbiAgICB0aGlzLnggKz0gdGhpcy5keCAqIGVsYXBzZWRUaW1lO1xuICAgIHRoaXMueSArPSB0aGlzLmR5ICogZWxhcHNlZFRpbWU7XG5cbiAgICBpZih0aGlzLnN0YXRlICE9PSB0aGlzLnN0YXRpY3MuU1RBVEVfRFlJTkcpe1xuICAgICAgaWYodGhpcy5keCA+IDAgJiYgdGhpcy5keSA9PT0gMCl7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5zdGF0aWNzLkVBU1Q7XG4gICAgICB9IGVsc2UgaWYodGhpcy5keCA9PT0gMCAmJiB0aGlzLmR5IDwgMCl7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5zdGF0aWNzLk5PUlRIO1xuICAgICAgfSBlbHNlIGlmKHRoaXMuZHggPiAwICYmIHRoaXMuZHkgPCAwKXtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0aGlzLnN0YXRpY3MuTk9SVEhFQVNUO1xuICAgICAgfSBlbHNlIGlmKHRoaXMuZHggPCAwICYmIHRoaXMuZHkgPCAwKXtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0aGlzLnN0YXRpY3MuTk9SVEhXRVNUO1xuICAgICAgfSBlbHNlIGlmKHRoaXMuZHggPT09IDAgJiYgdGhpcy5keSA+IDApe1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuc3RhdGljcy5TT1VUSDtcbiAgICAgIH0gZWxzZSBpZih0aGlzLmR4ID4gMCAmJiB0aGlzLmR5ID4gMCl7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5zdGF0aWNzLlNPVVRIRUFTVDtcbiAgICAgIH0gZWxzZSBpZih0aGlzLmR4IDwgMCAmJiB0aGlzLmR5ID4gMCl7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5zdGF0aWNzLlNPVVRIV0VTVDtcbiAgICAgIH0gZWxzZSBpZih0aGlzLmR4IDwgMCAmJiB0aGlzLmR5ID09PSAwKXtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0aGlzLnN0YXRpY3MuV0VTVDtcbiAgICAgIH1cblxuICAgICAgaWYodGhpcy5keCA9PT0gMCAmJiB0aGlzLmR5ID09PSAwKXtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuc3RhdGljcy5TVEFURV9JRExFO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHRoaXMuc3RhdGljcy5TVEFURV9XQUxLSU5HO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGVzIHRoaXMgY3JlYXR1cmUncyBjdXJyZW50IGFuaW1hdGlvbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBDcmVhdHVyZSNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGVsYXBzZWRUaW1lIEVsYXBzZWQgdGltZSBpbiBtaWxsaXNlY29uZHNcbiAgICovXG4gIHVwZGF0ZUFuaW1hdGlvbnMoZWxhcHNlZFRpbWUpe1xuICAgIGlmKHRoaXMuc3RhdGUgPT09IHRoaXMuc3RhdGljcy5TVEFURV9XQUxLSU5HKXtcbiAgICAgIHRoaXMuYW5pbSA9IHRoaXMud2Fsa2luZ0FuaW1zW3RoaXMuZGlyZWN0aW9uXTtcbiAgICB9IGVsc2UgaWYodGhpcy5zdGF0ZSA9PT0gdGhpcy5zdGF0aWNzLlNUQVRFX0RZSU5HKXtcbiAgICAgIHRoaXMuYW5pbSA9IHRoaXMuZHlpbmdBbmltc1t0aGlzLmRpcmVjdGlvbl07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuYW5pbSA9IHRoaXMuaWRsZUFuaW1zW3RoaXMuZGlyZWN0aW9uXTtcbiAgICB9XG4gICAgdGhpcy5hbmltLnVwZGF0ZShlbGFwc2VkVGltZSk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBjcmVhdGUgYW5pbWF0aW9ucyBmcm9tIGEgc2hlZXQgb2YgdGlsZXNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBDcmVhdHVyZSNcbiAgICogQHBhcmFtICB7TnVtYmVyfSBmcmFtZUNvdW50IE51bWJlciBvZiBmcmFtZXMgaW4gdGhlIGFuaW1hdGlvblxuICAgKiBAcGFyYW0gIHtOdW1iZXJ8QXJyYXl9IGZyYW1lVGltZXMgVmFsdWUgb3IgYXJyYXkgb2YgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gYW1vdW50IG9mIHRpbWUgcGVyIGZyYW1lXG4gICAqIEBwYXJhbSAge0ltYWdlfSBpbWcgSW1hZ2Ugc2hlZXQgdG8gY3JlYXRlIGFuaW1hdGlvbiBmcm9tXG4gICAqIEBwYXJhbSAge051bWJlcn0gdyBXaWR0aCBvZiBlYWNoIHRpbGUgaW4gcGl4ZWxzXG4gICAqIEBwYXJhbSAge051bWJlcn0gaCBIZWlnaHQgb2YgZWFjaCB0aWxlIGluIHBpeGVsc1xuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHlTbG90IFNsb3Qgb24gWSBheGlzIHRvIHN0YXJ0IGNyZWF0aW5nIHRpbGVzXG4gICAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBBbmltYXRpb25zIGdlbmVyYXRlZCB1c2luZyBwYXJhbWV0ZXJzXG4gICAqL1xuICBjcmVhdGVBbmltYXRpb25zKGZyYW1lQ291bnQsIGZyYW1lVGltZXMsIGltZywgaCwgdywgeVNsb3Qpe1xuICAgIHZhciBhbmltcyA9IFtdO1xuICAgIHZhciBpc0ZUQXJyYXkgPSBBcnJheS5pc0FycmF5KGZyYW1lVGltZXMpO1xuICAgIHZhciBjdXJyZW50RnJhbWVUaW1lID0gMTtcbiAgICBpZigheVNsb3Qpe1xuICAgICAgeVNsb3QgPSAwO1xuICAgIH1cbiAgICBmb3IodmFyIGkgPSAwOyBpIDwgODsgaSsrKXtcbiAgICAgIGFuaW1zW2ldID0gbmV3IEFuaW1hdGlvbih7XG4gICAgICAgIGhlaWdodDogaCxcbiAgICAgICAgd2lkdGg6IHcsXG4gICAgICAgIGltYWdlOiBpbWdcbiAgICAgIH0pO1xuICAgICAgZm9yKHZhciBqID0gMDsgaiA8IGZyYW1lQ291bnQ7IGorKyl7XG4gICAgICAgIGlmKGlzRlRBcnJheSl7XG4gICAgICAgICAgY3VycmVudEZyYW1lVGltZSA9IGZyYW1lVGltZXNbal07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudEZyYW1lVGltZSA9IGZyYW1lVGltZXM7XG4gICAgICAgIH1cbiAgICAgICAgYW5pbXNbaV0uYWRkRnJhbWUoY3VycmVudEZyYW1lVGltZSwgaiArIGZyYW1lQ291bnQgKiBpLCB5U2xvdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhbmltcztcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENyZWF0dXJlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBDaXJjbGUgPSByZXF1aXJlKCcuL2VudGl0aWVzL0NpcmNsZScpO1xuY29uc3QgTXVsdGlQb2x5Z29uID0gcmVxdWlyZSgnLi9lbnRpdGllcy9NdWx0aVBvbHlnb24nKTtcbmNvbnN0IFBvbHlnb24gPSByZXF1aXJlKCcuL2VudGl0aWVzL1BvbHlnb24nKTtcbmNvbnN0IFJlY3RhbmdsZSA9IHJlcXVpcmUoJy4vZW50aXRpZXMvUmVjdGFuZ2xlJyk7XG5cbnZhciBlbnRpdGllcyA9IHtcbiAgQ2lyY2xlLFxuICBNdWx0aVBvbHlnb24sXG4gIFBvbHlnb24sXG4gIFJlY3RhbmdsZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbnRpdGllcztcbiIsIi8qKlxuICogVGhpcyBFbnRpdHkgaXMgZm9yIGJ1aWxkaW5nIGNvbXBsZXggYW5kIHBvc3NpYmx5IGNvbmNhdmUgc2hhcGVzXG4gKiBAbmFtZSBNdWx0aVBvbHlnb25cbiAqIEBjb25zdHJ1Y3RvciBNdWx0aVBvbHlnb25cbiAqIEBleHRlbmRzIEVudGl0eVxuICovXG5cbmNvbnN0IEVudGl0eSA9IHJlcXVpcmUoJy4vRW50aXR5Jyk7XG5jb25zdCBzY2FsZVBvaW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3NjYWxlUG9pbnRzJyk7XG5jb25zdCBwb2ludEluUG9seWdvbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3BvaW50SW5Qb2x5Z29uJyk7XG5jb25zdCB0cmFuc2xhdGVQb2ludHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy90cmFuc2xhdGVQb2ludHMnKTtcblxuY2xhc3MgTXVsdGlQb2x5Z29uIGV4dGVuZHMgRW50aXR5IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIEFuIGFycmF5IG9mIHBvbHlnb25zXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqIEBtZW1iZXJPZiBNdWx0aVBvbHlnb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnBvbHlzID0gW107XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIGVhY2ggcG9seWdvbiBpbiB0aGUgZW50aXR5XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgTXVsdGlQb2x5Z29uI1xuICAgKiBAcGFyYW0ge0NvbnRleHR9IGN0eCB0aGUgSFRNTDUgMmQgZHJhd2luZyBjb250ZXh0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgc2NhbGUgdG8gZHJhdyB0aGUgZW50aXR5IGF0XG4gICAqL1xuICBkcmF3KGN0eCwgc2NhbGUpe1xuICAgIHNjYWxlID0gc2NhbGUgfHwgdGhpcy5zY2FsZSB8fCAxO1xuICAgIHZhciBvZ0xpbmVXaWR0aCA9IGN0eC5saW5lV2lkdGg7XG4gICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoO1xuICAgIGN0eC5zYXZlKCk7XG4gICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnggKiBzY2FsZSwgdGhpcy55ICogc2NhbGUpO1xuICAgIGN0eC5yb3RhdGUodGhpcy5hbmdsZSk7XG4gICAgY3R4LnRyYW5zbGF0ZSgtKHRoaXMueCkgKiBzY2FsZSwgLSh0aGlzLnkpICogc2NhbGUpO1xuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmZpbGxTdHlsZTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZVN0eWxlO1xuXG4gICAgZm9yKHZhciBqID0gMDsgaiA8IHRoaXMucG9seXMubGVuZ3RoOyBqKyspe1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbygodGhpcy54ICsgdGhpcy5wb2x5c1tqXVswXS54KSAqIHNjYWxlLCAodGhpcy55ICsgdGhpcy5wb2x5c1tqXVswXS55KSAqIHNjYWxlKTtcbiAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5wb2x5c1tqXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgY3R4LmxpbmVUbygodGhpcy5wb2x5c1tqXVtpXS54ICsgdGhpcy54KSAqIHNjYWxlLCAodGhpcy5wb2x5c1tqXVtpXS55ICsgdGhpcy55KSAqIHNjYWxlKTtcbiAgICAgIH1cbiAgICAgIGN0eC5saW5lVG8oKHRoaXMueCArIHRoaXMucG9seXNbal1bMF0ueCkgKiBzY2FsZSwgKHRoaXMueSArIHRoaXMucG9seXNbal1bMF0ueSkgKiBzY2FsZSk7XG4gICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICBjdHguZmlsbCgpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgIH1cblxuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9nTGluZVdpZHRoO1xuICAgIHN1cGVyLmRyYXcoY3R4LCBzY2FsZSk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyBzaGFwZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIE11bHRpUG9seWdvbiNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIFRoZSBhbW91bnQgdGhlIHNoYXBlIHNob3VsZCBzY2FsZVxuICAgKi9cbiAgc2NhbGVTaGFwZShzY2FsZSl7XG4gICAgdGhpcy5wb2x5cyA9IHNjYWxlUG9pbnRzKHRoaXMucG9seXMsIHNjYWxlKTtcbiAgICBzdXAuc2NhbGVTaGFwZShzY2FsZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gcG9pbnQgaXMgY29udGFpbmVkIHdpdGhpbiB0aGlzIE11bHRpUG9seWdvbi5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBNdWx0aVBvbHlnb24jXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCBBbiBvYmplY3Qgd2l0aCB4IGFuZCB5IHZhbHVlcy5cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBwb2ludCBpcyBpbiBzaGFwZSBlbHNlIGZhbHNlXG4gICAqL1xuICBwb2ludEluU2hhcGUocG9pbnQpe1xuICAgIGZvcih2YXIgaiA9IDA7IGogPCB0aGlzLnBvbHlzLmxlbmd0aDsgaisrKXtcbiAgICAgIGlmKHBvaW50SW5Qb2x5Z29uKHBvaW50LCB0cmFuc2xhdGVQb2ludHModGhpcy5wb2x5c1tqXSwgdGhpcykpKXtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5cbm1vZHVsZS5leHBvcnRzID0gTXVsdGlQb2x5Z29uO1xuIiwiLyoqXG4gKiBUaGlzIEVudGl0eSByZXByZXNlbnRzIGEgUmVjdGFuZ2xlXG4gKiBAbmFtZSBSZWN0YW5nbGVcbiAqIEBjb25zdHJ1Y3RvciBSZWN0YW5nbGVcbiAqIEBleHRlbmRzIEVudGl0eVxuICovXG5cbmNvbnN0IEVudGl0eSA9IHJlcXVpcmUoJy4vRW50aXR5Jyk7XG5cbmNsYXNzIFJlY3RhbmdsZSBleHRlbmRzIEVudGl0eSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBIYWxmIG9mIHRoZSBSZWN0YW5nbGUncyB0b3RhbCB3aWR0aFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIFJlY3RhbmdsZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaGFsZldpZHRoID0gMTtcbiAgICAvKipcbiAgICAgKiBIYWxmIG9mIHRoZSBSZWN0YW5nbGUncyB0b3RhbCB3aWR0aFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIFJlY3RhbmdsZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaGFsZkhlaWdodCA9IDE7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBSZWN0YW5nbGUgYXQgYSBnaXZlbiBzY2FsZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFJlY3RhbmdsZSNcbiAgICogQHBhcmFtIHtDb250ZXh0fSBjdHggVGhlIGRyYXdpbmcgY29udGV4dFxuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIHNjYWxlIGF0IHdoaWNoIHRvIGRyYXdcbiAgICovXG4gIGRyYXcoY3R4LCBzY2FsZSl7XG4gICAgc2NhbGUgPSBzY2FsZSB8fCB0aGlzLnNjYWxlIHx8IDE7XG4gICAgdmFyIG9nTGluZVdpZHRoID0gY3R4LmxpbmVXaWR0aDtcbiAgICBjdHgubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGg7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNsYXRlKHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSk7XG4gICAgY3R4LnJvdGF0ZSh0aGlzLmFuZ2xlKTtcbiAgICBjdHgudHJhbnNsYXRlKC0odGhpcy54KSAqIHNjYWxlLCAtKHRoaXMueSkgKiBzY2FsZSk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuZmlsbFN0eWxlO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuc3Ryb2tlU3R5bGU7XG4gICAgY3R4LmZpbGxSZWN0KFxuICAgICAgKHRoaXMueC10aGlzLmhhbGZXaWR0aCkgKiBzY2FsZSxcbiAgICAgICh0aGlzLnktdGhpcy5oYWxmSGVpZ2h0KSAqIHNjYWxlLFxuICAgICAgKHRoaXMuaGFsZldpZHRoKjIpICogc2NhbGUsXG4gICAgICAodGhpcy5oYWxmSGVpZ2h0KjIpICogc2NhbGVcbiAgICApO1xuICAgIGN0eC5zdHJva2VSZWN0KFxuICAgICAgKHRoaXMueC10aGlzLmhhbGZXaWR0aCkgKiBzY2FsZSxcbiAgICAgICh0aGlzLnktdGhpcy5oYWxmSGVpZ2h0KSAqIHNjYWxlLFxuICAgICAgKHRoaXMuaGFsZldpZHRoKjIpICogc2NhbGUsXG4gICAgICAodGhpcy5oYWxmSGVpZ2h0KjIpICogc2NhbGVcbiAgICApO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9nTGluZVdpZHRoO1xuICAgIHN1cGVyLmRyYXcoY3R4LCBzY2FsZSk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGUgdGhpcyBzaGFwZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFJlY3RhbmdsZSNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIFRoZSBhbW91bnQgdGhlIHNoYXBlIHNob3VsZCBzY2FsZVxuICAgKi9cbiAgc2NhbGVTaGFwZShzY2FsZSl7XG4gICAgdGhpcy5oYWxmSGVpZ2h0ID0gdGhpcy5oYWxmSGVpZ2h0ICogc2NhbGU7XG4gICAgdGhpcy5oYWxmV2lkdGggPSB0aGlzLmhhbGZXaWR0aCAqIHNjYWxlO1xuICAgIHN1cGVyLnNjYWxlU2hhcGUoc2NhbGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIGdpdmVuIHBvaW50IGlzIGNvbnRhaW5lZCB3aXRoaW4gdGhpcyBSZWN0YW5nbGUuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmVjdGFuZ2xlI1xuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnQgQW4gb2JqZWN0IHdpdGggeCBhbmQgeSB2YWx1ZXMuXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgcG9pbnQgaXMgaW4gc2hhcGUgZWxzZSBmYWxzZVxuICAgKi9cbiAgcG9pbnRJblNoYXBlKHBvaW50KXtcbiAgICByZXR1cm4gKChwb2ludC54ID49ICh0aGlzLnggLSB0aGlzLmhhbGZXaWR0aCkpICYmIChwb2ludC54IDw9ICh0aGlzLnggKyB0aGlzLmhhbGZXaWR0aCkpICYmIChwb2ludC55ID49ICh0aGlzLnkgLSB0aGlzLmhhbGZIZWlnaHQpKSAmJiAocG9pbnQueSA8PSAodGhpcy55ICsgdGhpcy5oYWxmSGVpZ2h0KSkpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmVjdGFuZ2xlO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBEaXN0YW5jZSA9IHJlcXVpcmUoJy4vam9pbnRzL0Rpc3RhbmNlJyk7XG5jb25zdCBQcmlzbWF0aWMgPSByZXF1aXJlKCcuL2pvaW50cy9QcmlzbWF0aWMnKTtcbmNvbnN0IFJldm9sdXRlID0gcmVxdWlyZSgnLi9qb2ludHMvUmV2b2x1dGUnKTtcblxudmFyIGpvaW50cyA9IHtcbiAgRGlzdGFuY2UsXG4gIFByaXNtYXRpYyxcbiAgUmV2b2x1dGVcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gam9pbnRzO1xuIiwiLyoqXG4gKiBUaGlzIHJlcHJlc2VudHMgYSBkaXN0YW5jZSBqb2ludCBiZXR3ZWVuIHR3byBib2RpZXMuXG4gKiBUaGlzIHR5cGUgb2Ygam9pbnQgZm9yY2VzIHR3byBib2RpZXMgdG8ga2VlcCBhIGNvbnN0YW50IGRpc3RhbmNlIGZvciBlYWNoIG90aGVyLlxuICogQG5hbWUgRGlzdGFuY2VcbiAqIEBjb25zdHJ1Y3RvciBEaXN0YW5jZVxuICogQGV4dGVuZHMgSm9pbnRcbiAqL1xuXG5jb25zdCBKb2ludCA9IHJlcXVpcmUoJy4vSm9pbnQnKTtcblxuXG4vLyBib3gyZCBnbG9iYWxzXG5jb25zdCBCMlZlYzIgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzI7XG5jb25zdCBCMkRpc3RhbmNlSm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJEaXN0YW5jZUpvaW50RGVmO1xuXG5jbGFzcyBEaXN0YW5jZSBleHRlbmRzIEpvaW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIEEgcG9pbnQgb24gdGhlIHNlY29uZCBlbnRpdHkgd2hlcmUgdGhlIGpvaW50IHdpbGwgYmUgYXR0YWNoZWQuIElmIG5vIHBvaW50IGlzIHNwZWNpZmllZCwgdGhlIHNlY29uZCBib2R5IHdpbGwgYmUgYXR0YWNoZWQgYXQgaXRzIGNlbnRlciBwb2ludC5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBEaXN0YW5jZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYm9keVBvaW50MiA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlcyB0aGUgcG9zaXRpb25zIGJvZGllcyB0aGF0IHRoZSBqb2ludCBhcmUgY29ubmVjdGVkIGF0LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIERpc3RhbmNlI1xuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgdGhlIHNjYWxlIHRvIG11bHRpcGx5IHRoZSBkaW1lbnRpb25zIGJ5XG4gICAqL1xuICBzY2FsZUpvaW50TG9jYXRpb24oc2NhbGUpe1xuICAgIGlmKHNjYWxlICYmIHRoaXMuYm9keVBvaW50Mil7XG4gICAgICB0aGlzLmJvZHlQb2ludDIueCA9IHRoaXMuYm9keVBvaW50Mi54ICogc2NhbGU7XG4gICAgICB0aGlzLmJvZHlQb2ludDIueSA9IHRoaXMuYm9keVBvaW50Mi55ICogc2NhbGU7XG4gICAgICB0aGlzLmFscmVhZHlTY2FsZWQgPSB0cnVlO1xuICAgIH1cbiAgICBzdXBlci5zY2FsZUpvaW50TG9jYXRpb24oc2NhbGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIGFkZHMgdGhpcyBqb2ludCBpbiB0aGUgQm94MmQgd29ybGQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgRGlzdGFuY2UjXG4gICAqIEBwYXJhbSB7Qm94fSB0aGUgYm94IGluIHdoaWNoIHRvIGNyZWF0ZSB0aGUgam9pbnQuXG4gICAqIEByZXR1cm4ge2IySm9pbnR9IEpvaW50IGNyZWF0ZWQgYnkgYm94MmRcbiAgICovXG4gIGNyZWF0ZUIySm9pbnQoYm94KXtcbiAgICBpZihib3ggJiYgYm94LmJvZGllc01hcCAmJiBib3guYjJXb3JsZCAmJiBib3guam9pbnRzTWFwICYmICFib3guam9pbnRzTWFwW3RoaXMuaWRdKXtcbiAgICAgIGNvbnN0IGJvZHkxID0gYm94LmJvZGllc01hcFt0aGlzLmJvZHlJZDFdO1xuICAgICAgY29uc3QgYm9keTIgPSBib3guYm9kaWVzTWFwW3RoaXMuYm9keUlkMl07XG4gICAgICBpZihib2R5MSAmJiBib2R5Mil7XG4gICAgICAgIGxldCB2ZWMxLCB2ZWMyO1xuICAgICAgICBpZih0aGlzLmJvZHlQb2ludDEpe1xuICAgICAgICAgIHZlYzEgPSBuZXcgQjJWZWMyKHRoaXMuYm9keVBvaW50MS54LCB0aGlzLmJvZHlQb2ludDEueSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYodGhpcy5ib2R5UG9pbnQyKXtcbiAgICAgICAgICB2ZWMyID0gbmV3IEIyVmVjMih0aGlzLmJvZHlQb2ludDIueCwgdGhpcy5ib2R5UG9pbnQyLnkpO1xuICAgICAgICB9XG4gICAgICAgIHZlYzEgPSB2ZWMxIHx8IGJvZHkxLkdldFdvcmxkQ2VudGVyKCk7XG4gICAgICAgIHZlYzIgPSB2ZWMyIHx8IGJvZHkyLkdldFdvcmxkQ2VudGVyKCk7XG4gICAgICAgIGNvbnN0IGpvaW50ID0gbmV3IEIyRGlzdGFuY2VKb2ludERlZigpO1xuICAgICAgICBqb2ludC5Jbml0aWFsaXplKGJvZHkxLCBib2R5MiwgdmVjMSwgdmVjMik7XG5cbiAgICAgICAgaWYgKHRoaXMuam9pbnRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgT2JqZWN0LmFzc2lnbihqb2ludCwgdGhpcy5qb2ludEF0dHJpYnV0ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBib3guYjJXb3JsZC5DcmVhdGVKb2ludChqb2ludCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRGlzdGFuY2U7XG4iLCIvKipcbiAqIFRoaXMgcmVwcmVzZW50cyBhIHByaXNtYXRpYyBqb2ludCBiZXR3ZWVuIHR3byBib2RpZXMuXG4gKiBUaGlzIHR5cGUgb2Ygam9pbnQgZm9yY2VzIGEgYm9keSB0byBrZWVwIGl0cyBhbmdsZSByb3RhdGlvbiBjb25zaXRlbnQgd2l0aCBhbm90aGVyIGJvZHlcbiAqIEBuYW1lIFByaXNtYXRpY1xuICogQGNvbnN0cnVjdG9yIFByaXNtYXRpY1xuICogQGV4dGVuZHMgSm9pbnRcbiAqL1xuXG5jb25zdCBKb2ludCA9IHJlcXVpcmUoJy4vSm9pbnQnKTtcblxuLy8gYm94MmQgZ2xvYmFsc1xuY29uc3QgQjJWZWMyID0gQm94MkQuQ29tbW9uLk1hdGguYjJWZWMyO1xuY29uc3QgQjJQcmlzbWF0aWNKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlByaXNtYXRpY0pvaW50RGVmO1xuXG5jbGFzcyBQcmlzbWF0aWMgZXh0ZW5kcyBKb2ludCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBvYmplY3Qgd2l0aCB4IGFuZCB5IG51bWVyaWMgY29tcG9uZW50cyByZXByZXNlbnRpbmcgdGhlIGxpbmUgaW4gd2hpY2ggdGhlIGVudGl0aWVzIGNhbiBtb3ZlIHJlbGF0aXZlIHRvIGVhY2ggb3RoZXJcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBQcmlzbWF0aWMjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmF4aXNTY2FsZSA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIGFkZHMgdGhpcyBqb2ludCBpbiB0aGUgQm94MmQgd29ybGQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUHJpc21hdGljI1xuICAgKiBAcGFyYW0ge0JveH0gdGhlIGJveCBpbiB3aGljaCB0byBjcmVhdGUgdGhlIGpvaW50LlxuICAgKiBAcmV0dXJuIHtiMkpvaW50fSBKb2ludCBjcmVhdGVkIGJ5IGJveDJkXG4gICAqL1xuICBjcmVhdGVCMkpvaW50KGJveCl7XG4gICAgaWYoYm94ICYmIGJveC5ib2RpZXNNYXAgJiYgYm94LmIyV29ybGQgJiYgYm94LmpvaW50c01hcCAmJiAhYm94LmpvaW50c01hcFt0aGlzLmlkXSl7XG4gICAgICBjb25zdCBib2R5MSA9IGJveC5ib2RpZXNNYXBbdGhpcy5ib2R5SWQxXTtcbiAgICAgIGNvbnN0IGJvZHkyID0gYm94LmJvZGllc01hcFt0aGlzLmJvZHlJZDJdO1xuICAgICAgaWYoYm9keTEgJiYgYm9keTIpe1xuICAgICAgICBsZXQgdmVjMTtcbiAgICAgICAgaWYodGhpcy5ib2R5UG9pbnQxKXtcbiAgICAgICAgICB2ZWMxID0gbmV3IEIyVmVjMih0aGlzLmJvZHlQb2ludDEueCwgdGhpcy5ib2R5UG9pbnQxLnkpO1xuICAgICAgICB9XG4gICAgICAgIHZlYzEgPSB2ZWMxIHx8IGJvZHkxLkdldFdvcmxkQ2VudGVyKCk7XG4gICAgICAgIHZhciBqb2ludCA9IG5ldyBCMlByaXNtYXRpY0pvaW50RGVmKCk7XG4gICAgICAgIHZhciBheGlzO1xuICAgICAgICBpZih0aGlzLmF4aXNTY2FsZSl7XG4gICAgICAgICAgYXhpcyA9IG5ldyBCMlZlYzIodGhpcy5heGlzU2NhbGUueCwgdGhpcy5heGlzU2NhbGUueSk7XG4gICAgICAgIH1lbHNle1xuICAgICAgICAgIGF4aXMgPSBuZXcgQjJWZWMyKDEsIDApO1xuICAgICAgICB9XG4gICAgICAgIGpvaW50LkluaXRpYWxpemUoYm9keTEsIGJvZHkyLCB2ZWMxLCBheGlzKTtcblxuICAgICAgICBpZiAodGhpcy5qb2ludEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGpvaW50LCB0aGlzLmpvaW50QXR0cmlidXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJveC5iMldvcmxkLkNyZWF0ZUpvaW50KGpvaW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQcmlzbWF0aWM7XG4iLCIvKipcbiAqIFRoaXMgcmVwcmVzZW50cyBhIHJldm9sdXRlIGpvaW50IGJldHdlZW4gdHdvIGJvZGllcy5cbiAqIFRoaXMgYWxsb3cgZm9yIHJvdGF0aW9uIG9mIG9uZSBib2R5IGFyb3VuZCBhIHBvaW50IG9mIGFub3RoZXIuXG4gKiBAbmFtZSBSZXZvbHV0ZVxuICogQGNvbnN0cnVjdG9yIFJldm9sdXRlXG4gKiBAZXh0ZW5kcyBKb2ludFxuICovXG5cbmNvbnN0IEpvaW50ID0gcmVxdWlyZSgnLi9Kb2ludCcpO1xuXG4vLyBib3gyZCBnbG9iYWxzXG5jb25zdCBCMlZlYzIgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzI7XG5jb25zdCBCMlJldm9sdXRlSm9pbnREZWYgPSBCb3gyRC5EeW5hbWljcy5Kb2ludHMuYjJSZXZvbHV0ZUpvaW50RGVmO1xuXG5cbmNsYXNzIFJldm9sdXRlIGV4dGVuZHMgSm9pbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuZCBhZGRzIHRoaXMgam9pbnQgaW4gdGhlIEJveDJkIHdvcmxkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFJldm9sdXRlI1xuICAgKiBAcGFyYW0ge0JveH0gdGhlIGJveCBpbiB3aGljaCB0byBjcmVhdGUgdGhlIGpvaW50LlxuICAgKiBAcmV0dXJuIHtiMkpvaW50fSBKb2ludCBjcmVhdGVkIGJ5IGJveDJkXG4gICAqL1xuICBjcmVhdGVCMkpvaW50KGJveCl7XG4gICAgaWYoYm94ICYmIGJveC5ib2RpZXNNYXAgJiYgYm94LmIyV29ybGQgJiYgYm94LmpvaW50c01hcCAmJiAhYm94LmpvaW50c01hcFt0aGlzLmlkXSl7XG4gICAgICAgIHZhciBib2R5MSA9IGJveC5ib2RpZXNNYXBbdGhpcy5ib2R5SWQxXTtcbiAgICAgICAgdmFyIGJvZHkyID0gYm94LmJvZGllc01hcFt0aGlzLmJvZHlJZDJdO1xuICAgICAgICBpZihib2R5MSAmJiBib2R5Mil7XG4gICAgICAgICAgdmFyIHZlYzE7XG4gICAgICAgICAgaWYodGhpcy5ib2R5UG9pbnQxKXtcbiAgICAgICAgICAgIHZlYzEgPSBuZXcgQjJWZWMyKHRoaXMuYm9keVBvaW50MS54LCB0aGlzLmJvZHlQb2ludDEueSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZlYzEgPSB2ZWMxIHx8IGJvZHkxLkdldFdvcmxkQ2VudGVyKCk7XG4gICAgICAgICAgdmFyIGpvaW50ID0gbmV3IEIyUmV2b2x1dGVKb2ludERlZigpO1xuICAgICAgICAgIHZhciBheGlzO1xuICAgICAgICAgIGpvaW50LkluaXRpYWxpemUoYm9keTEsIGJvZHkyLCB2ZWMxLCBheGlzKTtcblxuICAgICAgICAgIGlmICh0aGlzLmpvaW50QXR0cmlidXRlcykge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihqb2ludCwgdGhpcy5qb2ludEF0dHJpYnV0ZXMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYm94LmIyV29ybGQuQ3JlYXRlSm9pbnQoam9pbnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJldm9sdXRlO1xuIiwiLyoqXG4gKiBUaGlzIGNvbnRhY3QgbGlzdGVuZXIgZm9yIHRoZSBCb3gyZCB3b3JsZCBhc3NpZ25zIGNvbGxpc2lvbiBvYmplY3RzIHRvIGVudGl0aWVzIHdoZW4gdGhleSBjb2xsaWRlLlxuICogQG5hbWUgQ29udGFjdFxuICogQGNvbnN0cnVjdG9yIENvbnRhY3RcbiAqL1xuXG5jbGFzcyBDb250YWN0IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cbiAgICB0aGlzLmNvbGxpc2lvbnMgPSB0aGlzLmNvbGxpc2lvbnMgfHwge307XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoZSBzdGF0ZSBvZiB0aGUgY29udGFjdCBsaXN0ZW5lciBwZXIgaXRlcmF0aW9uIG9mIHRoZSBib3ggd29ybGQgY2FsY3VsYXRpb25zLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIENvbnRhY3QjXG4gICAqL1xuICByZXNldCgpe1xuICAgIHRoaXMuY29sbGlzaW9ucyA9IHt9O1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgYm94MmQgY29sbGlzb24gYmVnaW5zXG4gICAqIEBmdW5jdGlvbiBiZWdpbkNvbnRhY3RcbiAgICogQG1lbWJlck9mIENvbnRhY3QjXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZEEgSWQgb2YgYm9keSBBXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZEIgSWQgb2YgYm9keSBCXG4gICAqIEBwYXJhbSB7YjJDb250YWNudH0gY29udGFjdCBUaGUgYm94MmQgY29udGFjdCBvYmplY3QuXG4gICAqL1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiBhIGJveDJkIGNvbGxpc29uIGVuZHNcbiAgICogQGZ1bmN0aW9uIGVuZENvbnRhY3RcbiAgICogQG1lbWJlck9mIENvbnRhY3QjXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZEEgSWQgb2YgYm9keSBBXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZEIgSWQgb2YgYm9keSBCXG4gICAqIEBwYXJhbSB7YjJDb250YWN0fSBjb250YWN0IFRoZSBib3gyZCBjb250YWN0IG9iamVjdC5cbiAgKi9cblxuICAvKipcbiAgICogQ2FsbGVkIGJlZm9yZSBhIGJveDJkIGNvbGxpc29uIGlzIHJlc29sdmVkXG4gICAqIEBmdW5jdGlvbiBwcmVTb2x2ZVxuICAgKiBAbWVtYmVyT2YgQ29udGFjdCNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkQSBJZCBvZiBib2R5IEFcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkQiBJZCBvZiBib2R5IEJcbiAgICogQHBhcmFtIHtPYmplY3R9IG9sZE1hbmlmb2xkIE9sZCBtYW5pZm9sZCBvYmplY3QgcGFzc2VkIGludG8gcHJlU29sdmUgbGlzdGVuZXJcbiAgICogQHBhcmFtIHtiMkNvbnRhY3R9IGNvbnRhY3QgVGhlIGJveDJkIGNvbnRhY3Qgb2JqZWN0LlxuICAqL1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgYWZ0ZXIgYSBib3gyZCBjb2xsaXNvbiBpcyByZXNvbHZlZFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIENvbnRhY3QjXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZEEgSWQgb2YgYm9keSBBXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBpZEIgSWQgb2YgYm9keSBCXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBpbXB1bHNlIEltcHVsc2Ugb2JqZWN0IHBhc3NlZCBpbnRvIHBvc3RTb2x2ZSBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge2IyQ29udGFjdH0gY29udGFjdCBUaGUgYm94MmQgY29udGFjdCBvYmplY3QuXG4gICovXG4gIHBvc3RTb2x2ZShpZEEsIGlkQiwgaW1wdWxzZSwgY29udGFjdCl7XG4gICAgdGhpcy5jb2xsaXNpb25zW2lkQV0gPSB0aGlzLmNvbGxpc2lvbnNbaWRBXSB8fCBbXTtcbiAgICB0aGlzLmNvbGxpc2lvbnNbaWRBXS5wdXNoKHtpZDogaWRCLCBpbXB1bHNlOiBpbXB1bHNlLm5vcm1hbEltcHVsc2VzWzBdfSk7XG4gICAgdGhpcy5jb2xsaXNpb25zW2lkQl0gPSB0aGlzLmNvbGxpc2lvbnNbaWRCXSB8fCBbXTtcbiAgICB0aGlzLmNvbGxpc2lvbnNbaWRCXS5wdXNoKHtpZDogaWRBLCBpbXB1bHNlOiBpbXB1bHNlLm5vcm1hbEltcHVsc2VzWzBdfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb250YWN0O1xuIiwiLyoqXG4gKiBUaGlzIGlzIGEgY29udmVuaWVuY2Ugb2JqZWN0IHRoYXQgYWxsb3dzIGZvciBxdWlja2x5IGNyZWF0aW5nIGEgYm94MmQgYmFzZWQgZ2FtZS5cbiAqIEBuYW1lIEJveEdhbWVcbiAqIEBjb25zdHJ1Y3RvciBCb3hHYW1lXG4gKiBAZXh0ZW5kcyBHYW1lQ29yZVxuICovXG5cbmNvbnN0IEdhbWVDb3JlID0gcmVxdWlyZSgnLi4vR2FtZUNvcmUnKTtcbmNvbnN0IEJveCA9IHJlcXVpcmUoJy4vQm94Jyk7XG5cbmNsYXNzIEJveEdhbWUgZXh0ZW5kcyBHYW1lQ29yZSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgc3VwZXIob3B0aW9ucyk7XG4gICAgY29uc29sZS5sb2coJ2JveGdhbWUgb3B0aW9ucycsIG9wdGlvbnMpO1xuICAgIC8qKlxuICAgICAqIFRoZSBpbnN0YW5jZSBvZiBCb3ggdXNlZCBmb3IgdGhpcyBnYW1lLlxuICAgICAqIEB0eXBlIHtCb3h9XG4gICAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmJveCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRoZSBib3ggc2hvdWxkIHBlcmZvcm0gY2FsY3VsYXRpb25zIGR1cmluZyBpdHMgdXBkYXRlIGN5Y2xlXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmJveFVwZGF0aW5nID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIEVudGl0eSBvYmplY3RzIHRoYXQgYXJlIGFkZGVkIHRvIHRoZSBCb3hcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBCb3hHYW1lI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5lbnRpdGllcyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIG1hcCBvZiBKb2ludCBvYmplY3RzIHRoYXQgYXJlIGFkZGVkIHRvIHRoZSBCb3hcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBCb3hHYW1lI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5qb2ludHMgPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblxuICAgIGlmKCF0aGlzLmJveCl7XG4gICAgICB0aGlzLmJveCA9IG5ldyBCb3gob3B0aW9ucy5ib3hPcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZighdGhpcy5lbnRpdGllcyl7XG4gICAgICB0aGlzLmVudGl0aWVzID0ge307XG4gICAgfVxuXG4gICAgaWYoIXRoaXMuam9pbnRzKXtcbiAgICAgIHRoaXMuam9pbnRzID0ge307XG4gICAgfVxuXG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYWxsIHBoeXNpY3MgY2FsY3VsYXRpb25zIGluIHRoZSBCb3hcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3hHYW1lI1xuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IG1pbGxpcyBUaGUgbWlsbGlzZWNvbmRzIHRoYXQgaGF2ZSBwYXNzZWQgc2luY2UgbGFzdCBpdGVyYXRpb24gb2YgZ2FtZUxvb3BcbiAgICovXG4gIHVwZGF0ZUJveChtaWxsaXMpe1xuICAgIGlmKHRoaXMuYm94VXBkYXRpbmcpe1xuICAgICAgdGhpcy5ib3gudXBkYXRlKG1pbGxpcyk7XG4gICAgICB0aGlzLmJveC51cGRhdGVFeHRlcm5hbFN0YXRlKHRoaXMuZW50aXRpZXMpO1xuICAgIH1cbiAgfVxuXG5cbiAgLyoqXG4gICAqIEFkZHMgYW4gRW50aXR5IG9iamVjdCB0byBlbnRpdGllcyBhbmQgYm94XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94R2FtZSNcbiAgICogQHBhcmFtIHtFbnRpdHl9IGVudGl0eSBFbnRpdHkgdG8gYWRkXG4gICAqL1xuICBhZGRCb2R5KGVudGl0eSl7XG4gICAgdGhpcy5lbnRpdGllc1tlbnRpdHkuaWRdID0gZW50aXR5O1xuICAgIHRoaXMuYm94LmFkZEJvZHkoZW50aXR5KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgc2VyaWVzIG9mIEVudGl0eSBvYmplY3RzIHRvIGVudGl0aWVzIGFuZCBib3hcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3hHYW1lI1xuICAgKiBAcGFyYW0ge0FycmF5fEVudGl0eX0gZW50aXRpZXMgQ2FuIHRha2UgYW4gYXJyYXkgb2YgRW50aXR5IG9iamVjdHMgb3IgYW55IG51bWJlciBvZiBFbnRpdHkgb2JqZWN0c1xuICAgKi9cbiAgYWRkQm9kaWVzKGVudGl0aWVzKXtcbiAgICBpZighQXJyYXkuaXNBcnJheShlbnRpdGllcykpIHtcbiAgICAgIGVudGl0aWVzID0gW2VudGl0aWVzXTtcbiAgICB9XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIGVudGl0aWVzLmZvckVhY2goKGVudGl0eSkgPT4ge1xuICAgICAgdGhpcy5hZGRCb2R5KGVudGl0eSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbiBFbnRpdHkgb2JqZWN0IGZyb20gZW50aXRpZXMgYW5kIGJveFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAqIEBwYXJhbSAge0VudGl0eX0gZW50aXR5IEVudGl0eSB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZUJvZHkoZW50aXR5KXtcbiAgICB0aGlzLmJveC5yZW1vdmVCb2R5KGVudGl0eS5pZCk7XG4gICAgZGVsZXRlIHRoaXMuZW50aXRpZXNbZW50aXR5LmlkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc2VyaWVzIG9mIEVudGl0eSBvYmplY3RzIGZyb20gZW50aXRpZXMgYW5kIGJveFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAqIEBwYXJhbSB7QXJyYXl8RW50aXR5fSBlbnRpdGllcyBDYW4gdGFrZSBhbiBhcnJheSBvZiBFbnRpdHkgb2JqZWN0cyBvciBhbnkgbnVtYmVyIG9mIEVudGl0eSBvYmplY3RzXG4gICAqL1xuICByZW1vdmVCb2RpZXMoZW50aXRpZXMpe1xuICAgIGlmKCFBcnJheS5pc0FycmF5KGVudGl0aWVzKSkge1xuICAgICAgZW50aXRpZXMgPSBbZW50aXRpZXNdO1xuICAgIH1cbiAgICBlbnRpdGllcy5mb3JFYWNoKChlbnRpdHkpID0+IHtcbiAgICAgIHRoaXMucmVtb3ZlQm9keShlbnRpdHkpO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBKb2ludCB0byBqb2ludHMgYW5kIGJveFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAqIEBwYXJhbSB7Sm9pbnR9IGpvaW50IEpvaW50IHRvIGFkZFxuICAgKi9cbiAgYWRkSm9pbnQoam9pbnQpe1xuICAgIHRoaXMuam9pbnRzW2pvaW50LmlkXSA9IGpvaW50O1xuICAgIHRoaXMuYm94LmFkZEpvaW50KGpvaW50KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGEgc2VyaWVzIG9mIEpvaW50IG9iamVjdHMgdG8gam9pbnRzIGFuZCBib3hcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3hHYW1lI1xuICAgKiBAcGFyYW0ge0FycmF5fEpvaW50fSBqb2ludHMgQ2FuIHRha2UgYW4gYXJyYXkgb2YgSm9pbnQgb2JqZWN0cyBvciBhbnkgbnVtYmVyIG9mIEpvaW50IG9iamVjdHNcbiAgICovXG4gIGFkZEpvaW50cyhqb2ludHMpe1xuICAgIGlmKCFBcnJheS5pc0FycmF5KGpvaW50cykpIHtcbiAgICAgIGpvaW50cyA9IFtqb2ludHNdO1xuICAgIH1cbiAgICBqb2ludHMuZm9yRWFjaCgoZW50aXR5KSA9PiB7XG4gICAgICB0aGlzLmFkZEpvaW50KGVudGl0eSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIEpvaW50IGZyb20gam9pbnRzIGFuZCBib3hcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3hHYW1lI1xuICAgKiBAcGFyYW0gIHtKb2ludH0gam9pbnQgSm9pbnQgdG8gcmVtb3ZlXG4gICAqL1xuICByZW1vdmVKb2ludChqb2ludCl7XG4gICAgdGhpcy5ib3gucmVtb3ZlSm9pbnQoam9pbnQuaWQpO1xuICAgIGRlbGV0ZSB0aGlzLmpvaW50c1tqb2ludC5pZF07XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhIHNlcmllcyBvZiBKb2ludCBvYmplY3RzIGZyb20gam9pbnRzIGFuZCBib3hcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3hHYW1lI1xuICAgKiBAcGFyYW0ge0FycmF5fEpvaW50fSBqb2ludHMgQ2FuIHRha2UgYW4gYXJyYXkgb2YgSm9pbnQgb2JqZWN0cyBvciBhbnkgbnVtYmVyIG9mIEpvaW50IG9iamVjdHNcbiAgICovXG4gIHJlbW92ZUpvaW50cyhqb2ludHMpe1xuICAgIGlmKCFBcnJheS5pc0FycmF5KGpvaW50cykpIHtcbiAgICAgIGpvaW50cyA9IFtqb2ludHNdO1xuICAgIH1cbiAgICBqb2ludHMuZm9yRWFjaCgoZW50aXR5KSA9PiB7XG4gICAgICB0aGlzLnJlbW92ZUpvaW50KGVudGl0eSk7XG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBCb3hHYW1lO1xuXG4iLCJcbmZ1bmN0aW9uIGRyYXcoY3R4LCBzY2FsZSkge1xuICBjb25zdCB7ZnVsbFcsIGZ1bGxILCBoZXhTaWRlLCBzaWRlVywgc2ludDEsIGFuZzEsIHNpbnQyLCBhbmcyfSA9IHRoaXMubWVhc3VyZW1lbnRzO1xuICBjdHguY2xlYXJSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgXG4gIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMucGxheWVyc1swXS5jb2xvcjtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgubW92ZVRvKHNpZGVXLCAxKTtcbiAgY3R4LmxpbmVUbyhmdWxsVyAtIHNpZGVXLCAxKTtcbiAgY3R4LnN0cm9rZSgpO1xuXG4gIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMucGxheWVyc1szXS5jb2xvcjtcbiAgY3R4LmJlZ2luUGF0aCgpO1xuICBjdHgubW92ZVRvKHNpZGVXLCBmdWxsSCk7XG4gIGN0eC5saW5lVG8oZnVsbFcgLSBzaWRlVywgZnVsbEgpO1xuICBjdHguc3Ryb2tlKCk7XG5cbiAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5wbGF5ZXJzWzFdLmNvbG9yO1xuICBjdHguYmVnaW5QYXRoKCk7XG4gIGN0eC5tb3ZlVG8oZnVsbFcgLSBzaWRlVywgMCk7XG4gIGN0eC5saW5lVG8oZnVsbFcsIGZ1bGxILzIpO1xuICBjdHguc3Ryb2tlKCk7XG4gIFxuICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnBsYXllcnNbMl0uY29sb3I7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4Lm1vdmVUbyhmdWxsVywgZnVsbEgvMik7XG4gIGN0eC5saW5lVG8oZnVsbFcgLSBzaWRlVywgZnVsbEgpO1xuICBjdHguc3Ryb2tlKCk7XG4gIFxuICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnBsYXllcnNbNF0uY29sb3I7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4Lm1vdmVUbyhzaWRlVywgZnVsbEgpO1xuICBjdHgubGluZVRvKDAsIGZ1bGxILzIpO1xuICBjdHguc3Ryb2tlKCk7XG4gIFxuICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnBsYXllcnNbNV0uY29sb3I7XG4gIGN0eC5iZWdpblBhdGgoKTtcbiAgY3R4Lm1vdmVUbygwLCBmdWxsSC8yKTtcbiAgY3R4LmxpbmVUbyhzaWRlVywgMCk7XG4gIGN0eC5zdHJva2UoKTtcblxuICB0aGlzLnBsYXllcnMuZm9yRWFjaCgocCkgPT4ge1xuICAgIGlmKCFwLmZhY2UuZGVhZCkge1xuICAgICAgcC5wYWRkbGVzWzBdLmRyYXcoY3R4LCBzY2FsZSk7XG4gICAgfVxuICAgIHAuZmFjZS5kcmF3KGN0eCwgc2NhbGUpO1xuICB9KTtcblxuICBPYmplY3Qua2V5cyh0aGlzLmVudGl0aWVzKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgaWYoIXRoaXMuZW50aXRpZXNba10uaGlkZGVuKSB7XG4gICAgICB0aGlzLmVudGl0aWVzW2tdLmRyYXcoY3R4KTtcbiAgICB9XG4gIH0pO1xuXG4gIFxufVxuXG5leHBvcnQgZGVmYXVsdCBkcmF3OyIsIlxuY29uc29sZS5sb2coJ3d0ZiB0b28gbWFueSBicmlja3M/Jyk7XG5cbmxldCBicmlja3MgPSBbXG4gIFs2LDFdLFsxMCwxXSxbMTQsMV0sWzM0LDFdLFszOCwxXSxbNDIsMV0sXG4gIFs4LDNdLFsxMiwzXSxbMTYsM10sWzMyLDNdLFszNiwzXSxbNDAsM10sXG4gIFs2LDVdLFsxMCw1XSxbMTQsNV0sWzM0LDVdLFszOCw1XSxbNDIsNV0sXG4gIFs4LDddLFsxMiw3XSxbMTYsN10sWzMyLDddLFszNiw3XSxbNDAsN10sXG4gIFsxMCw5XSxbMTQsOV0sWzE4LDldLFszMCw5XSxbMzQsOV0sWzM4LDldLFxuICBbMTIsMTFdLFsxNiwxMV0sWzIwLDExXSxbMjQsMTFdLFsyOCwxMV0sWzMyLDExXSxbMzYsMTFdLFxuICBbMTQsMTNdLFsxOCwxM10sWzIyLDEzXSxbMjYsMTNdLFszMCwxM10sWzM0LDEzXSxcbiAgWzEyLDE1XSxbMTYsMTVdLFsyMCwxNV0sWzI0LDE1XSxbMjgsMTVdLFszMiwxNV0sWzM2LDE1XSxcbiAgWzE4LDE3XSxbMjIsMTddLFsyNiwxN10sWzMwLDE3XSxcbiAgWzI0LDE5XVxuXTtcblxuXG5icmlja3MgPSBicmlja3MubWFwKChiKSA9PiB7XG4gIGIgPSBbYlswXSAqIDEyLjUsIGJbMV0gKiAxMi41XTtcbiAgYlswXSA9IGJbMF0gLSAzMDA7XG4gIHJldHVybiBiO1xufSk7XG5cblxuZXhwb3J0IGRlZmF1bHQgYnJpY2tzO1xuIiwiaW1wb3J0IFBvbHlnb24gZnJvbSAnZnJvemVuanMvYm94MmQvZW50aXRpZXMvUG9seWdvbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJyaWNrIGV4dGVuZHMgUG9seWdvbiB7XG4gIGRyYXcoY3R4LCBzY2FsZSkge1xuICAgIGNvbnN0IG9nTGluZVdpZHRoID0gY3R4LmxpbmVXaWR0aDtcbiAgICBcbiAgICBjdHguc2F2ZSgpO1xuICAgIC8vY3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoO1xuICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgIGN0eC5saW5lSm9pbiA9IFwicm91bmRcIjtcbiAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5maWxsU3R5bGU7XG4gICAgIGNvbnN0IGdyYWRpZW50ID0gY3R4LmNyZWF0ZUxpbmVhckdyYWRpZW50KDAsdGhpcy5wcmV5LCAwLCB0aGlzLnByZXkgKyB0aGlzLmhhbGZIZWlnaHQgKiAyKTtcblxuICAgICBncmFkaWVudC5hZGRDb2xvclN0b3AoMCwgY3R4LmZpbGxTdHlsZSk7XG4gICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCAnIzQ0NCcpO1xuXG4gICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnByZXgsIHRoaXMucHJleSk7XG4gICAgY3R4LnJvdGF0ZSh0aGlzLnByZUFuZ2xlKTtcbiAgICBjdHgudHJhbnNsYXRlKC0odGhpcy5wcmV4KSwgLSh0aGlzLnByZXkpKTtcbiAgICAvL1xuICAgIGN0eC5maWxsU3R5bGUgPSBncmFkaWVudDtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZVN0eWxlO1xuICAgIGN0eC5maWxsUmVjdChcbiAgICAgIHRoaXMucHJleC10aGlzLmhhbGZXaWR0aCxcbiAgICAgIHRoaXMucHJleS10aGlzLmhhbGZIZWlnaHQsXG4gICAgICB0aGlzLmhhbGZXaWR0aCoyLFxuICAgICAgdGhpcy5oYWxmSGVpZ2h0KjJcbiAgICApO1xuICAgIGN0eC5zdHJva2VSZWN0KFxuICAgICAgdGhpcy5wcmV4LXRoaXMuaGFsZldpZHRoLFxuICAgICAgdGhpcy5wcmV5LXRoaXMuaGFsZkhlaWdodCxcbiAgICAgIHRoaXMuaGFsZldpZHRoKjIsXG4gICAgICB0aGlzLmhhbGZIZWlnaHQqMlxuICAgICk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICBjdHgubGluZVdpZHRoID0gb2dMaW5lV2lkdGg7XG4gICAgLy9zdXBlci5kcmF3KGN0eCwgc2NhbGUpO1xuICB9XG59XG4iLCJpbXBvcnQgQ2lyY2xlIGZyb20gJ2Zyb3plbmpzL2JveDJkL2VudGl0aWVzL0NpcmNsZSc7XG5cbmltcG9ydCByYWRpYW5zRnJvbUNlbnRlciBmcm9tICdmcm96ZW5qcy91dGlscy9yYWRpYW5zRnJvbUNlbnRlcic7XG5pbXBvcnQgcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlciBmcm9tICdmcm96ZW5qcy91dGlscy9yb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRmFjZSBleHRlbmRzIENpcmNsZSB7XG4gIGRyYXcoY3R4LCBzY2FsZSkge1xuICAgIHNjYWxlID0gc2NhbGUgfHwgdGhpcy5zY2FsZSB8fCAxO1xuICAgIGNvbnN0IHNjYWxlZFggPSB0aGlzLnggKiBzY2FsZTtcbiAgICBjb25zdCBzY2FsZWRZID0gdGhpcy55ICogc2NhbGU7XG4gICAgY29uc3Qgb2dMaW5lV2lkdGggPSBjdHgubGluZVdpZHRoO1xuICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmZpbGxTdHlsZTtcbiAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLnN0cm9rZVN0eWxlO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHNjYWxlZFgsIHNjYWxlZFksIHRoaXMucmFkaXVzICogc2NhbGUsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICBjb25zdCBsZWZ0RXllID0ge3g6IHNjYWxlZFggLSAxNywgeTogc2NhbGVkWSAtIDE1fTtcbiAgICBjb25zdCByaWdodEV5ZSA9IHt4OiBzY2FsZWRYICsgMTcsIHk6IHNjYWxlZFkgLSAxNX07XG5cbiAgICBpZighdGhpcy5kZWFkKSB7XG4gICAgICBjdHgubGluZVdpZHRoID0gMTtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSAnI0ZGRic7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKHNjYWxlZFggLSAxNywgc2NhbGVkWSAtIDE1LCAxMCwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIGN0eC5zdHJva2UoKTtcblxuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyhzY2FsZWRYICsgMTcsIHNjYWxlZFkgLSAxNSwgMTAsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgIGNvbnN0IHJhZHNMID0gcmFkaWFuc0Zyb21DZW50ZXIobGVmdEV5ZSwge3g6IHRoaXMuYmFsbC54ICogc2NhbGUsIHk6IHRoaXMuYmFsbC55ICogc2NhbGV9KTtcbiAgICAgIGNvbnN0IHJhZHNSID0gcmFkaWFuc0Zyb21DZW50ZXIocmlnaHRFeWUsIHt4OiB0aGlzLmJhbGwueCAqIHNjYWxlLCB5OiB0aGlzLmJhbGwueSAqIHNjYWxlfSk7XG5cbiAgICAgIGNvbnN0IGxJcmlzID0gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcihsZWZ0RXllLCB7eDogc2NhbGVkWCAtIDE3LCB5OiBzY2FsZWRZIC0gMjB9LCByYWRzTCk7XG4gICAgICBjb25zdCBySXJpcyA9IHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIocmlnaHRFeWUsIHt4OiBzY2FsZWRYICsgMTcsIHk6IHNjYWxlZFkgLSAyMH0sIHJhZHNSKTtcblxuICAgICAgY3R4LmZpbGxTdHlsZSA9ICdibGFjayc7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHguYXJjKGxJcmlzLngsIGxJcmlzLnksIDYsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIGN0eC5maWxsKCk7XG5cbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5hcmMocklyaXMueCwgcklyaXMueSwgNiwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY3R4LmxpbmVXaWR0aCA9IDI7XG4gICAgICBjdHguZmlsbFN0eWxlID0gXCJyZ2JhKDAsMCwwLDAuNzUpXCI7XG4gICAgICBjdHguc3Ryb2tlU3R5bGUgPSB0aGlzLmZpbGxTdHlsZTtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5hcmMoc2NhbGVkWCwgc2NhbGVkWSwgdGhpcy5yYWRpdXMgKiBzY2FsZSwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICAgIGN0eC5zdHJva2UoKTtcblxuICAgICAgLy8gY3R4LnN0cm9rZVN0eWxlID0gXCJibGFja1wiO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4Lm1vdmVUbyhsZWZ0RXllLnggLSAxMCwgbGVmdEV5ZS55IC0gMTApO1xuICAgICAgY3R4LmxpbmVUbyhsZWZ0RXllLnggKyAxMCwgbGVmdEV5ZS55ICsgMTApO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuXG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKGxlZnRFeWUueCArIDEwLCBsZWZ0RXllLnkgLSAxMCk7XG4gICAgICBjdHgubGluZVRvKGxlZnRFeWUueCAtIDEwLCBsZWZ0RXllLnkgKyAxMCk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8ocmlnaHRFeWUueCAtIDEwLCByaWdodEV5ZS55IC0gMTApO1xuICAgICAgY3R4LmxpbmVUbyhyaWdodEV5ZS54ICsgMTAsIHJpZ2h0RXllLnkgKyAxMCk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8ocmlnaHRFeWUueCArIDEwLCByaWdodEV5ZS55IC0gMTApO1xuICAgICAgY3R4LmxpbmVUbyhyaWdodEV5ZS54IC0gMTAsIHJpZ2h0RXllLnkgKyAxMCk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuXG4gICAgXG5cbiAgICBjdHgubGluZVdpZHRoID0gb2dMaW5lV2lkdGg7XG5cbiAgfVxufVxuIiwiaW1wb3J0IGtleXMgZnJvbSAnZnJvemVuanMva2V5cyc7XG5pbXBvcnQgcmFkaWFuc0Zyb21DZW50ZXIgZnJvbSAnZnJvemVuanMvdXRpbHMvcmFkaWFuc0Zyb21DZW50ZXInO1xuaW1wb3J0IHNjYWxlUG9pbnRzIGZyb20gJ2Zyb3plbmpzL3V0aWxzL3NjYWxlUG9pbnRzJztcblxuY29uc3Qgc3BlZWQgPSAxMDtcblxuZnVuY3Rpb24gaGFuZGxlRGlyZWN0aW9uKGdhbWUsIGxlZnRLZXksIHJpZ2h0S2V5LCBwbGF5ZXJJZCkge1xuICBsZXQgbFByZXNzZWQgPSBnYW1lLmlucHV0TWFuYWdlci5rZXlBY3Rpb25zW2xlZnRLZXldLmlzUHJlc3NlZCgpO1xuICBpZihsUHJlc3NlZCB8fCBnYW1lLmlucHV0TWFuYWdlci5rZXlBY3Rpb25zW3JpZ2h0S2V5XS5pc1ByZXNzZWQoKSkge1xuICAgIGlmKGxQcmVzc2VkKSB7XG4gICAgICByZXR1cm4gZ2FtZS5wbGF5ZXJzW3BsYXllcklkXS5kaXJlY3Rpb24gPSAtMTtcbiAgICB9XG4gICAgcmV0dXJuIGdhbWUucGxheWVyc1twbGF5ZXJJZF0uZGlyZWN0aW9uID0gMTtcbiAgfSBcblxuICBnYW1lLnBsYXllcnNbcGxheWVySWRdLmRpcmVjdGlvbiA9IDA7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUlucHV0KGltKSB7XG4gIGhhbmRsZURpcmVjdGlvbih0aGlzLCBrZXlzLkxFRlQsIGtleXMuUklHSFQsIDIpO1xuICBoYW5kbGVEaXJlY3Rpb24odGhpcywgJ1EnLCAnVycsIDUpO1xuICBoYW5kbGVEaXJlY3Rpb24odGhpcywgJ0MnLCAnVicsIDQpO1xuICBoYW5kbGVEaXJlY3Rpb24odGhpcywgJ04nLCAnTScsIDMpO1xuICBoYW5kbGVEaXJlY3Rpb24odGhpcywgJ1QnLCAnWScsIDApO1xuICBoYW5kbGVEaXJlY3Rpb24odGhpcywgJ08nLCAnUCcsIDEpO1xuXG5cbiAgaWYoaW0ua2V5QWN0aW9uc1trZXlzLlVQXS5pc1ByZXNzZWQoKSl7XG4gICAgdGhpcy5ib3guYXBwbHlJbXB1bHNlRGVncmVlcygnYmFsbCcsIDAsIHNwZWVkKTtcbiAgfVxuXG4gIGlmKGltLmtleUFjdGlvbnNba2V5cy5ET1dOXS5pc1ByZXNzZWQoKSl7XG4gICAgdGhpcy5ib3guYXBwbHlJbXB1bHNlRGVncmVlcygnYmFsbCcsIDE4MCwgc3BlZWQpO1xuICB9XG5cbiAgaWYoaW0ua2V5QWN0aW9ucy5BLmlzUHJlc3NlZCgpKXtcbiAgICB0aGlzLmJveC5hcHBseVRvcnF1ZSgnYmFsbCcsIC1zcGVlZCAqIDEwMCk7XG4gIH1cblxuICBpZihpbS5rZXlBY3Rpb25zLkQuaXNQcmVzc2VkKCkpe1xuICAgIHRoaXMuYm94LmFwcGx5VG9ycXVlKCdiYWxsJywgc3BlZWQgICogMTAwKTtcbiAgfVxuXG4gIC8vIGlmKGltLm1vdXNlQWN0aW9uLmlzUHJlc3NlZCgpKXtcbiAgLy8gICB0aGlzLmJveC5hcHBseUltcHVsc2UoJ2JhbGwnLCByYWRpYW5zRnJvbUNlbnRlcih0aGlzLmVudGl0aWVzLmJhbGwsIHNjYWxlUG9pbnRzKGltLm1vdXNlQWN0aW9uLnBvc2l0aW9uLCAxL3RoaXMuYm94LnNjYWxlKSksIHNwZWVkKTtcbiAgLy8gfVxufVxuXG5leHBvcnQgZGVmYXVsdCBoYW5kbGVJbnB1dDsiLCJpbXBvcnQgeyBib3gyZCwgdXRpbHMgfSBmcm9tICdmcm96ZW5qcyc7XG5cbmltcG9ydCBib3hEYXRhIGZyb20gJy4vYm94RGF0YSc7XG5pbXBvcnQgZHJhdyBmcm9tICcuL2RyYXcnO1xuaW1wb3J0IEJhbGwgZnJvbSAnLi9CYWxsJztcbmltcG9ydCByYXdCcmlja3MgZnJvbSAnLi9icmlja3MnO1xuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5pbXBvcnQgQnJpY2sgZnJvbSAnLi9Ccmljayc7XG5pbXBvcnQgRmFjZSBmcm9tICcuL0ZhY2UnO1xuaW1wb3J0IGhhbmRsZUlucHV0IGZyb20gJy4vaGFuZGxlSW5wdXQnO1xuXG5jb25zdCB7IEJveEdhbWUsIGVudGl0aWVzLCBqb2ludHMgfSA9IGJveDJkO1xuY29uc3QgeyBSZXZvbHV0ZSB9ID0gam9pbnRzO1xuY29uc3QgeyByYWRpYW5zRnJvbUNlbnRlciwgc2NhbGVQb2ludHMsIHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIsIGRpc3RhbmNlLCByYWRpYW5zVG9EZWdyZWVzIH0gPSB1dGlscztcblxuY29uc3Qgc3BlZWQgPSAzMDtcbmNvbnN0IHBsYXllclNwZWVkID0gMC4wMDI3O1xuY29uc3QgZGlzdEZyb21BbmNob3IgPSAyOTU7XG5jb25zdCBiYWxsU3BlZWQgPSA0MDA7XG5jb25zdCByYW5kb21BbmdsZVNwcmVhZCA9ICgoTWF0aC5QSSAqIDIpIC8gMzYwKSAqIDEuNzU7XG5cbmZ1bmN0aW9uIGdldFJhbmRvbUFuZ2xlT2Zmc2V0KCkge1xuICByZXR1cm4gTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpKSA/IC0oTWF0aC5yYW5kb20oKSAqIHJhbmRvbUFuZ2xlU3ByZWFkKSA6IE1hdGgucmFuZG9tKCkgKiByYW5kb21BbmdsZVNwcmVhZDtcbn1cblxuLy8gRnVsbCBIRCBHYW1lICFcbmNvbnN0IGZ1bGxXID0gMTkyMDtcbmNvbnN0IGZ1bGxIID0gMTA4MDtcbmNvbnN0IGhleFNpZGUgPSA3ODMuNzk3NzM4NDQ0MTM7XG5jb25zdCBzaWRlVyA9IDU2OC4xMDExMzA3Nzc2OTtcbmNvbnN0IHNpbnQxID0gNTQwIC8gaGV4U2lkZTtcbmNvbnN0IGFuZzEgPSBNYXRoLmFzaW4oc2ludDEpO1xuY29uc3Qgc2ludDIgPSBzaWRlVyAvIGhleFNpZGU7XG5jb25zdCBhbmcyID0gTWF0aC5hc2luKHNpbnQyKVxuY29uc29sZS5sb2coJ2FuZ2xlIGluIHJhZGlhbnMnLCBhbmcxLCBhbmcyKTtcblxuXG4vL3NldHVwIGEgR2FtZUNvcmUgaW5zdGFuY2VcbmNvbnN0IGdhbWUgPSBuZXcgQm94R2FtZSh7XG4gIGNhbnZhc0lkOiAnY2FudmFzJyxcbiAgZ2FtZUFyZWFJZDogJ2dhbWVBcmVhJyxcbiAgY2FudmFzUGVyY2VudGFnZTogMSxcbiAgYm94T3B0aW9uczoge3Jlc29sdmVDb2xsaXNpb25zOiB0cnVlLCBncmF2aXR5WTogMH0sXG4gIGRyYXc6IGRyYXcsXG4gIGluaXRJbnB1dDogZnVuY3Rpb24oaW0pe1xuICAgIGltLmFkZEFycm93S2V5QWN0aW9ucygpO1xuXG4gICAgaW0uYWRkS2V5QWN0aW9uKCdBJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdEJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdRJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdXJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdDJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdWJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdOJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdNJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdUJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdZJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdPJyk7XG4gICAgaW0uYWRkS2V5QWN0aW9uKCdQJyk7XG4gIH0sXG4gIGhhbmRsZUlucHV0LFxuICB1cGRhdGU6IGZ1bmN0aW9uKG1pbGxpcykge1xuICAgIHRoaXMudXBkYXRlQm94KG1pbGxpcyk7XG4gICAgaWYodGhpcy5iYWxsKSB7XG4gICAgICBpZih0aGlzLmJhbGwuY29sbGlzaW9ucyAmJiB0aGlzLmJhbGwuY29sbGlzaW9ucy5sZW5ndGgpIHtcbiAgICAgICAgLy9jb25zb2xlLmxvZygnYmFsbCcsIHRoaXMuYmFsbC5jb2xsaXNpb25zKTtcbiAgICAgICAgdGhpcy5iYWxsLmNvbGxpc2lvbnMuZm9yRWFjaCgoZXQpID0+IHtcbiAgICAgICAgICBjb25zdCBlbnQgPSB0aGlzLmVudGl0aWVzW2V0LmlkXTtcbiAgICAgICAgICBpZihlbnQpIHtcbiAgICAgICAgICAgIGlmKGVudC5icmljaykge1xuICAgICAgICAgICAgICB0aGlzLnJlbW92ZUJvZHkoZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZW50LmtpbmcpIHtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2tpbmcga2lsbCcsIGVudCk7XG4gICAgICAgICAgICAgIGVudC5kZWFkID0gdHJ1ZTtcblxuICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmVudGl0aWVzKS5mb3JFYWNoKChrKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYnJpY2sgPSB0aGlzLmVudGl0aWVzW2tdO1xuICAgICAgICAgICAgICAgIGlmKGJyaWNrLmJyaWNrICYmIGJyaWNrLnBsYXllcklkID09PSBlbnQucGxheWVySWQpIHtcbiAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQm9keShicmljayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgIHRoaXMucGxheWVyc1tlbnQucGxheWVySWRdLnBhZGRsZXMuZm9yRWFjaCgocGFkKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCb2R5KHBhZCk7XG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIHRoaXMucmVtb3ZlQm9keShlbnQpOyAvL3JlbW92ZSBmYWNlLCBidXQgd2lsbCBzdGlsbCBkcmF3IGl0XG5cbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGVudC5wYWRkbGUpIHtcbiAgICAgICAgICAgICAgY29uc3QgcCA9IHRoaXMucGxheWVyc1tlbnQucGxheWVySWRdO1xuICAgICAgICAgICAgICBjb25zdCBiYWxsZnJvbUFuY2hvciA9IGRpc3RhbmNlKHAuYW5jaG9yLCB0aGlzLmJhbGwpO1xuICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKCclYyBPaCBteSBoZWF2ZW5zISAnLCAnYmFja2dyb3VuZDogIzIyMjsgY29sb3I6ICNiYWRhNTUnKTtcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coJyVjcGFkZGxlaGl0ICcgKyBlbnQucGxheWVySWQsICdmb250LXNpemU6IDEuNWVtOyBiYWNrZ3JvdW5kOiAjMjIyOyBjb2xvcjogJyArIHBsYXllcnNbZW50LnBsYXllcklkXS5jb2xvcik7XG4gICAgICAgICAgICAgIC8vIGlmKGJhbGxmcm9tQW5jaG9yID4gZW50LmRpc3RhbmNlKSB7IC8vaGl0IGZyb250IG9mIHBhZGRsZVxuICAgICAgICAgICAgICAvLyAgIGNvbnN0IHBhZGRsZUFuZ2xlID0gcC5wb3NpdGlvbiArIHAuYW5nbGU7XG4gICAgICAgICAgICAgIC8vICAgY29uc3QgaW1wYWN0RGVsdGEgPSByYWRpYW5zRnJvbUNlbnRlcihwLmFuY2hvciwgZW50KSAtIHJhZGlhbnNGcm9tQ2VudGVyKHAuYW5jaG9yLCB0aGlzLmJhbGwpO1xuICAgICAgICAgICAgICAvLyAgIGNvbnNvbGUubG9nKCdoaXQnLCByYWRpYW5zVG9EZWdyZWVzKHBhZGRsZUFuZ2xlKSwgcmFkaWFuc1RvRGVncmVlcyhpbXBhY3REZWx0YSksIDEwKTtcbiAgICAgICAgICAgICAgLy8gICB0aGlzLmJveC5hcHBseUltcHVsc2VEZWdyZWVzKHRoaXMuYmFsbC5pZCwgcGFkZGxlQW5nbGUgKyBpbXBhY3REZWx0YSwgMTApO1xuICAgICAgICAgICAgICAvLyB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgZGlyZWN0aW9uID0gcmFkaWFuc0Zyb21DZW50ZXIoe3g6IDAsIHk6IDB9LCB0aGlzLmJhbGwubGluZWFyVmVsb2NpdHkpO1xuICAgICAgICB0aGlzLnJlbW92ZUJvZHkodGhpcy5iYWxsKTtcbiAgICAgICAgdGhpcy5hZGRCb2R5KHRoaXMuYmFsbCk7XG4gICAgICAgIHRoaXMuYm94LmFwcGx5Rm9yY2UodGhpcy5iYWxsLmlkLCBkaXJlY3Rpb24gKyBnZXRSYW5kb21BbmdsZU9mZnNldCgpLCBiYWxsU3BlZWQpO1xuXG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvL3JlZ3VsYXRlIGJhbGwgc3BlZWQ7XG4gICAgICAgIC8vIGNvbnN0IHNwZWVkTWluID0gMTtcbiAgICAgICAgLy8gY29uc3Qgc3BlZWRNYXggPSAzO1xuICAgICAgICAvLyBjb25zdCBjdXJyZW50U3BlZWQgPSBNYXRoLmFicyh0aGlzLmJhbGwubGluZWFyVmVsb2NpdHkueCkgKyBNYXRoLmFicyh0aGlzLmJhbGwubGluZWFyVmVsb2NpdHkueSk7XG4gICAgICAgIC8vY29uc3QgZm9yY2UgPSAwLjE7XG4gICAgICAgIC8vY29uc3QgZGlyZWN0aW9uID0gcmFkaWFuc0Zyb21DZW50ZXIoe3g6IDAsIHk6IDB9LCB0aGlzLmJhbGwubGluZWFyVmVsb2NpdHkpO1xuICAgICAgICAvLyBpZihjdXJyZW50U3BlZWQgPiBzcGVlZE1heCkge1xuICAgICAgICAvLyAgdGhpcy5ib3guYXBwbHlGb3JjZSh0aGlzLmJhbGwuaWQsIGRpcmVjdGlvbiwgZm9yY2UpO1xuICAgICAgICAvLyB9XG4gICAgICAgIC8vIGVsc2UgaWYoY3VycmVudFNwZWVkIDwgc3BlZWRNaW4pIHtcbiAgICAgICAgLy8gICB0aGlzLmJveC5hcHBseUZvcmNlKHRoaXMuYmFsbC5pZCwgZGlyZWN0aW9uLCBmb3JjZSk7XG4gICAgICAgIC8vIH1cbiAgICBcbiAgICAgIH1cbiAgICB9XG4gICAgXG5cblxuICAgIGdhbWUucGxheWVycy5mb3JFYWNoKChwLCBpZHgpID0+IHtcbiAgICAgIGlmKCFwLmZhY2UuZGVhZCkge1xuICAgICAgICBpZihwLmRpcmVjdGlvbiA+IDAgJiYgcC5wb3NpdGlvbiA8IE1hdGguUEkpIHtcbiAgICAgICAgICBwLnBvc2l0aW9uICs9IChwbGF5ZXJTcGVlZCAqIG1pbGxpcyk7XG4gICAgICAgICAgcC5wb3NpdGlvbiA9IE1hdGgubWluKHAucG9zaXRpb24sIE1hdGguUEkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYocC5kaXJlY3Rpb24gPCAwICYmIHAucG9zaXRpb24gPiAwKSB7XG4gICAgICAgICAgcC5wb3NpdGlvbiAtPSAocGxheWVyU3BlZWQgKiBtaWxsaXMpO1xuICAgICAgICAgIHAucG9zaXRpb24gPSBNYXRoLm1heChwLnBvc2l0aW9uLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vY29uc3QgbmV3UGFkZGxlUHQgPSByb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyKHAuYW5jaG9yLCB7eDogcC5hbmNob3IueCwgeTogcC5hbmNob3IueSArIChkaXN0RnJvbUFuY2hvciAvIDMwKX0sIHAuYW5nbGUgKyBwLnBvc2l0aW9uIC0gKE1hdGguUEkgLyAyKSk7XG4gICAgICAgIGNvbnN0IG5ld1BhZGRsZVB0ID0gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcih7eDogcC5wdFswXSwgeTogcC5wdFsxXX0sIHt4OiBwLnB0WzBdLCB5OiBwLnB0WzFdICsgZGlzdEZyb21BbmNob3J9LCBwLmFuZ2xlICsgcC5wb3NpdGlvbiAtIChNYXRoLlBJIC8gMikpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgcGFkZGxlT3BzID0gcC5wYWRkbGVPcHM7IC8vIE9iamVjdC5hc3NpZ24oe30sIHAucGFkZGxlT3BzLCBuZXdQYWRkbGVQdCk7XG4gICAgICAgIHBhZGRsZU9wcy54ID0gbmV3UGFkZGxlUHQueDtcbiAgICAgICAgcGFkZGxlT3BzLnkgPSBuZXdQYWRkbGVQdC55O1xuICAgICAgICAvLyBwYWRkbGVPcHMucG9pbnRzID0gW1xuICAgICAgICAvLyAgIHt4OiBwYWRkbGVPcHMuaGFsZldpZHRoLCB5OiAtcGFkZGxlT3BzLmhhbGZIZWlnaHR9LFxuICAgICAgICAvLyAgIHt4OiBwYWRkbGVPcHMuaGFsZldpZHRoICogKDAuNzUpLCB5OiAwfSxcbiAgICAgICAgLy8gICB7eDogcGFkZGxlT3BzLmhhbGZXaWR0aCAqICgwLjI1KSwgeTogcGFkZGxlT3BzLmhhbGZIZWlnaHR9LFxuICAgICAgICAvLyAgIHt4OiAtcGFkZGxlT3BzLmhhbGZXaWR0aCAqICgwLjI1KSwgeTogcGFkZGxlT3BzLmhhbGZIZWlnaHR9LFxuICAgICAgICAvLyAgIHt4OiAtcGFkZGxlT3BzLmhhbGZXaWR0aCAqICgwLjc1KSwgeTogMH0sXG4gICAgICAgIC8vICAge3g6IC1wYWRkbGVPcHMuaGFsZldpZHRoLCB5OiAtcGFkZGxlT3BzLmhhbGZIZWlnaHR9LFxuICAgICAgICAvLyBdO1xuXG4gICAgICAgIHBhZGRsZU9wcy5wb2ludHMgPSBbXG4gICAgICAgICAge3g6IHBhZGRsZU9wcy5oYWxmV2lkdGgsIHk6IC1wYWRkbGVPcHMuaGFsZkhlaWdodH0sXG4gICAgICAgICAge3g6IHBhZGRsZU9wcy5oYWxmV2lkdGggKiAwLjYsIHk6IHBhZGRsZU9wcy5oYWxmSGVpZ2h0fSxcbiAgICAgICAgICB7eDogLXBhZGRsZU9wcy5oYWxmV2lkdGggKiAwLjYsIHk6IHBhZGRsZU9wcy5oYWxmSGVpZ2h0fSxcbiAgICAgICAgICB7eDogLXBhZGRsZU9wcy5oYWxmV2lkdGgsIHk6IC1wYWRkbGVPcHMuaGFsZkhlaWdodH0sXG4gICAgICAgIF07XG5cbiAgICAgICAgXG4gICAgICBcbiAgICAgICAgcGFkZGxlT3BzLnBvaW50cyA9IHAucGFkZGxlT3BzLnBvaW50cy5tYXAoKG9wcHQpID0+IHtcbiAgICAgICAgICByZXR1cm4gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcih7eDogMCwgeTogMH0sIG9wcHQsIHAuYW5nbGUgKyBwLnBvc2l0aW9uIC0gKE1hdGguUEkgLyAyKSk7XG4gICAgICAgIH0pO1xuICAgICAgICBwLnVwZGF0ZSsrO1xuICAgICAgICBwYWRkbGVPcHMuaWQgPSBpZHggKyAncGFkZGxlJyArIHAudXBkYXRlOyBcbiAgICAgICAgY29uc3QgcGFkZGxlID0gbmV3IGVudGl0aWVzLlBvbHlnb24ocGFkZGxlT3BzKTtcbiAgICAgICAgLy9jb25zdCBwYWRkbGUyID0gbmV3IGVudGl0aWVzLlBvbHlnb24oT2JqZWN0LmFzc2lnbih7fSwgcGFkZGxlT3BzLCB7aWQ6IHAucGFkZGxlMi5pZH0pKTtcbiAgICAgICAgLy9nYW1lLnJlbW92ZUJvZHkocC5wYWRkbGUpO1xuICAgICAgICAvL2dhbWUucmVtb3ZlQm9keShwLnBhZGRsZTIpO1xuICAgICAgICBnYW1lLmFkZEJvZHkocGFkZGxlKTtcbiAgICAgICAgLy9nYW1lLmFkZEJvZHkocGFkZGxlMik7XG4gICAgICAgIHAucGFkZGxlcy5wdXNoKHBhZGRsZSk7XG4gICAgICAgIGlmKHAucGFkZGxlcy5sZW5ndGggPiAzKSB7XG4gICAgICAgICAgY29uc3QgZmlyc3QgPSBwLnBhZGRsZXMuc2hpZnQoKTtcbiAgICAgICAgICBnYW1lLnJlbW92ZUJvZHkoZmlyc3QpO1xuICAgICAgICB9XG4gICAgICAgIC8vcC5wYWRkbGUyID0gcGFkZGxlMjtcblxuXG5cbiAgICAgICAgLy8gdGhpcy5ib3guc2V0UG9zaXRpb24ocC5wYWRkbGUuaWQsIG5ld1BhZGRsZVB0LngsIG5ld1BhZGRsZVB0LnkpO1xuICAgICAgICAvLyB0aGlzLmJveC5zZXRBbmdsZShwLnBhZGRsZS5pZCwgcC5hbmdsZSArIHAucG9zaXRpb24gLSAoTWF0aC5QSSAvIDIpKTtcbiAgICAgICAgLy8gdGhpcy5ib3guc2V0QW5ndWxhclZlbG9jaXR5KHAucGFkZGxlLmlkLCAwKTtcbiAgICAgICAgLy8gdGhpcy5ib3guc2V0TGluZWFyVmVsb2NpdHkocC5wYWRkbGUuaWQsIDAsIDApO1xuXG5cbiAgICAgIH1cbiAgICB9KTtcblxuICB9XG59KTtcblxuY29uc3QgYmFsbFByb3BzID0ge1xuICB4OiBmdWxsVyAvIDIsXG4gIHk6IGZ1bGxIIC8gMixcbiAgcHRSYWRpdXM6IDEwLFxuICByYWRpdXM6IDEwLFxuICBwb2ludHM6IFswLDEsMiwzLDQsNSw2LDcsOF0sXG4gIGlkOiAnYmFsbCdcbn07XG5cbmJhbGxQcm9wcy5wb2ludHMgPSBiYWxsUHJvcHMucG9pbnRzLm1hcCgocCwgaWR4KSA9PiB7XG4gIGNvbnN0IG5ld1B0ID0gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcih7eDogMCwgeTogMH0sIHt4OiAwLCB5OiBiYWxsUHJvcHMucHRSYWRpdXN9LCAoKE1hdGguUEkgKiAyKSAvIGJhbGxQcm9wcy5wb2ludHMubGVuZ3RoKSAqIGlkeCk7XG4gIHJldHVybiBuZXdQdFxufSk7XG5cbmdhbWUuYmFsbCA9IG5ldyBCYWxsKGJhbGxQcm9wcyk7XG5nYW1lLmFkZEJvZHkoZ2FtZS5iYWxsKTtcblxuICAvL2FkZCBldmVyeXRoaW5nIHRvIGJveCBmcm9tIHRoZSBib3hEYXRhXG5ib3hEYXRhLmVudGl0aWVzLmZvckVhY2goZnVuY3Rpb24ocHJvcHMpe1xuICBjb25zdCBFbnRpdHkgPSBlbnRpdGllc1twcm9wcy50eXBlXTtcbiAgaWYoRW50aXR5KXtcbiAgICBwcm9wcy5kcmF3Q2VudGVyID0gZmFsc2U7XG4gICAgZ2FtZS5hZGRCb2R5KG5ldyBFbnRpdHkocHJvcHMpKTtcbiAgfVxufSk7XG5cblxuY29uc3QgcGN0ID0gMC42MDQzMTIyMzg5NTQ3OTE4NTgzOyBcblxuY29uc3QgYW5ncyA9IFtcbiAgMCxcbiAgYW5nMSxcbiAgYW5nMiArIChNYXRoLlBJLzIpLFxuICBNYXRoLlBJLFxuICBNYXRoLlBJICsgYW5nMSxcbiAgKE1hdGguUEkgKiAxLjUpICsgYW5nMlxuXTtcblxubGV0IGMgPSBbXG4gIFtmdWxsVyAvIDIsIDBdLFxuICBbZnVsbFcgLSAoc2lkZVcgKiBwY3QpLCAoZnVsbEggLyAyKSAqICgxIC0gcGN0KV0sXG4gIFtmdWxsVyAtIChzaWRlVyAqIHBjdCksIChmdWxsSCAvIDIpICsgKChmdWxsSCAvIDIpICogcGN0KV0sXG4gIFtmdWxsVyAvIDIsIGZ1bGxIXSxcbiAgW3NpZGVXICogcGN0LCAoZnVsbEggLyAyKSArICgoZnVsbEggLyAyKSAqIHBjdCldLFxuICBbc2lkZVcgKiBwY3QsIChmdWxsSCAvIDIpICogKDEgLSBwY3QpXSxcbl07XG5cbmNvbnN0IHBsYXllcnMgPSBjLm1hcCgoY3B0LCBpZHgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBwdDogY3B0LFxuICAgIGNvbG9yOiBjb2xvcnNbaWR4XSxcbiAgICBhbmdsZTogYW5nc1tpZHhdLFxuICAgIGRpcmVjdGlvbjogMCxcbiAgICBwb3NpdGlvbjogTWF0aC5QSSAvIDIsXG4gICAgdXBkYXRlOiAwXG4gIH1cbn0pO1xuXG5jb25zb2xlLmxvZygncGxheWVycycsIHBsYXllcnMpO1xuXG5jb25zdCBvcmlnaW4gPSB7eDogcGxheWVyc1swXS5wdFswXSwgeTogcGxheWVyc1swXS5wdFsxXX07XG5cbnBsYXllcnMuZm9yRWFjaCgocCwgaWR4KSA9PiB7XG4gIGNvbnNvbGUubG9nKCdjcmVhdGluZyBwbGF5ZXInLCBwKTtcbiAgY29uc3QgcHB0ID0ge3g6IHAucHRbMF0sIHk6IHAucHRbMV19O1xuXG4gIGNvbnN0IG5ld0ZhY2VQdCA9IHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIocHB0LCB7eDogcHB0LngsIHk6IHBwdC55ICsgNTV9LCBwLmFuZ2xlKTtcbiAgY29uc3QgY2lyID0gbmV3IEZhY2Uoe1xuICAgIHg6IG5ld0ZhY2VQdC54LFxuICAgIHk6IG5ld0ZhY2VQdC55LFxuICAgIHJhZGl1czogNTAsXG4gICAgc3RhdGljQm9keTogdHJ1ZSxcbiAgICByZXN0aXR1dGlvbjogMixcbiAgICBmaWxsU3R5bGU6IHAuY29sb3IsXG4gICAga2luZzogdHJ1ZSxcbiAgICBiYWxsOiBnYW1lLmJhbGwsXG4gICAgcGxheWVySWQ6IGlkeCxcbiAgfSk7XG4gIGdhbWUuYWRkQm9keShjaXIpO1xuICBwLmZhY2UgPSBjaXI7XG5cbiAgY29uc3QgbmV3UGFkZGxlUHQgPSByb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyKHBwdCwge3g6IHBwdC54LCB5OiBwcHQueSArIGRpc3RGcm9tQW5jaG9yfSwgcC5hbmdsZSk7XG4gIHAucGFkZGxlT3BzID0ge1xuICAgIHg6IG5ld1BhZGRsZVB0LngsXG4gICAgeTogbmV3UGFkZGxlUHQueSxcbiAgICBoYWxmV2lkdGg6IDYwLFxuICAgIGhhbGZIZWlnaHQ6IDE1LFxuICAgIHJlc3RpdHV0aW9uOiAxLFxuICAgIGZpbGxTdHlsZTogcC5jb2xvcixcbiAgICBwYWRkbGU6IHRydWUsXG4gICAgZHJhd0NlbnRlcjogZmFsc2UsXG4gICAgcGxheWVySWQ6IGlkeCxcbiAgICBkZW5zaXR5OiAxMDAsXG4gICAgc3RhdGljQm9keTogdHJ1ZSxcbiAgICBpZDogaWR4ICsgJ3BhZGRsZTAnLFxuICAgIGhpZGRlbjogdHJ1ZVxuICB9O1xuICBwLnBhZGRsZU9wcy5wb2ludHMgPSBbXG4gICAge3g6IHAucGFkZGxlT3BzLmhhbGZXaWR0aCwgeTogLXAucGFkZGxlT3BzLmhhbGZIZWlnaHR9LFxuICAgIHt4OiBwLnBhZGRsZU9wcy5oYWxmV2lkdGgsIHk6IHAucGFkZGxlT3BzLmhhbGZIZWlnaHR9LFxuICAgIHt4OiAtcC5wYWRkbGVPcHMuaGFsZldpZHRoLCB5OiBwLnBhZGRsZU9wcy5oYWxmSGVpZ2h0fSxcbiAgICB7eDogLXAucGFkZGxlT3BzLmhhbGZXaWR0aCwgeTogLXAucGFkZGxlT3BzLmhhbGZIZWlnaHR9LFxuICBdO1xuXG4gIHAucGFkZGxlT3BzLnBvaW50cyA9IHAucGFkZGxlT3BzLnBvaW50cy5tYXAoKG9wcHQpID0+IHtcbiAgICByZXR1cm4gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcih7eDogMCwgeTogMH0sIG9wcHQsIHAuYW5nbGUpO1xuICB9KTtcbiAgY29uc3QgcGFkZGxlID0gbmV3IGVudGl0aWVzLlBvbHlnb24ocC5wYWRkbGVPcHMpO1xuICBnYW1lLmFkZEJvZHkocGFkZGxlKTtcbiAgcC5wYWRkbGVzID0gW3BhZGRsZV07XG5cbiAgcC5hbmNob3IgPSBuZXcgZW50aXRpZXMuQ2lyY2xlKHtcbiAgICB4OiBwLnB0WzBdLFxuICAgIHk6IHAucHRbMV0sXG4gICAgcmFkaXVzOiAwLjEsXG4gICAgc3RhdGljQm9keTogdHJ1ZSxcbiAgICBwbGF5ZXJJZDogaWR4LFxuICAgIGhpZGRlbjogdHJ1ZVxuICB9KTtcbiAgZ2FtZS5hZGRCb2R5KHAuYW5jaG9yKTtcblxuICBwYWRkbGUuZGlzdGFuY2UgPSBkaXN0YW5jZShwLmFuY2hvciwgcGFkZGxlKTtcblxuICBjb25zdCBjSm9pbnQgPSBuZXcgam9pbnRzLkRpc3RhbmNlKHtib2R5SWQxOiBwLmFuY2hvci5pZCwgYm9keUlkMjogcGFkZGxlLmlkLCBpZDogTWF0aC5yYW5kb20oKSArICdqJ30pO1xuICBnYW1lLmFkZEpvaW50KGNKb2ludCk7XG5cbiAgcmF3QnJpY2tzLmZvckVhY2goKHJiLCBqZHgpID0+IHtcbiAgICBjb25zdCBvcHMgPSB7XG4gICAgICB4OiByYlswXSArIChmdWxsVyAvIDIpLFxuICAgICAgeTogcmJbMV0sXG4gICAgICBoYWxmV2lkdGg6IDI1LFxuICAgICAgaGFsZkhlaWdodDogMTIuNSxcbiAgICAgIHN0YXRpY0JvZHk6IHRydWUsXG4gICAgICByZXN0aXR1dGlvbjogMS41LFxuICAgICAgcGxheWVySWQ6IGlkeCxcbiAgICAgIGZpbGxTdHlsZTogcC5jb2xvcixcbiAgICAgIGJyaWNrOiB0cnVlLFxuICAgICAgcHJlQW5nbGU6IHAuYW5nbGUsXG4gICAgfTtcbiAgXG4gICAgY29uc3QgcHQgPSByb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyKG9yaWdpbiwgb3BzLCBwLmFuZ2xlKTtcbiAgICBcbiAgICBvcHMueCA9IHB0Lng7XG4gICAgb3BzLnkgPSBwdC55O1xuICBcbiAgXG4gICAgb3BzLnggKz0gKHBwdC54IC0gcGxheWVyc1swXS5wdFswXSk7XG4gICAgb3BzLnkgKz0gKHBwdC55IC0gcGxheWVyc1swXS5wdFsxXSk7XG5cbiAgICBvcHMucG9pbnRzID0gW1xuICAgICAge3g6IG9wcy5oYWxmV2lkdGgsIHk6IC1vcHMuaGFsZkhlaWdodH0sXG4gICAgICB7eDogb3BzLmhhbGZXaWR0aCwgeTogb3BzLmhhbGZIZWlnaHR9LFxuICAgICAge3g6IC1vcHMuaGFsZldpZHRoLCB5OiBvcHMuaGFsZkhlaWdodH0sXG4gICAgICB7eDogLW9wcy5oYWxmV2lkdGgsIHk6IC1vcHMuaGFsZkhlaWdodH0sXG4gICAgXTtcblxuICAgIG9wcy5wb2ludHMgPSBvcHMucG9pbnRzLm1hcCgob3BwdCkgPT4ge1xuICAgICAgcmV0dXJuIHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIoe3g6IDAsIHk6IDB9LCBvcHB0LCBwLmFuZ2xlKTtcbiAgICB9KTtcblxuICAgIG9wcy5wcmV4ID0gb3BzLng7XG4gICAgb3BzLnByZXkgPSBvcHMueTtcbiAgXG4gICAgY29uc3QgYiA9IG5ldyBCcmljayhvcHMpO1xuICAgIGdhbWUuYWRkQm9keShiKTtcblxuICB9KTtcblxufSk7XG5cbmdhbWUubWVhc3VyZW1lbnRzID0ge2Z1bGxXLCBmdWxsSCwgaGV4U2lkZSwgc2lkZVcsIHNpbnQxLCBhbmcxLCBzaW50MiwgYW5nMn07XG5nYW1lLnBsYXllcnMgPSBwbGF5ZXJzO1xuXG4vL2lmIHlvdSB3YW50IHRvIHRha2UgYSBsb29rIGF0IHRoZSBnYW1lIG9iamVjdCBpbiBkZXYgdG9vbHNcbmNvbnNvbGUubG9nKGdhbWUpO1xud2luZG93LmdhbWUgPSBnYW1lO1xuXG4vL2xhdW5jaCB0aGUgZ2FtZSFcbmdhbWUucnVuKCk7XG5nYW1lLmJveC5hcHBseUZvcmNlRGVncmVlcygnYmFsbCcsIE1hdGgucmFuZG9tKCkgKiAzNjAsIGJhbGxTcGVlZCk7XG4iLCJpbXBvcnQgQ2lyY2xlIGZyb20gJ2Zyb3plbmpzL2JveDJkL2VudGl0aWVzL0NpcmNsZSc7XG5pbXBvcnQgcmFkaWFuc0Zyb21DZW50ZXIgZnJvbSAnZnJvemVuanMvdXRpbHMvcmFkaWFuc0Zyb21DZW50ZXInO1xuaW1wb3J0IHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIgZnJvbSAnZnJvemVuanMvdXRpbHMvcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhbGwgZXh0ZW5kcyBDaXJjbGUge1xuICBkcmF3KGN0eCwgc2NhbGUpIHtcbiAgICAvLyBzY2FsZSA9IHNjYWxlIHx8IHRoaXMuc2NhbGUgfHwgMTtcbiAgICAvLyBjdHguc2F2ZSgpO1xuICAgIC8vIGN0eC50cmFuc2xhdGUodGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlKTtcbiAgICAvLyBjdHgucm90YXRlKHRoaXMuYW5nbGUpO1xuICAgIC8vIGN0eC50cmFuc2xhdGUoLSh0aGlzLngpICogc2NhbGUsIC0odGhpcy55KSAqIHNjYWxlKTtcbiAgICAvLyBjdHguZHJhd0ltYWdlKHRoaXMuaW1nLCB0aGlzLnggKiBzY2FsZSAtICh0aGlzLmltZy53aWR0aCAvIDIpLCB0aGlzLnkgKiBzY2FsZSAtICh0aGlzLmltZy5oZWlnaHQgLyAyKSk7XG4gICAgLy8gY3R4LnJlc3RvcmUoKTtcblxuICAgIHNjYWxlID0gc2NhbGUgfHwgdGhpcy5zY2FsZSB8fCAxO1xuICAgIGNvbnN0IHggPSB0aGlzLnggKiBzY2FsZTtcbiAgICBjb25zdCB5ID0gdGhpcy55ICogc2NhbGU7XG4gICAgY29uc3QgcmFkaXVzID0gdGhpcy5wdFJhZGl1czsgLy8gLyBzY2FsZTtcbiAgICBjdHguZmlsbFN0eWxlID0gJ3JnYmEoMjU1LDEyNywwLDAuNjYpJztcbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4LmFyYyh4LCB5LCByYWRpdXMsIDAsIE1hdGguUEkgKiAyLCB0cnVlKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmZpbGwoKTtcblxuICAgIGlmKHRoaXMubGluZWFyVmVsb2NpdHkpIHtcbiAgICAgIGNvbnN0IHRhaWxEaXNydXB0aW9uID0gMC4wNjtcbiAgICAgIGNvbnN0IHRhaWxEaXN0ID0gMC44NTtcblxuICAgICAgY29uc3QgcmFkcyA9IHJhZGlhbnNGcm9tQ2VudGVyKHt4OiAwLCB5OiAwfSwgdGhpcy5saW5lYXJWZWxvY2l0eSk7XG4gICAgICBjb25zdCBjZW50ZXIgPSB7eCwgeX07XG4gICAgICBjb25zdCB0YWlscyA9IFsxLCAyLCAzLCA0LCA1XS5tYXAoKHQsIGlkeCkgPT4ge1xuICAgICAgICByZXR1cm4gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcihjZW50ZXIsIHt4LCB5OiB5IC0gKHJhZGl1cyAqICh0YWlsRGlzdCAqIHQpKX0sIHJhZHMgKyBNYXRoLlBJICsgKHQgJSAyID8gdGFpbERpc3J1cHRpb24gOiAtdGFpbERpc3J1cHRpb24pKTtcbiAgICAgIH0pO1xuXG4gICAgICB0YWlscy5mb3JFYWNoKCh0LCBpZHgpID0+IHtcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMCwwLjUpJztcbiAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICBjdHguYXJjKHQueCwgdC55LCByYWRpdXMgLSAocmFkaXVzICogKChpZHggKyAxKSAqIDAuMTUpKSwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgIGN0eC5maWxsKCk7XG4gICAgICB9KTtcblxuXG5cbiAgICB9XG5cbiAgICBcblxuXG4gICAgXG4gICAgXG5cbiAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==