!function(t){var e={};function i(s){if(e[s])return e[s].exports;var n=e[s]={i:s,l:!1,exports:{}};return t[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,s){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:s})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(s,n,function(e){return t[e]}.bind(null,n));return s},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=48)}([function(t,e,i){window.frozenjs={GameCore:i(9),InputManager:i(10),ResourceManager:i(15),MouseAction:i(12),TouchAction:i(11),keys:i(14),Animation:i(20),AnimFrame:i(21),utils:i(33),Sprite:i(27),reiner:{Creature:i(37)},sounds:{WebAudio:i(19)},box2d:{entities:i(38),joints:i(42),Box:i(28),BoxGame:i(47)}},t.exports=window.frozenjs},function(t,e){t.exports=class{constructor(t={}){this.id=t.id||Math.random()+"_"+Date.now(),this.x=0,this.y=0,this.scale=null,this.angle=0,this.center=null,this.drawCenter=!0,this.restitution=.3,this.density=1,this.friction=.9,this.linearDamping=0,this.linearVelocity=null,this.angularVelocity=0,this.angularDamping=0,this.staticBody=!1,this.fillStyle="rgba(128,128,128,0.5)",this.strokeStyle="#000",this.lineWidth=1,this.maskBits=null,this.categoryBits=null,this.groupIndex=null,Object.assign(this,t)}update(t){Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.fillStyle=this.strokeStyle,t.beginPath(),t.arc(this.x*e,this.y*e,4,0,2*Math.PI,!0),t.closePath(),t.fill(),this.center&&this.drawCenter&&(t.fillStyle=this.centerStyle||"yellow",t.beginPath(),t.arc(this.center.x*e,this.center.y*e,2,0,2*Math.PI,!0),t.closePath(),t.fill()),t.lineWidth=i}scaleShape(t){this.x=this.x*t,this.y=this.y*t,this.alreadyScaled=!0}}},function(t,e){const i={NORMAL:0,DETECT_INITAL_PRESS_ONLY:1,STATE_RELEASED:0,STATE_PRESSED:1,STATE_WAITING_FOR_RELEASE:2,STATE_MOVED:3};t.exports=class{constructor(t={}){this.name=null,this.behavior=0,this.amount=0,this.state=0,this.statics=i,Object.assign(this,t),this.reset()}reset(){this.state=i.STATE_RELEASED,this.amount=0}tap(){this.press(),this.release()}press(){this.state=i.STATE_PRESSED,this.behavior===i.DETECT_INITAL_PRESS_ONLY&&this.pressAmt(1)}pressAmt(t){this.state!==i.STATE_WAITING_FOR_RELEASE&&(this.amount+=t,this.state=i.STATE_WAITING_FOR_RELEASE)}release(){this.state=i.STATE_RELEASED}isPressed(){return this.state===i.STATE_PRESSED}getAmount(){var t=this.amount;return 0!==t&&(this.state===i.STATE_RELEASED?this.amount=0:this.behavior===i.DETECT_INITAL_PRESS_ONLY&&(this.state=i.STATE_WAITING_FOR_RELEASE,this.amount=0)),t}}},function(t,e,i){"use strict";t.exports=function(t,e){if(!t||!e)return!1;for(var i=e.points||e,s=!1,n=i.length-1,o=0;o<i.length;n=o++){var r=i[o].x,a=i[o].y,h=i[n].x,l=i[n].y;a>t.y!=l>t.y&&t.x<(h-r)*(t.y-a)/(l-a)+r&&(s=!s)}return s}},function(t,e){t.exports=function t(e,i){return e=Array.isArray(e)?e.map(function(e){return t(e,i)}):"object"==typeof i?{x:e.x*i.x,y:e.y*i.y}:{x:e.x*i,y:e.y*i}}},function(t,e){t.exports=function t(e,i){return Array.isArray(e)?e=e.map(function(e){return t(e,i)}):(e={x:e.x,y:e.y},null!=i.x&&(e.x+=i.x),null!=i.y&&(e.y+=i.y)),e}},function(t,e){t.exports=class{constructor(t={}){this.bodyId1=null,this.bodyId2=null,this.bodyPoint1=null,this.jointAttributes=null,Object.assign(this,t)}scaleJointLocation(t){t&&this.bodyPoint1&&(this.bodyPoint1.x=this.bodyPoint1.x*t,this.bodyPoint1.y=this.bodyPoint1.y*t,this.alreadyScaled=!0)}}},function(t,e,i){const s=i(1),n=i(24);t.exports=class extends s{constructor(t={}){super(t),this.radius=1,Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.beginPath(),t.arc(this.x*e,this.y*e,this.radius*e,0,2*Math.PI,!0),t.closePath(),t.fill(),t.stroke(),this.staticBody||(t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.beginPath(),t.moveTo(this.x*e,this.y*e),t.lineTo(this.x*e,this.y*e-this.radius*e),t.closePath(),t.stroke(),t.restore()),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.radius=this.radius*t,super.scaleShape(t)}pointInShape(t){return n(t,this)<=this.radius}}},function(t,e){t.exports={entities:[{points:[{x:-100,y:-100},{x:568.10113,y:-100},{x:568.10113,y:0},{x:0,y:540},{x:-100,y:540}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",id:"uleftw",restitution:5},{points:[{x:-100,y:540},{x:0,y:540},{x:568.10113,y:1080},{x:568.10113,y:1180},{x:-100,y:1180}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",restitution:5,id:"lleftw"},{points:[{x:1351.89887,y:-100},{x:2020,y:-100},{x:2020,y:540},{x:1920,y:540},{x:1351.89887,y:0}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",restitution:5,id:"urighttw"},{points:[{x:1351.89887,y:1080},{x:1920,y:540},{x:2020,y:540},{x:2020,y:1180},{x:1351.89887,y:1180}],x:0,y:0,staticBody:!0,zone:!1,type:"Polygon",restitution:5,id:"lrighttw"},{x:960,y:1180,halfWidth:1e3,halfHeight:100,staticBody:!0,zone:!1,type:"Rectangle",id:"bottomw",restitution:5},{x:960,y:-100,halfWidth:1e3,halfHeight:100,staticBody:!0,zone:!1,type:"Rectangle",id:"topw"},{x:960,y:540,halfWidth:9,halfHeight:20,staticBody:!1,zone:!1,type:"Rectangle",fillStyle:"#EECEB3",strokeStyle:"#EECEB3",id:"neck"},{x:960,y:527,radius:24,staticBody:!1,zone:!1,type:"Circle",fillStyle:"rgba(239,208,207,0.2)",id:"head"}],joints:[{bodyId1:"head",bodyId2:"neck",type:"Revolute",id:"head",jointAttributes:{enableLimit:!0,lowerAngle:-.5,upperAngle:.5}},{bodyId1:"ruleg",bodyId2:"torso",type:"Revolute",id:"rhip",bodyPoint1:{x:210,y:273},jointAttributes:{enableLimit:!0,lowerAngle:-.785385,upperAngle:1.570796}},{bodyId1:"llleg",bodyId2:"luleg",type:"Revolute",id:"lknee",bodyPoint1:{x:157,y:364},jointAttributes:{enableLimit:!0,lowerAngle:-.185385,upperAngle:1.570796}},{bodyId1:"rlleg",bodyId2:"ruleg",type:"Revolute",id:"rknee",bodyPoint1:{x:231,y:364},jointAttributes:{enableLimit:!0,lowerAngle:-1.570796,upperAngle:.185385}},{bodyId1:"lhand",bodyId2:"llarm",type:"Revolute",id:"lhand",bodyPoint1:{x:125,y:302},jointAttributes:{enableLimit:!0,lowerAngle:-1.6,upperAngle:1.6}},{bodyId1:"rhand",bodyId2:"rlarm",type:"Revolute",id:"rhand",bodyPoint1:{x:268,y:290},jointAttributes:{enableLimit:!0,lowerAngle:-1.6,upperAngle:1.6}},{bodyId1:"lfoot",bodyId2:"llleg",type:"Revolute",id:"lfoot",bodyPoint1:{x:147,y:426},jointAttributes:{enableLimit:!0,lowerAngle:-1.070796,upperAngle:.785385}},{bodyId1:"rfoot",bodyId2:"rlleg",type:"Revolute",id:"rfoot",bodyPoint1:{x:238,y:427},jointAttributes:{enableLimit:!0,lowerAngle:-.785385,upperAngle:1.070796}},{bodyId1:"thumb",bodyId2:"lhand",type:"Revolute",id:"thumb",bodyPoint1:{x:127,y:315},jointAttributes:{enableLimit:!0,lowerAngle:.1,upperAngle:-.1}}],canvas:{height:600,width:800},backImg:null}},function(t,e,i){const s=i(10),n=i(15);t.exports=class{constructor(t={}){this.isRunning=!1,this.canvasId=null,this.maxStep=40,this.contextType="2d",this.height=0,this.width=0,this.resourceManager=null,this.inputManager=null,this.loadingForeground="#00F",this.loadingBackground="#FFF",this.gameAreaId=null,this.canvasPercentage=0,Object.assign(this,t),this.resourceManager||(this.resourceManager=new n)}setHeight(t){this.height=t,this.canvas.height=t}setWidth(t){this.width=t,this.canvas.width=t}stop(){this.isRunning=!1}run(){this.isRunning||(this.init(),this.loadResources(this.resourceManager),this.initInput(this.inputManager),this.launchLoop())}loadResources(t){}init(){this.canvas||(this.canvas=document.getElementById(this.canvasId)),this.canvas?(this.context||(this.context=this.canvas.getContext(this.contextType)),this.context?(this.setHeight(this.height||this.canvas.height),this.setWidth(this.width||this.canvas.width),this.inputManager||(this.gameAreaId&&this.canvasPercentage?this.inputManager=new s({canvas:this.canvas,gameArea:document.getElementById(this.gameAreaId),canvasPercentage:this.canvasPercentage}):this.inputManager=new s({canvas:this.canvas})),this.inputManager.resize(),this.isRunning=!0):alert("Sorry, your browser does not support a "+this.contextType+" drawing surface on canvas.  I recommend any browser but Internet Explorer")):alert("Sorry, your browser does not support canvas.  I recommend any browser but Internet Explorer")}initInput(t){}handleInput(t,e){}gameLoop(){this.currTime=(new Date).getTime(),this.elapsedTime=Math.min(this.currTime-this.prevTime,this.maxStep),this.prevTime=this.currTime,this.resourceManager&&!this.resourceManager.resourcesReady()?(this.updateLoadingScreen(this.elapsedTime),this.drawLoadingScreen(this.context)):(this.handleInput(this.inputManager,this.elapsedTime),this.paused||this.update(this.elapsedTime),this.context.save(),this.draw(this.context),this.context.restore())}launchLoop(){this.elapsedTime=0;var t=Date.now();this.currTime=t,this.prevTime=t,this.loopRunner=this.loopRunner.bind(this),window.requestAnimationFrame(this.loopRunner)}loopRunner(){this.gameLoop(),window.requestAnimationFrame(this.loopRunner)}update(t){}updateLoadingScreen(t){}draw(t){"2d"===this.contextType&&(t.font="14px sans-serif",t.fillText("This game does not have its own draw function!",10,50))}drawLoadingScreen(t){if(this.resourceManager&&"2d"===this.contextType){t.fillStyle=this.loadingBackground,t.fillRect(0,0,this.width,this.height),t.fillStyle=this.loadingForeground,t.strokeStyle=this.loadingForeground;var e=Math.floor(this.height/12);t.font="bold "+e+"px sans-serif",t.fillText("Loading... "+this.resourceManager.getPercentComplete()+"%",.1*this.width,.55*this.height),t.strokeRect(.1*this.width,.7*this.height,.8*this.width,.1*this.height),t.fillRect(.1*this.width,.7*this.height,.8*this.width*this.resourceManager.getPercentComplete()/100,.1*this.height),t.lineWidth=4}}}},function(t,e,i){const s=i(30),n=i(2),o=i(11),r=i(12),a=i(13),h=i(14);function l(t,e,i){return t.addEventListener(e,i),function(){t.removeEventListener(e,i)}}function c(t){return parseFloat(t)||0}function u(t){var e=function(t){return window.getComputedStyle(t,null)||{}}(t),i=c(e.marginLeft),s=c(e.marginTop);return{w:i+c(e.marginRight),h:s+c(e.marginBottom)}}t.exports=class{constructor(t={}){function e(t){t.remove()}if(this.keyActions=null,this.mouseAction=null,this.touchAction=null,this.canvas=null,this.handleMouse=!0,this.handleTouch=!0,this.handleKeys=!0,this.gameArea=null,this.canvasPercentage=null,this.emulateMouse=!0,this.hammer=null,Object.assign(this,t),this.hammer||(this.hammer=new s(document.body,{prevent_default:!0,drag_max_touches:0,hold:!1})),this.keyActions||(this.keyActions={}),this.handleKeys&&(this.pushCleanup(l(document,"keydown",this.keydown.bind(this)),e),this.pushCleanup(l(document,"keyup",this.keyup.bind(this)),e)),"ontouchstart"in document?(this.pushCleanup(l(document,"touchstart",this.touchstart.bind(this)),e),this.pushCleanup(l(document,"touchmove",this.touchmove.bind(this)),e),this.pushCleanup(l(document,"touchend",this.touchend.bind(this)),e)):(this.pushCleanup(l(document,"mousedown",this.mousedown.bind(this)),e),this.pushCleanup(l(document,"mousemove",this.mousemove.bind(this)),e),this.pushCleanup(l(document,"mouseup",this.mouseup.bind(this)),e)),this.mouseAction||(this.mouseAction=new r),this.touchAction||(this.touchAction=new o),this.emulateMouse,this.gameArea&&this.canvasPercentage){var i=this.resize.bind(this);this.pushCleanup(l(window,"resize",i),e),this.pushCleanup(l(window,"orientationchange",i),e)}this.normalizePoint=this.normalizePoint.bind(this),this.insideCanvas=this.insideCanvas.bind(this)}on(t,e){var i=this.hammer,s=this.removeCleanup;i.on(t,e);var n=this.pushCleanup([t,e],function(t){i.off.apply(i,t)});return{remove:function(){s(n),n()}}}insideCanvas(t){return a(t,this.canvas)}mapToKey(t,e){this.keyActions[e]=t}addKeyAction(t,e){var i=new n;return e&&(i.behavior=i.detectInitialPressOnly),this.mapToKey(i,t),i}addArrowKeyActions(){this.addKeyAction(h.UP),this.addKeyAction(h.DOWN),this.addKeyAction(h.LEFT),this.addKeyAction(h.RIGHT)}mouseUp(t){this.mouseup(t)}mouseup(t){this.mouseAction.release(this.normalizePoint(t))}mouseDown(t){this.mousedown(t)}mousedown(t){this.mouseAction.release(null);var e=this.normalizePoint(t);this.mouseAction.insideCanvas=this.insideCanvas(e),this.mouseAction.press(e)}mouseMove(t){this.mousemove(t)}mousemove(t){this.mouseAction.position=this.normalizePoint(t)}touchStart(t){this.touchstart(t)}touchstart(t){this.touchAction.release(null),console.log(t.touches,t);const e=[];for(let i=0;i<t.touches.length;i++)e.push(this.normalizePoint(t.touches[i]));this.touchAction.insideCanvas=e.some(this.insideCanvas),this.touchAction.press(e),this.emulateMouse&&this.mousedown(t.touches[0])}touchEnd(t){this.touchend(t)}touchend(t){const e=[];for(let i=0;i<t.touches.length;i++)e.push(this.normalizePoint(t.touches[i]));this.touchAction.release(e),this.emulateMouse&&this.mouseUp(t.touches[0])}touchMove(t){this.touchmove(t)}touchmove(t){const e=[];for(let i=0;i<t.touches.length;i++)e.push(this.normalizePoint(t.touches[i]));this.touchAction.positions=e,this.touchAction.startPositions&&t.preventDefault(),this.emulateMouse&&this.mousemove(t.touches[0])}getKeyAction(t){return this.keyActions?this.keyActions[t.keyCode]||this.keyActions[String.fromCharCode(t.keyCode)]:null}keyPressed(t){this.keydown(t)}keyDown(t){this.keydown(t)}keydown(t){var e=this.getKeyAction(t);e&&!e.isPressed()&&e.press()}keyReleased(t){this.keyup(t)}keyup(t){var e=this.getKeyAction(t);e&&e.release()}getMouseLoc(t){return this.normalizePoint(t)}normalizePoint(t){if(t){var e=(i=this.canvas,{x:(s=i.getBoundingClientRect()).left,y:s.top});return this.zoomRatio?{x:Math.round((t.clientX-e.x)/this.zoomRatio),y:Math.round((t.clientY-e.y)/this.zoomRatio)}:{x:Math.round(t.clientX-e.x),y:Math.round(t.clientY-e.y)}}var i,s}resize(){if(this.gameArea&&this.canvasPercentage&&this.canvas){var t=this.canvas.width,e=this.canvas.height,i=u(document.body),s=window.innerWidth-i.w,n=window.innerHeight-i.h,o=t/e,r="",a="";s/n>o?(r=(s=n*o)+"px",a=n+"px"):(r=s+"px",a=Math.round(s/o)+"px"),this.zoomRatio=s/t*this.canvasPercentage,this.gameArea.style.width=r,this.gameArea.style.height=a;var h=Math.floor(100*this.canvasPercentage)+"%";this.canvas.style.width=h,this.canvas.style.height=h,this.canvas.style.display="block",this.canvas.style.marginLeft="auto",this.canvas.style.marginRight="auto"}}pushCleanup(t,e){}}},function(t,e,i){const s=i(2);t.exports=class extends s{constructor(t={}){super(t),this.startPositions=null,this.endPositions=null,this.positions=null,this.insideCanvas=null,Object.assign(this,t)}press(t){this.startPositions=t,this.positions=t,super.press(t)}release(t){this.endPositions=t,super.release(t)}}},function(t,e,i){const s=i(2);t.exports=class extends s{constructor(t={}){super(t),this.startPosition=null,this.endPosition=null,this.position=null,this.insideCanvas=null,Object.assign(this,t)}press(t){this.startPosition=t,this.position=t,super.press(t)}release(t){this.endPosition=t||this.position,super.release(t)}}},function(t,e){t.exports=function(t,e){return!(t.x<0||t.x>e.width||t.y<0||t.y>e.height)}},function(t,e){t.exports={CANCEL:3,HELP:6,BACK_SPACE:8,TAB:9,CLEAR:12,RETURN:13,ENTER:14,SHIFT:16,CONTROL:17,ALT:18,PAUSE:19,CAPS_LOCK:20,ESCAPE:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,PRINTSCREEN:44,INSERT:45,DELETE:46,NUM0:48,NUM1:49,NUM2:50,NUM3:51,NUM4:52,NUM5:53,NUM6:54,NUM7:55,NUM8:56,NUM9:57,SEMICOLON:59,EQUALS:61,A:65,B:66,C:67,D:68,E:69,F:70,G:71,H:72,I:73,J:74,K:75,L:76,M:77,N:78,O:79,P:80,Q:81,R:82,S:83,T:84,U:85,V:86,W:87,X:88,Y:89,Z:90,CONTEXT_MENU:93,NUMPAD0:96,NUMPAD1:97,NUMPAD2:98,NUMPAD3:99,NUMPAD4:100,NUMPAD5:101,NUMPAD6:102,NUMPAD7:103,NUMPAD8:104,NUMPAD9:105,MULTIPLY:106,ADD:107,SEPARATOR:108,SUBTRACT:109,DECIMAL:110,DIVIDE:111,F1:112,F2:113,F3:114,F4:115,F5:116,F6:117,F7:118,F8:119,F9:120,F10:121,F11:122,F12:123,F13:124,F14:125,F15:126,F16:127,F17:128,F18:129,F19:130,F20:131,F21:132,F22:133,F23:134,F24:135,NUM_LOCK:144,SCROLL_LOCK:145,UP_DPAD:175,DOWN_DPAD:176,LEFT_DPAD:177,RIGHT_DPAD:178,COMMA:188,PERIOD:190,SLASH:191,BACK_QUOTE:192,OPEN_BRACKET:219,BACK_SLASH:220,CLOSE_BRACKET:221,QUOTE:222,META:224}},function(t,e,i){"use strict";const s=i(16),n=i(18),o=i(19);var r={};function a(t,e){var i=e;return t&&(i=[t,e].join("/")),i.replace(/\/{2,}/g,"/")}function h(t){var e=document.createElement("canvas");e.height=t.height,e.width=t.width;var i=e.getContext("2d");return i.translate(e.width,0),i.scale(-1,1),i.drawImage(t,0,0),e.toDataURL()}function l(t){var e=document.createElement("canvas");e.height=t.height,e.width=t.width;var i=e.getContext("2d");return i.translate(0,e.height),i.scale(1,-1),i.drawImage(t,0,0),e.toDataURL()}class c{constructor(t){var e=this;e.name=t,e.complete=!1,e.img=new Image,e.img.addEventListener("load",function(){e.complete=!0},!1)}load(){this.img.src=this.name}}t.exports=class{constructor(t={}){this.allLoaded=!1,this.imageDir=null,this.soundDir=null,this.resourceList=r,Object.assign(this,t),this.Sound||(s("WebAudio")?this.Sound=o:this.Sound=n)}loadImage(t){let e=!1;Array.isArray(t)||(e=!0,t=[t]);const i=t.map(t=>{const e=a(this.imageDir,t);if(this.resourceList[e])return this.resourceList[e].img;this.allLoaded=!1;const i=new c(e);return i.load(),this.resourceList[e]=i,i.img});return e?i[0]:i}loadSound(t){let e=!1;Array.isArray(t)||(e=!0,t=[t]);const i=t.map(t=>{const e=a(this.soundDir,t);if(this.resourceList[e])return this.resourceList[e];this.allLoaded=!1;const i=new this.Sound(e);return this.resourceList[e]=i,i});return e?i[0]:i}flipImage(t,e,i){this.allLoaded=!1;const s=new c(t);this.resourceList[t]=s;const n=new Image;return n.addEventListener("load",function t(){s.img.src=i(n),n.removeEventListener("load",t)}),n.src=e.src,s.img}flipImageX(t,e){return this.flipImage(t,e,h)}flipImageY(t,e){return this.flipImage(t,e,l)}resourcesReady(){if(this.allLoaded)return!0;for(var t in this.resourceList)if(!this.resourceList[t].complete)return!1;return this.allLoaded=!0,!0}getPercentComplete(){var t=0,e=0;for(var i in this.resourceList)e++,this.resourceList[i].complete&&(t+=1);return 0===e?0:Math.round(t/e*100)}}},function(t,e,i){"use strict";(function(e){i(31);t.exports=function t(i){return"shittySound"==i?!(!t("android")&&!t("ios")||!t("webkit")):"android"==i?parseFloat(navigator.userAgent.split("Android ")[1])||void 0:"ios"!=i&&("webkit"==i?parseFloat(navigator.userAgent.split("WebKit/")[1])||void 0:"WebAudio"==i?!!e.AudioContext:"touch"===i&&"ontouchstart"in document.documentElement)}}).call(this,i(17))},function(t,e){var i;i=function(){return this}();try{i=i||new Function("return this")()}catch(t){"object"==typeof window&&(i=window)}t.exports=i},function(t,e){const i={"audio/mpeg":".mp3","audio/webm":".webm","audio/ogg":".ogg","audio/wav":".wav","audio/aac":".aac","audio/x-m4a":".m4a"};t.exports=class{constructor(t={}){this.name=null,this.complete=!1,this.probably=[],this.maybe=[],Object.assign(this,t),this.formats=i,"string"==typeof t&&this.load(t)}load(t){this.name=t,this.complete=!0}loop(t){}play(t,e){}_initAudio(t,e){}_chooseFormat(){if(!this.probably.length&&!this.maybe.length){var t,e,i=new Audio;for(t in this.formats)"probably"!==(e=i.canPlayType(t))?"maybe"!==e||this.maybe.push(this.formats[t]):this.probably.push(this.formats[t])}return this.probably.length?this.probably[0]:this.maybe.length?this.maybe[0]:""}_nextFormat(){return this.probably.length>1?(this.probably.shift(),this.probably[0]):1===this.probably.length&&(this.probably.length=0,this.maybe.length)?this.maybe[0]:this.maybe.length>1?(this.maybe.shift(),this.maybe[0]):(1===this.maybe.length&&(this.maybe.length=0),"")}}},function(t,e,i){const s=i(18),n=i(32),o=i(16);var r=null;if(o("WebAudio")&&(r=new window.AudioContext),o("shittySound")){document.addEventListener("touchstart",function t(){const e=r.createBufferSource();e.buffer=r.createBuffer(1,1,22050),e.connect(r.destination),e.start(0),document.removeEventListener("touchstart",t)})}t.exports=class extends s{constructor(t={}){super(t),this.audioContext=r,this.buffer=null,Object.assign(this,t)}load(t){var e=this;this.name=t;var i=n(t);i===t&&(t=i+this._chooseFormat());var s=new XMLHttpRequest;s.open("GET",t,!0),s.responseType="arraybuffer",s.onload=function(t){e.audioContext.decodeAudioData(t.target.response,function(t){e.buffer=t,e.complete=!0},function(t){e._nextFormat()?e.load(e.name):e.complete=!0})},s.send()}loop(t){this.buffer&&this._initAudio(t,!0).start(0)}play(t,e){this.buffer&&(e=e||0,this._initAudio(t,!1).start(e))}_initAudio(t,e){e="boolean"==typeof e&&e;var i=this.audioContext.createBufferSource();if(i.buffer=this.buffer,i.loop=e,t){var s=this.audioContext.createGain();s.gain.value=t,i.connect(s),s.connect(this.audioContext.destination)}else i.connect(this.audioContext.destination);return i}}},function(t,e,i){const s=i(21);class n{constructor(t={}){this.currFrameIndex=0,this.animTime=0,this.totalDuration=0,this.height=64,this.width=64,this.image=null,this.offsetX=0,this.offsetY=0,this.frames=void 0,Object.assign(this,t),this.start()}createFromSheet(t,e,i,s,o,r){var a=new n({image:i,height:o,width:s}),h=Array.isArray(e),l=1;r||(r=0);for(var c=0;c<t;c++)l=h?e[c]:e,a.addFrame(l,c,r);return a}clone(){return new n({image:this.image,frames:this.frames,totalDuration:this.totalDuration})}addFrame(t,e,i){this.frames||(this.frames=[]),this.totalDuration+=t,this.frames.push(new s({endTime:this.totalDuration,image:this.image,imgSlotX:e,imgSlotY:i}))}start(){this.animTime=0,this.currFrameIndex=0}update(t){if(this.frames.length>1)for(this.animTime+=t,this.animTime>=this.totalDuration&&(this.animTime=this.animTime%this.totalDuration,this.currFrameIndex=0);this.animTime>this.frames[this.currFrameIndex].endTime;)this.currFrameIndex++}getCurrentFrame(){return 0===this.frames.length?null:this.frames[this.currFrameIndex]}draw(t,e,i){var s=this.getCurrentFrame();t.drawImage(this.image,s.imgSlotX*this.width+this.offsetX,s.imgSlotY*this.height+this.offsetY,this.width,this.height,e,i,this.width,this.height)}}t.exports=n},function(t,e){t.exports=class{constructor(t={}){this.endTime=0,this.imgSlotX=0,this.imgSlotY=0,this.image=null,Object.assign(this,t)}}},function(t,e){const i=Math.PI/180;t.exports=function(t){return t*i}},function(t,e){const i=180/Math.PI;t.exports=function(t){return t*i}},function(t,e){t.exports=function(t,e){return Math.sqrt((e.x-t.x)*(e.x-t.x)+(e.y-t.y)*(e.y-t.y))}},function(t,e){t.exports=function(t={x:0,y:0},e){return t.x===e.x&&t.y===e.y?0:t.x===e.x?t.y>e.y?0:Math.PI:t.y===e.y?t.x>e.x?1.5*Math.PI:Math.PI/2:t.x<e.x&&t.y>e.y?Math.atan((e.x-t.x)/(t.y-e.y)):t.x<e.x&&t.y<e.y?Math.PI/2+Math.atan((e.y-t.y)/(e.x-t.x)):t.x>e.x&&t.y<e.y?Math.PI+Math.atan((t.x-e.x)/(e.y-t.y)):1.5*Math.PI+Math.atan((t.y-e.y)/(t.x-e.x))}},function(t,e){t.exports=function(t={x:0,y:0},e,i){const s=Math.sin(i),n=Math.cos(i),o={};o.x=e.x-t.x,o.y=e.y-t.y;const r=o.x*n-o.y*s,a=o.x*s+o.y*n;return o.x=r+t.x,o.y=a+t.y,o}},function(t,e){class i{constructor(t={}){this.x=0,this.y=0,this.dx=0,this.dy=0,this.maxSpeed=0,this.name=null,this.collisionRadius=40,Object.assign(this,t)}update(t){this.x+=this.dx*t,this.y+=this.dy*t,this.anim.update(t)}limitSpeed(t){return this.maxSpeed&&Math.abs(t)>this.maxSpeed?t>0?this.maxSpeed:t<0?this.maxSpeed:0:t}getCurrentFrame(){if(this.anim)return this.anim.getCurrentFrame()}draw(t){this.anim&&this.anim.draw(t,this.x,this.y)}clone(){return new i({anim:this.anim.clone()})}}t.exports=i},function(t,e,i){(function(e){const s=i(46);console.log(Box2D,"Box2D",e,window);const n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.b2BodyDef,r=Box2D.Dynamics.b2Body,a=Box2D.Dynamics.b2FixtureDef,h=(Box2D.Dynamics.b2Fixture,Box2D.Dynamics.b2World),l=Box2D.Collision.Shapes.b2PolygonShape,c=Box2D.Collision.Shapes.b2CircleShape;t.exports=class{constructor(t={}){this.intervalRate=60,this.adaptive=!1,this.bodiesMap=null,this.fixturesMap=null,this.jointsMap=null,this.b2World=null,this.gravityX=0,this.gravityY=9.8,this.allowSleep=!0,this.resolveCollisions=!1,this.contactListener=null,this.collisions=null,this.scale=30,this.bodiesMap={},this.fixturesMap={},this.jointsMap={},Object.assign(this,t),this.b2World=new h(new n(this.gravityX,this.gravityY),this.allowSleep),this.intervalRate&&(this.intervalRate=parseInt(this.intervalRate,10)),this.resolveCollisions&&(this.contactListener=new s),this.contactListener&&this.addContactListener(this.contactListener)}update(t){this.contactListener&&this.contactListener.reset&&this.contactListener.reset();var e=Date.now();if(t)this.b2World.Step(t/1e3,10,10),this.b2World.ClearForces();else{var i=this.adaptive?(e-this.lastTimestamp)/1e3:1/this.intervalRate;this.b2World.Step(i,10,10),this.b2World.ClearForces()}return Date.now()-e}getState(){for(var t={},e=this.b2World.GetBodyList();e;e=e.m_next)e.IsActive()&&void 0!==e.GetUserData()&&null!==e.GetUserData()&&(t[e.GetUserData()]={x:e.GetPosition().x,y:e.GetPosition().y,angle:e.GetAngle(),center:{x:e.GetWorldCenter().x,y:e.GetWorldCenter().y},linearVelocity:e.m_linearVelocity,angularVelocity:e.m_angularVelocity},this.contactListener&&this.contactListener.collisions&&(t[e.GetUserData()].collisions=this.contactListener.collisions[e.GetUserData()]||null));return t}updateExternalState(t){var e=this.getState();for(var i in e){var s=t[i];s&&!s.staticBody&&s.update(e[i])}}setBodies(t){for(var e in t){var i=t[e];this.addBody(i)}this.ready=!0}addBody(t){t.alreadyScaled||(t.scaleShape(1/this.scale),t.scale=this.scale);var e,i,s,h,u,d=new o,p=new a;p.restitution=t.restitution,p.density=t.density,p.friction=t.friction,null!=t.maskBits&&(p.filter.maskBits=t.maskBits),null!=t.categoryBits&&(p.filter.categoryBits=t.categoryBits),null!=t.groupIndex&&(p.filter.groupIndex=t.groupIndex),t.staticBody?d.type=r.b2_staticBody:d.type=r.b2_dynamicBody,d.position.x=t.x,d.position.y=t.y,d.userData=t.id,d.angle=t.angle,d.linearDamping=t.linearDamping,d.angularDamping=t.angularDamping;var y=this.b2World.CreateBody(d);if(t.radius)p.shape=new c(t.radius),y.CreateFixture(p);else if(t.points){for(s=[],e=0;e<t.points.length;e++)(h=new n).Set(t.points[e].x,t.points[e].y),s[e]=h;p.shape=new l,p.shape.SetAsArray(s,s.length),y.CreateFixture(p)}else if(t.polys)for(i=0;i<t.polys.length;i++){for(s=t.polys[i],u=[],e=0;e<s.length;e++)(h=new n).Set(s[e].x,s[e].y),u[e]=h;p.shape=new l,p.shape.SetAsArray(u,u.length),y.CreateFixture(p)}else p.shape=new l,p.shape.SetAsBox(t.halfWidth,t.halfHeight),y.CreateFixture(p);this.bodiesMap[t.id]=y}setPosition(t,e,i){this.bodiesMap[t].SetPosition(new n(e,i))}setAngle(t,e){var i=this.bodiesMap[t];console.log("set angle",i.setAngle,i),i.setAngle(e)}setLinearVelocity(t,e,i){this.bodiesMap[t].SetLinearVelocity(new n(e,i))}setAngularVelocity(t,e){this.bodiesMap[t].SetAngularVelocity(e)}applyImpulseDegrees(t,e,i){var s=this.bodiesMap[t];s.ApplyImpulse(new n(Math.sin(e*(Math.PI/180))*i,Math.cos(e*(Math.PI/180))*i*-1),s.GetWorldCenter())}applyForceDegrees(t,e,i){var s=this.bodiesMap[t];s.ApplyForce(new n(Math.sin(e*(Math.PI/180))*i,Math.cos(e*(Math.PI/180))*i*-1),s.GetWorldCenter())}applyImpulse(t,e,i){var s=this.bodiesMap[t];s.ApplyImpulse(new n(Math.sin(e)*i,Math.cos(e)*i*-1),s.GetWorldCenter())}applyForce(t,e,i){var s=this.bodiesMap[t];s.ApplyForce(new n(Math.sin(e)*i,Math.cos(e)*i*-1),s.GetWorldCenter())}applyTorque(t,e){this.bodiesMap[t].ApplyTorque(e)}setGravity(t){this.b2World.SetGravity(new n(t.x,t.y))}removeBody(t){this.bodiesMap[t]&&(this.fixturesMap[t]&&this.bodiesMap[t].DestroyFixture(this.fixturesMap[t]),this.b2World.DestroyBody(this.bodiesMap[t]),delete this.bodiesMap[t])}wakeUpBody(t){this.bodiesMap[t]&&this.bodiesMap[t].SetAwake(!0)}addContactListener(t){var e=new Box2D.Dynamics.b2ContactListener;t.beginContact&&(e.BeginContact=function(e){t.beginContact(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,e)}),t.endContact&&(e.EndContact=function(e){t.endContact(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,e)}),t.preSolve&&(e.PreSolve=function(e,i){t.preSolve(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,i,e)}),t.postSolve&&(e.PostSolve=function(e,i){t.postSolve(e.m_fixtureA.m_body.m_userData,e.m_fixtureB.m_body.m_userData,i,e)}),this.b2World.SetContactListener(e)}removeJoint(t){this.jointsMap[t]&&(this.b2World.DestroyJoint(this.jointsMap[t]),delete this.jointsMap[t])}addJoint(t){if(t&&t.id&&!this.jointsMap[t.id]){!t.alreadyScaled&&t.scaleJointLocation&&(t.scaleJointLocation(1/this.scale),t.scale=this.scale);var e=t.createB2Joint(this);e&&(this.jointsMap[t.id]=e)}}}}).call(this,i(17))},function(t,e){t.exports=["#00DD00","#DD0000","#EEEEEE","#A0522D","#0000DD","#FF8C00"]},function(t,e,i){var s;
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
/*! Hammer.JS - v2.0.7 - 2016-04-22
 * http://hammerjs.github.io/
 *
 * Copyright (c) 2016 Jorik Tangelder;
 * Licensed under the MIT license */
!function(n,o,r,a){"use strict";var h,l=["","webkit","Moz","MS","ms","o"],c=o.createElement("div"),u="function",d=Math.round,p=Math.abs,y=Date.now;function f(t,e,i){return setTimeout(T(t,i),e)}function m(t,e,i){return!!Array.isArray(t)&&(g(t,i[e],i),!0)}function g(t,e,i){var s;if(t)if(t.forEach)t.forEach(e,i);else if(t.length!==a)for(s=0;s<t.length;)e.call(i,t[s],s,t),s++;else for(s in t)t.hasOwnProperty(s)&&e.call(i,t[s],s,t)}function v(t,e,i){var s="DEPRECATED METHOD: "+e+"\n"+i+" AT \n";return function(){var e=new Error("get-stack-trace"),i=e&&e.stack?e.stack.replace(/^[^\(]+?[\n$]/gm,"").replace(/^\s+at\s+/gm,"").replace(/^Object.<anonymous>\s*\(/gm,"{anonymous}()@"):"Unknown Stack Trace",o=n.console&&(n.console.warn||n.console.log);return o&&o.call(n.console,s,i),t.apply(this,arguments)}}h="function"!=typeof Object.assign?function(t){if(t===a||null===t)throw new TypeError("Cannot convert undefined or null to object");for(var e=Object(t),i=1;i<arguments.length;i++){var s=arguments[i];if(s!==a&&null!==s)for(var n in s)s.hasOwnProperty(n)&&(e[n]=s[n])}return e}:Object.assign;var x=v(function(t,e,i){for(var s=Object.keys(e),n=0;n<s.length;)(!i||i&&t[s[n]]===a)&&(t[s[n]]=e[s[n]]),n++;return t},"extend","Use `assign`."),b=v(function(t,e){return x(t,e,!0)},"merge","Use `assign`.");function A(t,e,i){var s,n=e.prototype;(s=t.prototype=Object.create(n)).constructor=t,s._super=n,i&&h(s,i)}function T(t,e){return function(){return t.apply(e,arguments)}}function w(t,e){return typeof t==u?t.apply(e&&e[0]||a,e):t}function E(t,e){return t===a?e:t}function S(t,e,i){g(D(e),function(e){t.addEventListener(e,i,!1)})}function P(t,e,i){g(D(e),function(e){t.removeEventListener(e,i,!1)})}function M(t,e){for(;t;){if(t==e)return!0;t=t.parentNode}return!1}function I(t,e){return t.indexOf(e)>-1}function D(t){return t.trim().split(/\s+/g)}function C(t,e,i){if(t.indexOf&&!i)return t.indexOf(e);for(var s=0;s<t.length;){if(i&&t[s][i]==e||!i&&t[s]===e)return s;s++}return-1}function _(t){return Array.prototype.slice.call(t,0)}function R(t,e,i){for(var s=[],n=[],o=0;o<t.length;){var r=e?t[o][e]:t[o];C(n,r)<0&&s.push(t[o]),n[o]=r,o++}return i&&(s=e?s.sort(function(t,i){return t[e]>i[e]}):s.sort()),s}function L(t,e){for(var i,s,n=e[0].toUpperCase()+e.slice(1),o=0;o<l.length;){if((s=(i=l[o])?i+n:e)in t)return s;o++}return a}var W=1;function O(t){var e=t.ownerDocument||t;return e.defaultView||e.parentWindow||n}var F="ontouchstart"in n,B=L(n,"PointerEvent")!==a,k=F&&/mobile|tablet|ip(ad|hone|od)|android/i.test(navigator.userAgent),j=25,N=1,U=2,z=4,H=8,G=1,Y=2,X=4,J=8,K=16,V=Y|X,q=J|K,Q=V|q,Z=["x","y"],$=["clientX","clientY"];function tt(t,e){var i=this;this.manager=t,this.callback=e,this.element=t.element,this.target=t.options.inputTarget,this.domHandler=function(e){w(t.options.enable,[t])&&i.handler(e)},this.init()}function et(t,e,i){var s=i.pointers.length,n=i.changedPointers.length,o=e&N&&s-n==0,r=e&(z|H)&&s-n==0;i.isFirst=!!o,i.isFinal=!!r,o&&(t.session={}),i.eventType=e,function(t,e){var i=t.session,s=e.pointers,n=s.length;i.firstInput||(i.firstInput=it(e));n>1&&!i.firstMultiple?i.firstMultiple=it(e):1===n&&(i.firstMultiple=!1);var o=i.firstInput,r=i.firstMultiple,h=r?r.center:o.center,l=e.center=st(s);e.timeStamp=y(),e.deltaTime=e.timeStamp-o.timeStamp,e.angle=at(h,l),e.distance=rt(h,l),function(t,e){var i=e.center,s=t.offsetDelta||{},n=t.prevDelta||{},o=t.prevInput||{};e.eventType!==N&&o.eventType!==z||(n=t.prevDelta={x:o.deltaX||0,y:o.deltaY||0},s=t.offsetDelta={x:i.x,y:i.y});e.deltaX=n.x+(i.x-s.x),e.deltaY=n.y+(i.y-s.y)}(i,e),e.offsetDirection=ot(e.deltaX,e.deltaY);var c=nt(e.deltaTime,e.deltaX,e.deltaY);e.overallVelocityX=c.x,e.overallVelocityY=c.y,e.overallVelocity=p(c.x)>p(c.y)?c.x:c.y,e.scale=r?(u=r.pointers,d=s,rt(d[0],d[1],$)/rt(u[0],u[1],$)):1,e.rotation=r?function(t,e){return at(e[1],e[0],$)+at(t[1],t[0],$)}(r.pointers,s):0,e.maxPointers=i.prevInput?e.pointers.length>i.prevInput.maxPointers?e.pointers.length:i.prevInput.maxPointers:e.pointers.length,function(t,e){var i,s,n,o,r=t.lastInterval||e,h=e.timeStamp-r.timeStamp;if(e.eventType!=H&&(h>j||r.velocity===a)){var l=e.deltaX-r.deltaX,c=e.deltaY-r.deltaY,u=nt(h,l,c);s=u.x,n=u.y,i=p(u.x)>p(u.y)?u.x:u.y,o=ot(l,c),t.lastInterval=e}else i=r.velocity,s=r.velocityX,n=r.velocityY,o=r.direction;e.velocity=i,e.velocityX=s,e.velocityY=n,e.direction=o}(i,e);var u,d;var f=t.element;M(e.srcEvent.target,f)&&(f=e.srcEvent.target);e.target=f}(t,i),t.emit("hammer.input",i),t.recognize(i),t.session.prevInput=i}function it(t){for(var e=[],i=0;i<t.pointers.length;)e[i]={clientX:d(t.pointers[i].clientX),clientY:d(t.pointers[i].clientY)},i++;return{timeStamp:y(),pointers:e,center:st(e),deltaX:t.deltaX,deltaY:t.deltaY}}function st(t){var e=t.length;if(1===e)return{x:d(t[0].clientX),y:d(t[0].clientY)};for(var i=0,s=0,n=0;n<e;)i+=t[n].clientX,s+=t[n].clientY,n++;return{x:d(i/e),y:d(s/e)}}function nt(t,e,i){return{x:e/t||0,y:i/t||0}}function ot(t,e){return t===e?G:p(t)>=p(e)?t<0?Y:X:e<0?J:K}function rt(t,e,i){i||(i=Z);var s=e[i[0]]-t[i[0]],n=e[i[1]]-t[i[1]];return Math.sqrt(s*s+n*n)}function at(t,e,i){i||(i=Z);var s=e[i[0]]-t[i[0]],n=e[i[1]]-t[i[1]];return 180*Math.atan2(n,s)/Math.PI}tt.prototype={handler:function(){},init:function(){this.evEl&&S(this.element,this.evEl,this.domHandler),this.evTarget&&S(this.target,this.evTarget,this.domHandler),this.evWin&&S(O(this.element),this.evWin,this.domHandler)},destroy:function(){this.evEl&&P(this.element,this.evEl,this.domHandler),this.evTarget&&P(this.target,this.evTarget,this.domHandler),this.evWin&&P(O(this.element),this.evWin,this.domHandler)}};var ht={mousedown:N,mousemove:U,mouseup:z},lt="mousedown",ct="mousemove mouseup";function ut(){this.evEl=lt,this.evWin=ct,this.pressed=!1,tt.apply(this,arguments)}A(ut,tt,{handler:function(t){var e=ht[t.type];e&N&&0===t.button&&(this.pressed=!0),e&U&&1!==t.which&&(e=z),this.pressed&&(e&z&&(this.pressed=!1),this.callback(this.manager,e,{pointers:[t],changedPointers:[t],pointerType:"mouse",srcEvent:t}))}});var dt={pointerdown:N,pointermove:U,pointerup:z,pointercancel:H,pointerout:H},pt={2:"touch",3:"pen",4:"mouse",5:"kinect"},yt="pointerdown",ft="pointermove pointerup pointercancel";function mt(){this.evEl=yt,this.evWin=ft,tt.apply(this,arguments),this.store=this.manager.session.pointerEvents=[]}n.MSPointerEvent&&!n.PointerEvent&&(yt="MSPointerDown",ft="MSPointerMove MSPointerUp MSPointerCancel"),A(mt,tt,{handler:function(t){var e=this.store,i=!1,s=t.type.toLowerCase().replace("ms",""),n=dt[s],o=pt[t.pointerType]||t.pointerType,r="touch"==o,a=C(e,t.pointerId,"pointerId");n&N&&(0===t.button||r)?a<0&&(e.push(t),a=e.length-1):n&(z|H)&&(i=!0),a<0||(e[a]=t,this.callback(this.manager,n,{pointers:e,changedPointers:[t],pointerType:o,srcEvent:t}),i&&e.splice(a,1))}});var gt={touchstart:N,touchmove:U,touchend:z,touchcancel:H},vt="touchstart",xt="touchstart touchmove touchend touchcancel";function bt(){this.evTarget=vt,this.evWin=xt,this.started=!1,tt.apply(this,arguments)}A(bt,tt,{handler:function(t){var e=gt[t.type];if(e===N&&(this.started=!0),this.started){var i=function(t,e){var i=_(t.touches),s=_(t.changedTouches);e&(z|H)&&(i=R(i.concat(s),"identifier",!0));return[i,s]}.call(this,t,e);e&(z|H)&&i[0].length-i[1].length==0&&(this.started=!1),this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}}});var At={touchstart:N,touchmove:U,touchend:z,touchcancel:H},Tt="touchstart touchmove touchend touchcancel";function wt(){this.evTarget=Tt,this.targetIds={},tt.apply(this,arguments)}A(wt,tt,{handler:function(t){var e=At[t.type],i=function(t,e){var i=_(t.touches),s=this.targetIds;if(e&(N|U)&&1===i.length)return s[i[0].identifier]=!0,[i,i];var n,o,r=_(t.changedTouches),a=[],h=this.target;if(o=i.filter(function(t){return M(t.target,h)}),e===N)for(n=0;n<o.length;)s[o[n].identifier]=!0,n++;n=0;for(;n<r.length;)s[r[n].identifier]&&a.push(r[n]),e&(z|H)&&delete s[r[n].identifier],n++;if(!a.length)return;return[R(o.concat(a),"identifier",!0),a]}.call(this,t,e);i&&this.callback(this.manager,e,{pointers:i[0],changedPointers:i[1],pointerType:"touch",srcEvent:t})}});var Et=2500,St=25;function Pt(){tt.apply(this,arguments);var t=T(this.handler,this);this.touch=new wt(this.manager,t),this.mouse=new ut(this.manager,t),this.primaryTouch=null,this.lastTouches=[]}function Mt(t){var e=t.changedPointers[0];if(e.identifier===this.primaryTouch){var i={x:e.clientX,y:e.clientY};this.lastTouches.push(i);var s=this.lastTouches;setTimeout(function(){var t=s.indexOf(i);t>-1&&s.splice(t,1)},Et)}}A(Pt,tt,{handler:function(t,e,i){var s="touch"==i.pointerType,n="mouse"==i.pointerType;if(!(n&&i.sourceCapabilities&&i.sourceCapabilities.firesTouchEvents)){if(s)(function(t,e){t&N?(this.primaryTouch=e.changedPointers[0].identifier,Mt.call(this,e)):t&(z|H)&&Mt.call(this,e)}).call(this,e,i);else if(n&&function(t){for(var e=t.srcEvent.clientX,i=t.srcEvent.clientY,s=0;s<this.lastTouches.length;s++){var n=this.lastTouches[s],o=Math.abs(e-n.x),r=Math.abs(i-n.y);if(o<=St&&r<=St)return!0}return!1}.call(this,i))return;this.callback(t,e,i)}},destroy:function(){this.touch.destroy(),this.mouse.destroy()}});var It=L(c.style,"touchAction"),Dt=It!==a,Ct="auto",_t="manipulation",Rt="none",Lt="pan-x",Wt="pan-y",Ot=function(){if(!Dt)return!1;var t={},e=n.CSS&&n.CSS.supports;return["auto","manipulation","pan-y","pan-x","pan-x pan-y","none"].forEach(function(i){t[i]=!e||n.CSS.supports("touch-action",i)}),t}();function Ft(t,e){this.manager=t,this.set(e)}Ft.prototype={set:function(t){"compute"==t&&(t=this.compute()),Dt&&this.manager.element.style&&Ot[t]&&(this.manager.element.style[It]=t),this.actions=t.toLowerCase().trim()},update:function(){this.set(this.manager.options.touchAction)},compute:function(){var t=[];return g(this.manager.recognizers,function(e){w(e.options.enable,[e])&&(t=t.concat(e.getTouchAction()))}),function(t){if(I(t,Rt))return Rt;var e=I(t,Lt),i=I(t,Wt);if(e&&i)return Rt;if(e||i)return e?Lt:Wt;if(I(t,_t))return _t;return Ct}(t.join(" "))},preventDefaults:function(t){var e=t.srcEvent,i=t.offsetDirection;if(this.manager.session.prevented)e.preventDefault();else{var s=this.actions,n=I(s,Rt)&&!Ot[Rt],o=I(s,Wt)&&!Ot[Wt],r=I(s,Lt)&&!Ot[Lt];if(n){var a=1===t.pointers.length,h=t.distance<2,l=t.deltaTime<250;if(a&&h&&l)return}if(!r||!o)return n||o&&i&V||r&&i&q?this.preventSrc(e):void 0}},preventSrc:function(t){this.manager.session.prevented=!0,t.preventDefault()}};var Bt=1,kt=2,jt=4,Nt=8,Ut=Nt,zt=16;function Ht(t){this.options=h({},this.defaults,t||{}),this.id=W++,this.manager=null,this.options.enable=E(this.options.enable,!0),this.state=Bt,this.simultaneous={},this.requireFail=[]}function Gt(t){return t&zt?"cancel":t&Nt?"end":t&jt?"move":t&kt?"start":""}function Yt(t){return t==K?"down":t==J?"up":t==Y?"left":t==X?"right":""}function Xt(t,e){var i=e.manager;return i?i.get(t):t}function Jt(){Ht.apply(this,arguments)}function Kt(){Jt.apply(this,arguments),this.pX=null,this.pY=null}function Vt(){Jt.apply(this,arguments)}function qt(){Ht.apply(this,arguments),this._timer=null,this._input=null}function Qt(){Jt.apply(this,arguments)}function Zt(){Jt.apply(this,arguments)}function $t(){Ht.apply(this,arguments),this.pTime=!1,this.pCenter=!1,this._timer=null,this._input=null,this.count=0}function te(t,e){return(e=e||{}).recognizers=E(e.recognizers,te.defaults.preset),new ee(t,e)}Ht.prototype={defaults:{},set:function(t){return h(this.options,t),this.manager&&this.manager.touchAction.update(),this},recognizeWith:function(t){if(m(t,"recognizeWith",this))return this;var e=this.simultaneous;return e[(t=Xt(t,this)).id]||(e[t.id]=t,t.recognizeWith(this)),this},dropRecognizeWith:function(t){return m(t,"dropRecognizeWith",this)?this:(t=Xt(t,this),delete this.simultaneous[t.id],this)},requireFailure:function(t){if(m(t,"requireFailure",this))return this;var e=this.requireFail;return-1===C(e,t=Xt(t,this))&&(e.push(t),t.requireFailure(this)),this},dropRequireFailure:function(t){if(m(t,"dropRequireFailure",this))return this;t=Xt(t,this);var e=C(this.requireFail,t);return e>-1&&this.requireFail.splice(e,1),this},hasRequireFailures:function(){return this.requireFail.length>0},canRecognizeWith:function(t){return!!this.simultaneous[t.id]},emit:function(t){var e=this,i=this.state;function s(i){e.manager.emit(i,t)}i<Nt&&s(e.options.event+Gt(i)),s(e.options.event),t.additionalEvent&&s(t.additionalEvent),i>=Nt&&s(e.options.event+Gt(i))},tryEmit:function(t){if(this.canEmit())return this.emit(t);this.state=32},canEmit:function(){for(var t=0;t<this.requireFail.length;){if(!(this.requireFail[t].state&(32|Bt)))return!1;t++}return!0},recognize:function(t){var e=h({},t);if(!w(this.options.enable,[this,e]))return this.reset(),void(this.state=32);this.state&(Ut|zt|32)&&(this.state=Bt),this.state=this.process(e),this.state&(kt|jt|Nt|zt)&&this.tryEmit(e)},process:function(t){},getTouchAction:function(){},reset:function(){}},A(Jt,Ht,{defaults:{pointers:1},attrTest:function(t){var e=this.options.pointers;return 0===e||t.pointers.length===e},process:function(t){var e=this.state,i=t.eventType,s=e&(kt|jt),n=this.attrTest(t);return s&&(i&H||!n)?e|zt:s||n?i&z?e|Nt:e&kt?e|jt:kt:32}}),A(Kt,Jt,{defaults:{event:"pan",threshold:10,pointers:1,direction:Q},getTouchAction:function(){var t=this.options.direction,e=[];return t&V&&e.push(Wt),t&q&&e.push(Lt),e},directionTest:function(t){var e=this.options,i=!0,s=t.distance,n=t.direction,o=t.deltaX,r=t.deltaY;return n&e.direction||(e.direction&V?(n=0===o?G:o<0?Y:X,i=o!=this.pX,s=Math.abs(t.deltaX)):(n=0===r?G:r<0?J:K,i=r!=this.pY,s=Math.abs(t.deltaY))),t.direction=n,i&&s>e.threshold&&n&e.direction},attrTest:function(t){return Jt.prototype.attrTest.call(this,t)&&(this.state&kt||!(this.state&kt)&&this.directionTest(t))},emit:function(t){this.pX=t.deltaX,this.pY=t.deltaY;var e=Yt(t.direction);e&&(t.additionalEvent=this.options.event+e),this._super.emit.call(this,t)}}),A(Vt,Jt,{defaults:{event:"pinch",threshold:0,pointers:2},getTouchAction:function(){return[Rt]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.scale-1)>this.options.threshold||this.state&kt)},emit:function(t){if(1!==t.scale){var e=t.scale<1?"in":"out";t.additionalEvent=this.options.event+e}this._super.emit.call(this,t)}}),A(qt,Ht,{defaults:{event:"press",pointers:1,time:251,threshold:9},getTouchAction:function(){return[Ct]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,s=t.distance<e.threshold,n=t.deltaTime>e.time;if(this._input=t,!s||!i||t.eventType&(z|H)&&!n)this.reset();else if(t.eventType&N)this.reset(),this._timer=f(function(){this.state=Ut,this.tryEmit()},e.time,this);else if(t.eventType&z)return Ut;return 32},reset:function(){clearTimeout(this._timer)},emit:function(t){this.state===Ut&&(t&&t.eventType&z?this.manager.emit(this.options.event+"up",t):(this._input.timeStamp=y(),this.manager.emit(this.options.event,this._input)))}}),A(Qt,Jt,{defaults:{event:"rotate",threshold:0,pointers:2},getTouchAction:function(){return[Rt]},attrTest:function(t){return this._super.attrTest.call(this,t)&&(Math.abs(t.rotation)>this.options.threshold||this.state&kt)}}),A(Zt,Jt,{defaults:{event:"swipe",threshold:10,velocity:.3,direction:V|q,pointers:1},getTouchAction:function(){return Kt.prototype.getTouchAction.call(this)},attrTest:function(t){var e,i=this.options.direction;return i&(V|q)?e=t.overallVelocity:i&V?e=t.overallVelocityX:i&q&&(e=t.overallVelocityY),this._super.attrTest.call(this,t)&&i&t.offsetDirection&&t.distance>this.options.threshold&&t.maxPointers==this.options.pointers&&p(e)>this.options.velocity&&t.eventType&z},emit:function(t){var e=Yt(t.offsetDirection);e&&this.manager.emit(this.options.event+e,t),this.manager.emit(this.options.event,t)}}),A($t,Ht,{defaults:{event:"tap",pointers:1,taps:1,interval:300,time:250,threshold:9,posThreshold:10},getTouchAction:function(){return[_t]},process:function(t){var e=this.options,i=t.pointers.length===e.pointers,s=t.distance<e.threshold,n=t.deltaTime<e.time;if(this.reset(),t.eventType&N&&0===this.count)return this.failTimeout();if(s&&n&&i){if(t.eventType!=z)return this.failTimeout();var o=!this.pTime||t.timeStamp-this.pTime<e.interval,r=!this.pCenter||rt(this.pCenter,t.center)<e.posThreshold;if(this.pTime=t.timeStamp,this.pCenter=t.center,r&&o?this.count+=1:this.count=1,this._input=t,0===this.count%e.taps)return this.hasRequireFailures()?(this._timer=f(function(){this.state=Ut,this.tryEmit()},e.interval,this),kt):Ut}return 32},failTimeout:function(){return this._timer=f(function(){this.state=32},this.options.interval,this),32},reset:function(){clearTimeout(this._timer)},emit:function(){this.state==Ut&&(this._input.tapCount=this.count,this.manager.emit(this.options.event,this._input))}}),te.VERSION="2.0.7",te.defaults={domEvents:!1,touchAction:"compute",enable:!0,inputTarget:null,inputClass:null,preset:[[Qt,{enable:!1}],[Vt,{enable:!1},["rotate"]],[Zt,{direction:V}],[Kt,{direction:V},["swipe"]],[$t],[$t,{event:"doubletap",taps:2},["tap"]],[qt]],cssProps:{userSelect:"none",touchSelect:"none",touchCallout:"none",contentZooming:"none",userDrag:"none",tapHighlightColor:"rgba(0,0,0,0)"}};function ee(t,e){var i;this.options=h({},te.defaults,e||{}),this.options.inputTarget=this.options.inputTarget||t,this.handlers={},this.session={},this.recognizers=[],this.oldCssProps={},this.element=t,this.input=new((i=this).options.inputClass||(B?mt:k?wt:F?Pt:ut))(i,et),this.touchAction=new Ft(this,this.options.touchAction),ie(this,!0),g(this.options.recognizers,function(t){var e=this.add(new t[0](t[1]));t[2]&&e.recognizeWith(t[2]),t[3]&&e.requireFailure(t[3])},this)}function ie(t,e){var i,s=t.element;s.style&&(g(t.options.cssProps,function(n,o){i=L(s.style,o),e?(t.oldCssProps[i]=s.style[i],s.style[i]=n):s.style[i]=t.oldCssProps[i]||""}),e||(t.oldCssProps={}))}ee.prototype={set:function(t){return h(this.options,t),t.touchAction&&this.touchAction.update(),t.inputTarget&&(this.input.destroy(),this.input.target=t.inputTarget,this.input.init()),this},stop:function(t){this.session.stopped=t?2:1},recognize:function(t){var e=this.session;if(!e.stopped){var i;this.touchAction.preventDefaults(t);var s=this.recognizers,n=e.curRecognizer;(!n||n&&n.state&Ut)&&(n=e.curRecognizer=null);for(var o=0;o<s.length;)i=s[o],2===e.stopped||n&&i!=n&&!i.canRecognizeWith(n)?i.reset():i.recognize(t),!n&&i.state&(kt|jt|Nt)&&(n=e.curRecognizer=i),o++}},get:function(t){if(t instanceof Ht)return t;for(var e=this.recognizers,i=0;i<e.length;i++)if(e[i].options.event==t)return e[i];return null},add:function(t){if(m(t,"add",this))return this;var e=this.get(t.options.event);return e&&this.remove(e),this.recognizers.push(t),t.manager=this,this.touchAction.update(),t},remove:function(t){if(m(t,"remove",this))return this;if(t=this.get(t)){var e=this.recognizers,i=C(e,t);-1!==i&&(e.splice(i,1),this.touchAction.update())}return this},on:function(t,e){if(t!==a&&e!==a){var i=this.handlers;return g(D(t),function(t){i[t]=i[t]||[],i[t].push(e)}),this}},off:function(t,e){if(t!==a){var i=this.handlers;return g(D(t),function(t){e?i[t]&&i[t].splice(C(i[t],e),1):delete i[t]}),this}},emit:function(t,e){this.options.domEvents&&function(t,e){var i=o.createEvent("Event");i.initEvent(t,!0,!0),i.gesture=e,e.target.dispatchEvent(i)}(t,e);var i=this.handlers[t]&&this.handlers[t].slice();if(i&&i.length){e.type=t,e.preventDefault=function(){e.srcEvent.preventDefault()};for(var s=0;s<i.length;)i[s](e),s++}},destroy:function(){this.element&&ie(this,!1),this.handlers={},this.session={},this.input.destroy(),this.element=null}},h(te,{INPUT_START:N,INPUT_MOVE:U,INPUT_END:z,INPUT_CANCEL:H,STATE_POSSIBLE:Bt,STATE_BEGAN:kt,STATE_CHANGED:jt,STATE_ENDED:Nt,STATE_RECOGNIZED:Ut,STATE_CANCELLED:zt,STATE_FAILED:32,DIRECTION_NONE:G,DIRECTION_LEFT:Y,DIRECTION_RIGHT:X,DIRECTION_UP:J,DIRECTION_DOWN:K,DIRECTION_HORIZONTAL:V,DIRECTION_VERTICAL:q,DIRECTION_ALL:Q,Manager:ee,Input:tt,TouchAction:Ft,TouchInput:wt,MouseInput:ut,PointerEventInput:mt,TouchMouseInput:Pt,SingleTouchInput:bt,Recognizer:Ht,AttrRecognizer:Jt,Tap:$t,Pan:Kt,Swipe:Zt,Pinch:Vt,Rotate:Qt,Press:qt,on:S,off:P,each:g,merge:b,extend:x,assign:h,inherit:A,bindFn:T,prefixed:L}),(void 0!==n?n:"undefined"!=typeof self?self:{}).Hammer=te,(s=function(){return te}.call(e,i,e,t))===a||(t.exports=s)}(window,document)},function(t,e,i){"use strict";for(var s=["ms","moz","webkit","o"],n=0;n<s.length&&!window.AudioContext;++n)window.AudioContext=window[s[n]+"AudioContext"];t.exports=window.AudioContext},function(t,e,i){"use strict";t.exports=function(t){return t.replace(/(.*)\.[^.]{1,4}$/,"")}},function(t,e,i){const s=i(34),n=i(22),o=i(23),r=i(3),a=i(24),h=i(35),l=i(25),c=i(4),u=i(5),d=i(13),p=i(36),y={averagePoints:s,degreesToRadians:n,radiansToDegrees:o,pointInPolygon:r,distance:a,degreesFromCenter:h,radiansFromCenter:l,scalePoints:c,translatePoints:u,insideCanvas:d,rotateRadiansAroundCenter:i(26),rotateDegreesAroundCenter:p};t.exports=y},function(t,e){t.exports=function(t){var e={x:0,y:0};return t.forEach(t,function(t){e.x+=t.x,e.y+=t.y}),e.x=e.x/t.length,e.y=e.y/t.length,e}},function(t,e,i){const s=i(23),n=i(25);t.exports=function(t,e){return s(n(t,e))}},function(t,e,i){const s=i(26),n=i(22);t.exports=function(t,e,i){return s(t,e,n(i))}},function(t,e,i){const s=i(27),n=i(20),o=0,r=2;t.exports=class extends s{constructor(t={}){super(t),this.state=r,this.walkingAnims=[],this.dyingAnims=[],this.idleAnims=[],this.direction=o,Object.assign(this,t)}updateDirection(t){this.x+=this.dx*t,this.y+=this.dy*t,this.state!==this.statics.STATE_DYING&&(this.dx>0&&0===this.dy?this.direction=this.statics.EAST:0===this.dx&&this.dy<0?this.direction=this.statics.NORTH:this.dx>0&&this.dy<0?this.direction=this.statics.NORTHEAST:this.dx<0&&this.dy<0?this.direction=this.statics.NORTHWEST:0===this.dx&&this.dy>0?this.direction=this.statics.SOUTH:this.dx>0&&this.dy>0?this.direction=this.statics.SOUTHEAST:this.dx<0&&this.dy>0?this.direction=this.statics.SOUTHWEST:this.dx<0&&0===this.dy&&(this.direction=this.statics.WEST),0===this.dx&&0===this.dy?this.state=this.statics.STATE_IDLE:this.state=this.statics.STATE_WALKING)}updateAnimations(t){this.state===this.statics.STATE_WALKING?this.anim=this.walkingAnims[this.direction]:this.state===this.statics.STATE_DYING?this.anim=this.dyingAnims[this.direction]:this.anim=this.idleAnims[this.direction],this.anim.update(t)}createAnimations(t,e,i,s,o,r){var a=[],h=Array.isArray(e),l=1;r||(r=0);for(var c=0;c<8;c++){a[c]=new n({height:s,width:o,image:i});for(var u=0;u<t;u++)l=h?e[u]:e,a[c].addFrame(l,u+t*c,r)}return a}}},function(t,e,i){"use strict";var s={Circle:i(7),MultiPolygon:i(39),Polygon:i(40),Rectangle:i(41)};t.exports=s},function(t,e,i){const s=i(1),n=i(4),o=i(3),r=i(5);t.exports=class extends s{constructor(t={}){super(t),this.polys=[],Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle;for(var s=0;s<this.polys.length;s++){t.beginPath(),t.moveTo((this.x+this.polys[s][0].x)*e,(this.y+this.polys[s][0].y)*e);for(var n=1;n<this.polys[s].length;n++)t.lineTo((this.polys[s][n].x+this.x)*e,(this.polys[s][n].y+this.y)*e);t.lineTo((this.x+this.polys[s][0].x)*e,(this.y+this.polys[s][0].y)*e),t.closePath(),t.fill(),t.stroke()}t.restore(),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.polys=n(this.polys,t),sup.scaleShape(t)}pointInShape(t){for(var e=0;e<this.polys.length;e++)if(o(t,r(this.polys[e],this)))return!0;return!1}}},function(t,e,i){const s=i(1),n=i(4),o=i(3),r=i(5);t.exports=class extends s{constructor(t={}){super(t),this.points=[],Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.beginPath(),t.moveTo((this.x+this.points[0].x)*e,(this.y+this.points[0].y)*e);for(var s=1;s<this.points.length;s++)t.lineTo((this.points[s].x+this.x)*e,(this.points[s].y+this.y)*e);t.lineTo((this.x+this.points[0].x)*e,(this.y+this.points[0].y)*e),t.closePath(),t.fill(),t.stroke(),t.restore(),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.points=n(this.points,t),super.scaleShape(t)}pointInShape(t){return o(t,r(this.points,this))}}},function(t,e,i){const s=i(1);t.exports=class extends s{constructor(t={}){super(t),this.halfWidth=1,this.halfHeight=1,Object.assign(this,t)}draw(t,e){e=e||this.scale||1;var i=t.lineWidth;t.lineWidth=this.lineWidth,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.fillStyle=this.fillStyle,t.strokeStyle=this.strokeStyle,t.fillRect((this.x-this.halfWidth)*e,(this.y-this.halfHeight)*e,2*this.halfWidth*e,2*this.halfHeight*e),t.strokeRect((this.x-this.halfWidth)*e,(this.y-this.halfHeight)*e,2*this.halfWidth*e,2*this.halfHeight*e),t.restore(),t.lineWidth=i,super.draw(t,e)}scaleShape(t){this.halfHeight=this.halfHeight*t,this.halfWidth=this.halfWidth*t,super.scaleShape(t)}pointInShape(t){return t.x>=this.x-this.halfWidth&&t.x<=this.x+this.halfWidth&&t.y>=this.y-this.halfHeight&&t.y<=this.y+this.halfHeight}}},function(t,e,i){"use strict";var s={Distance:i(43),Prismatic:i(44),Revolute:i(45)};t.exports=s},function(t,e,i){const s=i(6),n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.Joints.b2DistanceJointDef;t.exports=class extends s{constructor(t={}){super(t),this.bodyPoint2=null,Object.assign(this,t)}scaleJointLocation(t){t&&this.bodyPoint2&&(this.bodyPoint2.x=this.bodyPoint2.x*t,this.bodyPoint2.y=this.bodyPoint2.y*t,this.alreadyScaled=!0),super.scaleJointLocation(t)}createB2Joint(t){if(t&&t.bodiesMap&&t.b2World&&t.jointsMap&&!t.jointsMap[this.id]){const e=t.bodiesMap[this.bodyId1],i=t.bodiesMap[this.bodyId2];if(e&&i){let s,r;this.bodyPoint1&&(s=new n(this.bodyPoint1.x,this.bodyPoint1.y)),this.bodyPoint2&&(r=new n(this.bodyPoint2.x,this.bodyPoint2.y)),s=s||e.GetWorldCenter(),r=r||i.GetWorldCenter();const a=new o;return a.Initialize(e,i,s,r),this.jointAttributes&&Object.assign(a,this.jointAttributes),t.b2World.CreateJoint(a)}}}}},function(t,e,i){const s=i(6),n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.Joints.b2PrismaticJointDef;t.exports=class extends s{constructor(t={}){super(t),this.axisScale=null,Object.assign(this,t)}createB2Joint(t){if(t&&t.bodiesMap&&t.b2World&&t.jointsMap&&!t.jointsMap[this.id]){const s=t.bodiesMap[this.bodyId1],r=t.bodiesMap[this.bodyId2];if(s&&r){let a;this.bodyPoint1&&(a=new n(this.bodyPoint1.x,this.bodyPoint1.y)),a=a||s.GetWorldCenter();var e,i=new o;return e=this.axisScale?new n(this.axisScale.x,this.axisScale.y):new n(1,0),i.Initialize(s,r,a,e),this.jointAttributes&&Object.assign(i,this.jointAttributes),t.b2World.CreateJoint(i)}}}}},function(t,e,i){const s=i(6),n=Box2D.Common.Math.b2Vec2,o=Box2D.Dynamics.Joints.b2RevoluteJointDef;t.exports=class extends s{constructor(t={}){super(t),Object.assign(this,t)}createB2Joint(t){if(t&&t.bodiesMap&&t.b2World&&t.jointsMap&&!t.jointsMap[this.id]){var e=t.bodiesMap[this.bodyId1],i=t.bodiesMap[this.bodyId2];if(e&&i){var s;this.bodyPoint1&&(s=new n(this.bodyPoint1.x,this.bodyPoint1.y)),s=s||e.GetWorldCenter();var r=new o;return r.Initialize(e,i,s,void 0),this.jointAttributes&&Object.assign(r,this.jointAttributes),t.b2World.CreateJoint(r)}}}}},function(t,e){t.exports=class{constructor(t={}){Object.assign(this,t),this.collisions=this.collisions||{}}reset(){this.collisions={}}postSolve(t,e,i,s){this.collisions[t]=this.collisions[t]||[],this.collisions[t].push({id:e,impulse:i.normalImpulses[0]}),this.collisions[e]=this.collisions[e]||[],this.collisions[e].push({id:t,impulse:i.normalImpulses[0]})}}},function(t,e,i){const s=i(9),n=i(28);t.exports=class extends s{constructor(t={}){super(t),console.log("boxgame options",t),this.box=null,this.boxUpdating=!0,this.entities=null,this.joints=null,Object.assign(this,t),this.box||(this.box=new n(t.boxOptions)),this.entities||(this.entities={}),this.joints||(this.joints={})}updateBox(t){this.boxUpdating&&(this.box.update(t),this.box.updateExternalState(this.entities))}addBody(t){this.entities[t.id]=t,this.box.addBody(t)}addBodies(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.addBody(t)})}removeBody(t){this.box.removeBody(t.id),delete this.entities[t.id]}removeBodies(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.removeBody(t)})}addJoint(t){this.joints[t.id]=t,this.box.addJoint(t)}addJoints(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.addJoint(t)})}removeJoint(t){this.box.removeJoint(t.id),delete this.joints[t.id]}removeJoints(t){Array.isArray(t)||(t=[t]),t.forEach(t=>{this.removeJoint(t)})}}},function(t,e,i){"use strict";i.r(e);var s=i(0),n=i(8),o=i.n(n);var r=function(t){t.fillStyle="#AAA",t.fillRect(0,0,this.width,this.height),Object.keys(this.entities).forEach(e=>{this.entities[e].draw(t)})},a=i(7),h=i.n(a);class l extends h.a{draw(t,e){e=e||this.scale||1,t.save(),t.translate(this.x*e,this.y*e),t.rotate(this.angle),t.translate(-this.x*e,-this.y*e),t.drawImage(this.img,this.x*e-this.img.width/2,this.y*e-this.img.height/2),t.restore()}}console.log("wtf too many bricks?");let c=[[6,1],[10,1],[14,1],[34,1],[38,1],[42,1],[8,3],[12,3],[16,3],[32,3],[36,3],[40,3],[6,5],[10,5],[14,5],[34,5],[38,5],[42,5],[8,7],[12,7],[16,7],[32,7],[36,7],[40,7],[10,9],[14,9],[18,9],[30,9],[34,9],[38,9],[12,11],[16,11],[20,11],[24,11],[28,11],[32,11],[36,11],[14,13],[18,13],[22,13],[26,13],[30,13],[34,13],[12,15],[16,15],[20,15],[24,15],[28,15],[32,15],[36,15],[18,17],[22,17],[26,17],[30,17],[24,19]];var u=c=c.map(t=>((t=[12.5*t[0],12.5*t[1]])[0]=t[0]-300,t)),d=i(29),p=i.n(d);const{BoxGame:y,entities:f}=s.box2d,{Revolute:m}=s.box2d.joints,{radiansFromCenter:g,scalePoints:v,rotateRadiansAroundCenter:x}=s.utils,b=new y({canvasId:"canvas",gameAreaId:"gameArea",canvasPercentage:.95,boxOptions:{resolveCollisions:!0},draw:r,initInput:function(t){t.addArrowKeyActions(),t.addKeyAction("A"),t.addKeyAction("D")},handleInput:function(t){t.keyActions[s.keys.LEFT].isPressed()&&this.box.applyImpulseDegrees("head",270,10),t.keyActions[s.keys.RIGHT].isPressed()&&this.box.applyImpulseDegrees("head",90,10),t.keyActions[s.keys.UP].isPressed()&&this.box.applyImpulseDegrees("head",0,10),t.keyActions[s.keys.DOWN].isPressed()&&this.box.applyImpulseDegrees("head",180,10),t.keyActions.A.isPressed()&&this.box.applyTorque("head",-1e3),t.keyActions.D.isPressed()&&this.box.applyTorque("head",1e3),t.mouseAction.isPressed()&&this.box.applyImpulse("head",g(this.entities.torso,v(t.mouseAction.position,1/this.box.scale)),10)},update:function(t){this.updateBox(t),this.head&&this.head.collisions&&this.head.collisions.forEach(t=>{const e=this.entities[t.id];e&&e.brick?this.removeBody(t):e&&e.king&&(e.fillStyle="black")}),this.entities.neck&&this.entities.neck.collisions&&this.entities.neck.collisions.forEach(t=>{const e=this.entities[t.id];e&&e.brick?this.removeBody(t):e&&e.king&&(e.fillStyle="black")})}});o.a.entities.forEach(function(t){if("head"===t.id)t.img=b.resourceManager.loadImage("images/head.png"),b.head=new l(t),b.addBody(b.head);else{const e=f[t.type];e&&(t.drawCenter=!1,b.addBody(new e(t)))}});const A=568.10113077769,T=Math.asin(.6889532509648748),w=Math.asin(.7248057794927981);console.log("angle in radians",T,w);const E=.6043122389547919,S=[0,T,w+Math.PI/2,Math.PI,Math.PI+T,1.5*Math.PI+w];let P=[[960,0],[1920-A*E,540*(1-E)],[1920-A*E,540+540*E],[960,1080],[A*E,540+540*E],[A*E,540*(1-E)]];const M=P.map((t,e)=>({pt:t,color:p.a[e],angle:S[e]}));console.log("players",M);const I=Math.sqrt(Math.pow(P[1][0]-P[0][0],2)+Math.pow(P[1][1]-P[0][1],2)),D=Math.sqrt(Math.pow(P[5][0]-P[0][0],2)+Math.pow(P[5][1]-P[0][1],2));console.log("d",I,D,I-D,P);const C={x:M[0].pt[0],y:M[0].pt[1]};M.forEach((t,e)=>{console.log("creating player",t);const i={x:t.pt[0],y:t.pt[1]},s=x(i,{x:i.x,y:i.y+55},t.angle),n=new f.Circle({x:s.x,y:s.y,radius:50,staticBody:!0,restitution:2,fillStyle:t.color,king:!0});b.addBody(n),u.forEach((s,n)=>{const o={x:s[0]+960,y:s[1],halfWidth:25,halfHeight:12.5,staticBody:!0,restitution:1.5,playerId:e,fillStyle:t.color,brick:!0},r=x(C,o,t.angle);console.log("rotated pt",r),o.x=r.x,o.y=r.y,o.x+=i.x-M[0].pt[0],o.y+=i.y-M[0].pt[1],o.points=[{x:o.halfWidth,y:-o.halfHeight},{x:o.halfWidth,y:o.halfHeight},{x:-o.halfWidth,y:o.halfHeight},{x:-o.halfWidth,y:-o.halfHeight}],o.points=o.points.map(e=>x({x:0,y:0},e,t.angle));const a=new f.Polygon(o);b.addBody(a)})}),o.a.joints.forEach(function(t){var e;"Revolute"===t.type&&(e=new m(t)),e&&b.box.addJoint(e)}),console.log(b),window.game=b,b.run(),b.box.applyImpulseDegrees("head",360*Math.random(),50)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy9ib3gyZC9lbnRpdGllcy9FbnRpdHkuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL0dhbWVBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL3V0aWxzL3BvaW50SW5Qb2x5Z29uLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy91dGlscy9zY2FsZVBvaW50cy5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvdXRpbHMvdHJhbnNsYXRlUG9pbnRzLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy9ib3gyZC9qb2ludHMvSm9pbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2JveDJkL2VudGl0aWVzL0NpcmNsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYm94RGF0YS5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvR2FtZUNvcmUuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL0lucHV0TWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvVG91Y2hBY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL01vdXNlQWN0aW9uLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy91dGlscy9pbnNpZGVDYW52YXMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2tleXMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL1Jlc291cmNlTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvaGFzLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL3NvdW5kcy9Tb3VuZC5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvc291bmRzL1dlYkF1ZGlvLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy9BbmltYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL0FuaW1GcmFtZS5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvdXRpbHMvZGVncmVlc1RvUmFkaWFucy5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvdXRpbHMvcmFkaWFuc1RvRGVncmVlcy5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvdXRpbHMvZGlzdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL3V0aWxzL3JhZGlhbnNGcm9tQ2VudGVyLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy91dGlscy9yb3RhdGVSYWRpYW5zQXJvdW5kQ2VudGVyLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy9TcHJpdGUuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2JveDJkL0JveC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvY29sb3JzLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy9ub2RlX21vZHVsZXMvaGFtbWVyanMvaGFtbWVyLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy9zaGltcy9BdWRpb0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL3V0aWxzL3JlbW92ZUV4dGVuc2lvbi5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL3V0aWxzL2F2ZXJhZ2VQb2ludHMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL3V0aWxzL2RlZ3JlZXNGcm9tQ2VudGVyLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy91dGlscy9yb3RhdGVEZWdyZWVzQXJvdW5kQ2VudGVyLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy9yZWluZXIvQ3JlYXR1cmUuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2JveDJkL2VudGl0aWVzLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy9ib3gyZC9lbnRpdGllcy9NdWx0aVBvbHlnb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2JveDJkL2VudGl0aWVzL1BvbHlnb24uanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2JveDJkL2VudGl0aWVzL1JlY3RhbmdsZS5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvYm94MmQvam9pbnRzLmpzIiwid2VicGFjazovLy8uLi9mcm96ZW5qcy9ib3gyZC9qb2ludHMvRGlzdGFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2JveDJkL2pvaW50cy9QcmlzbWF0aWMuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2JveDJkL2pvaW50cy9SZXZvbHV0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vZnJvemVuanMvYm94MmQvbGlzdGVuZXJzL0NvbnRhY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL2Zyb3plbmpzL2JveDJkL0JveEdhbWUuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RyYXcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0hlYWQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JyaWNrcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZ2FtZS5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIndpbmRvdyIsImZyb3plbmpzIiwiR2FtZUNvcmUiLCJJbnB1dE1hbmFnZXIiLCJSZXNvdXJjZU1hbmFnZXIiLCJNb3VzZUFjdGlvbiIsIlRvdWNoQWN0aW9uIiwia2V5cyIsIkFuaW1hdGlvbiIsIkFuaW1GcmFtZSIsInV0aWxzIiwiU3ByaXRlIiwicmVpbmVyIiwiQ3JlYXR1cmUiLCJzb3VuZHMiLCJXZWJBdWRpbyIsImJveDJkIiwiZW50aXRpZXMiLCJqb2ludHMiLCJCb3giLCJCb3hHYW1lIiwiW29iamVjdCBPYmplY3RdIiwib3B0aW9ucyIsInRoaXMiLCJpZCIsIk1hdGgiLCJyYW5kb20iLCJEYXRlIiwibm93IiwieCIsInkiLCJzY2FsZSIsImFuZ2xlIiwiY2VudGVyIiwiZHJhd0NlbnRlciIsInJlc3RpdHV0aW9uIiwiZGVuc2l0eSIsImZyaWN0aW9uIiwibGluZWFyRGFtcGluZyIsImxpbmVhclZlbG9jaXR5IiwiYW5ndWxhclZlbG9jaXR5IiwiYW5ndWxhckRhbXBpbmciLCJzdGF0aWNCb2R5IiwiZmlsbFN0eWxlIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJtYXNrQml0cyIsImNhdGVnb3J5Qml0cyIsImdyb3VwSW5kZXgiLCJhc3NpZ24iLCJzdGF0ZSIsImN0eCIsIm9nTGluZVdpZHRoIiwiYmVnaW5QYXRoIiwiYXJjIiwiUEkiLCJjbG9zZVBhdGgiLCJmaWxsIiwiY2VudGVyU3R5bGUiLCJhbHJlYWR5U2NhbGVkIiwic3RhdGljcyIsIk5PUk1BTCIsIkRFVEVDVF9JTklUQUxfUFJFU1NfT05MWSIsIlNUQVRFX1JFTEVBU0VEIiwiU1RBVEVfUFJFU1NFRCIsIlNUQVRFX1dBSVRJTkdfRk9SX1JFTEVBU0UiLCJTVEFURV9NT1ZFRCIsImJlaGF2aW9yIiwiYW1vdW50IiwicmVzZXQiLCJwcmVzcyIsInJlbGVhc2UiLCJwcmVzc0FtdCIsInJldFZhbCIsInBvaW50IiwicG9seWdvbiIsInBvbHkiLCJwb2ludHMiLCJpbnNpZGVQb2x5IiwiaiIsImxlbmd0aCIsInhpIiwieWkiLCJ4aiIsInlqIiwic2NhbGVQb2ludHMiLCJBcnJheSIsImlzQXJyYXkiLCJtYXAiLCJ0cmFuc2xhdGVQb2ludHMiLCJ0cmFuc2xhdGlvbiIsImJvZHlJZDEiLCJib2R5SWQyIiwiYm9keVBvaW50MSIsImpvaW50QXR0cmlidXRlcyIsIkVudGl0eSIsImRpc3RhbmNlIiwic3VwZXIiLCJyYWRpdXMiLCJzdHJva2UiLCJzYXZlIiwidHJhbnNsYXRlIiwicm90YXRlIiwibW92ZVRvIiwibGluZVRvIiwicmVzdG9yZSIsImRyYXciLCJzY2FsZVNoYXBlIiwiem9uZSIsInR5cGUiLCJoYWxmV2lkdGgiLCJoYWxmSGVpZ2h0IiwiZW5hYmxlTGltaXQiLCJsb3dlckFuZ2xlIiwidXBwZXJBbmdsZSIsImNhbnZhcyIsImhlaWdodCIsIndpZHRoIiwiYmFja0ltZyIsImlzUnVubmluZyIsImNhbnZhc0lkIiwibWF4U3RlcCIsImNvbnRleHRUeXBlIiwicmVzb3VyY2VNYW5hZ2VyIiwiaW5wdXRNYW5hZ2VyIiwibG9hZGluZ0ZvcmVncm91bmQiLCJsb2FkaW5nQmFja2dyb3VuZCIsImdhbWVBcmVhSWQiLCJjYW52YXNQZXJjZW50YWdlIiwibmV3SGVpZ2h0IiwibmV3V2lkdGgiLCJpbml0IiwibG9hZFJlc291cmNlcyIsImluaXRJbnB1dCIsImxhdW5jaExvb3AiLCJkb2N1bWVudCIsImdldEVsZW1lbnRCeUlkIiwiY29udGV4dCIsImdldENvbnRleHQiLCJzZXRIZWlnaHQiLCJzZXRXaWR0aCIsImdhbWVBcmVhIiwicmVzaXplIiwiYWxlcnQiLCJlbGFwc2VkVGltZSIsImN1cnJUaW1lIiwiZ2V0VGltZSIsIm1pbiIsInByZXZUaW1lIiwicmVzb3VyY2VzUmVhZHkiLCJ1cGRhdGVMb2FkaW5nU2NyZWVuIiwiZHJhd0xvYWRpbmdTY3JlZW4iLCJoYW5kbGVJbnB1dCIsInBhdXNlZCIsInVwZGF0ZSIsInN0YXJ0VGltZSIsImxvb3BSdW5uZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJnYW1lTG9vcCIsImZvbnQiLCJmaWxsVGV4dCIsImZpbGxSZWN0IiwidGV4dFB4U2l6ZSIsImZsb29yIiwiZ2V0UGVyY2VudENvbXBsZXRlIiwic3Ryb2tlUmVjdCIsIkhhbW1lciIsIkdhbWVBY3Rpb24iLCJpbnNpZGVDYW52YXMiLCJvbiIsImVsZW1lbnQiLCJoYW5kbGVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJ0b1BpeGVsIiwicGFyc2VGbG9hdCIsImdldE1hcmdpbkV4dGVudHMiLCJub2RlIiwic3R5bGUiLCJnZXRDb21wdXRlZFN0eWxlIiwibWFyZ2luTGVmdCIsIm1hcmdpblRvcCIsInciLCJtYXJnaW5SaWdodCIsImgiLCJtYXJnaW5Cb3R0b20iLCJjbGVhbnVwIiwicmVtb3ZlIiwia2V5QWN0aW9ucyIsIm1vdXNlQWN0aW9uIiwidG91Y2hBY3Rpb24iLCJoYW5kbGVNb3VzZSIsImhhbmRsZVRvdWNoIiwiaGFuZGxlS2V5cyIsImVtdWxhdGVNb3VzZSIsImhhbW1lciIsImJvZHkiLCJwcmV2ZW50X2RlZmF1bHQiLCJkcmFnX21heF90b3VjaGVzIiwiaG9sZCIsInB1c2hDbGVhbnVwIiwia2V5ZG93biIsImtleXVwIiwidG91Y2hzdGFydCIsInRvdWNobW92ZSIsInRvdWNoZW5kIiwibW91c2Vkb3duIiwibW91c2Vtb3ZlIiwibW91c2V1cCIsIm5vcm1hbGl6ZVBvaW50IiwiZ2VzdHVyZSIsInJlbW92ZUNsZWFudXAiLCJhcmdzIiwib2ZmIiwiYXBwbHkiLCJnYW1lQWN0aW9uIiwia2V5Q29kZSIsImluaXRpYWxQcmVzc09ubHkiLCJnYSIsImRldGVjdEluaXRpYWxQcmVzc09ubHkiLCJtYXBUb0tleSIsImFkZEtleUFjdGlvbiIsIlVQIiwiRE9XTiIsIkxFRlQiLCJSSUdIVCIsImUiLCJjdXJyZW50UG9pbnQiLCJwb3NpdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJ0b3VjaGVzIiwiY3VycmVudFBvaW50cyIsInB1c2giLCJzb21lIiwibW91c2VVcCIsInBvc2l0aW9ucyIsInN0YXJ0UG9zaXRpb25zIiwicHJldmVudERlZmF1bHQiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJnZXRLZXlBY3Rpb24iLCJpc1ByZXNzZWQiLCJldnQiLCJjb29yZHNNIiwiYm91bmRpbmdSZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsInRvcCIsInpvb21SYXRpbyIsInJvdW5kIiwiY2xpZW50WCIsImNsaWVudFkiLCJjYW52YXNXaWR0aCIsImNhbnZhc0hlaWdodCIsImJvZHlNYXJnaW5zIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0Iiwid2lkdGhUb0hlaWdodCIsIm5ld1dpZHRoU3R5bGUiLCJuZXdIZWlnaHRTdHlsZSIsImNhbnZhc1BlcmNlbnRhZ2VTdHlsZSIsImRpc3BsYXkiLCJhIiwiYiIsImVuZFBvc2l0aW9ucyIsInN0YXJ0UG9zaXRpb24iLCJlbmRQb3NpdGlvbiIsInB0IiwiQ0FOQ0VMIiwiSEVMUCIsIkJBQ0tfU1BBQ0UiLCJUQUIiLCJDTEVBUiIsIlJFVFVSTiIsIkVOVEVSIiwiU0hJRlQiLCJDT05UUk9MIiwiQUxUIiwiUEFVU0UiLCJDQVBTX0xPQ0siLCJFU0NBUEUiLCJTUEFDRSIsIlBBR0VfVVAiLCJQQUdFX0RPV04iLCJFTkQiLCJIT01FIiwiUFJJTlRTQ1JFRU4iLCJJTlNFUlQiLCJERUxFVEUiLCJOVU0wIiwiTlVNMSIsIk5VTTIiLCJOVU0zIiwiTlVNNCIsIk5VTTUiLCJOVU02IiwiTlVNNyIsIk5VTTgiLCJOVU05IiwiU0VNSUNPTE9OIiwiRVFVQUxTIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsIlEiLCJSIiwiUyIsIlQiLCJVIiwiViIsIlciLCJYIiwiWSIsIloiLCJDT05URVhUX01FTlUiLCJOVU1QQUQwIiwiTlVNUEFEMSIsIk5VTVBBRDIiLCJOVU1QQUQzIiwiTlVNUEFENCIsIk5VTVBBRDUiLCJOVU1QQUQ2IiwiTlVNUEFENyIsIk5VTVBBRDgiLCJOVU1QQUQ5IiwiTVVMVElQTFkiLCJBREQiLCJTRVBBUkFUT1IiLCJTVUJUUkFDVCIsIkRFQ0lNQUwiLCJESVZJREUiLCJGMSIsIkYyIiwiRjMiLCJGNCIsIkY1IiwiRjYiLCJGNyIsIkY4IiwiRjkiLCJGMTAiLCJGMTEiLCJGMTIiLCJGMTMiLCJGMTQiLCJGMTUiLCJGMTYiLCJGMTciLCJGMTgiLCJGMTkiLCJGMjAiLCJGMjEiLCJGMjIiLCJGMjMiLCJGMjQiLCJOVU1fTE9DSyIsIlNDUk9MTF9MT0NLIiwiVVBfRFBBRCIsIkRPV05fRFBBRCIsIkxFRlRfRFBBRCIsIlJJR0hUX0RQQUQiLCJDT01NQSIsIlBFUklPRCIsIlNMQVNIIiwiQkFDS19RVU9URSIsIk9QRU5fQlJBQ0tFVCIsIkJBQ0tfU0xBU0giLCJDTE9TRV9CUkFDS0VUIiwiUVVPVEUiLCJNRVRBIiwiaGFzIiwiU291bmQiLCJyZXNvdXJjZUxpc3QiLCJub3JtYWxpemVQYXRoIiwiYmFzZURpciIsInBhdGgiLCJqb2luZWRQYXRoIiwiam9pbiIsInJlcGxhY2UiLCJmbGlwWCIsImltYWdlIiwib2Zmc2NyZWVuQ2FudmFzIiwiY3JlYXRlRWxlbWVudCIsImRyYXdJbWFnZSIsInRvRGF0YVVSTCIsImZsaXBZIiwiSW1hZ2VXcmFwcGVyIiwiZmlsZW5hbWUiLCJzZWxmIiwiY29tcGxldGUiLCJpbWciLCJJbWFnZSIsInNyYyIsImFsbExvYWRlZCIsImltYWdlRGlyIiwic291bmREaXIiLCJmaWxlcyIsInNpbmdsZUZpbGUiLCJmaWxlTGlzdCIsImZpbGUiLCJ3cmFwcGVyIiwibG9hZCIsInNvdW5kIiwiZmxpcEZuIiwiaW1nMiIsImRvRmxpcCIsImZsaXBJbWFnZSIsIm51bUNvbXBsZXRlIiwiZ2xvYmFsIiwiY2hlY2siLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJzcGxpdCIsInVuZGVmaW5lZCIsIkF1ZGlvQ29udGV4dCIsImRvY3VtZW50RWxlbWVudCIsImciLCJGdW5jdGlvbiIsImZvcm1hdHMiLCJhdWRpby9tcGVnIiwiYXVkaW8vd2VibSIsImF1ZGlvL29nZyIsImF1ZGlvL3dhdiIsImF1ZGlvL2FhYyIsImF1ZGlvL3gtbTRhIiwicHJvYmFibHkiLCJtYXliZSIsInZvbHVtZSIsImxvb3AiLCJjb2RlYyIsInJlc3VsdCIsImF1ZGlvIiwiQXVkaW8iLCJjYW5QbGF5VHlwZSIsInNoaWZ0IiwicmVtb3ZlRXh0ZW5zaW9uIiwiYXVkaW9Db250ZXh0IiwiaGFuZGxlU2hpdHR5Iiwic291cmNlIiwiY3JlYXRlQnVmZmVyU291cmNlIiwiYnVmZmVyIiwiY3JlYXRlQnVmZmVyIiwiY29ubmVjdCIsImRlc3RpbmF0aW9uIiwic3RhcnQiLCJiYXNlbmFtZSIsIl9jaG9vc2VGb3JtYXQiLCJyZXF1ZXN0IiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwib25sb2FkIiwiZGVjb2RlQXVkaW9EYXRhIiwidGFyZ2V0IiwicmVzcG9uc2UiLCJlcnIiLCJfbmV4dEZvcm1hdCIsInNlbmQiLCJfaW5pdEF1ZGlvIiwiZ2Fpbk5vZGUiLCJjcmVhdGVHYWluIiwiZ2FpbiIsImN1cnJGcmFtZUluZGV4IiwiYW5pbVRpbWUiLCJ0b3RhbER1cmF0aW9uIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJmcmFtZXMiLCJmcmFtZUNvdW50IiwiZnJhbWVUaW1lcyIsInlTbG90IiwiYW5pbSIsImlzRlRBcnJheSIsImN1cnJlbnRGcmFtZVRpbWUiLCJhZGRGcmFtZSIsImR1cmF0aW9uIiwiaW1hZ2VTbG90WCIsImltYWdlU2xvdFkiLCJlbmRUaW1lIiwiaW1nU2xvdFgiLCJpbWdTbG90WSIsImNmIiwiZ2V0Q3VycmVudEZyYW1lIiwicmFkQ29uc3QiLCJkZWdyZWVzIiwiZGVnQ29uc3QiLCJyYWRpYW5zIiwicDEiLCJwMiIsInNxcnQiLCJhdGFuIiwic2luIiwiY29zIiwibmV3UHQiLCJ4bmV3IiwieW5ldyIsImR4IiwiZHkiLCJtYXhTcGVlZCIsImNvbGxpc2lvblJhZGl1cyIsInYiLCJhYnMiLCJjbG9uZSIsIkNvbnRhY3QiLCJCb3gyRCIsIkIyVmVjMiIsIkNvbW1vbiIsImIyVmVjMiIsIkIyQm9keURlZiIsIkR5bmFtaWNzIiwiYjJCb2R5RGVmIiwiQjJCb2R5IiwiYjJCb2R5IiwiQjJGaXh0dXJlRGVmIiwiYjJGaXh0dXJlRGVmIiwiQjJXb3JsZCIsImIyRml4dHVyZSIsImIyV29ybGQiLCJCMlBvbHlnb25TaGFwZSIsIkNvbGxpc2lvbiIsIlNoYXBlcyIsImIyUG9seWdvblNoYXBlIiwiQjJDaXJjbGVTaGFwZSIsImIyQ2lyY2xlU2hhcGUiLCJpbnRlcnZhbFJhdGUiLCJhZGFwdGl2ZSIsImJvZGllc01hcCIsImZpeHR1cmVzTWFwIiwiam9pbnRzTWFwIiwiZ3Jhdml0eVgiLCJncmF2aXR5WSIsImFsbG93U2xlZXAiLCJyZXNvbHZlQ29sbGlzaW9ucyIsImNvbnRhY3RMaXN0ZW5lciIsImNvbGxpc2lvbnMiLCJwYXJzZUludCIsImFkZENvbnRhY3RMaXN0ZW5lciIsIm1pbGxpcyIsIlN0ZXAiLCJDbGVhckZvcmNlcyIsInN0ZXBSYXRlIiwibGFzdFRpbWVzdGFtcCIsIkdldEJvZHlMaXN0IiwibV9uZXh0IiwiSXNBY3RpdmUiLCJHZXRVc2VyRGF0YSIsIkdldFBvc2l0aW9uIiwiR2V0QW5nbGUiLCJHZXRXb3JsZENlbnRlciIsIm1fbGluZWFyVmVsb2NpdHkiLCJtX2FuZ3VsYXJWZWxvY2l0eSIsImJvZGllc1N0YXRlIiwiZ2V0U3RhdGUiLCJlbnRpdHkiLCJib2R5RW50aXRpZXMiLCJhZGRCb2R5IiwicmVhZHkiLCJ2ZWMiLCJ2ZWNzIiwiYm9keURlZiIsImZpeERlZiIsImZpbHRlciIsImIyX3N0YXRpY0JvZHkiLCJiMl9keW5hbWljQm9keSIsInVzZXJEYXRhIiwiQ3JlYXRlQm9keSIsInNoYXBlIiwiQ3JlYXRlRml4dHVyZSIsIlNldCIsIlNldEFzQXJyYXkiLCJwb2x5cyIsIlNldEFzQm94IiwiYm9keUlkIiwiU2V0UG9zaXRpb24iLCJzZXRBbmdsZSIsIlNldExpbmVhclZlbG9jaXR5IiwidmVsb2NpdHkiLCJTZXRBbmd1bGFyVmVsb2NpdHkiLCJwb3dlciIsIkFwcGx5SW1wdWxzZSIsIkFwcGx5Rm9yY2UiLCJBcHBseVRvcnF1ZSIsInZlY3RvciIsIlNldEdyYXZpdHkiLCJEZXN0cm95Rml4dHVyZSIsIkRlc3Ryb3lCb2R5IiwiU2V0QXdha2UiLCJsaXN0ZW5lciIsImIyQ29udGFjdExpc3RlbmVyIiwiYmVnaW5Db250YWN0IiwiQmVnaW5Db250YWN0IiwiY29udGFjdCIsIm1fZml4dHVyZUEiLCJtX2JvZHkiLCJtX3VzZXJEYXRhIiwibV9maXh0dXJlQiIsImVuZENvbnRhY3QiLCJFbmRDb250YWN0IiwicHJlU29sdmUiLCJQcmVTb2x2ZSIsIm9sZE1hbmlmb2xkIiwicG9zdFNvbHZlIiwiUG9zdFNvbHZlIiwiaW1wdWxzZSIsIlNldENvbnRhY3RMaXN0ZW5lciIsImpvaW50SWQiLCJEZXN0cm95Sm9pbnQiLCJqb2ludCIsInNjYWxlSm9pbnRMb2NhdGlvbiIsImIySm9pbnQiLCJjcmVhdGVCMkpvaW50IiwiX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX18iLCJleHBvcnROYW1lIiwiVkVORE9SX1BSRUZJWEVTIiwiVEVTVF9FTEVNRU5UIiwiVFlQRV9GVU5DVElPTiIsInNldFRpbWVvdXRDb250ZXh0IiwiZm4iLCJ0aW1lb3V0Iiwic2V0VGltZW91dCIsImJpbmRGbiIsImludm9rZUFycmF5QXJnIiwiYXJnIiwiZWFjaCIsIm9iaiIsIml0ZXJhdG9yIiwiZm9yRWFjaCIsImRlcHJlY2F0ZSIsIm1ldGhvZCIsIm1lc3NhZ2UiLCJkZXByZWNhdGlvbk1lc3NhZ2UiLCJFcnJvciIsInN0YWNrIiwid2FybiIsImFyZ3VtZW50cyIsIlR5cGVFcnJvciIsIm91dHB1dCIsImluZGV4IiwibmV4dEtleSIsImV4dGVuZCIsImRlc3QiLCJtZXJnZSIsImluaGVyaXQiLCJjaGlsZCIsImJhc2UiLCJwcm9wZXJ0aWVzIiwiY2hpbGRQIiwiYmFzZVAiLCJjb25zdHJ1Y3RvciIsIl9zdXBlciIsImJvb2xPckZuIiwidmFsIiwiaWZVbmRlZmluZWQiLCJ2YWwxIiwidmFsMiIsImFkZEV2ZW50TGlzdGVuZXJzIiwidHlwZXMiLCJzcGxpdFN0ciIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwiaGFzUGFyZW50IiwicGFyZW50IiwicGFyZW50Tm9kZSIsImluU3RyIiwic3RyIiwiZmluZCIsImluZGV4T2YiLCJ0cmltIiwiaW5BcnJheSIsImZpbmRCeUtleSIsInRvQXJyYXkiLCJzbGljZSIsInVuaXF1ZUFycmF5Iiwic29ydCIsInJlc3VsdHMiLCJ2YWx1ZXMiLCJwcmVmaXhlZCIsInByZWZpeCIsInByb3AiLCJjYW1lbFByb3AiLCJ0b1VwcGVyQ2FzZSIsIl91bmlxdWVJZCIsImdldFdpbmRvd0ZvckVsZW1lbnQiLCJkb2MiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJwYXJlbnRXaW5kb3ciLCJTVVBQT1JUX1RPVUNIIiwiU1VQUE9SVF9QT0lOVEVSX0VWRU5UUyIsIlNVUFBPUlRfT05MWV9UT1VDSCIsInRlc3QiLCJDT01QVVRFX0lOVEVSVkFMIiwiSU5QVVRfU1RBUlQiLCJJTlBVVF9NT1ZFIiwiSU5QVVRfRU5EIiwiSU5QVVRfQ0FOQ0VMIiwiRElSRUNUSU9OX05PTkUiLCJESVJFQ1RJT05fTEVGVCIsIkRJUkVDVElPTl9SSUdIVCIsIkRJUkVDVElPTl9VUCIsIkRJUkVDVElPTl9ET1dOIiwiRElSRUNUSU9OX0hPUklaT05UQUwiLCJESVJFQ1RJT05fVkVSVElDQUwiLCJESVJFQ1RJT05fQUxMIiwiUFJPUFNfWFkiLCJQUk9QU19DTElFTlRfWFkiLCJJbnB1dCIsIm1hbmFnZXIiLCJjYWxsYmFjayIsImlucHV0VGFyZ2V0IiwiZG9tSGFuZGxlciIsImV2IiwiZW5hYmxlIiwiaW5wdXRIYW5kbGVyIiwiZXZlbnRUeXBlIiwiaW5wdXQiLCJwb2ludGVyc0xlbiIsInBvaW50ZXJzIiwiY2hhbmdlZFBvaW50ZXJzTGVuIiwiY2hhbmdlZFBvaW50ZXJzIiwiaXNGaXJzdCIsImlzRmluYWwiLCJzZXNzaW9uIiwicG9pbnRlcnNMZW5ndGgiLCJmaXJzdElucHV0Iiwic2ltcGxlQ2xvbmVJbnB1dERhdGEiLCJmaXJzdE11bHRpcGxlIiwib2Zmc2V0Q2VudGVyIiwiZ2V0Q2VudGVyIiwidGltZVN0YW1wIiwiZGVsdGFUaW1lIiwiZ2V0QW5nbGUiLCJnZXREaXN0YW5jZSIsIm9mZnNldCIsIm9mZnNldERlbHRhIiwicHJldkRlbHRhIiwicHJldklucHV0IiwiZGVsdGFYIiwiZGVsdGFZIiwiY29tcHV0ZURlbHRhWFkiLCJvZmZzZXREaXJlY3Rpb24iLCJnZXREaXJlY3Rpb24iLCJvdmVyYWxsVmVsb2NpdHkiLCJnZXRWZWxvY2l0eSIsIm92ZXJhbGxWZWxvY2l0eVgiLCJvdmVyYWxsVmVsb2NpdHlZIiwiZW5kIiwicm90YXRpb24iLCJnZXRSb3RhdGlvbiIsIm1heFBvaW50ZXJzIiwidmVsb2NpdHlYIiwidmVsb2NpdHlZIiwiZGlyZWN0aW9uIiwibGFzdCIsImxhc3RJbnRlcnZhbCIsImNvbXB1dGVJbnRlcnZhbElucHV0RGF0YSIsInNyY0V2ZW50IiwiY29tcHV0ZUlucHV0RGF0YSIsImVtaXQiLCJyZWNvZ25pemUiLCJwcm9wcyIsImF0YW4yIiwiZXZFbCIsImV2VGFyZ2V0IiwiZXZXaW4iLCJkZXN0cm95IiwiTU9VU0VfSU5QVVRfTUFQIiwiTU9VU0VfRUxFTUVOVF9FVkVOVFMiLCJNT1VTRV9XSU5ET1dfRVZFTlRTIiwiTW91c2VJbnB1dCIsInByZXNzZWQiLCJidXR0b24iLCJ3aGljaCIsInBvaW50ZXJUeXBlIiwiUE9JTlRFUl9JTlBVVF9NQVAiLCJwb2ludGVyZG93biIsInBvaW50ZXJtb3ZlIiwicG9pbnRlcnVwIiwicG9pbnRlcmNhbmNlbCIsInBvaW50ZXJvdXQiLCJJRTEwX1BPSU5URVJfVFlQRV9FTlVNIiwiMiIsIjMiLCI0IiwiNSIsIlBPSU5URVJfRUxFTUVOVF9FVkVOVFMiLCJQT0lOVEVSX1dJTkRPV19FVkVOVFMiLCJQb2ludGVyRXZlbnRJbnB1dCIsInN0b3JlIiwicG9pbnRlckV2ZW50cyIsIk1TUG9pbnRlckV2ZW50IiwiUG9pbnRlckV2ZW50IiwicmVtb3ZlUG9pbnRlciIsImV2ZW50VHlwZU5vcm1hbGl6ZWQiLCJ0b0xvd2VyQ2FzZSIsImlzVG91Y2giLCJzdG9yZUluZGV4IiwicG9pbnRlcklkIiwic3BsaWNlIiwiU0lOR0xFX1RPVUNIX0lOUFVUX01BUCIsInRvdWNoY2FuY2VsIiwiU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFMiLCJTSU5HTEVfVE9VQ0hfV0lORE9XX0VWRU5UUyIsIlNpbmdsZVRvdWNoSW5wdXQiLCJzdGFydGVkIiwiYWxsIiwiY2hhbmdlZCIsImNoYW5nZWRUb3VjaGVzIiwiY29uY2F0IiwiVE9VQ0hfSU5QVVRfTUFQIiwiVE9VQ0hfVEFSR0VUX0VWRU5UUyIsIlRvdWNoSW5wdXQiLCJ0YXJnZXRJZHMiLCJhbGxUb3VjaGVzIiwiaWRlbnRpZmllciIsInRhcmdldFRvdWNoZXMiLCJjaGFuZ2VkVGFyZ2V0VG91Y2hlcyIsInRvdWNoIiwiREVEVVBfVElNRU9VVCIsIkRFRFVQX0RJU1RBTkNFIiwiVG91Y2hNb3VzZUlucHV0IiwibW91c2UiLCJwcmltYXJ5VG91Y2giLCJsYXN0VG91Y2hlcyIsInNldExhc3RUb3VjaCIsImV2ZW50RGF0YSIsImxhc3RUb3VjaCIsImx0cyIsImlucHV0RXZlbnQiLCJpbnB1dERhdGEiLCJpc01vdXNlIiwic291cmNlQ2FwYWJpbGl0aWVzIiwiZmlyZXNUb3VjaEV2ZW50cyIsIlBSRUZJWEVEX1RPVUNIX0FDVElPTiIsIk5BVElWRV9UT1VDSF9BQ1RJT04iLCJUT1VDSF9BQ1RJT05fQVVUTyIsIlRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04iLCJUT1VDSF9BQ1RJT05fTk9ORSIsIlRPVUNIX0FDVElPTl9QQU5fWCIsIlRPVUNIX0FDVElPTl9QQU5fWSIsIlRPVUNIX0FDVElPTl9NQVAiLCJ0b3VjaE1hcCIsImNzc1N1cHBvcnRzIiwiQ1NTIiwic3VwcG9ydHMiLCJnZXRUb3VjaEFjdGlvblByb3BzIiwic2V0IiwiY29tcHV0ZSIsImFjdGlvbnMiLCJyZWNvZ25pemVycyIsInJlY29nbml6ZXIiLCJnZXRUb3VjaEFjdGlvbiIsImhhc1BhblgiLCJoYXNQYW5ZIiwiY2xlYW5Ub3VjaEFjdGlvbnMiLCJwcmV2ZW50RGVmYXVsdHMiLCJwcmV2ZW50ZWQiLCJoYXNOb25lIiwiaXNUYXBQb2ludGVyIiwiaXNUYXBNb3ZlbWVudCIsImlzVGFwVG91Y2hUaW1lIiwicHJldmVudFNyYyIsIlNUQVRFX1BPU1NJQkxFIiwiU1RBVEVfQkVHQU4iLCJTVEFURV9DSEFOR0VEIiwiU1RBVEVfRU5ERUQiLCJTVEFURV9SRUNPR05JWkVEIiwiU1RBVEVfQ0FOQ0VMTEVEIiwiUmVjb2duaXplciIsImRlZmF1bHRzIiwic2ltdWx0YW5lb3VzIiwicmVxdWlyZUZhaWwiLCJzdGF0ZVN0ciIsImRpcmVjdGlvblN0ciIsImdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIiLCJvdGhlclJlY29nbml6ZXIiLCJBdHRyUmVjb2duaXplciIsIlBhblJlY29nbml6ZXIiLCJwWCIsInBZIiwiUGluY2hSZWNvZ25pemVyIiwiUHJlc3NSZWNvZ25pemVyIiwiX3RpbWVyIiwiX2lucHV0IiwiUm90YXRlUmVjb2duaXplciIsIlN3aXBlUmVjb2duaXplciIsIlRhcFJlY29nbml6ZXIiLCJwVGltZSIsInBDZW50ZXIiLCJjb3VudCIsInByZXNldCIsIk1hbmFnZXIiLCJyZWNvZ25pemVXaXRoIiwiZHJvcFJlY29nbml6ZVdpdGgiLCJyZXF1aXJlRmFpbHVyZSIsImRyb3BSZXF1aXJlRmFpbHVyZSIsImhhc1JlcXVpcmVGYWlsdXJlcyIsImNhblJlY29nbml6ZVdpdGgiLCJldmVudCIsImFkZGl0aW9uYWxFdmVudCIsInRyeUVtaXQiLCJjYW5FbWl0IiwiaW5wdXREYXRhQ2xvbmUiLCJwcm9jZXNzIiwiYXR0clRlc3QiLCJvcHRpb25Qb2ludGVycyIsImlzUmVjb2duaXplZCIsImlzVmFsaWQiLCJ0aHJlc2hvbGQiLCJkaXJlY3Rpb25UZXN0IiwiaGFzTW92ZWQiLCJpbk91dCIsInRpbWUiLCJ2YWxpZFBvaW50ZXJzIiwidmFsaWRNb3ZlbWVudCIsInZhbGlkVGltZSIsImNsZWFyVGltZW91dCIsInRhcHMiLCJpbnRlcnZhbCIsInBvc1RocmVzaG9sZCIsInZhbGlkVG91Y2hUaW1lIiwiZmFpbFRpbWVvdXQiLCJ2YWxpZEludGVydmFsIiwidmFsaWRNdWx0aVRhcCIsInRhcENvdW50IiwiVkVSU0lPTiIsImRvbUV2ZW50cyIsImlucHV0Q2xhc3MiLCJjc3NQcm9wcyIsInVzZXJTZWxlY3QiLCJ0b3VjaFNlbGVjdCIsInRvdWNoQ2FsbG91dCIsImNvbnRlbnRab29taW5nIiwidXNlckRyYWciLCJ0YXBIaWdobGlnaHRDb2xvciIsImhhbmRsZXJzIiwib2xkQ3NzUHJvcHMiLCJ0b2dnbGVDc3NQcm9wcyIsIml0ZW0iLCJhZGQiLCJzdG9wIiwiZm9yY2UiLCJzdG9wcGVkIiwiY3VyUmVjb2duaXplciIsImV4aXN0aW5nIiwiZXZlbnRzIiwiZGF0YSIsImdlc3R1cmVFdmVudCIsImNyZWF0ZUV2ZW50IiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsInRyaWdnZXJEb21FdmVudCIsIlNUQVRFX0ZBSUxFRCIsIlRhcCIsIlBhbiIsIlN3aXBlIiwiUGluY2giLCJSb3RhdGUiLCJQcmVzcyIsInZlbmRvcnMiLCJhdmVyYWdlUG9pbnRzIiwiZGVncmVlc1RvUmFkaWFucyIsInJhZGlhbnNUb0RlZ3JlZXMiLCJwb2ludEluUG9seWdvbiIsImRlZ3JlZXNGcm9tQ2VudGVyIiwicmFkaWFuc0Zyb21DZW50ZXIiLCJyb3RhdGVEZWdyZWVzQXJvdW5kQ2VudGVyIiwicm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlciIsIkVBU1QiLCJTVEFURV9JRExFIiwid2Fsa2luZ0FuaW1zIiwiZHlpbmdBbmltcyIsImlkbGVBbmltcyIsIlNUQVRFX0RZSU5HIiwiTk9SVEgiLCJOT1JUSEVBU1QiLCJOT1JUSFdFU1QiLCJTT1VUSCIsIlNPVVRIRUFTVCIsIlNPVVRIV0VTVCIsIldFU1QiLCJTVEFURV9XQUxLSU5HIiwiYW5pbXMiLCJDaXJjbGUiLCJNdWx0aVBvbHlnb24iLCJQb2x5Z29uIiwiUmVjdGFuZ2xlIiwic3VwIiwiRGlzdGFuY2UiLCJQcmlzbWF0aWMiLCJSZXZvbHV0ZSIsIkpvaW50IiwiQjJEaXN0YW5jZUpvaW50RGVmIiwiSm9pbnRzIiwiYjJEaXN0YW5jZUpvaW50RGVmIiwiYm9keVBvaW50MiIsImJveCIsImJvZHkxIiwiYm9keTIiLCJ2ZWMxIiwidmVjMiIsIkluaXRpYWxpemUiLCJDcmVhdGVKb2ludCIsIkIyUHJpc21hdGljSm9pbnREZWYiLCJiMlByaXNtYXRpY0pvaW50RGVmIiwiYXhpc1NjYWxlIiwiYXhpcyIsIkIyUmV2b2x1dGVKb2ludERlZiIsImIyUmV2b2x1dGVKb2ludERlZiIsImlkQSIsImlkQiIsIm5vcm1hbEltcHVsc2VzIiwiYm94VXBkYXRpbmciLCJib3hPcHRpb25zIiwidXBkYXRlRXh0ZXJuYWxTdGF0ZSIsInJlbW92ZUJvZHkiLCJhZGRKb2ludCIsInJlbW92ZUpvaW50Iiwic3JjX2RyYXciLCJrIiwiSGVhZF9IZWFkIiwiQ2lyY2xlX2RlZmF1bHQiLCJicmlja3MiLCJzcmNfYnJpY2tzIiwiZ2FtZSIsImltIiwiYWRkQXJyb3dLZXlBY3Rpb25zIiwiYXBwbHlJbXB1bHNlRGVncmVlcyIsImFwcGx5VG9ycXVlIiwic3BlZWQiLCJhcHBseUltcHVsc2UiLCJ0b3JzbyIsInVwZGF0ZUJveCIsImhlYWQiLCJldCIsImVudCIsImJyaWNrIiwia2luZyIsIm5lY2siLCJib3hEYXRhX2RlZmF1bHQiLCJsb2FkSW1hZ2UiLCJzaWRlVyIsImFuZzEiLCJhc2luIiwiYW5nMiIsInBjdCIsImFuZ3MiLCJmdWxsVyIsInBsYXllcnMiLCJjcHQiLCJpZHgiLCJjb2xvciIsImNvbG9yc19kZWZhdWx0IiwiZDEiLCJwb3ciLCJkMiIsIm9yaWdpbiIsInBwdCIsIm5ld0hlYWRQdCIsImNpciIsInJiIiwiamR4Iiwib3BzIiwicGxheWVySWQiLCJvcHB0IiwicnVuIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsR0FHQSxHQUFBRixFQUFBRSxHQUNBLE9BQUFGLEVBQUFFLEdBQUFDLFFBR0EsSUFB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QUEsS0FFQSxDQUNBRCxFQUFBLFVBQ0FDLEdBQUEsS0FFQSxDQUNBRCxFQUFBLFVBQ0FDLEVBQUEsR0FFQSxDQUNBRCxFQUFBLEVBQ0FDLEVBQUEsS0FFQSxDQUNBRCxHQUFBLElBQ0FDLEVBQUEsTUFHQUQsRUFBQSxFQUNBQyxFQUFBLEVBQ0FZLFlBQUEsRUFDQWtFLE1BQUEsRUFDQUMsS0FBQSxVQUNBckYsR0FBQSxTQUNBVyxZQUFBLEdBRUEsQ0FDQTBDLE9BQUEsQ0FDQSxDQUNBaEQsR0FBQSxJQUNBQyxFQUFBLEtBRUEsQ0FDQUQsRUFBQSxFQUNBQyxFQUFBLEtBRUEsQ0FDQUQsRUFBQSxVQUNBQyxFQUFBLE1BRUEsQ0FDQUQsRUFBQSxVQUNBQyxFQUFBLE1BRUEsQ0FDQUQsR0FBQSxJQUNBQyxFQUFBLE9BR0FELEVBQUEsRUFDQUMsRUFBQSxFQUNBWSxZQUFBLEVBQ0FrRSxNQUFBLEVBQ0FDLEtBQUEsVUFDQTFFLFlBQUEsRUFDQVgsR0FBQSxVQUVBLENBQ0FxRCxPQUFBLENBQ0EsQ0FDQWhELEVBQUEsV0FDQUMsR0FBQSxLQUVBLENBQ0FELEVBQUEsS0FDQUMsR0FBQSxLQUVBLENBQ0FELEVBQUEsS0FDQUMsRUFBQSxLQUVBLENBQ0FELEVBQUEsS0FDQUMsRUFBQSxLQUVBLENBQ0FELEVBQUEsV0FDQUMsRUFBQSxJQUdBRCxFQUFBLEVBQ0FDLEVBQUEsRUFDQVksWUFBQSxFQUNBa0UsTUFBQSxFQUNBQyxLQUFBLFVBQ0ExRSxZQUFBLEVBQ0FYLEdBQUEsWUFFQSxDQUNBcUQsT0FBQSxDQUNBLENBQ0FoRCxFQUFBLFdBQ0FDLEVBQUEsTUFFQSxDQUNBRCxFQUFBLEtBQ0FDLEVBQUEsS0FFQSxDQUNBRCxFQUFBLEtBQ0FDLEVBQUEsS0FFQSxDQUNBRCxFQUFBLEtBQ0FDLEVBQUEsTUFFQSxDQUNBRCxFQUFBLFdBQ0FDLEVBQUEsT0FHQUQsRUFBQSxFQUNBQyxFQUFBLEVBQ0FZLFlBQUEsRUFDQWtFLE1BQUEsRUFDQUMsS0FBQSxVQUNBMUUsWUFBQSxFQUNBWCxHQUFBLFlBRUEsQ0FDQUssRUFBQSxJQUNBQyxFQUFBLEtBQ0FnRixVQUFBLElBQ0FDLFdBQUEsSUFDQXJFLFlBQUEsRUFDQWtFLE1BQUEsRUFDQUMsS0FBQSxZQUNBckYsR0FBQSxVQUNBVyxZQUFBLEdBRUEsQ0FDQU4sRUFBQSxJQUNBQyxHQUFBLElBQ0FnRixVQUFBLElBQ0FDLFdBQUEsSUFDQXJFLFlBQUEsRUFDQWtFLE1BQUEsRUFDQUMsS0FBQSxZQUNBckYsR0FBQSxRQUVBLENBQ0FLLEVBQUEsSUFDQUMsRUFBQSxJQUNBZ0YsVUFBQSxFQUNBQyxXQUFBLEdBQ0FyRSxZQUFBLEVBQ0FrRSxNQUFBLEVBQ0FDLEtBQUEsWUFDQWxFLFVBQUEsVUFDQUMsWUFBQSxVQUNBcEIsR0FBQSxRQUVBLENBQ0FLLEVBQUEsSUFDQUMsRUFBQSxJQUNBb0UsT0FBQSxHQUNBeEQsWUFBQSxFQUNBa0UsTUFBQSxFQUNBQyxLQUFBLFNBQ0FsRSxVQUFBLHdCQUNBbkIsR0FBQSxTQUdBTixPQUFBLENBQ0EsQ0FDQXlFLFFBQUEsT0FDQUMsUUFBQSxPQUNBaUIsS0FBQSxXQUNBckYsR0FBQSxPQUNBc0UsZ0JBQUEsQ0FDQWtCLGFBQUEsRUFDQUMsWUFBQSxHQUNBQyxXQUFBLEtBR0EsQ0FDQXZCLFFBQUEsUUFDQUMsUUFBQSxRQUNBaUIsS0FBQSxXQUNBckYsR0FBQSxPQUNBcUUsV0FBQSxDQUNBaEUsRUFBQSxJQUNBQyxFQUFBLEtBRUFnRSxnQkFBQSxDQUNBa0IsYUFBQSxFQUNBQyxZQUFBLFFBQ0FDLFdBQUEsV0FHQSxDQUNBdkIsUUFBQSxRQUNBQyxRQUFBLFFBQ0FpQixLQUFBLFdBQ0FyRixHQUFBLFFBQ0FxRSxXQUFBLENBQ0FoRSxFQUFBLElBQ0FDLEVBQUEsS0FFQWdFLGdCQUFBLENBQ0FrQixhQUFBLEVBQ0FDLFlBQUEsUUFDQUMsV0FBQSxXQUdBLENBQ0F2QixRQUFBLFFBQ0FDLFFBQUEsUUFDQWlCLEtBQUEsV0FDQXJGLEdBQUEsUUFDQXFFLFdBQUEsQ0FDQWhFLEVBQUEsSUFDQUMsRUFBQSxLQUVBZ0UsZ0JBQUEsQ0FDQWtCLGFBQUEsRUFDQUMsWUFBQSxTQUNBQyxXQUFBLFVBR0EsQ0FDQXZCLFFBQUEsUUFDQUMsUUFBQSxRQUNBaUIsS0FBQSxXQUNBckYsR0FBQSxRQUNBcUUsV0FBQSxDQUNBaEUsRUFBQSxJQUNBQyxFQUFBLEtBRUFnRSxnQkFBQSxDQUNBa0IsYUFBQSxFQUNBQyxZQUFBLElBQ0FDLFdBQUEsTUFHQSxDQUNBdkIsUUFBQSxRQUNBQyxRQUFBLFFBQ0FpQixLQUFBLFdBQ0FyRixHQUFBLFFBQ0FxRSxXQUFBLENBQ0FoRSxFQUFBLElBQ0FDLEVBQUEsS0FFQWdFLGdCQUFBLENBQ0FrQixhQUFBLEVBQ0FDLFlBQUEsSUFDQUMsV0FBQSxNQUdBLENBQ0F2QixRQUFBLFFBQ0FDLFFBQUEsUUFDQWlCLEtBQUEsV0FDQXJGLEdBQUEsUUFDQXFFLFdBQUEsQ0FDQWhFLEVBQUEsSUFDQUMsRUFBQSxLQUVBZ0UsZ0JBQUEsQ0FDQWtCLGFBQUEsRUFDQUMsWUFBQSxTQUNBQyxXQUFBLFVBR0EsQ0FDQXZCLFFBQUEsUUFDQUMsUUFBQSxRQUNBaUIsS0FBQSxXQUNBckYsR0FBQSxRQUNBcUUsV0FBQSxDQUNBaEUsRUFBQSxJQUNBQyxFQUFBLEtBRUFnRSxnQkFBQSxDQUNBa0IsYUFBQSxFQUNBQyxZQUFBLFFBQ0FDLFdBQUEsV0FHQSxDQUNBdkIsUUFBQSxRQUNBQyxRQUFBLFFBQ0FpQixLQUFBLFdBQ0FyRixHQUFBLFFBQ0FxRSxXQUFBLENBQ0FoRSxFQUFBLElBQ0FDLEVBQUEsS0FFQWdFLGdCQUFBLENBQ0FrQixhQUFBLEVBQ0FDLFdBQUEsR0FDQUMsWUFBQSxNQUlBQyxPQUFBLENBQ0FDLE9BQUEsSUFDQUMsTUFBQSxLQUVBQyxRQUFBLHVCQ2hTQSxNQUFBbkgsRUFBcUJ2QyxFQUFRLElBQzdCd0MsRUFBd0J4QyxFQUFRLElBc1ZoQ0csRUFBQUQsUUFwVkEsTUFFQXVELFlBQUFDLEVBQUEsSUFRQUMsS0FBQWdHLFdBQUEsRUFRQWhHLEtBQUFpRyxTQUFBLEtBUUFqRyxLQUFBa0csUUFBQSxHQVFBbEcsS0FBQW1HLFlBQUEsS0FRQW5HLEtBQUE2RixPQUFBLEVBUUE3RixLQUFBOEYsTUFBQSxFQVFBOUYsS0FBQW9HLGdCQUFBLEtBUUFwRyxLQUFBcUcsYUFBQSxLQVFBckcsS0FBQXNHLGtCQUFBLE9BUUF0RyxLQUFBdUcsa0JBQUEsT0FRQXZHLEtBQUF3RyxXQUFBLEtBUUF4RyxLQUFBeUcsaUJBQUEsRUFFQXRKLE9BQUF1RSxPQUFBMUIsS0FBQUQsR0FFQUMsS0FBQW9HLGtCQUNBcEcsS0FBQW9HLGdCQUFBLElBQUF2SCxHQVVBaUIsVUFBQTRHLEdBQ0ExRyxLQUFBNkYsT0FBQWEsRUFDQTFHLEtBQUE0RixPQUFBQyxPQUFBYSxFQVNBNUcsU0FBQTZHLEdBQ0EzRyxLQUFBOEYsTUFBQWEsRUFDQTNHLEtBQUE0RixPQUFBRSxNQUFBYSxFQVFBN0csT0FDQUUsS0FBQWdHLFdBQUEsRUFRQWxHLE1BQ0FFLEtBQUFnRyxZQUNBaEcsS0FBQTRHLE9BQ0E1RyxLQUFBNkcsY0FBQTdHLEtBQUFvRyxpQkFDQXBHLEtBQUE4RyxVQUFBOUcsS0FBQXFHLGNBQ0FyRyxLQUFBK0csY0FVQWpILGNBQUFzRyxJQVNBdEcsT0FDQUUsS0FBQTRGLFNBQ0E1RixLQUFBNEYsT0FBQW9CLFNBQUFDLGVBQUFqSCxLQUFBaUcsV0FFQWpHLEtBQUE0RixRQUtBNUYsS0FBQWtILFVBQ0FsSCxLQUFBa0gsUUFBQWxILEtBQUE0RixPQUFBdUIsV0FBQW5ILEtBQUFtRyxjQUVBbkcsS0FBQWtILFNBS0FsSCxLQUFBb0gsVUFBQXBILEtBQUE2RixRQUFBN0YsS0FBQTRGLE9BQUFDLFFBQ0E3RixLQUFBcUgsU0FBQXJILEtBQUE4RixPQUFBOUYsS0FBQTRGLE9BQUFFLE9BRUE5RixLQUFBcUcsZUFFQXJHLEtBQUF3RyxZQUFBeEcsS0FBQXlHLGlCQUNBekcsS0FBQXFHLGFBQUEsSUFBQXpILEVBQUEsQ0FDQWdILE9BQUE1RixLQUFBNEYsT0FDQTBCLFNBQUFOLFNBQUFDLGVBQUFqSCxLQUFBd0csWUFDQUMsaUJBQUF6RyxLQUFBeUcsbUJBR0F6RyxLQUFBcUcsYUFBQSxJQUFBekgsRUFBQSxDQUNBZ0gsT0FBQTVGLEtBQUE0RixVQUtBNUYsS0FBQXFHLGFBQUFrQixTQUVBdkgsS0FBQWdHLFdBQUEsR0F4QkF3QixNQUFBLDBDQUFBeEgsS0FBQW1HLFlBQUEsK0VBUEFxQixNQUFBLCtGQXdDQTFILFVBQUF1RyxJQVdBdkcsWUFBQXVHLEVBQUFvQixJQVNBM0gsV0FDQUUsS0FBQTBILFVBQUEsSUFBQXRILE1BQUF1SCxVQUNBM0gsS0FBQXlILFlBQUF2SCxLQUFBMEgsSUFBQTVILEtBQUEwSCxTQUFBMUgsS0FBQTZILFNBQUE3SCxLQUFBa0csU0FDQWxHLEtBQUE2SCxTQUFBN0gsS0FBQTBILFNBR0ExSCxLQUFBb0csa0JBQUFwRyxLQUFBb0csZ0JBQUEwQixrQkFDQTlILEtBQUErSCxvQkFBQS9ILEtBQUF5SCxhQUNBekgsS0FBQWdJLGtCQUFBaEksS0FBQWtILFdBRUFsSCxLQUFBaUksWUFBQWpJLEtBQUFxRyxhQUFBckcsS0FBQXlILGFBQ0F6SCxLQUFBa0ksUUFFQWxJLEtBQUFtSSxPQUFBbkksS0FBQXlILGFBR0F6SCxLQUFBa0gsUUFBQXJDLE9BQ0E3RSxLQUFBbUYsS0FBQW5GLEtBQUFrSCxTQUNBbEgsS0FBQWtILFFBQUFoQyxXQVNBcEYsYUFDQUUsS0FBQXlILFlBQUEsRUFDQSxJQUFBVyxFQUFBaEksS0FBQUMsTUFDQUwsS0FBQTBILFNBQUFVLEVBQ0FwSSxLQUFBNkgsU0FBQU8sRUFHQXBJLEtBQUFxSSxXQUFBckksS0FBQXFJLFdBQUFwSyxLQUFBK0IsTUFDQXZCLE9BQUE2SixzQkFBQXRJLEtBQUFxSSxZQUdBdkksYUFDQUUsS0FBQXVJLFdBQ0E5SixPQUFBNkosc0JBQUF0SSxLQUFBcUksWUFTQXZJLE9BQUEySCxJQVdBM0gsb0JBQUEySCxJQVVBM0gsS0FBQW9ILEdBQ0EsT0FBQWxILEtBQUFtRyxjQUNBZSxFQUFBc0IsS0FBQSxrQkFDQXRCLEVBQUF1QixTQUFBLHlEQVdBM0ksa0JBQUFvSCxHQUNBLEdBQUFsSCxLQUFBb0csaUJBQUEsT0FBQXBHLEtBQUFtRyxZQUFBLENBQ0FlLEVBQUE5RixVQUFBcEIsS0FBQXVHLGtCQUNBVyxFQUFBd0IsU0FBQSxJQUFBMUksS0FBQThGLE1BQUE5RixLQUFBNkYsUUFFQXFCLEVBQUE5RixVQUFBcEIsS0FBQXNHLGtCQUNBWSxFQUFBN0YsWUFBQXJCLEtBQUFzRyxrQkFFQSxJQUFBcUMsRUFBQXpJLEtBQUEwSSxNQUFBNUksS0FBQTZGLE9BQUEsSUFFQXFCLEVBQUFzQixLQUFBLFFBQUFHLEVBQUEsZ0JBRUF6QixFQUFBdUIsU0FBQSxjQUFBekksS0FBQW9HLGdCQUFBeUMscUJBQUEsT0FBQTdJLEtBQUE4RixNQUFBLElBQUE5RixLQUFBNkYsUUFFQXFCLEVBQUE0QixXQUFBLEdBQUE5SSxLQUFBOEYsTUFBQSxHQUFBOUYsS0FBQTZGLE9BQUEsR0FBQTdGLEtBQUE4RixNQUFBLEdBQUE5RixLQUFBNkYsUUFDQXFCLEVBQUF3QixTQUFBLEdBQUExSSxLQUFBOEYsTUFBQSxHQUFBOUYsS0FBQTZGLE9BQUEsR0FBQTdGLEtBQUE4RixNQUFBOUYsS0FBQW9HLGdCQUFBeUMscUJBQUEsT0FBQTdJLEtBQUE2RixRQUVBcUIsRUFBQTVGLFVBQUEsc0JDOVZBLE1BQUF5SCxFQUFlMU0sRUFBUSxJQUV2QjJNLEVBQW1CM00sRUFBUSxHQUMzQjBDLEVBQW9CMUMsRUFBUSxJQUM1QnlDLEVBQW9CekMsRUFBUSxJQUM1QjRNLEVBQXFCNU0sRUFBUSxJQUM3QjJDLEVBQWEzQyxFQUFRLElBRXJCLFNBQUE2TSxFQUFBQyxFQUFBbk0sRUFBQW9NLEdBRUEsT0FEQUQsRUFBQUUsaUJBQUFyTSxFQUFBb00sR0FDQSxXQUNBRCxFQUFBRyxvQkFBQXRNLEVBQUFvTSxJQWdCQSxTQUFBRyxFQUFBN0wsR0FDQSxPQUFBOEwsV0FBQTlMLElBQUEsRUFHQSxTQUFBK0wsRUFBQUMsR0FDQSxJQUFBQyxFQVRBLFNBQUFELEdBQ0EsT0FBQWpMLE9BQUFtTCxpQkFBQUYsRUFBQSxVQVFBRSxDQUFBRixHQUNBaE4sRUFBQTZNLEVBQUFJLEVBQUFFLFlBQ0FsTSxFQUFBNEwsRUFBQUksRUFBQUcsV0FHQSxPQUNBQyxFQUFBck4sRUFIQTZNLEVBQUFJLEVBQUFLLGFBSUFDLEVBQUF0TSxFQUhBNEwsRUFBQUksRUFBQU8sZUFna0JBMU4sRUFBQUQsUUF6akJBLE1BQ0F1RCxZQUFBQyxFQUFBLElBNEdBLFNBQUFvSyxFQUFBZixHQUNBQSxFQUFBZ0IsU0E4Q0EsR0FuSkFwSyxLQUFBcUssV0FBQSxLQVFBckssS0FBQXNLLFlBQUEsS0FRQXRLLEtBQUF1SyxZQUFBLEtBUUF2SyxLQUFBNEYsT0FBQSxLQVNBNUYsS0FBQXdLLGFBQUEsRUFTQXhLLEtBQUF5SyxhQUFBLEVBUUF6SyxLQUFBMEssWUFBQSxFQVFBMUssS0FBQXNILFNBQUEsS0FRQXRILEtBQUF5RyxpQkFBQSxLQVFBekcsS0FBQTJLLGNBQUEsRUFRQTNLLEtBQUE0SyxPQUFBLEtBRUF6TixPQUFBdUUsT0FBQTFCLEtBQUFELEdBRUFDLEtBQUE0SyxTQUNBNUssS0FBQTRLLE9BQUEsSUFBQTdCLEVBQUEvQixTQUFBNkQsS0FBQSxDQUNBQyxpQkFBQSxFQUNBQyxpQkFBQSxFQUdBQyxNQUFBLEtBSUFoTCxLQUFBcUssYUFDQXJLLEtBQUFxSyxXQUFBLElBT0FySyxLQUFBMEssYUFDQTFLLEtBQUFpTCxZQUFBL0IsRUFBQWxDLFNBQUEsVUFBQWhILEtBQUFrTCxRQUFBak4sS0FBQStCLE9BQUFtSyxHQUNBbkssS0FBQWlMLFlBQUEvQixFQUFBbEMsU0FBQSxRQUFBaEgsS0FBQW1MLE1BQUFsTixLQUFBK0IsT0FBQW1LLElBR0EsaUJBQUFuRCxVQUNBaEgsS0FBQWlMLFlBQUEvQixFQUFBbEMsU0FBQSxhQUFBaEgsS0FBQW9MLFdBQUFuTixLQUFBK0IsT0FBQW1LLEdBQ0FuSyxLQUFBaUwsWUFBQS9CLEVBQUFsQyxTQUFBLFlBQUFoSCxLQUFBcUwsVUFBQXBOLEtBQUErQixPQUFBbUssR0FDQW5LLEtBQUFpTCxZQUFBL0IsRUFBQWxDLFNBQUEsV0FBQWhILEtBQUFzTCxTQUFBck4sS0FBQStCLE9BQUFtSyxLQUlBbkssS0FBQWlMLFlBQUEvQixFQUFBbEMsU0FBQSxZQUFBaEgsS0FBQXVMLFVBQUF0TixLQUFBK0IsT0FBQW1LLEdBQ0FuSyxLQUFBaUwsWUFBQS9CLEVBQUFsQyxTQUFBLFlBQUFoSCxLQUFBd0wsVUFBQXZOLEtBQUErQixPQUFBbUssR0FDQW5LLEtBQUFpTCxZQUFBL0IsRUFBQWxDLFNBQUEsVUFBQWhILEtBQUF5TCxRQUFBeE4sS0FBQStCLE9BQUFtSyxJQUlBbkssS0FBQXNLLGNBQ0F0SyxLQUFBc0ssWUFBQSxJQUFBeEwsR0FHQWtCLEtBQUF1SyxjQUNBdkssS0FBQXVLLFlBQUEsSUFBQXhMLEdBR0FpQixLQUFBMkssYUFpQkEzSyxLQUFBc0gsVUFBQXRILEtBQUF5RyxpQkFBQSxDQUNBLElBQUEyQyxFQUFBcEosS0FBQXVILE9BQUF0SixLQUFBK0IsTUFJQUEsS0FBQWlMLFlBQUEvQixFQUFBekssT0FBQSxTQUFBMkssR0FBQWUsR0FDQW5LLEtBQUFpTCxZQUFBL0IsRUFBQXpLLE9BQUEsb0JBQUEySyxHQUFBZSxHQUdBbkssS0FBQTBMLGVBQUExTCxLQUFBMEwsZUFBQXpOLEtBQUErQixNQUNBQSxLQUFBaUosYUFBQWpKLEtBQUFpSixhQUFBaEwsS0FBQStCLE1BWUFGLEdBQUE2TCxFQUFBdkMsR0FDQSxJQUFBd0IsRUFBQTVLLEtBQUE0SyxPQUNBZ0IsRUFBQTVMLEtBQUE0TCxjQUVBaEIsRUFBQTFCLEdBQUF5QyxFQUFBdkMsR0FDQSxJQUFBZSxFQUFBbkssS0FBQWlMLFlBQUEsQ0FBQVUsRUFBQXZDLEdBQUEsU0FBQXlDLEdBQ0FqQixFQUFBa0IsSUFBQUMsTUFBQW5CLEVBQUFpQixLQUdBLE9BQ0F6QixPQUFBLFdBQ0F3QixFQUFBekIsR0FDQUEsTUFZQXJLLGFBQUFxRCxHQUNBLE9BQUE4RixFQUFBOUYsRUFBQW5ELEtBQUE0RixRQVdBOUYsU0FBQWtNLEVBQUFDLEdBQ0FqTSxLQUFBcUssV0FBQTRCLEdBQUFELEVBV0FsTSxhQUFBbU0sRUFBQUMsR0FDQSxJQUFBQyxFQUFBLElBQUFuRCxFQU1BLE9BTEFrRCxJQUNBQyxFQUFBdkosU0FBQXVKLEVBQUFDLHdCQUVBcE0sS0FBQXFNLFNBQUFGLEVBQUFGLEdBRUFFLEVBUUFyTSxxQkFDQUUsS0FBQXNNLGFBQUF0TixFQUFBdU4sSUFDQXZNLEtBQUFzTSxhQUFBdE4sRUFBQXdOLE1BQ0F4TSxLQUFBc00sYUFBQXROLEVBQUF5TixNQUNBek0sS0FBQXNNLGFBQUF0TixFQUFBME4sT0FVQTVNLFFBQUE2TSxHQUNBM00sS0FBQXlMLFFBQUFrQixHQVNBN00sUUFBQTZNLEdBQ0EzTSxLQUFBc0ssWUFBQXRILFFBQUFoRCxLQUFBMEwsZUFBQWlCLElBVUE3TSxVQUFBNk0sR0FDQTNNLEtBQUF1TCxVQUFBb0IsR0FTQTdNLFVBQUE2TSxHQUVBM00sS0FBQXNLLFlBQUF0SCxRQUFBLE1BQ0EsSUFBQTRKLEVBQUE1TSxLQUFBMEwsZUFBQWlCLEdBQ0EzTSxLQUFBc0ssWUFBQXJCLGFBQUFqSixLQUFBaUosYUFBQTJELEdBQ0E1TSxLQUFBc0ssWUFBQXZILE1BQUE2SixHQVdBOU0sVUFBQTZNLEdBQ0EzTSxLQUFBd0wsVUFBQW1CLEdBU0E3TSxVQUFBNk0sR0FDQTNNLEtBQUFzSyxZQUFBdUMsU0FBQTdNLEtBQUEwTCxlQUFBaUIsR0FVQTdNLFdBQUE2TSxHQUNBM00sS0FBQW9MLFdBQUF1QixHQVNBN00sV0FBQTZNLEdBRUEzTSxLQUFBdUssWUFBQXZILFFBQUEsTUFDQThKLFFBQUFDLElBQUFKLEVBQUFLLFFBQUFMLEdBRUEsTUFBQU0sRUFBQSxHQUNBLFFBQUF4USxFQUFBLEVBQW1CQSxFQUFBa1EsRUFBQUssUUFBQXZKLE9BQXNCaEgsSUFDekN3USxFQUFBQyxLQUFBbE4sS0FBQTBMLGVBQUFpQixFQUFBSyxRQUFBdlEsS0FFQXVELEtBQUF1SyxZQUFBdEIsYUFBQWdFLEVBQUFFLEtBQUFuTixLQUFBaUosY0FDQWpKLEtBQUF1SyxZQUFBeEgsTUFBQWtLLEdBQ0FqTixLQUFBMkssY0FDQTNLLEtBQUF1TCxVQUFBb0IsRUFBQUssUUFBQSxJQVdBbE4sU0FBQTZNLEdBQ0EzTSxLQUFBc0wsU0FBQXFCLEdBU0E3TSxTQUFBNk0sR0FFQSxNQUFBTSxFQUFBLEdBQ0EsUUFBQXhRLEVBQUEsRUFBbUJBLEVBQUFrUSxFQUFBSyxRQUFBdkosT0FBc0JoSCxJQUN6Q3dRLEVBQUFDLEtBQUFsTixLQUFBMEwsZUFBQWlCLEVBQUFLLFFBQUF2USxLQUVBdUQsS0FBQXVLLFlBQUF2SCxRQUFBaUssR0FDQWpOLEtBQUEySyxjQUNBM0ssS0FBQW9OLFFBQUFULEVBQUFLLFFBQUEsSUFXQWxOLFVBQUE2TSxHQUNBM00sS0FBQXFMLFVBQUFzQixHQVNBN00sVUFBQTZNLEdBRUEsTUFBQU0sRUFBQSxHQUNBLFFBQUF4USxFQUFBLEVBQW1CQSxFQUFBa1EsRUFBQUssUUFBQXZKLE9BQXNCaEgsSUFDekN3USxFQUFBQyxLQUFBbE4sS0FBQTBMLGVBQUFpQixFQUFBSyxRQUFBdlEsS0FFQXVELEtBQUF1SyxZQUFBOEMsVUFBQUosRUFDQWpOLEtBQUF1SyxZQUFBK0MsZ0JBQ0FYLEVBQUFZLGlCQUVBdk4sS0FBQTJLLGNBQ0EzSyxLQUFBd0wsVUFBQW1CLEVBQUFLLFFBQUEsSUFXQWxOLGFBQUE2TSxHQUNBLE9BQUEzTSxLQUFBcUssV0FDQXJLLEtBQUFxSyxXQUFBc0MsRUFBQVYsVUFBQWpNLEtBQUFxSyxXQUFBbUQsT0FBQUMsYUFBQWQsRUFBQVYsVUFFQSxLQVdBbk0sV0FBQTZNLEdBQ0EzTSxLQUFBa0wsUUFBQXlCLEdBVUE3TSxRQUFBNk0sR0FDQTNNLEtBQUFrTCxRQUFBeUIsR0FTQTdNLFFBQUE2TSxHQUNBLElBQUFYLEVBQUFoTSxLQUFBME4sYUFBQWYsR0FDQVgsTUFBQTJCLGFBQ0EzQixFQUFBakosUUFXQWpELFlBQUE2TSxHQUNBM00sS0FBQW1MLE1BQUF3QixHQVNBN00sTUFBQTZNLEdBQ0EsSUFBQVgsRUFBQWhNLEtBQUEwTixhQUFBZixHQUNBWCxHQUNBQSxFQUFBaEosVUFZQWxELFlBQUE4TixHQUNBLE9BQUE1TixLQUFBMEwsZUFBQWtDLEdBVUE5TixlQUFBOE4sR0FDQSxHQUFBQSxFQUFBLENBQ0EsSUFBQUMsR0FyaEJBbkUsRUFxaEJBMUosS0FBQTRGLE9BbmhCQSxDQUNBdEYsR0FGQXdOLEVBQUFwRSxFQUFBcUUseUJBRUFDLEtBQ0F6TixFQUFBdU4sRUFBQUcsTUFraEJBLE9BQUFqTyxLQUFBa08sVUFDQSxDQUNBNU4sRUFBQUosS0FBQWlPLE9BQUFQLEVBQUFRLFFBQUFQLEVBQUF2TixHQUFBTixLQUFBa08sV0FDQTNOLEVBQUFMLEtBQUFpTyxPQUFBUCxFQUFBUyxRQUFBUixFQUFBdE4sR0FBQVAsS0FBQWtPLFlBR0EsQ0FDQTVOLEVBQUFKLEtBQUFpTyxNQUFBUCxFQUFBUSxRQUFBUCxFQUFBdk4sR0FDQUMsRUFBQUwsS0FBQWlPLE1BQUFQLEVBQUFTLFFBQUFSLEVBQUF0TixJQTloQkEsSUFBQW1KLEVBQ0FvRSxFQXdpQkFoTyxTQUNBLEdBQUFFLEtBQUFzSCxVQUFBdEgsS0FBQXlHLGtCQUFBekcsS0FBQTRGLE9BQUEsQ0FDQSxJQUFBMEksRUFBQXRPLEtBQUE0RixPQUFBRSxNQUNBeUksRUFBQXZPLEtBQUE0RixPQUFBQyxPQUVBMkksRUFBQS9FLEVBQUF6QyxTQUFBNkQsTUFFQWxFLEVBQUFsSSxPQUFBZ1EsV0FBQUQsRUFBQXpFLEVBQ0FyRCxFQUFBakksT0FBQWlRLFlBQUFGLEVBQUF2RSxFQUVBMEUsRUFBQUwsRUFBQUMsRUFHQUssRUFBQSxHQUNBQyxFQUFBLEdBSEFsSSxFQUFBRCxFQUlBaUksR0FFQUMsR0FEQWpJLEVBQUFELEVBQUFpSSxHQUNBLEtBQ0FFLEVBQUFuSSxFQUFBLE9BRUFrSSxFQUFBakksRUFBQSxLQUNBa0ksRUFBQTNPLEtBQUFpTyxNQUFBeEgsRUFBQWdJLEdBQUEsTUFHQTNPLEtBQUFrTyxVQUFBdkgsRUFBQTJILEVBQUF0TyxLQUFBeUcsaUJBRUF6RyxLQUFBc0gsU0FBQXFDLE1BQUE3RCxNQUFBOEksRUFDQTVPLEtBQUFzSCxTQUFBcUMsTUFBQTlELE9BQUFnSixFQUVBLElBQUFDLEVBQUE1TyxLQUFBMEksTUFBQSxJQUFBNUksS0FBQXlHLGtCQUFBLElBQ0F6RyxLQUFBNEYsT0FBQStELE1BQUE3RCxNQUFBZ0osRUFDQTlPLEtBQUE0RixPQUFBK0QsTUFBQTlELE9BQUFpSixFQUNBOU8sS0FBQTRGLE9BQUErRCxNQUFBb0YsUUFBQSxRQUNBL08sS0FBQTRGLE9BQUErRCxNQUFBRSxXQUFBLE9BQ0E3SixLQUFBNEYsT0FBQStELE1BQUFLLFlBQUEsUUFJQWxLLFlBQUFrUCxFQUFBQyx1QkM3bEJBLE1BQUFqRyxFQUFtQjNNLEVBQVEsR0FrRTNCRyxFQUFBRCxRQWhFQSxjQUFBeU0sRUFDQWxKLFlBQUFDLEVBQUEsSUFDQTJFLE1BQUEzRSxHQVFBQyxLQUFBc04sZUFBQSxLQVFBdE4sS0FBQWtQLGFBQUEsS0FRQWxQLEtBQUFxTixVQUFBLEtBUUFyTixLQUFBaUosYUFBQSxLQUVBOUwsT0FBQXVFLE9BQUExQixLQUFBRCxHQVVBRCxNQUFBd04sR0FDQXROLEtBQUFzTixpQkFDQXROLEtBQUFxTixVQUFBQyxFQUNBNUksTUFBQTNCLE1BQUF1SyxHQVNBeE4sUUFBQW9QLEdBQ0FsUCxLQUFBa1AsZUFDQXhLLE1BQUExQixRQUFBa00sc0JDOURBLE1BQUFsRyxFQUFtQjNNLEVBQVEsR0FpRTNCRyxFQUFBRCxRQS9EQSxjQUFBeU0sRUFDQWxKLFlBQUFDLEVBQUEsSUFDQTJFLE1BQUEzRSxHQVFBQyxLQUFBbVAsY0FBQSxLQVFBblAsS0FBQW9QLFlBQUEsS0FRQXBQLEtBQUE2TSxTQUFBLEtBUUE3TSxLQUFBaUosYUFBQSxLQUVBOUwsT0FBQXVFLE9BQUExQixLQUFBRCxHQVNBRCxNQUFBcVAsR0FDQW5QLEtBQUFtUCxnQkFDQW5QLEtBQUE2TSxTQUFBc0MsRUFDQXpLLE1BQUEzQixNQUFBb00sR0FTQXJQLFFBQUFzUCxHQUNBcFAsS0FBQW9QLGVBQUFwUCxLQUFBNk0sU0FDQW5JLE1BQUExQixRQUFBb00sb0JDNURBNVMsRUFBQUQsUUFSQSxTQUFBOFMsRUFBQXpKLEdBQ0EsUUFBQXlKLEVBQUEvTyxFQUFBLEdBQUErTyxFQUFBL08sRUFBQXNGLEVBQUFFLE9BQUF1SixFQUFBOU8sRUFBQSxHQUFBOE8sRUFBQTlPLEVBQUFxRixFQUFBQyx3QkNEQXJKLEVBQUFELFFBQUEsQ0FDQStTLE9BQUEsRUFDQUMsS0FBQSxFQUNBQyxXQUFBLEVBQ0FDLElBQUEsRUFDQUMsTUFBQSxHQUNBQyxPQUFBLEdBQ0FDLE1BQUEsR0FDQUMsTUFBQSxHQUNBQyxRQUFBLEdBQ0FDLElBQUEsR0FDQUMsTUFBQSxHQUNBQyxVQUFBLEdBQ0FDLE9BQUEsR0FDQUMsTUFBQSxHQUNBQyxRQUFBLEdBQ0FDLFVBQUEsR0FDQUMsSUFBQSxHQUNBQyxLQUFBLEdBQ0E5RCxLQUFBLEdBQ0FGLEdBQUEsR0FDQUcsTUFBQSxHQUNBRixLQUFBLEdBQ0FnRSxZQUFBLEdBQ0FDLE9BQUEsR0FDQUMsT0FBQSxHQUNBQyxLQUFBLEdBQ0FDLEtBQUEsR0FDQUMsS0FBQSxHQUNBQyxLQUFBLEdBQ0FDLEtBQUEsR0FDQUMsS0FBQSxHQUNBQyxLQUFBLEdBQ0FDLEtBQUEsR0FDQUMsS0FBQSxHQUNBQyxLQUFBLEdBQ0FDLFVBQUEsR0FDQUMsT0FBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FDLEVBQUEsR0FDQUMsYUFBQSxHQUNBQyxRQUFBLEdBQ0FDLFFBQUEsR0FDQUMsUUFBQSxHQUNBQyxRQUFBLEdBQ0FDLFFBQUEsSUFDQUMsUUFBQSxJQUNBQyxRQUFBLElBQ0FDLFFBQUEsSUFDQUMsUUFBQSxJQUNBQyxRQUFBLElBQ0FDLFNBQUEsSUFDQUMsSUFBQSxJQUNBQyxVQUFBLElBQ0FDLFNBQUEsSUFDQUMsUUFBQSxJQUNBQyxPQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLEdBQUEsSUFDQUMsR0FBQSxJQUNBQyxHQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLElBQUEsSUFDQUMsSUFBQSxJQUNBQyxJQUFBLElBQ0FDLFNBQUEsSUFDQUMsWUFBQSxJQUNBQyxRQUFBLElBQ0FDLFVBQUEsSUFDQUMsVUFBQSxJQUNBQyxXQUFBLElBQ0FDLE1BQUEsSUFDQUMsT0FBQSxJQUNBQyxNQUFBLElBQ0FDLFdBQUEsSUFDQUMsYUFBQSxJQUNBQyxXQUFBLElBQ0FDLGNBQUEsSUFDQUMsTUFBQSxJQUNBQyxLQUFBLG1DQy9HQSxNQUFBQyxFQUFZcGEsRUFBUSxJQUNwQnFhLEVBQWNyYSxFQUFRLElBQ3RCbUQsRUFBaUJuRCxFQUFRLElBRXpCLElBQUFzYSxFQUFBLEdBR0EsU0FBQUMsRUFBQUMsRUFBQUMsR0FDQSxJQUFBQyxFQUFBRCxFQUlBLE9BSEFELElBQ0FFLEVBQUEsQ0FBQUYsRUFBQUMsR0FBQUUsS0FBQSxNQUVBRCxFQUFBRSxRQUFBLFVBQW1DLEtBR25DLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQXBRLFNBQUFxUSxjQUFBLFVBQ0FELEVBQUF2UixPQUFBc1IsRUFBQXRSLE9BQ0F1UixFQUFBdFIsTUFBQXFSLEVBQUFyUixNQUNBLElBQUFsRSxFQUFBd1YsRUFBQWpRLFdBQUEsTUFLQSxPQUhBdkYsRUFBQWtELFVBQUFzUyxFQUFBdFIsTUFBQSxHQUNBbEUsRUFBQXBCLE9BQUEsS0FDQW9CLEVBQUEwVixVQUFBSCxFQUFBLEtBQ0FDLEVBQUFHLFlBR0EsU0FBQUMsRUFBQUwsR0FDQSxJQUFBQyxFQUFBcFEsU0FBQXFRLGNBQUEsVUFDQUQsRUFBQXZSLE9BQUFzUixFQUFBdFIsT0FDQXVSLEVBQUF0UixNQUFBcVIsRUFBQXJSLE1BQ0EsSUFBQWxFLEVBQUF3VixFQUFBalEsV0FBQSxNQUtBLE9BSEF2RixFQUFBa0QsVUFBQSxFQUFBc1MsRUFBQXZSLFFBQ0FqRSxFQUFBcEIsTUFBQSxNQUNBb0IsRUFBQTBWLFVBQUFILEVBQUEsS0FDQUMsRUFBQUcsWUFHQSxNQUFBRSxFQUNBM1gsWUFBQTRYLEdBQ0EsSUFBQUMsRUFBQTNYLEtBQ0EyWCxFQUFBM2EsS0FBQTBhLEVBQ0FDLEVBQUFDLFVBQUEsRUFDQUQsRUFBQUUsSUFBQSxJQUFBQyxNQUNBSCxFQUFBRSxJQUFBeE8saUJBQUEsa0JBQ0FzTyxFQUFBQyxVQUFBLElBQ0ssR0FHTDlYLE9BQ0FFLEtBQUE2WCxJQUFBRSxJQUFBL1gsS0FBQWhELE1Bb05BUixFQUFBRCxRQS9NQSxNQUVBdUQsWUFBQUMsRUFBQSxJQVFBQyxLQUFBZ1ksV0FBQSxFQVFBaFksS0FBQWlZLFNBQUEsS0FRQWpZLEtBQUFrWSxTQUFBLEtBUUFsWSxLQUFBMlcsZUFFQXhaLE9BQUF1RSxPQUFBMUIsS0FBQUQsR0FHQUMsS0FBQTBXLFFBQ0FELEVBQUEsWUFDQXpXLEtBQUEwVyxNQUFBbFgsRUFHQVEsS0FBQTBXLFNBWUE1VyxVQUFBcVksR0FDQSxJQUFBQyxHQUFBLEVBQ0FyVSxNQUFBQyxRQUFBbVUsS0FDQUMsR0FBQSxFQUNBRCxFQUFBLENBQUFBLElBR0EsTUFBQUUsRUFBQUYsRUFBQWxVLElBQUFxVSxJQUNBLE1BQUFaLEVBQUFkLEVBQUE1VyxLQUFBaVksU0FBQUssR0FFQSxHQUFBdFksS0FBQTJXLGFBQUFlLEdBQ0EsT0FBQTFYLEtBQUEyVyxhQUFBZSxHQUFBRyxJQUVBN1gsS0FBQWdZLFdBQUEsRUFFQSxNQUFBTyxFQUFBLElBQUFkLEVBQUFDLEdBTUEsT0FGQWEsRUFBQUMsT0FDQXhZLEtBQUEyVyxhQUFBZSxHQUFBYSxFQUNBQSxFQUFBVixNQUdBLE9BQUFPLEVBQUFDLEVBQUEsR0FBQUEsRUFVQXZZLFVBQUFxWSxHQUNBLElBQUFDLEdBQUEsRUFDQXJVLE1BQUFDLFFBQUFtVSxLQUNBQyxHQUFBLEVBQ0FELEVBQUEsQ0FBQUEsSUFHQSxNQUFBRSxFQUFBRixFQUFBbFUsSUFBQXFVLElBQ0EsTUFBQVosRUFBQWQsRUFBQTVXLEtBQUFrWSxTQUFBSSxHQUVBLEdBQUF0WSxLQUFBMlcsYUFBQWUsR0FDQSxPQUFBMVgsS0FBQTJXLGFBQUFlLEdBRUExWCxLQUFBZ1ksV0FBQSxFQUVBLE1BQUFTLEVBQUEsSUFBQXpZLEtBQUEwVyxNQUFBZ0IsR0FFQSxPQURBMVgsS0FBQTJXLGFBQUFlLEdBQUFlLEVBQ0FBLElBR0EsT0FBQUwsRUFBQUMsRUFBQSxHQUFBQSxFQVlBdlksVUFBQTlDLEVBQUFtYSxFQUFBdUIsR0FDQTFZLEtBQUFnWSxXQUFBLEVBRUEsTUFBQU8sRUFBQSxJQUFBZCxFQUFBemEsR0FDQWdELEtBQUEyVyxhQUFBM1osR0FBQXViLEVBQ0EsTUFBQUksRUFBQSxJQUFBYixNQVFBLE9BSEFhLEVBQUF0UCxpQkFBQSxPQUpBLFNBQUF1UCxJQUNBTCxFQUFBVixJQUFBRSxJQUFBVyxFQUFBQyxHQUNBQSxFQUFBclAsb0JBQUEsT0FBQXNQLEtBR0FELEVBQUFaLElBQUFaLEVBQUFZLElBRUFRLEVBQUFWLElBV0EvWCxXQUFBOUMsRUFBQW1hLEdBQ0EsT0FBQW5YLEtBQUE2WSxVQUFBN2IsRUFBQW1hLEVBQUFELEdBV0FwWCxXQUFBOUMsRUFBQW1hLEdBQ0EsT0FBQW5YLEtBQUE2WSxVQUFBN2IsRUFBQW1hLEVBQUFLLEdBUUExWCxpQkFDQSxHQUFBRSxLQUFBZ1ksVUFDQSxTQUVBLFFBQUFOLEtBQUExWCxLQUFBMlcsYUFFQSxJQURBM1csS0FBQTJXLGFBQUFlLEdBQ0FFLFNBQ0EsU0FJQSxPQURBNVgsS0FBQWdZLFdBQUEsR0FDQSxFQVVBbFkscUJBQ0EsSUFBQWdaLEVBQUEsRUFDQXJWLEVBQUEsRUFDQSxRQUFBaVUsS0FBQTFYLEtBQUEyVyxhQUVBbFQsSUFEQXpELEtBQUEyVyxhQUFBZSxHQUVBRSxXQUNBa0IsR0FBQSxHQUdBLFdBQUFyVixFQUNBLEVBRUF2RCxLQUFBaU8sTUFBQTJLLEVBQUFyVixFQUFBLHNDQ3pRQSxTQUFBc1YsR0FJMkIxYyxFQUFRLElBNEJuQ0csRUFBQUQsUUF6QkEsU0FBQWthLEVBQUF1QyxHQUVBLHFCQUFBQSxLQUNBdkMsRUFBQSxhQUFBQSxFQUFBLFNBQUFBLEVBQUEsV0FFQSxXQUFBdUMsRUFDQXhQLFdBQUF5UCxVQUFBQyxVQUFBQyxNQUFBLHNCQUFBQyxFQUVBLE9BQUFKLElBSUEsVUFBQUEsRUFDQXhQLFdBQUF5UCxVQUFBQyxVQUFBQyxNQUFBLHFCQUFBQyxFQUVBLFlBQUFKLElBQ0FELEVBQUFNLGFBRUEsVUFBQUwsR0FDQSxpQkFBQWhTLFNBQUFzUyxvREMxQkEsSUFBQUMsRUFHQUEsRUFBQSxXQUNBLE9BQUF2WixLQURBLEdBSUEsSUFFQXVaLEtBQUEsSUFBQUMsU0FBQSxpQkFDQyxNQUFBN00sR0FFRCxpQkFBQWxPLFNBQUE4YSxFQUFBOWEsUUFPQWpDLEVBQUFELFFBQUFnZCxpQkNXQSxNQUFBRSxFQUFBLENBQ0FDLGFBQUEsT0FDQUMsYUFBQSxRQUNBQyxZQUFBLE9BQ0FDLFlBQUEsT0FDQUMsWUFBQSxPQUNBQyxjQUFBLFFBZ0tBdmQsRUFBQUQsUUEzSkEsTUFDQXVELFlBQUFDLEVBQUEsSUFRQUMsS0FBQWhELEtBQUEsS0FRQWdELEtBQUE0WCxVQUFBLEVBUUE1WCxLQUFBZ2EsU0FBQSxHQVFBaGEsS0FBQWlhLE1BQUEsR0FFQTljLE9BQUF1RSxPQUFBMUIsS0FBQUQsR0FFQUMsS0FBQXlaLFVBRUEsaUJBQUExWixHQUNBQyxLQUFBd1ksS0FBQXpZLEdBVUFELEtBQUE0WCxHQUNBMVgsS0FBQWhELEtBQUEwYSxFQUNBMVgsS0FBQTRYLFVBQUEsRUFTQTlYLEtBQUFvYSxJQVNBcGEsS0FBQW9hLEVBQUE5UixJQVdBdEksV0FBQW9hLEVBQUFDLElBU0FyYSxnQkFDQSxJQUFBRSxLQUFBZ2EsU0FBQXZXLFNBQUF6RCxLQUFBaWEsTUFBQXhXLE9BQUEsQ0FFQSxJQUNBMlcsRUFDQUMsRUFGQUMsRUFBQSxJQUFBQyxNQUdBLElBQUFILEtBQUFwYSxLQUFBeVosUUFFQSxjQURBWSxFQUFBQyxFQUFBRSxZQUFBSixJQU1BLFVBQUFDLEdBQ0FyYSxLQUFBaWEsTUFBQS9NLEtBQUFsTixLQUFBeVosUUFBQVcsSUFMQXBhLEtBQUFnYSxTQUFBOU0sS0FBQWxOLEtBQUF5WixRQUFBVyxJQVdBLE9BQUFwYSxLQUFBZ2EsU0FBQXZXLE9BQ0F6RCxLQUFBZ2EsU0FBQSxHQUdBaGEsS0FBQWlhLE1BQUF4VyxPQUNBekQsS0FBQWlhLE1BQUEsR0FHQSxHQVVBbmEsY0FDQSxPQUFBRSxLQUFBZ2EsU0FBQXZXLE9BQUEsR0FDQXpELEtBQUFnYSxTQUFBUyxRQUNBemEsS0FBQWdhLFNBQUEsSUFHQSxJQUFBaGEsS0FBQWdhLFNBQUF2VyxTQUNBekQsS0FBQWdhLFNBQUF2VyxPQUFBLEVBQ0F6RCxLQUFBaWEsTUFBQXhXLFFBQ0F6RCxLQUFBaWEsTUFBQSxHQUlBamEsS0FBQWlhLE1BQUF4VyxPQUFBLEdBQ0F6RCxLQUFBaWEsTUFBQVEsUUFDQXphLEtBQUFpYSxNQUFBLEtBR0EsSUFBQWphLEtBQUFpYSxNQUFBeFcsU0FDQXpELEtBQUFpYSxNQUFBeFcsT0FBQSxHQUdBLHVCQ3hMQSxNQUFBaVQsRUFBY3JhLEVBQVEsSUFDdEJxZSxFQUF3QnJlLEVBQVEsSUFDaENvYSxFQUFZcGEsRUFBUSxJQUVwQixJQUFBc2UsRUFBQSxLQU9BLEdBSkFsRSxFQUFBLGNBQ0FrRSxFQUFBLElBQUFsYyxPQUFBNGEsY0FHQTVDLEVBQUEsZ0JBU0F6UCxTQUFBcUMsaUJBQUEsYUFQQSxTQUFBdVIsSUFDQSxNQUFBQyxFQUFBRixFQUFBRyxxQkFDQUQsRUFBQUUsT0FBQUosRUFBQUssYUFBQSxXQUNBSCxFQUFBSSxRQUFBTixFQUFBTyxhQUNBTCxFQUFBTSxNQUFBLEdBQ0FuVSxTQUFBc0Msb0JBQUEsYUFBQXNSLEtBMEdBcGUsRUFBQUQsUUFyR0EsY0FBQW1hLEVBQ0E1VyxZQUFBQyxFQUFBLElBQ0EyRSxNQUFBM0UsR0FRQUMsS0FBQTJhLGVBUUEzYSxLQUFBK2EsT0FBQSxLQUVBNWQsT0FBQXVFLE9BQUExQixLQUFBRCxHQUdBRCxLQUFBNFgsR0FDQSxJQUFBQyxFQUFBM1gsS0FFQUEsS0FBQWhELEtBQUEwYSxFQUVBLElBQUEwRCxFQUFBVixFQUFBaEQsR0FDQTBELElBQUExRCxJQUNBQSxFQUFBMEQsRUFBQXBiLEtBQUFxYixpQkF1QkEsSUFBQUMsRUFBQSxJQUFBQyxlQUNBRCxFQUFBRSxLQUFBLE1BQUE5RCxHQUFBLEdBQ0E0RCxFQUFBRyxhQUFBLGNBRUFILEVBQUFJLE9BdkJBLFNBQUEvTyxHQUVBZ0wsRUFBQWdELGFBQUFnQixnQkFBQWhQLEVBQUFpUCxPQUFBQyxTQUNBLFNBQUFkLEdBQ0FwRCxFQUFBb0QsU0FDQXBELEVBQUFDLFVBQUEsR0FFQSxTQUFBa0UsR0FDQW5FLEVBQUFvRSxjQUVBcEUsRUFBQWEsS0FBQWIsRUFBQTNhLE1BRUEyYSxFQUFBQyxVQUFBLEtBWUEwRCxFQUFBVSxPQUdBbGMsS0FBQW9hLEdBRUFsYSxLQUFBK2EsUUFJQS9hLEtBQUFpYyxXQUFBL0IsR0FBQSxHQUNBaUIsTUFBQSxHQUdBcmIsS0FBQW9hLEVBQUE5UixHQUVBcEksS0FBQSthLFNBSUEzUyxLQUFBLEVBRUFwSSxLQUFBaWMsV0FBQS9CLEdBQUEsR0FDQWlCLE1BQUEvUyxJQUdBdEksV0FBQW9hLEVBQUFDLEdBQ0FBLEVBQUEsa0JBQUFBLEtBRUEsSUFBQVUsRUFBQTdhLEtBQUEyYSxhQUFBRyxxQkFHQSxHQUZBRCxFQUFBRSxPQUFBL2EsS0FBQSthLE9BQ0FGLEVBQUFWLE9BQ0FELEVBQUEsQ0FDQSxJQUFBZ0MsRUFBQWxjLEtBQUEyYSxhQUFBd0IsYUFDQUQsRUFBQUUsS0FBQTFlLE1BQUF3YyxFQUNBVyxFQUFBSSxRQUFBaUIsR0FDQUEsRUFBQWpCLFFBQUFqYixLQUFBMmEsYUFBQU8sa0JBRUFMLEVBQUFJLFFBQUFqYixLQUFBMmEsYUFBQU8sYUFFQSxPQUFBTCxxQkN6SEEsTUFBQTNiLEVBQWtCN0MsRUFBUSxJQUcxQixNQUFBNEMsRUFDQWEsWUFBQUMsRUFBQSxJQVFBQyxLQUFBcWMsZUFBQSxFQVFBcmMsS0FBQXNjLFNBQUEsRUFRQXRjLEtBQUF1YyxjQUFBLEVBUUF2YyxLQUFBNkYsT0FBQSxHQVFBN0YsS0FBQThGLE1BQUEsR0FRQTlGLEtBQUFtWCxNQUFBLEtBUUFuWCxLQUFBd2MsUUFBQSxFQVFBeGMsS0FBQXljLFFBQUEsRUFFQXpjLEtBQUEwYyxZQUFBdEQsRUFHQWpjLE9BQUF1RSxPQUFBMUIsS0FBQUQsR0FFQUMsS0FBQW1iLFFBZUFyYixnQkFBQTZjLEVBQUFDLEVBQUEvRSxFQUFBOU4sRUFBQUUsRUFBQTRTLEdBQ0EsSUFBQUMsRUFBQSxJQUFBN2QsRUFBQSxDQUNBa1ksTUFBQVUsRUFDQWhTLE9BQUFvRSxFQUNBbkUsTUFBQWlFLElBR0FnVCxFQUFBaFosTUFBQUMsUUFBQTRZLEdBRUFJLEVBQUEsRUFDQUgsSUFDQUEsRUFBQSxHQUVBLFFBQUFyWixFQUFBLEVBQWtCQSxFQUFBbVosRUFBZ0JuWixJQUVsQ3daLEVBREFELEVBQ0FILEVBQUFwWixHQUVBb1osRUFFQUUsRUFBQUcsU0FBQUQsRUFBQXhaLEVBQUFxWixHQUVBLE9BQUFDLEVBVUFoZCxRQUNBLFdBQUFiLEVBQUEsQ0FDQWtZLE1BQUFuWCxLQUFBbVgsTUFDQXVGLE9BQUExYyxLQUFBMGMsT0FDQUgsY0FBQXZjLEtBQUF1YyxnQkFZQXpjLFNBQUFvZCxFQUFBQyxFQUFBQyxHQUNBcGQsS0FBQTBjLFNBQ0ExYyxLQUFBMGMsT0FBQSxJQUVBMWMsS0FBQXVjLGVBQUFXLEVBQ0FsZCxLQUFBMGMsT0FBQXhQLEtBQUEsSUFBQWhPLEVBQUEsQ0FDQW1lLFFBQUFyZCxLQUFBdWMsY0FDQXBGLE1BQUFuWCxLQUFBbVgsTUFDQW1HLFNBQUFILEVBQ0FJLFNBQUFILEtBU0F0ZCxRQUNBRSxLQUFBc2MsU0FBQSxFQUNBdGMsS0FBQXFjLGVBQUEsRUFTQXZjLE9BQUEySCxHQUNBLEdBQUF6SCxLQUFBMGMsT0FBQWpaLE9BQUEsRUFRQSxJQVBBekQsS0FBQXNjLFVBQUE3VSxFQUVBekgsS0FBQXNjLFVBQUF0YyxLQUFBdWMsZ0JBQ0F2YyxLQUFBc2MsU0FBQXRjLEtBQUFzYyxTQUFBdGMsS0FBQXVjLGNBQ0F2YyxLQUFBcWMsZUFBQSxHQUdBcmMsS0FBQXNjLFNBQUF0YyxLQUFBMGMsT0FBQTFjLEtBQUFxYyxnQkFBQWdCLFNBQ0FyZCxLQUFBcWMsaUJBV0F2YyxrQkFDQSxXQUFBRSxLQUFBMGMsT0FBQWpaLE9BQ0EsS0FFQXpELEtBQUEwYyxPQUFBMWMsS0FBQXFjLGdCQVlBdmMsS0FBQW9ILEVBQUE1RyxFQUFBQyxHQUNBLElBQUFpZCxFQUFBeGQsS0FBQXlkLGtCQUNBdlcsRUFBQW9RLFVBQUF0WCxLQUFBbVgsTUFBQXFHLEVBQUFGLFNBQUF0ZCxLQUFBOEYsTUFBQTlGLEtBQUF3YyxRQUFBZ0IsRUFBQUQsU0FBQXZkLEtBQUE2RixPQUFBN0YsS0FBQXljLFFBQUF6YyxLQUFBOEYsTUFBQTlGLEtBQUE2RixPQUFBdkYsRUFBQUMsRUFBQVAsS0FBQThGLE1BQUE5RixLQUFBNkYsU0FJQXJKLEVBQUFELFFBQUEwQyxpQkN4S0F6QyxFQUFBRCxRQXhDQSxNQUNBdUQsWUFBQUMsRUFBQSxJQVFBQyxLQUFBcWQsUUFBQSxFQVFBcmQsS0FBQXNkLFNBQUEsRUFRQXRkLEtBQUF1ZCxTQUFBLEVBUUF2ZCxLQUFBbVgsTUFBQSxLQUVBaGEsT0FBQXVFLE9BQUExQixLQUFBRCxvQkMxQ0EsTUFBQTJkLEVBQUF4ZCxLQUFBOEIsR0FBQSxJQU1BeEYsRUFBQUQsUUFKQSxTQUFBb2hCLEdBQ0EsT0FBQUEsRUFBQUQsa0JDRkEsTUFBQUUsRUFBQSxJQUFBMWQsS0FBQThCLEdBTUF4RixFQUFBRCxRQUpBLFNBQUFzaEIsR0FDQSxPQUFBQSxFQUFBRCxrQkNBQXBoQixFQUFBRCxRQUpBLFNBQUF1aEIsRUFBQUMsR0FDQSxPQUFBN2QsS0FBQThkLE1BQUFELEVBQUF6ZCxFQUFBd2QsRUFBQXhkLElBQUF5ZCxFQUFBemQsRUFBQXdkLEVBQUF4ZCxJQUFBeWQsRUFBQXhkLEVBQUF1ZCxFQUFBdmQsSUFBQXdkLEVBQUF4ZCxFQUFBdWQsRUFBQXZkLG9CQ3dDQS9ELEVBQUFELFFBeENBLFNBQUFtRSxFQUFBLENBQXFDSixFQUFBLEVBQUFDLEVBQUEsR0FBZThPLEdBR3BELE9BQUEzTyxFQUFBSixJQUFBK08sRUFBQS9PLEdBQUFJLEVBQUFILElBQUE4TyxFQUFBOU8sRUFDQSxFQUNHRyxFQUFBSixJQUFBK08sRUFBQS9PLEVBQ0hJLEVBQUFILEVBQUE4TyxFQUFBOU8sRUFDQSxFQUVBTCxLQUFBOEIsR0FFR3RCLEVBQUFILElBQUE4TyxFQUFBOU8sRUFDSEcsRUFBQUosRUFBQStPLEVBQUEvTyxFQUNBLElBQUFKLEtBQUE4QixHQUVBOUIsS0FBQThCLEdBQUEsRUFFR3RCLEVBQUFKLEVBQUErTyxFQUFBL08sR0FBQUksRUFBQUgsRUFBQThPLEVBQUE5TyxFQUdITCxLQUFBK2QsTUFBQTVPLEVBQUEvTyxFQUFBSSxFQUFBSixJQUFBSSxFQUFBSCxFQUFBOE8sRUFBQTlPLElBRUFHLEVBQUFKLEVBQUErTyxFQUFBL08sR0FBQUksRUFBQUgsRUFBQThPLEVBQUE5TyxFQUdBTCxLQUFBOEIsR0FBQSxFQUFBOUIsS0FBQStkLE1BQUE1TyxFQUFBOU8sRUFBQUcsRUFBQUgsSUFBQThPLEVBQUEvTyxFQUFBSSxFQUFBSixJQUVBSSxFQUFBSixFQUFBK08sRUFBQS9PLEdBQUFJLEVBQUFILEVBQUE4TyxFQUFBOU8sRUFHQUwsS0FBQThCLEdBQUE5QixLQUFBK2QsTUFBQXZkLEVBQUFKLEVBQUErTyxFQUFBL08sSUFBQStPLEVBQUE5TyxFQUFBRyxFQUFBSCxJQUtBLElBQUFMLEtBQUE4QixHQUFBOUIsS0FBQStkLE1BQUF2ZCxFQUFBSCxFQUFBOE8sRUFBQTlPLElBQUFHLEVBQUFKLEVBQUErTyxFQUFBL08sb0JDaEJBOUQsRUFBQUQsUUFuQkEsU0FBQW1FLEVBQUEsQ0FBNkNKLEVBQUEsRUFBQUMsRUFBQSxHQUFlOE8sRUFBQTVPLEdBQzVELE1BQUFqQyxFQUFBMEIsS0FBQWdlLElBQUF6ZCxHQUNBM0QsRUFBQW9ELEtBQUFpZSxJQUFBMWQsR0FDQTJkLEVBQUEsR0FHQUEsRUFBQTlkLEVBQUErTyxFQUFBL08sRUFBQUksRUFBQUosRUFDQThkLEVBQUE3ZCxFQUFBOE8sRUFBQTlPLEVBQUFHLEVBQUFILEVBR0EsTUFBQThkLEVBQUFELEVBQUE5ZCxFQUFBeEQsRUFBQXNoQixFQUFBN2QsRUFBQS9CLEVBQ0E4ZixFQUFBRixFQUFBOWQsRUFBQTlCLEVBQUE0ZixFQUFBN2QsRUFBQXpELEVBS0EsT0FGQXNoQixFQUFBOWQsRUFBQStkLEVBQUEzZCxFQUFBSixFQUNBOGQsRUFBQTdkLEVBQUErZCxFQUFBNWQsRUFBQUgsRUFDQTZkLGtCQ1hBLE1BQUFoZixFQUNBVSxZQUFBQyxFQUFBLElBUUFDLEtBQUFNLEVBQUEsRUFRQU4sS0FBQU8sRUFBQSxFQVFBUCxLQUFBdWUsR0FBQSxFQVFBdmUsS0FBQXdlLEdBQUEsRUFRQXhlLEtBQUF5ZSxTQUFBLEVBUUF6ZSxLQUFBaEQsS0FBQSxLQVFBZ0QsS0FBQTBlLGdCQUFBLEdBRUF2aEIsT0FBQXVFLE9BQUExQixLQUFBRCxHQVNBRCxPQUFBMkgsR0FDQXpILEtBQUFNLEdBQUFOLEtBQUF1ZSxHQUFBOVcsRUFDQXpILEtBQUFPLEdBQUFQLEtBQUF3ZSxHQUFBL1csRUFDQXpILEtBQUE4YyxLQUFBM1UsT0FBQVYsR0FVQTNILFdBQUE2ZSxHQUNBLE9BQUEzZSxLQUFBeWUsVUFDQXZlLEtBQUEwZSxJQUFBRCxHQUFBM2UsS0FBQXllLFNBQ0FFLEVBQUEsRUFDQTNlLEtBQUF5ZSxTQUNTRSxFQUFBLEVBQ1QzZSxLQUFBeWUsU0FFQSxFQU1BRSxFQVVBN2Usa0JBQ0EsR0FBQUUsS0FBQThjLEtBQ0EsT0FBQTljLEtBQUE4YyxLQUFBVyxrQkFVQTNkLEtBQUFvSCxHQUNBbEgsS0FBQThjLE1BQ0E5YyxLQUFBOGMsS0FBQTNYLEtBQUErQixFQUFBbEgsS0FBQU0sRUFBQU4sS0FBQU8sR0FVQVQsUUFDQSxXQUFBVixFQUFBLENBQ0EwZCxLQUFBOWMsS0FBQThjLEtBQUErQixXQUtBcmlCLEVBQUFELFFBQUE2QyxvQkM5SUEsU0FBQTJaLEdBTUEsTUFBQStGLEVBQWdCemlCLEVBQVEsSUFHeEJ5USxRQUFBQyxJQUFBZ1MsTUFBQSxRQUFBaEcsRUFBQXRhLFFBR0EsTUFBQXVnQixFQUFBRCxNQUFBRSxPQUFBL2UsS0FBQWdmLE9BQ0FDLEVBQUFKLE1BQUFLLFNBQUFDLFVBQ0FDLEVBQUFQLE1BQUFLLFNBQUFHLE9BQ0FDLEVBQUFULE1BQUFLLFNBQUFLLGFBRUFDLEdBREFYLE1BQUFLLFNBQUFPLFVBQ0FaLE1BQUFLLFNBQUFRLFNBQ0FDLEVBQUFkLE1BQUFlLFVBQUFDLE9BQUFDLGVBQ0FDLEVBQUFsQixNQUFBZSxVQUFBQyxPQUFBRyxjQXNrQkExakIsRUFBQUQsUUFwa0JBLE1BQ0F1RCxZQUFBQyxFQUFBLElBUUFDLEtBQUFtZ0IsYUFBQSxHQVFBbmdCLEtBQUFvZ0IsVUFBQSxFQVFBcGdCLEtBQUFxZ0IsVUFBQSxLQVFBcmdCLEtBQUFzZ0IsWUFBQSxLQVFBdGdCLEtBQUF1Z0IsVUFBQSxLQVFBdmdCLEtBQUE0ZixRQUFBLEtBUUE1ZixLQUFBd2dCLFNBQUEsRUFRQXhnQixLQUFBeWdCLFNBQUEsSUFRQXpnQixLQUFBMGdCLFlBQUEsRUFRQTFnQixLQUFBMmdCLG1CQUFBLEVBUUEzZ0IsS0FBQTRnQixnQkFBQSxLQVFBNWdCLEtBQUE2Z0IsV0FBQSxLQVFBN2dCLEtBQUFRLE1BQUEsR0FFQVIsS0FBQXFnQixVQUFBLEdBQ0FyZ0IsS0FBQXNnQixZQUFBLEdBQ0F0Z0IsS0FBQXVnQixVQUFBLEdBQ0FwakIsT0FBQXVFLE9BQUExQixLQUFBRCxHQUVBQyxLQUFBNGYsUUFBQSxJQUFBRixFQUFBLElBQUFWLEVBQUFoZixLQUFBd2dCLFNBQUF4Z0IsS0FBQXlnQixVQUFBemdCLEtBQUEwZ0IsWUFFQTFnQixLQUFBbWdCLGVBQ0FuZ0IsS0FBQW1nQixhQUFBVyxTQUFBOWdCLEtBQUFtZ0IsYUFBQSxLQUlBbmdCLEtBQUEyZ0Isb0JBQ0EzZ0IsS0FBQTRnQixnQkFBQSxJQUFBOUIsR0FHQTllLEtBQUE0Z0IsaUJBQ0E1Z0IsS0FBQStnQixtQkFBQS9nQixLQUFBNGdCLGlCQVlBOWdCLE9BQUFraEIsR0FHQWhoQixLQUFBNGdCLGlCQUFBNWdCLEtBQUE0Z0IsZ0JBQUE5ZCxPQUNBOUMsS0FBQTRnQixnQkFBQTlkLFFBR0EsSUFBQXFZLEVBQUEvYSxLQUFBQyxNQUNBLEdBQUEyZ0IsRUFDQWhoQixLQUFBNGYsUUFBQXFCLEtBQUFELEVBQUEsV0FDQWhoQixLQUFBNGYsUUFBQXNCLGtCQUNLLENBQ0wsSUFBQUMsRUFBQW5oQixLQUFBLFVBQUFtYixFQUFBbmIsS0FBQW9oQixlQUFBLE1BQUFwaEIsS0FBQW1nQixhQUNBbmdCLEtBQUE0ZixRQUFBcUIsS0FBQUUsRUFBQSxPQUNBbmhCLEtBQUE0ZixRQUFBc0IsY0FHQSxPQUFBOWdCLEtBQUFDLE1BQUE4YSxFQVNBcmIsV0FFQSxJQURBLElBQUE2QixFQUFBLEdBQ0FzTixFQUFBalAsS0FBQTRmLFFBQUF5QixjQUE4Q3BTLEVBQUdBLElBQUFxUyxPQUNqRHJTLEVBQUFzUyxpQkFBQSxJQUFBdFMsRUFBQXVTLGVBQUEsT0FBQXZTLEVBQUF1UyxnQkFDQTdmLEVBQUFzTixFQUFBdVMsZUFBQSxDQUNBbGhCLEVBQUEyTyxFQUFBd1MsY0FBQW5oQixFQUNBQyxFQUFBME8sRUFBQXdTLGNBQUFsaEIsRUFDQUUsTUFBQXdPLEVBQUF5UyxXQUNBaGhCLE9BQUEsQ0FDQUosRUFBQTJPLEVBQUEwUyxpQkFBQXJoQixFQUNBQyxFQUFBME8sRUFBQTBTLGlCQUFBcGhCLEdBRUFTLGVBQUFpTyxFQUFBMlMsaUJBQ0EzZ0IsZ0JBQUFnTyxFQUFBNFMsbUJBRUE3aEIsS0FBQTRnQixpQkFBQTVnQixLQUFBNGdCLGdCQUFBQyxhQUNBbGYsRUFBQXNOLEVBQUF1UyxlQUFBWCxXQUFBN2dCLEtBQUE0Z0IsZ0JBQUFDLFdBQUE1UixFQUFBdVMsZ0JBQUEsT0FJQSxPQUFBN2YsRUFTQTdCLG9CQUFBSixHQUVBLElBQUFvaUIsRUFBQTloQixLQUFBK2hCLFdBQ0EsUUFBQTloQixLQUFBNmhCLEVBQUEsQ0FDQSxJQUFBRSxFQUFBdGlCLEVBQUFPLEdBRUEraEIsTUFBQTdnQixZQUNBNmdCLEVBQUE3WixPQUFBMlosRUFBQTdoQixLQVdBSCxVQUFBbWlCLEdBQ0EsUUFBQWhpQixLQUFBZ2lCLEVBQUEsQ0FDQSxJQUFBRCxFQUFBQyxFQUFBaGlCLEdBQ0FELEtBQUFraUIsUUFBQUYsR0FFQWhpQixLQUFBbWlCLE9BQUEsRUFTQXJpQixRQUFBa2lCLEdBR0FBLEVBQUE1ZixnQkFDQTRmLEVBQUE1YyxXQUFBLEVBQUFwRixLQUFBUSxPQUNBd2hCLEVBQUF4aEIsTUFBQVIsS0FBQVEsT0FHQSxJQUVBL0QsRUFBQStHLEVBQUFGLEVBQUE4ZSxFQUFBQyxFQUZBQyxFQUFBLElBQUFuRCxFQUNBb0QsRUFBQSxJQUFBL0MsRUFFQStDLEVBQUEzaEIsWUFBQW9oQixFQUFBcGhCLFlBQ0EyaEIsRUFBQTFoQixRQUFBbWhCLEVBQUFuaEIsUUFDQTBoQixFQUFBemhCLFNBQUFraEIsRUFBQWxoQixTQUlBLE1BQUFraEIsRUFBQXpnQixXQUNBZ2hCLEVBQUFDLE9BQUFqaEIsU0FBQXlnQixFQUFBemdCLFVBRUEsTUFBQXlnQixFQUFBeGdCLGVBQ0ErZ0IsRUFBQUMsT0FBQWhoQixhQUFBd2dCLEVBQUF4Z0IsY0FFQSxNQUFBd2dCLEVBQUF2Z0IsYUFDQThnQixFQUFBQyxPQUFBL2dCLFdBQUF1Z0IsRUFBQXZnQixZQUdBdWdCLEVBQUE3Z0IsV0FDQW1oQixFQUFBaGQsS0FBQWdhLEVBQUFtRCxjQUVBSCxFQUFBaGQsS0FBQWdhLEVBQUFvRCxlQUdBSixFQUFBelYsU0FBQXZNLEVBQUEwaEIsRUFBQTFoQixFQUNBZ2lCLEVBQUF6VixTQUFBdE0sRUFBQXloQixFQUFBemhCLEVBQ0EraEIsRUFBQUssU0FBQVgsRUFBQS9oQixHQUNBcWlCLEVBQUE3aEIsTUFBQXVoQixFQUFBdmhCLE1BQ0E2aEIsRUFBQXZoQixjQUFBaWhCLEVBQUFqaEIsY0FDQXVoQixFQUFBcGhCLGVBQUE4Z0IsRUFBQTlnQixlQUNBLElBQUEySixFQUFBN0ssS0FBQTRmLFFBQUFnRCxXQUFBTixHQUdBLEdBQUFOLEVBQUFyZCxPQUNBNGQsRUFBQU0sTUFBQSxJQUFBNUMsRUFBQStCLEVBQUFyZCxRQUNBa0csRUFBQWlZLGNBQUFQLFFBQ0ssR0FBQVAsRUFBQTFlLE9BQUEsQ0FFTCxJQURBQSxFQUFBLEdBQ0E3RyxFQUFBLEVBQWlCQSxFQUFBdWxCLEVBQUExZSxPQUFBRyxPQUEwQmhILEtBQzNDMmxCLEVBQUEsSUFBQXBELEdBQ0ErRCxJQUFBZixFQUFBMWUsT0FBQTdHLEdBQUE2RCxFQUFBMGhCLEVBQUExZSxPQUFBN0csR0FBQThELEdBQ0ErQyxFQUFBN0csR0FBQTJsQixFQUVBRyxFQUFBTSxNQUFBLElBQUFoRCxFQUNBMEMsRUFBQU0sTUFBQUcsV0FBQTFmLElBQUFHLFFBQ0FvSCxFQUFBaVksY0FBQVAsUUFDSyxHQUFBUCxFQUFBaUIsTUFDTCxJQUFBemYsRUFBQSxFQUFtQkEsRUFBQXdlLEVBQUFpQixNQUFBeGYsT0FBeUJELElBQUEsQ0FHNUMsSUFGQUYsRUFBQTBlLEVBQUFpQixNQUFBemYsR0FDQTZlLEVBQUEsR0FDQTVsQixFQUFBLEVBQXVCQSxFQUFBNkcsRUFBQUcsT0FBbUJoSCxLQUMxQzJsQixFQUFBLElBQUFwRCxHQUNBK0QsSUFBQXpmLEVBQUE3RyxHQUFBNkQsRUFBQWdELEVBQUE3RyxHQUFBOEQsR0FDQThoQixFQUFBNWxCLEdBQUEybEIsRUFFQUcsRUFBQU0sTUFBQSxJQUFBaEQsRUFDQTBDLEVBQUFNLE1BQUFHLFdBQUFYLElBQUE1ZSxRQUNBb0gsRUFBQWlZLGNBQUFQLFFBR0FBLEVBQUFNLE1BQUEsSUFBQWhELEVBQ0EwQyxFQUFBTSxNQUFBSyxTQUFBbEIsRUFBQXpjLFVBQUF5YyxFQUFBeGMsWUFDQXFGLEVBQUFpWSxjQUFBUCxHQUlBdmlCLEtBQUFxZ0IsVUFBQTJCLEVBQUEvaEIsSUFBQTRLLEVBY0EvSyxZQUFBcWpCLEVBQUE3aUIsRUFBQUMsR0FDQVAsS0FBQXFnQixVQUFBOEMsR0FDQUMsWUFBQSxJQUFBcEUsRUFBQTFlLEVBQUFDLElBYUFULFNBQUFxakIsRUFBQTFpQixHQUNBLElBQUFvSyxFQUFBN0ssS0FBQXFnQixVQUFBOEMsR0FDQXJXLFFBQUFDLElBQUEsWUFBQWxDLEVBQUF3WSxTQUFBeFksR0FDQUEsRUFBQXdZLFNBQUE1aUIsR0FjQVgsa0JBQUFxakIsRUFBQTdpQixFQUFBQyxHQUNBUCxLQUFBcWdCLFVBQUE4QyxHQUNBRyxrQkFBQSxJQUFBdEUsRUFBQTFlLEVBQUFDLElBYUFULG1CQUFBcWpCLEVBQUFJLEdBQ0F2akIsS0FBQXFnQixVQUFBOEMsR0FDQUssbUJBQUFELEdBY0F6akIsb0JBQUFxakIsRUFBQXhGLEVBQUE4RixHQUNBLElBQUE1WSxFQUFBN0ssS0FBQXFnQixVQUFBOEMsR0FDQXRZLEVBQUE2WSxhQUNBLElBQUExRSxFQUFBOWUsS0FBQWdlLElBQUFQLEdBQUF6ZCxLQUFBOEIsR0FBQSxNQUFBeWhCLEVBQ0F2akIsS0FBQWllLElBQUFSLEdBQUF6ZCxLQUFBOEIsR0FBQSxNQUFBeWhCLEdBQUEsR0FDQTVZLEVBQUE4VyxrQkFlQTdoQixrQkFBQXFqQixFQUFBeEYsRUFBQThGLEdBQ0EsSUFBQTVZLEVBQUE3SyxLQUFBcWdCLFVBQUE4QyxHQUNBdFksRUFBQThZLFdBQ0EsSUFBQTNFLEVBQUE5ZSxLQUFBZ2UsSUFBQVAsR0FBQXpkLEtBQUE4QixHQUFBLE1BQUF5aEIsRUFDQXZqQixLQUFBaWUsSUFBQVIsR0FBQXpkLEtBQUE4QixHQUFBLE1BQUF5aEIsR0FBQSxHQUNBNVksRUFBQThXLGtCQWVBN2hCLGFBQUFxakIsRUFBQXRGLEVBQUE0RixHQUNBLElBQUE1WSxFQUFBN0ssS0FBQXFnQixVQUFBOEMsR0FDQXRZLEVBQUE2WSxhQUNBLElBQUExRSxFQUFBOWUsS0FBQWdlLElBQUFMLEdBQUE0RixFQUNBdmpCLEtBQUFpZSxJQUFBTixHQUFBNEYsR0FBQSxHQUNBNVksRUFBQThXLGtCQWVBN2hCLFdBQUFxakIsRUFBQXRGLEVBQUE0RixHQUNBLElBQUE1WSxFQUFBN0ssS0FBQXFnQixVQUFBOEMsR0FDQXRZLEVBQUE4WSxXQUNBLElBQUEzRSxFQUFBOWUsS0FBQWdlLElBQUFMLEdBQUE0RixFQUNBdmpCLEtBQUFpZSxJQUFBTixHQUFBNEYsR0FBQSxHQUNBNVksRUFBQThXLGtCQWVBN2hCLFlBQUFxakIsRUFBQU0sR0FDQXpqQixLQUFBcWdCLFVBQUE4QyxHQUNBUyxZQUFBSCxHQVlBM2pCLFdBQUErakIsR0FDQTdqQixLQUFBNGYsUUFBQWtFLFdBQUEsSUFBQTlFLEVBQUE2RSxFQUFBdmpCLEVBQUF1akIsRUFBQXRqQixJQVlBVCxXQUFBRyxHQUNBRCxLQUFBcWdCLFVBQUFwZ0IsS0FDQUQsS0FBQXNnQixZQUFBcmdCLElBQ0FELEtBQUFxZ0IsVUFBQXBnQixHQUFBOGpCLGVBQUEvakIsS0FBQXNnQixZQUFBcmdCLElBRUFELEtBQUE0ZixRQUFBb0UsWUFBQWhrQixLQUFBcWdCLFVBQUFwZ0IsV0FFQUQsS0FBQXFnQixVQUFBcGdCLElBYUFILFdBQUFHLEdBQ0FELEtBQUFxZ0IsVUFBQXBnQixJQUNBRCxLQUFBcWdCLFVBQUFwZ0IsR0FBQWdrQixVQUFBLEdBVUFua0IsbUJBQUE4Z0IsR0FDQSxJQUFBc0QsRUFBQSxJQUFBbkYsTUFBQUssU0FBQStFLGtCQUNBdkQsRUFBQXdELGVBQ0FGLEVBQUFHLGFBQUEsU0FBQUMsR0FDQTFELEVBQUF3RCxhQUFBRSxFQUFBQyxXQUFBQyxPQUFBQyxXQUFBSCxFQUFBSSxXQUFBRixPQUFBQyxXQUFBSCxLQUdBMUQsRUFBQStELGFBQ0FULEVBQUFVLFdBQUEsU0FBQU4sR0FDQTFELEVBQUErRCxXQUFBTCxFQUFBQyxXQUFBQyxPQUFBQyxXQUFBSCxFQUFBSSxXQUFBRixPQUFBQyxXQUFBSCxLQUdBMUQsRUFBQWlFLFdBQ0FYLEVBQUFZLFNBQUEsU0FBQVIsRUFBQVMsR0FDQW5FLEVBQUFpRSxTQUFBUCxFQUFBQyxXQUFBQyxPQUFBQyxXQUFBSCxFQUFBSSxXQUFBRixPQUFBQyxXQUFBTSxFQUFBVCxLQUdBMUQsRUFBQW9FLFlBQ0FkLEVBQUFlLFVBQUEsU0FBQVgsRUFBQVksR0FDQXRFLEVBQUFvRSxVQUFBVixFQUFBQyxXQUFBQyxPQUFBQyxXQUFBSCxFQUFBSSxXQUFBRixPQUFBQyxXQUFBUyxFQUFBWixLQUdBdGtCLEtBQUE0ZixRQUFBdUYsbUJBQUFqQixHQVlBcGtCLFlBQUFzbEIsR0FDQXBsQixLQUFBdWdCLFVBQUE2RSxLQUNBcGxCLEtBQUE0ZixRQUFBeUYsYUFBQXJsQixLQUFBdWdCLFVBQUE2RSxXQUNBcGxCLEtBQUF1Z0IsVUFBQTZFLElBYUF0bEIsU0FBQXdsQixHQUNBLEdBQUFBLEtBQUFybEIsS0FBQUQsS0FBQXVnQixVQUFBK0UsRUFBQXJsQixJQUFBLEVBRUFxbEIsRUFBQWxqQixlQUFBa2pCLEVBQUFDLHFCQUNBRCxFQUFBQyxtQkFBQSxFQUFBdmxCLEtBQUFRLE9BQ0E4a0IsRUFBQTlrQixNQUFBUixLQUFBUSxPQUdBLElBQUFnbEIsRUFBQUYsRUFBQUcsY0FBQXpsQixNQUNBd2xCLElBQ0F4bEIsS0FBQXVnQixVQUFBK0UsRUFBQXJsQixJQUFBdWxCLHdDQzFrQkFocEIsRUFBQUQsUUFUQSxDQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSw0QkNOQSxJQUFBbXBCOzs7Ozs7Ozs7OztDQUtBLFNBQUFqbkIsRUFBQXVJLEVBQUEyZSxFQUFBdk0sR0FDQSxhQUVBLElBK0ZBMVgsRUEvRkFra0IsRUFBQSxrQ0FDQUMsRUFBQTdlLEVBQUFxUSxjQUFBLE9BRUF5TyxFQUFBLFdBRUEzWCxFQUFBak8sS0FBQWlPLE1BQ0F5USxFQUFBMWUsS0FBQTBlLElBQ0F2ZSxFQUFBRCxLQUFBQyxJQVNBLFNBQUEwbEIsRUFBQUMsRUFBQUMsRUFBQS9lLEdBQ0EsT0FBQWdmLFdBQUFDLEVBQUFILEVBQUE5ZSxHQUFBK2UsR0FZQSxTQUFBRyxFQUFBQyxFQUFBTCxFQUFBOWUsR0FDQSxRQUFBbkQsTUFBQUMsUUFBQXFpQixLQUNBQyxFQUFBRCxFQUFBbmYsRUFBQThlLEdBQUE5ZSxJQUNBLEdBV0EsU0FBQW9mLEVBQUFDLEVBQUFDLEVBQUF0ZixHQUNBLElBQUF6SyxFQUVBLEdBQUE4cEIsRUFJQSxHQUFBQSxFQUFBRSxRQUNBRixFQUFBRSxRQUFBRCxFQUFBdGYsUUFDSyxHQUFBcWYsRUFBQTlpQixTQUFBMlYsRUFFTCxJQURBM2MsRUFBQSxFQUNBQSxFQUFBOHBCLEVBQUE5aUIsUUFDQStpQixFQUFBNXBCLEtBQUFzSyxFQUFBcWYsRUFBQTlwQixLQUFBOHBCLEdBQ0E5cEIsU0FHQSxJQUFBQSxLQUFBOHBCLEVBQ0FBLEVBQUFqb0IsZUFBQTdCLElBQUErcEIsRUFBQTVwQixLQUFBc0ssRUFBQXFmLEVBQUE5cEIsS0FBQThwQixHQVlBLFNBQUFHLEVBQUFDLEVBQUEzcEIsRUFBQTRwQixHQUNBLElBQUFDLEVBQUEsc0JBQUE3cEIsRUFBQSxLQUFBNHBCLEVBQUEsU0FDQSxrQkFDQSxJQUFBamEsRUFBQSxJQUFBbWEsTUFBQSxtQkFDQUMsRUFBQXBhLEtBQUFvYSxNQUFBcGEsRUFBQW9hLE1BQUE5UCxRQUFBLHNCQUNBQSxRQUFBLGtCQUNBQSxRQUFBLCtDQUErRCxzQkFFL0RsSyxFQUFBdE8sRUFBQXFPLFVBQUFyTyxFQUFBcU8sUUFBQWthLE1BQUF2b0IsRUFBQXFPLFFBQUFDLEtBSUEsT0FIQUEsR0FDQUEsRUFBQW5RLEtBQUE2QixFQUFBcU8sUUFBQStaLEVBQUFFLEdBRUFKLEVBQUE1YSxNQUFBL0wsS0FBQWluQixZQWFBdmxCLEVBREEsbUJBQUF2RSxPQUFBdUUsT0FDQSxTQUFBa2EsR0FDQSxHQUFBQSxJQUFBeEMsR0FBQSxPQUFBd0MsRUFDQSxVQUFBc0wsVUFBQSw4Q0FJQSxJQURBLElBQUFDLEVBQUFocUIsT0FBQXllLEdBQ0F3TCxFQUFBLEVBQTJCQSxFQUFBSCxVQUFBeGpCLE9BQTBCMmpCLElBQUEsQ0FDckQsSUFBQXZNLEVBQUFvTSxVQUFBRyxHQUNBLEdBQUF2TSxJQUFBekIsR0FBQSxPQUFBeUIsRUFDQSxRQUFBd00sS0FBQXhNLEVBQ0FBLEVBQUF2YyxlQUFBK29CLEtBQ0FGLEVBQUFFLEdBQUF4TSxFQUFBd00sSUFLQSxPQUFBRixHQUdBaHFCLE9BQUF1RSxPQVdBLElBQUE0bEIsRUFBQVosRUFBQSxTQUFBYSxFQUFBeFAsRUFBQXlQLEdBR0EsSUFGQSxJQUFBeG9CLEVBQUE3QixPQUFBNkIsS0FBQStZLEdBQ0F0YixFQUFBLEVBQ0FBLEVBQUF1QyxFQUFBeUUsVUFDQStqQixNQUFBRCxFQUFBdm9CLEVBQUF2QyxNQUFBMmMsS0FDQW1PLEVBQUF2b0IsRUFBQXZDLElBQUFzYixFQUFBL1ksRUFBQXZDLEtBRUFBLElBRUEsT0FBQThxQixHQUNDLDBCQVNEQyxFQUFBZCxFQUFBLFNBQUFhLEVBQUF4UCxHQUNBLE9BQUF1UCxFQUFBQyxFQUFBeFAsR0FBQSxJQUNDLHlCQVFELFNBQUEwUCxFQUFBQyxFQUFBQyxFQUFBQyxHQUNBLElBQ0FDLEVBREFDLEVBQUFILEVBQUF0cEIsV0FHQXdwQixFQUFBSCxFQUFBcnBCLFVBQUFsQixPQUFBWSxPQUFBK3BCLElBQ0FDLFlBQUFMLEVBQ0FHLEVBQUFHLE9BQUFGLEVBRUFGLEdBQ0FsbUIsRUFBQW1tQixFQUFBRCxHQVVBLFNBQUF6QixFQUFBSCxFQUFBOWUsR0FDQSxrQkFDQSxPQUFBOGUsRUFBQWphLE1BQUE3RSxFQUFBK2YsWUFXQSxTQUFBZ0IsRUFBQUMsRUFBQXJjLEdBQ0EsY0FBQXFjLEdBQUFwQyxFQUNBb0MsRUFBQW5jLE1BQUFGLEtBQUEsSUFBQXVOLEVBQUF2TixHQUVBcWMsRUFTQSxTQUFBQyxFQUFBQyxFQUFBQyxHQUNBLE9BQUFELElBQUFoUCxFQUFBaVAsRUFBQUQsRUFTQSxTQUFBRSxFQUFBMU0sRUFBQTJNLEVBQUFuZixHQUNBa2QsRUFBQWtDLEVBQUFELEdBQUEsU0FBQWpqQixHQUNBc1csRUFBQXZTLGlCQUFBL0QsRUFBQThELEdBQUEsS0FVQSxTQUFBcWYsRUFBQTdNLEVBQUEyTSxFQUFBbmYsR0FDQWtkLEVBQUFrQyxFQUFBRCxHQUFBLFNBQUFqakIsR0FDQXNXLEVBQUF0UyxvQkFBQWhFLEVBQUE4RCxHQUFBLEtBV0EsU0FBQXNmLEVBQUFoZixFQUFBaWYsR0FDQSxLQUFBamYsR0FBQSxDQUNBLEdBQUFBLEdBQUFpZixFQUNBLFNBRUFqZixJQUFBa2YsV0FFQSxTQVNBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsT0FBQUQsRUFBQUUsUUFBQUQsSUFBQSxFQVFBLFNBQUFQLEVBQUFNLEdBQ0EsT0FBQUEsRUFBQUcsT0FBQTlQLE1BQUEsUUFVQSxTQUFBK1AsRUFBQW5SLEVBQUFnUixFQUFBSSxHQUNBLEdBQUFwUixFQUFBaVIsVUFBQUcsRUFDQSxPQUFBcFIsRUFBQWlSLFFBQUFELEdBR0EsSUFEQSxJQUFBdHNCLEVBQUEsRUFDQUEsRUFBQXNiLEVBQUF0VSxRQUFBLENBQ0EsR0FBQTBsQixHQUFBcFIsRUFBQXRiLEdBQUEwc0IsSUFBQUosSUFBQUksR0FBQXBSLEVBQUF0YixLQUFBc3NCLEVBQ0EsT0FBQXRzQixFQUVBQSxJQUVBLFNBU0EsU0FBQTJzQixFQUFBN0MsR0FDQSxPQUFBeGlCLE1BQUExRixVQUFBZ3JCLE1BQUF6c0IsS0FBQTJwQixFQUFBLEdBVUEsU0FBQStDLEVBQUF2UixFQUFBL1osRUFBQXVyQixHQUtBLElBSkEsSUFBQUMsRUFBQSxHQUNBQyxFQUFBLEdBQ0FodEIsRUFBQSxFQUVBQSxFQUFBc2IsRUFBQXRVLFFBQUEsQ0FDQSxJQUFBeWtCLEVBQUFscUIsRUFBQStaLEVBQUF0YixHQUFBdUIsR0FBQStaLEVBQUF0YixHQUNBeXNCLEVBQUFPLEVBQUF2QixHQUFBLEdBQ0FzQixFQUFBdGMsS0FBQTZLLEVBQUF0YixJQUVBZ3RCLEVBQUFodEIsR0FBQXlyQixFQUNBenJCLElBYUEsT0FWQThzQixJQUlBQyxFQUhBeHJCLEVBR0F3ckIsRUFBQUQsS0FBQSxTQUFBdmEsRUFBQUMsR0FDQSxPQUFBRCxFQUFBaFIsR0FBQWlSLEVBQUFqUixLQUhBd3JCLEVBQUFELFFBUUFDLEVBU0EsU0FBQUUsRUFBQW5ELEVBQUFub0IsR0FLQSxJQUpBLElBQUF1ckIsRUFBQUMsRUFDQUMsRUFBQXpyQixFQUFBLEdBQUEwckIsY0FBQTFyQixFQUFBaXJCLE1BQUEsR0FFQTVzQixFQUFBLEVBQ0FBLEVBQUFtcEIsRUFBQW5pQixRQUFBLENBSUEsSUFGQW1tQixHQURBRCxFQUFBL0QsRUFBQW5wQixJQUNBa3RCLEVBQUFFLEVBQUF6ckIsS0FFQW1vQixFQUNBLE9BQUFxRCxFQUVBbnRCLElBRUEsT0FBQTJjLEVBT0EsSUFBQTJRLEVBQUEsRUFVQSxTQUFBQyxFQUFBN2dCLEdBQ0EsSUFBQThnQixFQUFBOWdCLEVBQUErZ0IsZUFBQS9nQixFQUNBLE9BQUE4Z0IsRUFBQUUsYUFBQUYsRUFBQUcsY0FBQTNyQixFQUdBLElBRUE0ckIsRUFBQSxpQkFBQTVyQixFQUNBNnJCLEVBQUFaLEVBQUFqckIsRUFBQSxrQkFBQTJhLEVBQ0FtUixFQUFBRixHQUpBLHdDQUlBRyxLQUFBdlIsVUFBQUMsV0FPQXVSLEVBQUEsR0FFQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUVBQyxFQUFBLEVBQ0FDLEVBQUEsRUFDQUMsRUFBQSxFQUNBQyxFQUFBLEVBQ0FDLEVBQUEsR0FFQUMsRUFBQUosRUFBQUMsRUFDQUksRUFBQUgsRUFBQUMsRUFDQUcsRUFBQUYsRUFBQUMsRUFFQUUsRUFBQSxVQUNBQyxFQUFBLHNCQVNBLFNBQUFDLEdBQUFDLEVBQUFDLEdBQ0EsSUFBQS9ULEVBQUEzWCxLQUNBQSxLQUFBeXJCLFVBQ0F6ckIsS0FBQTByQixXQUNBMXJCLEtBQUFtSixRQUFBc2lCLEVBQUF0aUIsUUFDQW5KLEtBQUE0YixPQUFBNlAsRUFBQTFyQixRQUFBNHJCLFlBSUEzckIsS0FBQTRyQixXQUFBLFNBQUFDLEdBQ0E1RCxFQUFBd0QsRUFBQTFyQixRQUFBK3JCLE9BQUEsQ0FBQUwsS0FDQTlULEVBQUF2TyxRQUFBeWlCLElBSUE3ckIsS0FBQTRHLE9BNERBLFNBQUFtbEIsR0FBQU4sRUFBQU8sRUFBQUMsR0FDQSxJQUFBQyxFQUFBRCxFQUFBRSxTQUFBMW9CLE9BQ0Eyb0IsRUFBQUgsRUFBQUksZ0JBQUE1b0IsT0FDQTZvQixFQUFBTixFQUFBdEIsR0FBQXdCLEVBQUFFLEdBQUEsRUFDQUcsRUFBQVAsR0FBQXBCLEVBQUFDLElBQUFxQixFQUFBRSxHQUFBLEVBRUFILEVBQUFLLFlBQ0FMLEVBQUFNLFlBRUFELElBQ0FiLEVBQUFlLFFBQUEsSUFLQVAsRUFBQUQsWUFpQkEsU0FBQVAsRUFBQVEsR0FDQSxJQUFBTyxFQUFBZixFQUFBZSxRQUNBTCxFQUFBRixFQUFBRSxTQUNBTSxFQUFBTixFQUFBMW9CLE9BR0Erb0IsRUFBQUUsYUFDQUYsRUFBQUUsV0FBQUMsR0FBQVYsSUFJQVEsRUFBQSxJQUFBRCxFQUFBSSxjQUNBSixFQUFBSSxjQUFBRCxHQUFBVixHQUNLLElBQUFRLElBQ0xELEVBQUFJLGVBQUEsR0FHQSxJQUFBRixFQUFBRixFQUFBRSxXQUNBRSxFQUFBSixFQUFBSSxjQUNBQyxFQUFBRCxJQUFBbHNCLE9BQUFnc0IsRUFBQWhzQixPQUVBQSxFQUFBdXJCLEVBQUF2ckIsT0FBQW9zQixHQUFBWCxHQUNBRixFQUFBYyxVQUFBMXNCLElBQ0E0ckIsRUFBQWUsVUFBQWYsRUFBQWMsVUFBQUwsRUFBQUssVUFFQWQsRUFBQXhyQixNQUFBd3NCLEdBQUFKLEVBQUFuc0IsR0FDQXVyQixFQUFBeG5CLFNBQUF5b0IsR0FBQUwsRUFBQW5zQixHQTBCQSxTQUFBOHJCLEVBQUFQLEdBQ0EsSUFBQXZyQixFQUFBdXJCLEVBQUF2ckIsT0FDQXlzQixFQUFBWCxFQUFBWSxhQUFBLEdBQ0FDLEVBQUFiLEVBQUFhLFdBQUEsR0FDQUMsRUFBQWQsRUFBQWMsV0FBQSxHQUVBckIsRUFBQUQsWUFBQXRCLEdBQUE0QyxFQUFBdEIsWUFBQXBCLElBQ0F5QyxFQUFBYixFQUFBYSxVQUFBLENBQ0Evc0IsRUFBQWd0QixFQUFBQyxRQUFBLEVBQ0FodEIsRUFBQStzQixFQUFBRSxRQUFBLEdBR0FMLEVBQUFYLEVBQUFZLFlBQUEsQ0FDQTlzQixFQUFBSSxFQUFBSixFQUNBQyxFQUFBRyxFQUFBSCxJQUlBMHJCLEVBQUFzQixPQUFBRixFQUFBL3NCLEdBQUFJLEVBQUFKLEVBQUE2c0IsRUFBQTdzQixHQUNBMnJCLEVBQUF1QixPQUFBSCxFQUFBOXNCLEdBQUFHLEVBQUFILEVBQUE0c0IsRUFBQTVzQixHQTNDQWt0QixDQUFBakIsRUFBQVAsR0FDQUEsRUFBQXlCLGdCQUFBQyxHQUFBMUIsRUFBQXNCLE9BQUF0QixFQUFBdUIsUUFFQSxJQUFBSSxFQUFBQyxHQUFBNUIsRUFBQWUsVUFBQWYsRUFBQXNCLE9BQUF0QixFQUFBdUIsUUFDQXZCLEVBQUE2QixpQkFBQUYsRUFBQXR0QixFQUNBMnJCLEVBQUE4QixpQkFBQUgsRUFBQXJ0QixFQUNBMHJCLEVBQUEyQixnQkFBQWhQLEVBQUFnUCxFQUFBdHRCLEdBQUFzZSxFQUFBZ1AsRUFBQXJ0QixHQUFBcXRCLEVBQUF0dEIsRUFBQXN0QixFQUFBcnRCLEVBRUEwckIsRUFBQXpyQixNQUFBb3NCLEdBa05BelIsRUFsTkF5UixFQUFBVCxTQWtOQTZCLEVBbE5BN0IsRUFtTkFlLEdBQUFjLEVBQUEsR0FBQUEsRUFBQSxHQUFBekMsR0FBQTJCLEdBQUEvUixFQUFBLEdBQUFBLEVBQUEsR0FBQW9RLElBbk5BLEVBQ0FVLEVBQUFnQyxTQUFBckIsRUFzTUEsU0FBQXpSLEVBQUE2UyxHQUNBLE9BQUFmLEdBQUFlLEVBQUEsR0FBQUEsRUFBQSxHQUFBekMsR0FBQTBCLEdBQUE5UixFQUFBLEdBQUFBLEVBQUEsR0FBQW9RLEdBdk1BMkMsQ0FBQXRCLEVBQUFULFlBQUEsRUFFQUYsRUFBQWtDLFlBQUEzQixFQUFBYyxVQUFBckIsRUFBQUUsU0FBQTFvQixPQUNBK29CLEVBQUFjLFVBQUFhLFlBQUFsQyxFQUFBRSxTQUFBMW9CLE9BQUErb0IsRUFBQWMsVUFBQWEsWUFEQWxDLEVBQUFFLFNBQUExb0IsT0F3Q0EsU0FBQStvQixFQUFBUCxHQUNBLElBRUExSSxFQUFBNkssRUFBQUMsRUFBQUMsRUFGQUMsRUFBQS9CLEVBQUFnQyxjQUFBdkMsRUFDQWUsRUFBQWYsRUFBQWMsVUFBQXdCLEVBQUF4QixVQUdBLEdBQUFkLEVBQUFELFdBQUFuQixJQUFBbUMsRUFBQXZDLEdBQUE4RCxFQUFBaEwsV0FBQW5LLEdBQUEsQ0FDQSxJQUFBbVUsRUFBQXRCLEVBQUFzQixPQUFBZ0IsRUFBQWhCLE9BQ0FDLEVBQUF2QixFQUFBdUIsT0FBQWUsRUFBQWYsT0FFQTdPLEVBQUFrUCxHQUFBYixFQUFBTyxFQUFBQyxHQUNBWSxFQUFBelAsRUFBQXJlLEVBQ0ErdEIsRUFBQTFQLEVBQUFwZSxFQUNBZ2pCLEVBQUEzRSxFQUFBRCxFQUFBcmUsR0FBQXNlLEVBQUFELEVBQUFwZSxHQUFBb2UsRUFBQXJlLEVBQUFxZSxFQUFBcGUsRUFDQSt0QixFQUFBWCxHQUFBSixFQUFBQyxHQUVBaEIsRUFBQWdDLGFBQUF2QyxPQUdBMUksRUFBQWdMLEVBQUFoTCxTQUNBNkssRUFBQUcsRUFBQUgsVUFDQUMsRUFBQUUsRUFBQUYsVUFDQUMsRUFBQUMsRUFBQUQsVUFHQXJDLEVBQUExSSxXQUNBMEksRUFBQW1DLFlBQ0FuQyxFQUFBb0MsWUFDQXBDLEVBQUFxQyxZQWhFQUcsQ0FBQWpDLEVBQUFQLEdBNE1BLElBQUE5USxFQUFBNlMsRUF6TUEsSUFBQXBTLEVBQUE2UCxFQUFBdGlCLFFBQ0F1ZixFQUFBdUQsRUFBQXlDLFNBQUE5UyxZQUNBQSxFQUFBcVEsRUFBQXlDLFNBQUE5UyxRQUVBcVEsRUFBQXJRLFNBL0RBK1MsQ0FBQWxELEVBQUFRLEdBR0FSLEVBQUFtRCxLQUFBLGVBQUEzQyxHQUVBUixFQUFBb0QsVUFBQTVDLEdBQ0FSLEVBQUFlLFFBQUFjLFVBQUFyQixFQTBIQSxTQUFBVSxHQUFBVixHQUtBLElBRkEsSUFBQUUsRUFBQSxHQUNBMXZCLEVBQUEsRUFDQUEsRUFBQXd2QixFQUFBRSxTQUFBMW9CLFFBQ0Ewb0IsRUFBQTF2QixHQUFBLENBQ0EyUixRQUFBRCxFQUFBOGQsRUFBQUUsU0FBQTF2QixHQUFBMlIsU0FDQUMsUUFBQUYsRUFBQThkLEVBQUFFLFNBQUExdkIsR0FBQTRSLFVBRUE1UixJQUdBLE9BQ0Fzd0IsVUFBQTFzQixJQUNBOHJCLFdBQ0F6ckIsT0FBQW9zQixHQUFBWCxHQUNBb0IsT0FBQXRCLEVBQUFzQixPQUNBQyxPQUFBdkIsRUFBQXVCLFFBU0EsU0FBQVYsR0FBQVgsR0FDQSxJQUFBTSxFQUFBTixFQUFBMW9CLE9BR0EsT0FBQWdwQixFQUNBLE9BQ0Fuc0IsRUFBQTZOLEVBQUFnZSxFQUFBLEdBQUEvZCxTQUNBN04sRUFBQTROLEVBQUFnZSxFQUFBLEdBQUE5ZCxVQUtBLElBREEsSUFBQS9OLEVBQUEsRUFBQUMsRUFBQSxFQUFBOUQsRUFBQSxFQUNBQSxFQUFBZ3dCLEdBQ0Fuc0IsR0FBQTZyQixFQUFBMXZCLEdBQUEyUixRQUNBN04sR0FBQTRyQixFQUFBMXZCLEdBQUE0UixRQUNBNVIsSUFHQSxPQUNBNkQsRUFBQTZOLEVBQUE3TixFQUFBbXNCLEdBQ0Fsc0IsRUFBQTROLEVBQUE1TixFQUFBa3NCLElBV0EsU0FBQW9CLEdBQUFiLEVBQUExc0IsRUFBQUMsR0FDQSxPQUNBRCxJQUFBMHNCLEdBQUEsRUFDQXpzQixJQUFBeXNCLEdBQUEsR0FVQSxTQUFBVyxHQUFBcnRCLEVBQUFDLEdBQ0EsT0FBQUQsSUFBQUMsRUFDQXVxQixFQUdBbE0sRUFBQXRlLElBQUFzZSxFQUFBcmUsR0FDQUQsRUFBQSxFQUFBeXFCLEVBQUFDLEVBRUF6cUIsRUFBQSxFQUFBMHFCLEVBQUFDLEVBVUEsU0FBQWdDLEdBQUFwUCxFQUFBQyxFQUFBK1EsR0FDQUEsSUFDQUEsRUFBQXhELEdBRUEsSUFBQWhyQixFQUFBeWQsRUFBQStRLEVBQUEsSUFBQWhSLEVBQUFnUixFQUFBLElBQ0F2dUIsRUFBQXdkLEVBQUErUSxFQUFBLElBQUFoUixFQUFBZ1IsRUFBQSxJQUVBLE9BQUE1dUIsS0FBQThkLEtBQUExZCxJQUFBQyxLQVVBLFNBQUEwc0IsR0FBQW5QLEVBQUFDLEVBQUErUSxHQUNBQSxJQUNBQSxFQUFBeEQsR0FFQSxJQUFBaHJCLEVBQUF5ZCxFQUFBK1EsRUFBQSxJQUFBaFIsRUFBQWdSLEVBQUEsSUFDQXZ1QixFQUFBd2QsRUFBQStRLEVBQUEsSUFBQWhSLEVBQUFnUixFQUFBLElBQ0EsV0FBQTV1QixLQUFBNnVCLE1BQUF4dUIsRUFBQUQsR0FBQUosS0FBQThCLEdBMVRBd3BCLEdBQUFudEIsVUFBQSxDQUtBK0ssUUFBQSxhQUtBeEMsS0FBQSxXQUNBNUcsS0FBQWd2QixNQUFBMUcsRUFBQXRvQixLQUFBbUosUUFBQW5KLEtBQUFndkIsS0FBQWh2QixLQUFBNHJCLFlBQ0E1ckIsS0FBQWl2QixVQUFBM0csRUFBQXRvQixLQUFBNGIsT0FBQTViLEtBQUFpdkIsU0FBQWp2QixLQUFBNHJCLFlBQ0E1ckIsS0FBQWt2QixPQUFBNUcsRUFBQTBCLEVBQUFocUIsS0FBQW1KLFNBQUFuSixLQUFBa3ZCLE1BQUFsdkIsS0FBQTRyQixhQU1BdUQsUUFBQSxXQUNBbnZCLEtBQUFndkIsTUFBQXZHLEVBQUF6b0IsS0FBQW1KLFFBQUFuSixLQUFBZ3ZCLEtBQUFodkIsS0FBQTRyQixZQUNBNXJCLEtBQUFpdkIsVUFBQXhHLEVBQUF6b0IsS0FBQTRiLE9BQUE1YixLQUFBaXZCLFNBQUFqdkIsS0FBQTRyQixZQUNBNXJCLEtBQUFrdkIsT0FBQXpHLEVBQUF1QixFQUFBaHFCLEtBQUFtSixTQUFBbkosS0FBQWt2QixNQUFBbHZCLEtBQUE0ckIsY0E0VEEsSUFBQXdELEdBQUEsQ0FDQTdqQixVQUFBbWYsRUFDQWxmLFVBQUFtZixFQUNBbGYsUUFBQW1mLEdBR0F5RSxHQUFBLFlBQ0FDLEdBQUEsb0JBT0EsU0FBQUMsS0FDQXZ2QixLQUFBZ3ZCLEtBQUFLLEdBQ0FydkIsS0FBQWt2QixNQUFBSSxHQUVBdHZCLEtBQUF3dkIsU0FBQSxFQUVBaEUsR0FBQXpmLE1BQUEvTCxLQUFBaW5CLFdBR0FRLEVBQUE4SCxHQUFBL0QsR0FBQSxDQUtBcGlCLFFBQUEsU0FBQXlpQixHQUNBLElBQUFHLEVBQUFvRCxHQUFBdkQsRUFBQXZtQixNQUdBMG1CLEVBQUF0QixHQUFBLElBQUFtQixFQUFBNEQsU0FDQXp2QixLQUFBd3ZCLFNBQUEsR0FHQXhELEVBQUFyQixHQUFBLElBQUFrQixFQUFBNkQsUUFDQTFELEVBQUFwQixHQUlBNXFCLEtBQUF3dkIsVUFJQXhELEVBQUFwQixJQUNBNXFCLEtBQUF3dkIsU0FBQSxHQUdBeHZCLEtBQUEwckIsU0FBQTFyQixLQUFBeXJCLFFBQUFPLEVBQUEsQ0FDQUcsU0FBQSxDQUFBTixHQUNBUSxnQkFBQSxDQUFBUixHQUNBOEQsWUF2YkEsUUF3YkFqQixTQUFBN0MsUUFLQSxJQUFBK0QsR0FBQSxDQUNBQyxZQUFBbkYsRUFDQW9GLFlBQUFuRixFQUNBb0YsVUFBQW5GLEVBQ0FvRixjQUFBbkYsRUFDQW9GLFdBQUFwRixHQUlBcUYsR0FBQSxDQUNBQyxFQXpjQSxRQTBjQUMsRUF6Y0EsTUEwY0FDLEVBemNBLFFBMGNBQyxFQXpjQSxVQTRjQUMsR0FBQSxjQUNBQyxHQUFBLHNDQWFBLFNBQUFDLEtBQ0F6d0IsS0FBQWd2QixLQUFBdUIsR0FDQXZ3QixLQUFBa3ZCLE1BQUFzQixHQUVBaEYsR0FBQXpmLE1BQUEvTCxLQUFBaW5CLFdBRUFqbkIsS0FBQTB3QixNQUFBMXdCLEtBQUF5ckIsUUFBQWUsUUFBQW1FLGNBQUEsR0FoQkFseUIsRUFBQW15QixpQkFBQW55QixFQUFBb3lCLGVBQ0FOLEdBQUEsZ0JBQ0FDLEdBQUEsNkNBaUJBL0ksRUFBQWdKLEdBQUFqRixHQUFBLENBS0FwaUIsUUFBQSxTQUFBeWlCLEdBQ0EsSUFBQTZFLEVBQUExd0IsS0FBQTB3QixNQUNBSSxHQUFBLEVBRUFDLEVBQUFsRixFQUFBdm1CLEtBQUEwckIsY0FBQS9aLFFBQUEsU0FDQStVLEVBQUE0RCxHQUFBbUIsR0FDQXBCLEVBQUFPLEdBQUFyRSxFQUFBOEQsY0FBQTlELEVBQUE4RCxZQUVBc0IsRUFuZkEsU0FtZkF0QixFQUdBdUIsRUFBQWhJLEVBQUF3SCxFQUFBN0UsRUFBQXNGLFVBQUEsYUFHQW5GLEVBQUF0QixJQUFBLElBQUFtQixFQUFBNEQsUUFBQXdCLEdBQ0FDLEVBQUEsSUFDQVIsRUFBQXhqQixLQUFBMmUsR0FDQXFGLEVBQUFSLEVBQUFqdEIsT0FBQSxHQUVTdW9CLEdBQUFwQixFQUFBQyxLQUNUaUcsR0FBQSxHQUlBSSxFQUFBLElBS0FSLEVBQUFRLEdBQUFyRixFQUVBN3JCLEtBQUEwckIsU0FBQTFyQixLQUFBeXJCLFFBQUFPLEVBQUEsQ0FDQUcsU0FBQXVFLEVBQ0FyRSxnQkFBQSxDQUFBUixHQUNBOEQsY0FDQWpCLFNBQUE3QyxJQUdBaUYsR0FFQUosRUFBQVUsT0FBQUYsRUFBQSxPQUtBLElBQUFHLEdBQUEsQ0FDQWptQixXQUFBc2YsRUFDQXJmLFVBQUFzZixFQUNBcmYsU0FBQXNmLEVBQ0EwRyxZQUFBekcsR0FHQTBHLEdBQUEsYUFDQUMsR0FBQSw0Q0FPQSxTQUFBQyxLQUNBenhCLEtBQUFpdkIsU0FBQXNDLEdBQ0F2eEIsS0FBQWt2QixNQUFBc0MsR0FDQXh4QixLQUFBMHhCLFNBQUEsRUFFQWxHLEdBQUF6ZixNQUFBL0wsS0FBQWluQixXQUdBUSxFQUFBZ0ssR0FBQWpHLEdBQUEsQ0FDQXBpQixRQUFBLFNBQUF5aUIsR0FDQSxJQUFBdm1CLEVBQUErckIsR0FBQXhGLEVBQUF2bUIsTUFPQSxHQUpBQSxJQUFBb2xCLElBQ0ExcUIsS0FBQTB4QixTQUFBLEdBR0ExeEIsS0FBQTB4QixRQUFBLENBSUEsSUFBQTFrQixFQXNCQSxTQUFBNmUsRUFBQXZtQixHQUNBLElBQUFxc0IsRUFBQXZJLEVBQUF5QyxFQUFBN2UsU0FDQTRrQixFQUFBeEksRUFBQXlDLEVBQUFnRyxnQkFFQXZzQixHQUFBc2xCLEVBQUFDLEtBQ0E4RyxFQUFBckksRUFBQXFJLEVBQUFHLE9BQUFGLEdBQUEsa0JBR0EsT0FBQUQsRUFBQUMsSUE5QkFoMUIsS0FBQW9ELEtBQUE2ckIsRUFBQXZtQixHQUdBQSxHQUFBc2xCLEVBQUFDLElBQUE3ZCxFQUFBLEdBQUF2SixPQUFBdUosRUFBQSxHQUFBdkosUUFBQSxJQUNBekQsS0FBQTB4QixTQUFBLEdBR0ExeEIsS0FBQTByQixTQUFBMXJCLEtBQUF5ckIsUUFBQW5tQixFQUFBLENBQ0E2bUIsU0FBQW5mLEVBQUEsR0FDQXFmLGdCQUFBcmYsRUFBQSxHQUNBMmlCLFlBdGtCQSxRQXVrQkFqQixTQUFBN0MsUUFzQkEsSUFBQWtHLEdBQUEsQ0FDQTNtQixXQUFBc2YsRUFDQXJmLFVBQUFzZixFQUNBcmYsU0FBQXNmLEVBQ0EwRyxZQUFBekcsR0FHQW1ILEdBQUEsNENBT0EsU0FBQUMsS0FDQWp5QixLQUFBaXZCLFNBQUErQyxHQUNBaHlCLEtBQUFreUIsVUFBQSxHQUVBMUcsR0FBQXpmLE1BQUEvTCxLQUFBaW5CLFdBR0FRLEVBQUF3SyxHQUFBekcsR0FBQSxDQUNBcGlCLFFBQUEsU0FBQXlpQixHQUNBLElBQUF2bUIsRUFBQXlzQixHQUFBbEcsRUFBQXZtQixNQUNBMEgsRUFvQkEsU0FBQTZlLEVBQUF2bUIsR0FDQSxJQUFBNnNCLEVBQUEvSSxFQUFBeUMsRUFBQTdlLFNBQ0FrbEIsRUFBQWx5QixLQUFBa3lCLFVBR0EsR0FBQTVzQixHQUFBb2xCLEVBQUFDLElBQUEsSUFBQXdILEVBQUExdUIsT0FFQSxPQURBeXVCLEVBQUFDLEVBQUEsR0FBQUMsYUFBQSxFQUNBLENBQUFELEtBR0EsSUFBQTExQixFQUNBNDFCLEVBQ0FSLEVBQUF6SSxFQUFBeUMsRUFBQWdHLGdCQUNBUyxFQUFBLEdBQ0ExVyxFQUFBNWIsS0FBQTRiLE9BUUEsR0FMQXlXLEVBQUFGLEVBQUEzUCxPQUFBLFNBQUErUCxHQUNBLE9BQUE3SixFQUFBNkosRUFBQTNXLFlBSUF0VyxJQUFBb2xCLEVBRUEsSUFEQWp1QixFQUFBLEVBQ0FBLEVBQUE0MUIsRUFBQTV1QixRQUNBeXVCLEVBQUFHLEVBQUE1MUIsR0FBQTIxQixhQUFBLEVBQ0EzMUIsSUFLQUEsRUFBQSxFQUNBLEtBQUFBLEVBQUFvMUIsRUFBQXB1QixRQUNBeXVCLEVBQUFMLEVBQUFwMUIsR0FBQTIxQixhQUNBRSxFQUFBcGxCLEtBQUEya0IsRUFBQXAxQixJQUlBNkksR0FBQXNsQixFQUFBQyxXQUNBcUgsRUFBQUwsRUFBQXAxQixHQUFBMjFCLFlBRUEzMUIsSUFHQSxJQUFBNjFCLEVBQUE3dUIsT0FDQSxPQUdBLE9BRUE2bEIsRUFBQStJLEVBQUFQLE9BQUFRLEdBQUEsaUJBQ0FBLElBdkVBMTFCLEtBQUFvRCxLQUFBNnJCLEVBQUF2bUIsR0FDQTBILEdBSUFoTixLQUFBMHJCLFNBQUExckIsS0FBQXlyQixRQUFBbm1CLEVBQUEsQ0FDQTZtQixTQUFBbmYsRUFBQSxHQUNBcWYsZ0JBQUFyZixFQUFBLEdBQ0EyaUIsWUE3bkJBLFFBOG5CQWpCLFNBQUE3QyxPQTRFQSxJQUFBMkcsR0FBQSxLQUNBQyxHQUFBLEdBRUEsU0FBQUMsS0FDQWxILEdBQUF6ZixNQUFBL0wsS0FBQWluQixXQUVBLElBQUE3ZCxFQUFBK2MsRUFBQW5tQixLQUFBb0osUUFBQXBKLE1BQ0FBLEtBQUF1eUIsTUFBQSxJQUFBTixHQUFBanlCLEtBQUF5ckIsUUFBQXJpQixHQUNBcEosS0FBQTJ5QixNQUFBLElBQUFwRCxHQUFBdnZCLEtBQUF5ckIsUUFBQXJpQixHQUVBcEosS0FBQTR5QixhQUFBLEtBQ0E1eUIsS0FBQTZ5QixZQUFBLEdBOENBLFNBQUFDLEdBQUFDLEdBQ0EsSUFBQVIsRUFBQVEsRUFBQTFHLGdCQUFBLEdBRUEsR0FBQWtHLEVBQUFILGFBQUFweUIsS0FBQTR5QixhQUFBLENBQ0EsSUFBQUksRUFBQSxDQUF5QjF5QixFQUFBaXlCLEVBQUFua0IsUUFBQTdOLEVBQUFneUIsRUFBQWxrQixTQUN6QnJPLEtBQUE2eUIsWUFBQTNsQixLQUFBOGxCLEdBQ0EsSUFBQUMsRUFBQWp6QixLQUFBNnlCLFlBT0EzTSxXQU5BLFdBQ0EsSUFBQXpwQixFQUFBdzJCLEVBQUFqSyxRQUFBZ0ssR0FDQXYyQixHQUFBLEdBQ0F3MkIsRUFBQTdCLE9BQUEzMEIsRUFBQSxJQUdBKzFCLEtBeERBL0ssRUFBQWlMLEdBQUFsSCxHQUFBLENBT0FwaUIsUUFBQSxTQUFBcWlCLEVBQUF5SCxFQUFBQyxHQUNBLElBQUFsQyxFQWh1QkEsU0FndUJBa0MsRUFBQXhELFlBQ0F5RCxFQS90QkEsU0ErdEJBRCxFQUFBeEQsWUFFQSxLQUFBeUQsR0FBQUQsRUFBQUUsb0JBQUFGLEVBQUFFLG1CQUFBQyxrQkFBQSxDQUtBLEdBQUFyQyxHQWtCQSxTQUFBakYsRUFBQStHLEdBQ0EvRyxFQUFBdEIsR0FDQTFxQixLQUFBNHlCLGFBQUFHLEVBQUExRyxnQkFBQSxHQUFBK0YsV0FDQVUsR0FBQWwyQixLQUFBb0QsS0FBQSt5QixJQUNLL0csR0FBQXBCLEVBQUFDLElBQ0xpSSxHQUFBbDJCLEtBQUFvRCxLQUFBK3lCLEtBdEJBbjJCLEtBQUFvRCxLQUFBa3pCLEVBQUFDLFFBQ1MsR0FBQUMsR0EwQ1QsU0FBQUwsR0FFQSxJQURBLElBQUF6eUIsRUFBQXl5QixFQUFBckUsU0FBQXRnQixRQUFBN04sRUFBQXd5QixFQUFBckUsU0FBQXJnQixRQUNBNVIsRUFBQSxFQUFtQkEsRUFBQXVELEtBQUE2eUIsWUFBQXB2QixPQUE2QmhILElBQUEsQ0FDaEQsSUFBQWtCLEVBQUFxQyxLQUFBNnlCLFlBQUFwMkIsR0FDQThoQixFQUFBcmUsS0FBQTBlLElBQUF0ZSxFQUFBM0MsRUFBQTJDLEdBQUFrZSxFQUFBdGUsS0FBQTBlLElBQUFyZSxFQUFBNUMsRUFBQTRDLEdBQ0EsR0FBQWdlLEdBQUFrVSxJQUFBalUsR0FBQWlVLEdBQ0EsU0FHQSxVQW5EUzcxQixLQUFBb0QsS0FBQW16QixHQUNULE9BR0FuekIsS0FBQTByQixTQUFBRCxFQUFBeUgsRUFBQUMsS0FNQWhFLFFBQUEsV0FDQW52QixLQUFBdXlCLE1BQUFwRCxVQUNBbnZCLEtBQUEyeUIsTUFBQXhELGFBMENBLElBQUFvRSxHQUFBN0osRUFBQTdELEVBQUFsYyxNQUFBLGVBQ0E2cEIsR0FBQUQsS0FBQW5hLEVBSUFxYSxHQUFBLE9BQ0FDLEdBQUEsZUFDQUMsR0FBQSxPQUNBQyxHQUFBLFFBQ0FDLEdBQUEsUUFDQUMsR0E0SUEsV0FDQSxJQUFBTixHQUNBLFNBRUEsSUFBQU8sRUFBQSxHQUNBQyxFQUFBdjFCLEVBQUF3MUIsS0FBQXgxQixFQUFBdzFCLElBQUFDLFNBT0EsTUFOQSw2REFBQXpOLFFBQUEsU0FBQXlCLEdBSUE2TCxFQUFBN0wsSUFBQThMLEdBQUF2MUIsRUFBQXcxQixJQUFBQyxTQUFBLGVBQUFoTSxLQUVBNkwsRUF4SkFJLEdBU0EsU0FBQXAxQixHQUFBMHNCLEVBQUEvdEIsR0FDQXNDLEtBQUF5ckIsVUFDQXpyQixLQUFBbzBCLElBQUExMkIsR0FHQXFCLEdBQUFWLFVBQUEsQ0FLQSsxQixJQUFBLFNBQUExMkIsR0F6QkEsV0EyQkFBLElBQ0FBLEVBQUFzQyxLQUFBcTBCLFdBR0FiLElBQUF4ekIsS0FBQXlyQixRQUFBdGlCLFFBQUFRLE9BQUFtcUIsR0FBQXAyQixLQUNBc0MsS0FBQXlyQixRQUFBdGlCLFFBQUFRLE1BQUE0cEIsSUFBQTcxQixHQUVBc0MsS0FBQXMwQixRQUFBNTJCLEVBQUFzekIsY0FBQS9ILFFBTUE5Z0IsT0FBQSxXQUNBbkksS0FBQW8wQixJQUFBcDBCLEtBQUF5ckIsUUFBQTFyQixRQUFBd0ssY0FPQThwQixRQUFBLFdBQ0EsSUFBQUMsRUFBQSxHQU1BLE9BTEFoTyxFQUFBdG1CLEtBQUF5ckIsUUFBQThJLFlBQUEsU0FBQUMsR0FDQXZNLEVBQUF1TSxFQUFBejBCLFFBQUErckIsT0FBQSxDQUFBMEksTUFDQUYsSUFBQXhDLE9BQUEwQyxFQUFBQyxxQkFnRUEsU0FBQUgsR0FFQSxHQUFBekwsRUFBQXlMLEVBQUFYLElBQ0EsT0FBQUEsR0FHQSxJQUFBZSxFQUFBN0wsRUFBQXlMLEVBQUFWLElBQ0FlLEVBQUE5TCxFQUFBeUwsRUFBQVQsSUFNQSxHQUFBYSxHQUFBQyxFQUNBLE9BQUFoQixHQUlBLEdBQUFlLEdBQUFDLEVBQ0EsT0FBQUQsRUFBQWQsR0FBQUMsR0FJQSxHQUFBaEwsRUFBQXlMLEVBQUFaLElBQ0EsT0FBQUEsR0FHQSxPQUFBRCxHQXhGQW1CLENBQUFOLEVBQUF0ZCxLQUFBLE9BT0E2ZCxnQkFBQSxTQUFBNUksR0FDQSxJQUFBeUMsRUFBQXpDLEVBQUF5QyxTQUNBSixFQUFBckMsRUFBQXlCLGdCQUdBLEdBQUExdEIsS0FBQXlyQixRQUFBZSxRQUFBc0ksVUFDQXBHLEVBQUFuaEIscUJBREEsQ0FLQSxJQUFBK21CLEVBQUF0MEIsS0FBQXMwQixRQUNBUyxFQUFBbE0sRUFBQXlMLEVBQUFYLE1BQUFHLEdBQUFILElBQ0FnQixFQUFBOUwsRUFBQXlMLEVBQUFULE1BQUFDLEdBQUFELElBQ0FhLEVBQUE3TCxFQUFBeUwsRUFBQVYsTUFBQUUsR0FBQUYsSUFFQSxHQUFBbUIsRUFBQSxDQUdBLElBQUFDLEVBQUEsSUFBQS9JLEVBQUFFLFNBQUExb0IsT0FDQXd4QixFQUFBaEosRUFBQXhuQixTQUFBLEVBQ0F5d0IsRUFBQWpKLEVBQUFlLFVBQUEsSUFFQSxHQUFBZ0ksR0FBQUMsR0FBQUMsRUFDQSxPQUlBLElBQUFSLElBQUFDLEVBS0EsT0FBQUksR0FDQUosR0FBQXJHLEVBQUFuRCxHQUNBdUosR0FBQXBHLEVBQUFsRCxFQUNBcHJCLEtBQUFtMUIsV0FBQXpHLFFBSEEsSUFXQXlHLFdBQUEsU0FBQXpHLEdBQ0ExdUIsS0FBQXlyQixRQUFBZSxRQUFBc0ksV0FBQSxFQUNBcEcsRUFBQW5oQixtQkFpRkEsSUFBQTZuQixHQUFBLEVBQ0FDLEdBQUEsRUFDQUMsR0FBQSxFQUNBQyxHQUFBLEVBQ0FDLEdBQUFELEdBQ0FFLEdBQUEsR0FTQSxTQUFBQyxHQUFBMzFCLEdBQ0FDLEtBQUFELFFBQUEyQixFQUFBLEdBQTRCMUIsS0FBQTIxQixTQUFBNTFCLEdBQUEsSUFFNUJDLEtBQUFDLEdBcGdDQThwQixJQXNnQ0EvcEIsS0FBQXlyQixRQUFBLEtBR0F6ckIsS0FBQUQsUUFBQStyQixPQUFBM0QsRUFBQW5vQixLQUFBRCxRQUFBK3JCLFFBQUEsR0FFQTlyQixLQUFBMkIsTUFBQXl6QixHQUVBcDFCLEtBQUE0MUIsYUFBQSxHQUNBNTFCLEtBQUE2MUIsWUFBQSxHQXFPQSxTQUFBQyxHQUFBbjBCLEdBQ0EsT0FBQUEsRUFBQTh6QixHQUNBLFNBQ0s5ekIsRUFBQTR6QixHQUNMLE1BQ0s1ekIsRUFBQTJ6QixHQUNMLE9BQ0szekIsRUFBQTB6QixHQUNMLFFBRUEsR0FRQSxTQUFBVSxHQUFBekgsR0FDQSxPQUFBQSxHQUFBcEQsRUFDQSxPQUNLb0QsR0FBQXJELEVBQ0wsS0FDS3FELEdBQUF2RCxFQUNMLE9BQ0t1RCxHQUFBdEQsRUFDTCxRQUVBLEdBU0EsU0FBQWdMLEdBQUFDLEVBQUF6QixHQUNBLElBQUEvSSxFQUFBK0ksRUFBQS9JLFFBQ0EsT0FBQUEsRUFDQUEsRUFBQW51QixJQUFBMjRCLEdBRUFBLEVBUUEsU0FBQUMsS0FDQVIsR0FBQTNwQixNQUFBL0wsS0FBQWluQixXQTZEQSxTQUFBa1AsS0FDQUQsR0FBQW5xQixNQUFBL0wsS0FBQWluQixXQUVBam5CLEtBQUFvMkIsR0FBQSxLQUNBcDJCLEtBQUFxMkIsR0FBQSxLQTRFQSxTQUFBQyxLQUNBSixHQUFBbnFCLE1BQUEvTCxLQUFBaW5CLFdBc0NBLFNBQUFzUCxLQUNBYixHQUFBM3BCLE1BQUEvTCxLQUFBaW5CLFdBRUFqbkIsS0FBQXcyQixPQUFBLEtBQ0F4MkIsS0FBQXkyQixPQUFBLEtBbUVBLFNBQUFDLEtBQ0FSLEdBQUFucUIsTUFBQS9MLEtBQUFpbkIsV0E4QkEsU0FBQTBQLEtBQ0FULEdBQUFucUIsTUFBQS9MLEtBQUFpbkIsV0EyREEsU0FBQTJQLEtBQ0FsQixHQUFBM3BCLE1BQUEvTCxLQUFBaW5CLFdBSUFqbkIsS0FBQTYyQixPQUFBLEVBQ0E3MkIsS0FBQTgyQixTQUFBLEVBRUE5MkIsS0FBQXcyQixPQUFBLEtBQ0F4MkIsS0FBQXkyQixPQUFBLEtBQ0F6MkIsS0FBQSsyQixNQUFBLEVBcUdBLFNBQUFodUIsR0FBQUksRUFBQXBKLEdBR0EsT0FGQUEsS0FBQSxJQUNBdzBCLFlBQUFwTSxFQUFBcG9CLEVBQUF3MEIsWUFBQXhyQixHQUFBNHNCLFNBQUFxQixRQUNBLElBQUFDLEdBQUE5dEIsRUFBQXBKLEdBN3RCQTIxQixHQUFBcjNCLFVBQUEsQ0FLQXMzQixTQUFBLEdBT0F2QixJQUFBLFNBQUFyMEIsR0FLQSxPQUpBMkIsRUFBQTFCLEtBQUFELFdBR0FDLEtBQUF5ckIsU0FBQXpyQixLQUFBeXJCLFFBQUFsaEIsWUFBQXBDLFNBQ0FuSSxNQVFBazNCLGNBQUEsU0FBQWpCLEdBQ0EsR0FBQTdQLEVBQUE2UCxFQUFBLGdCQUFBajJCLE1BQ0EsT0FBQUEsS0FHQSxJQUFBNDFCLEVBQUE1MUIsS0FBQTQxQixhQU1BLE9BSkFBLEdBREFLLEVBQUFELEdBQUFDLEVBQUFqMkIsT0FDQUMsTUFDQTIxQixFQUFBSyxFQUFBaDJCLElBQUFnMkIsRUFDQUEsRUFBQWlCLGNBQUFsM0IsT0FFQUEsTUFRQW0zQixrQkFBQSxTQUFBbEIsR0FDQSxPQUFBN1AsRUFBQTZQLEVBQUEsb0JBQUFqMkIsTUFDQUEsTUFHQWkyQixFQUFBRCxHQUFBQyxFQUFBajJCLGFBQ0FBLEtBQUE0MUIsYUFBQUssRUFBQWgyQixJQUNBRCxPQVFBbzNCLGVBQUEsU0FBQW5CLEdBQ0EsR0FBQTdQLEVBQUE2UCxFQUFBLGlCQUFBajJCLE1BQ0EsT0FBQUEsS0FHQSxJQUFBNjFCLEVBQUE3MUIsS0FBQTYxQixZQU1BLE9BSkEsSUFBQTNNLEVBQUEyTSxFQURBSSxFQUFBRCxHQUFBQyxFQUFBajJCLFNBRUE2MUIsRUFBQTNvQixLQUFBK29CLEdBQ0FBLEVBQUFtQixlQUFBcDNCLE9BRUFBLE1BUUFxM0IsbUJBQUEsU0FBQXBCLEdBQ0EsR0FBQTdQLEVBQUE2UCxFQUFBLHFCQUFBajJCLE1BQ0EsT0FBQUEsS0FHQWkyQixFQUFBRCxHQUFBQyxFQUFBajJCLE1BQ0EsSUFBQW9uQixFQUFBOEIsRUFBQWxwQixLQUFBNjFCLFlBQUFJLEdBSUEsT0FIQTdPLEdBQUEsR0FDQXBuQixLQUFBNjFCLFlBQUF6RSxPQUFBaEssRUFBQSxHQUVBcG5CLE1BT0FzM0IsbUJBQUEsV0FDQSxPQUFBdDNCLEtBQUE2MUIsWUFBQXB5QixPQUFBLEdBUUE4ekIsaUJBQUEsU0FBQXRCLEdBQ0EsUUFBQWoyQixLQUFBNDFCLGFBQUFLLEVBQUFoMkIsS0FRQTJ1QixLQUFBLFNBQUEzQyxHQUNBLElBQUF0VSxFQUFBM1gsS0FDQTJCLEVBQUEzQixLQUFBMkIsTUFFQSxTQUFBaXRCLEVBQUE0SSxHQUNBN2YsRUFBQThULFFBQUFtRCxLQUFBNEksRUFBQXZMLEdBSUF0cUIsRUFBQTR6QixJQUNBM0csRUFBQWpYLEVBQUE1WCxRQUFBeTNCLE1BQUExQixHQUFBbjBCLElBR0FpdEIsRUFBQWpYLEVBQUE1WCxRQUFBeTNCLE9BRUF2TCxFQUFBd0wsaUJBQ0E3SSxFQUFBM0MsRUFBQXdMLGlCQUlBOTFCLEdBQUE0ekIsSUFDQTNHLEVBQUFqWCxFQUFBNVgsUUFBQXkzQixNQUFBMUIsR0FBQW4wQixLQVVBKzFCLFFBQUEsU0FBQXpMLEdBQ0EsR0FBQWpzQixLQUFBMjNCLFVBQ0EsT0FBQTMzQixLQUFBNHVCLEtBQUEzQyxHQUdBanNCLEtBQUEyQixNQTdLQSxJQW9MQWcyQixRQUFBLFdBRUEsSUFEQSxJQUFBbDdCLEVBQUEsRUFDQUEsRUFBQXVELEtBQUE2MUIsWUFBQXB5QixRQUFBLENBQ0EsS0FBQXpELEtBQUE2MUIsWUFBQXA1QixHQUFBa0YsT0F2TEEsR0F1TEF5ekIsS0FDQSxTQUVBMzRCLElBRUEsVUFPQW95QixVQUFBLFNBQUFzRSxHQUdBLElBQUF5RSxFQUFBbDJCLEVBQUEsR0FBc0N5eEIsR0FHdEMsSUFBQWxMLEVBQUFqb0IsS0FBQUQsUUFBQStyQixPQUFBLENBQUE5ckIsS0FBQTQzQixJQUdBLE9BRkE1M0IsS0FBQThDLGFBQ0E5QyxLQUFBMkIsTUEzTUEsSUFnTkEzQixLQUFBMkIsT0FBQTZ6QixHQUFBQyxHQWhOQSxNQWlOQXoxQixLQUFBMkIsTUFBQXl6QixJQUdBcDFCLEtBQUEyQixNQUFBM0IsS0FBQTYzQixRQUFBRCxHQUlBNTNCLEtBQUEyQixPQUFBMHpCLEdBQUFDLEdBQUFDLEdBQUFFLEtBQ0F6MUIsS0FBQTAzQixRQUFBRSxJQVdBQyxRQUFBLFNBQUExRSxLQU9Bc0IsZUFBQSxhQU9BM3hCLE1BQUEsY0E4REEya0IsRUFBQXlPLEdBQUFSLEdBQUEsQ0FLQUMsU0FBQSxDQUtBeEosU0FBQSxHQVNBMkwsU0FBQSxTQUFBN0wsR0FDQSxJQUFBOEwsRUFBQS8zQixLQUFBRCxRQUFBb3NCLFNBQ0EsV0FBQTRMLEdBQUE5TCxFQUFBRSxTQUFBMW9CLFNBQUFzMEIsR0FTQUYsUUFBQSxTQUFBNUwsR0FDQSxJQUFBdHFCLEVBQUEzQixLQUFBMkIsTUFDQXFxQixFQUFBQyxFQUFBRCxVQUVBZ00sRUFBQXIyQixHQUFBMHpCLEdBQUFDLElBQ0EyQyxFQUFBajRCLEtBQUE4M0IsU0FBQTdMLEdBR0EsT0FBQStMLElBQUFoTSxFQUFBbkIsSUFBQW9OLEdBQ0F0MkIsRUFBQTh6QixHQUNTdUMsR0FBQUMsRUFDVGpNLEVBQUFwQixFQUNBanBCLEVBQUE0ekIsR0FDYTV6QixFQUFBMHpCLEdBR2IxekIsRUFBQTJ6QixHQUZBRCxHQTVWQSxNQWlYQTVOLEVBQUEwTyxHQUFBRCxHQUFBLENBS0FQLFNBQUEsQ0FDQTZCLE1BQUEsTUFDQVUsVUFBQSxHQUNBL0wsU0FBQSxFQUNBbUMsVUFBQWpELEdBR0FvSixlQUFBLFdBQ0EsSUFBQW5HLEVBQUF0dUIsS0FBQUQsUUFBQXV1QixVQUNBZ0csRUFBQSxHQU9BLE9BTkFoRyxFQUFBbkQsR0FDQW1KLEVBQUFwbkIsS0FBQTJtQixJQUVBdkYsRUFBQWxELEdBQ0FrSixFQUFBcG5CLEtBQUEwbUIsSUFFQVUsR0FHQTZELGNBQUEsU0FBQWxNLEdBQ0EsSUFBQWxzQixFQUFBQyxLQUFBRCxRQUNBcTRCLEdBQUEsRUFDQTN6QixFQUFBd25CLEVBQUF4bkIsU0FDQTZwQixFQUFBckMsRUFBQXFDLFVBQ0FodUIsRUFBQTJyQixFQUFBc0IsT0FDQWh0QixFQUFBMHJCLEVBQUF1QixPQWVBLE9BWkFjLEVBQUF2dUIsRUFBQXV1QixZQUNBdnVCLEVBQUF1dUIsVUFBQW5ELEdBQ0FtRCxFQUFBLElBQUFodUIsRUFBQXdxQixFQUFBeHFCLEVBQUEsRUFBQXlxQixFQUFBQyxFQUNBb04sRUFBQTkzQixHQUFBTixLQUFBbzJCLEdBQ0EzeEIsRUFBQXZFLEtBQUEwZSxJQUFBcU4sRUFBQXNCLFVBRUFlLEVBQUEsSUFBQS90QixFQUFBdXFCLEVBQUF2cUIsRUFBQSxFQUFBMHFCLEVBQUFDLEVBQ0FrTixFQUFBNzNCLEdBQUFQLEtBQUFxMkIsR0FDQTV4QixFQUFBdkUsS0FBQTBlLElBQUFxTixFQUFBdUIsVUFHQXZCLEVBQUFxQyxZQUNBOEosR0FBQTN6QixFQUFBMUUsRUFBQW00QixXQUFBNUosRUFBQXZ1QixFQUFBdXVCLFdBR0F3SixTQUFBLFNBQUE3TCxHQUNBLE9BQUFpSyxHQUFBNzNCLFVBQUF5NUIsU0FBQWw3QixLQUFBb0QsS0FBQWlzQixLQUNBanNCLEtBQUEyQixNQUFBMHpCLE1BQUFyMUIsS0FBQTJCLE1BQUEwekIsS0FBQXIxQixLQUFBbTRCLGNBQUFsTSxLQUdBMkMsS0FBQSxTQUFBM0MsR0FFQWpzQixLQUFBbzJCLEdBQUFuSyxFQUFBc0IsT0FDQXZ0QixLQUFBcTJCLEdBQUFwSyxFQUFBdUIsT0FFQSxJQUFBYyxFQUFBeUgsR0FBQTlKLEVBQUFxQyxXQUVBQSxJQUNBckMsRUFBQXdMLGdCQUFBejNCLEtBQUFELFFBQUF5M0IsTUFBQWxKLEdBRUF0dUIsS0FBQWdvQixPQUFBNEcsS0FBQWh5QixLQUFBb0QsS0FBQWlzQixNQWNBeEUsRUFBQTZPLEdBQUFKLEdBQUEsQ0FLQVAsU0FBQSxDQUNBNkIsTUFBQSxRQUNBVSxVQUFBLEVBQ0EvTCxTQUFBLEdBR0FzSSxlQUFBLFdBQ0EsT0FBQWQsS0FHQW1FLFNBQUEsU0FBQTdMLEdBQ0EsT0FBQWpzQixLQUFBZ29CLE9BQUE4UCxTQUFBbDdCLEtBQUFvRCxLQUFBaXNCLEtBQ0EvckIsS0FBQTBlLElBQUFxTixFQUFBenJCLE1BQUEsR0FBQVIsS0FBQUQsUUFBQW00QixXQUFBbDRCLEtBQUEyQixNQUFBMHpCLEtBR0F6RyxLQUFBLFNBQUEzQyxHQUNBLE9BQUFBLEVBQUF6ckIsTUFBQSxDQUNBLElBQUE2M0IsRUFBQXBNLEVBQUF6ckIsTUFBQSxhQUNBeXJCLEVBQUF3TCxnQkFBQXozQixLQUFBRCxRQUFBeTNCLE1BQUFhLEVBRUFyNEIsS0FBQWdvQixPQUFBNEcsS0FBQWh5QixLQUFBb0QsS0FBQWlzQixNQWlCQXhFLEVBQUE4TyxHQUFBYixHQUFBLENBS0FDLFNBQUEsQ0FDQTZCLE1BQUEsUUFDQXJMLFNBQUEsRUFDQW1NLEtBQUEsSUFDQUosVUFBQSxHQUdBekQsZUFBQSxXQUNBLE9BQUFoQixLQUdBb0UsUUFBQSxTQUFBNUwsR0FDQSxJQUFBbHNCLEVBQUFDLEtBQUFELFFBQ0F3NEIsRUFBQXRNLEVBQUFFLFNBQUExb0IsU0FBQTFELEVBQUFvc0IsU0FDQXFNLEVBQUF2TSxFQUFBeG5CLFNBQUExRSxFQUFBbTRCLFVBQ0FPLEVBQUF4TSxFQUFBZSxVQUFBanRCLEVBQUF1NEIsS0FNQSxHQUpBdDRCLEtBQUF5MkIsT0FBQXhLLEdBSUF1TSxJQUFBRCxHQUFBdE0sRUFBQUQsV0FBQXBCLEVBQUFDLEtBQUE0TixFQUNBejRCLEtBQUE4QyxhQUNTLEdBQUFtcEIsRUFBQUQsVUFBQXRCLEVBQ1QxcUIsS0FBQThDLFFBQ0E5QyxLQUFBdzJCLE9BQUF6USxFQUFBLFdBQ0EvbEIsS0FBQTJCLE1BQUE2ekIsR0FDQXgxQixLQUFBMDNCLFdBQ2EzM0IsRUFBQXU0QixLQUFBdDRCLFdBQ0osR0FBQWlzQixFQUFBRCxVQUFBcEIsRUFDVCxPQUFBNEssR0FFQSxPQTdnQkEsSUFnaEJBMXlCLE1BQUEsV0FDQTQxQixhQUFBMTRCLEtBQUF3MkIsU0FHQTVILEtBQUEsU0FBQTNDLEdBQ0Fqc0IsS0FBQTJCLFFBQUE2ekIsS0FJQXZKLEtBQUFELFVBQUFwQixFQUNBNXFCLEtBQUF5ckIsUUFBQW1ELEtBQUE1dUIsS0FBQUQsUUFBQXkzQixNQUFBLEtBQUF2TCxJQUVBanNCLEtBQUF5MkIsT0FBQTFKLFVBQUExc0IsSUFDQUwsS0FBQXlyQixRQUFBbUQsS0FBQTV1QixLQUFBRCxRQUFBeTNCLE1BQUF4M0IsS0FBQXkyQixhQWVBaFAsRUFBQWlQLEdBQUFSLEdBQUEsQ0FLQVAsU0FBQSxDQUNBNkIsTUFBQSxTQUNBVSxVQUFBLEVBQ0EvTCxTQUFBLEdBR0FzSSxlQUFBLFdBQ0EsT0FBQWQsS0FHQW1FLFNBQUEsU0FBQTdMLEdBQ0EsT0FBQWpzQixLQUFBZ29CLE9BQUE4UCxTQUFBbDdCLEtBQUFvRCxLQUFBaXNCLEtBQ0EvckIsS0FBQTBlLElBQUFxTixFQUFBZ0MsVUFBQWp1QixLQUFBRCxRQUFBbTRCLFdBQUFsNEIsS0FBQTJCLE1BQUEwekIsT0FjQTVOLEVBQUFrUCxHQUFBVCxHQUFBLENBS0FQLFNBQUEsQ0FDQTZCLE1BQUEsUUFDQVUsVUFBQSxHQUNBM1UsU0FBQSxHQUNBK0ssVUFBQW5ELEVBQUFDLEVBQ0FlLFNBQUEsR0FHQXNJLGVBQUEsV0FDQSxPQUFBMEIsR0FBQTkzQixVQUFBbzJCLGVBQUE3M0IsS0FBQW9ELE9BR0E4M0IsU0FBQSxTQUFBN0wsR0FDQSxJQUNBMUksRUFEQStLLEVBQUF0dUIsS0FBQUQsUUFBQXV1QixVQVdBLE9BUkFBLEdBQUFuRCxFQUFBQyxHQUNBN0gsRUFBQTBJLEVBQUEyQixnQkFDU1UsRUFBQW5ELEVBQ1Q1SCxFQUFBMEksRUFBQTZCLGlCQUNTUSxFQUFBbEQsSUFDVDdILEVBQUEwSSxFQUFBOEIsa0JBR0EvdEIsS0FBQWdvQixPQUFBOFAsU0FBQWw3QixLQUFBb0QsS0FBQWlzQixJQUNBcUMsRUFBQXJDLEVBQUF5QixpQkFDQXpCLEVBQUF4bkIsU0FBQXpFLEtBQUFELFFBQUFtNEIsV0FDQWpNLEVBQUFrQyxhQUFBbnVCLEtBQUFELFFBQUFvc0IsVUFDQXZOLEVBQUEyRSxHQUFBdmpCLEtBQUFELFFBQUF3akIsVUFBQTBJLEVBQUFELFVBQUFwQixHQUdBZ0UsS0FBQSxTQUFBM0MsR0FDQSxJQUFBcUMsRUFBQXlILEdBQUE5SixFQUFBeUIsaUJBQ0FZLEdBQ0F0dUIsS0FBQXlyQixRQUFBbUQsS0FBQTV1QixLQUFBRCxRQUFBeTNCLE1BQUFsSixFQUFBckMsR0FHQWpzQixLQUFBeXJCLFFBQUFtRCxLQUFBNXVCLEtBQUFELFFBQUF5M0IsTUFBQXZMLE1BMkJBeEUsRUFBQW1QLEdBQUFsQixHQUFBLENBS0FDLFNBQUEsQ0FDQTZCLE1BQUEsTUFDQXJMLFNBQUEsRUFDQXdNLEtBQUEsRUFDQUMsU0FBQSxJQUNBTixLQUFBLElBQ0FKLFVBQUEsRUFDQVcsYUFBQSxJQUdBcEUsZUFBQSxXQUNBLE9BQUFmLEtBR0FtRSxRQUFBLFNBQUE1TCxHQUNBLElBQUFsc0IsRUFBQUMsS0FBQUQsUUFFQXc0QixFQUFBdE0sRUFBQUUsU0FBQTFvQixTQUFBMUQsRUFBQW9zQixTQUNBcU0sRUFBQXZNLEVBQUF4bkIsU0FBQTFFLEVBQUFtNEIsVUFDQVksRUFBQTdNLEVBQUFlLFVBQUFqdEIsRUFBQXU0QixLQUlBLEdBRkF0NEIsS0FBQThDLFFBRUFtcEIsRUFBQUQsVUFBQXRCLEdBQUEsSUFBQTFxQixLQUFBKzJCLE1BQ0EsT0FBQS8yQixLQUFBKzRCLGNBS0EsR0FBQVAsR0FBQU0sR0FBQVAsRUFBQSxDQUNBLEdBQUF0TSxFQUFBRCxXQUFBcEIsRUFDQSxPQUFBNXFCLEtBQUErNEIsY0FHQSxJQUFBQyxHQUFBaDVCLEtBQUE2MkIsT0FBQTVLLEVBQUFjLFVBQUEvc0IsS0FBQTYyQixNQUFBOTJCLEVBQUE2NEIsU0FDQUssR0FBQWo1QixLQUFBODJCLFNBQUE1SixHQUFBbHRCLEtBQUE4MkIsUUFBQTdLLEVBQUF2ckIsUUFBQVgsRUFBQTg0QixhQWdCQSxHQWRBNzRCLEtBQUE2MkIsTUFBQTVLLEVBQUFjLFVBQ0Evc0IsS0FBQTgyQixRQUFBN0ssRUFBQXZyQixPQUVBdTRCLEdBQUFELEVBR0FoNUIsS0FBQSsyQixPQUFBLEVBRkEvMkIsS0FBQSsyQixNQUFBLEVBS0EvMkIsS0FBQXkyQixPQUFBeEssRUFLQSxJQURBanNCLEtBQUErMkIsTUFBQWgzQixFQUFBNDRCLEtBSUEsT0FBQTM0QixLQUFBczNCLHNCQUdBdDNCLEtBQUF3MkIsT0FBQXpRLEVBQUEsV0FDQS9sQixLQUFBMkIsTUFBQTZ6QixHQUNBeDFCLEtBQUEwM0IsV0FDcUIzM0IsRUFBQTY0QixTQUFBNTRCLE1BQ3JCcTFCLElBTkFHLEdBVUEsT0F0dEJBLElBeXRCQXVELFlBQUEsV0FJQSxPQUhBLzRCLEtBQUF3MkIsT0FBQXpRLEVBQUEsV0FDQS9sQixLQUFBMkIsTUEzdEJBLElBNHRCUzNCLEtBQUFELFFBQUE2NEIsU0FBQTU0QixNQTV0QlQsSUFndUJBOEMsTUFBQSxXQUNBNDFCLGFBQUExNEIsS0FBQXcyQixTQUdBNUgsS0FBQSxXQUNBNXVCLEtBQUEyQixPQUFBNnpCLEtBQ0F4MUIsS0FBQXkyQixPQUFBeUMsU0FBQWw1QixLQUFBKzJCLE1BQ0EvMkIsS0FBQXlyQixRQUFBbUQsS0FBQTV1QixLQUFBRCxRQUFBeTNCLE1BQUF4M0IsS0FBQXkyQixZQW9CQTF0QixHQUFBb3dCLFFBQUEsUUFNQXB3QixHQUFBNHNCLFNBQUEsQ0FPQXlELFdBQUEsRUFRQTd1QixZQWw5QkEsVUF3OUJBdWhCLFFBQUEsRUFTQUgsWUFBQSxLQU9BME4sV0FBQSxLQU9BckMsT0FBQSxDQUVBLENBQUFOLEdBQUEsQ0FBNEI1SyxRQUFBLElBQzVCLENBQUF3SyxHQUFBLENBQTJCeEssUUFBQSxHQUFjLFlBQ3pDLENBQUE2SyxHQUFBLENBQTJCckksVUFBQW5ELElBQzNCLENBQUFnTCxHQUFBLENBQXlCN0gsVUFBQW5ELEdBQWdDLFdBQ3pELENBQUF5TCxJQUNBLENBQUFBLEdBQUEsQ0FBeUJZLE1BQUEsWUFBQW1CLEtBQUEsR0FBNEIsU0FDckQsQ0FBQXBDLEtBUUErQyxTQUFBLENBTUFDLFdBQUEsT0FPQUMsWUFBQSxPQVNBQyxhQUFBLE9BT0FDLGVBQUEsT0FPQUMsU0FBQSxPQVFBQyxrQkFBQSxrQkFhQSxTQUFBM0MsR0FBQTl0QixFQUFBcEosR0F6d0RBLElBQUEwckIsRUEwd0RBenJCLEtBQUFELFFBQUEyQixFQUFBLEdBQTRCcUgsR0FBQTRzQixTQUFBNTFCLEdBQUEsSUFFNUJDLEtBQUFELFFBQUE0ckIsWUFBQTNyQixLQUFBRCxRQUFBNHJCLGFBQUF4aUIsRUFFQW5KLEtBQUE2NUIsU0FBQSxHQUNBNzVCLEtBQUF3c0IsUUFBQSxHQUNBeHNCLEtBQUF1MEIsWUFBQSxHQUNBdjBCLEtBQUE4NUIsWUFBQSxHQUVBOTVCLEtBQUFtSixVQUNBbkosS0FBQWlzQixNQXJ3REEsS0FmQVIsRUFveERBenJCLE1BbHhEQUQsUUFBQXM1QixhQUlLL08sRUFDTG1HLEdBQ0tsRyxFQUNMMEgsR0FDSzVILEVBR0xxSSxHQUZBbkQsS0FJQTlELEVBQUFNLElBc3dEQS9yQixLQUFBdUssWUFBQSxJQUFBeEwsR0FBQWlCLFVBQUFELFFBQUF3SyxhQUVBd3ZCLEdBQUEvNUIsTUFBQSxHQUVBc21CLEVBQUF0bUIsS0FBQUQsUUFBQXcwQixZQUFBLFNBQUF5RixHQUNBLElBQUF4RixFQUFBeDBCLEtBQUFpNkIsSUFBQSxJQUFBRCxFQUFBLEdBQUFBLEVBQUEsS0FDQUEsRUFBQSxJQUFBeEYsRUFBQTBDLGNBQUE4QyxFQUFBLElBQ0FBLEVBQUEsSUFBQXhGLEVBQUE0QyxlQUFBNEMsRUFBQSxLQUNLaDZCLE1BNFBMLFNBQUErNUIsR0FBQXRPLEVBQUF3TyxHQUNBLElBSUFyUSxFQUpBemdCLEVBQUFzaUIsRUFBQXRpQixRQUNBQSxFQUFBUSxRQUlBMmMsRUFBQW1GLEVBQUExckIsUUFBQXU1QixTQUFBLFNBQUE1N0IsRUFBQVYsR0FDQTRzQixFQUFBRixFQUFBdmdCLEVBQUFRLE1BQUEzTSxHQUNBaTlCLEdBQ0F4TyxFQUFBcU8sWUFBQWxRLEdBQUF6Z0IsRUFBQVEsTUFBQWlnQixHQUNBemdCLEVBQUFRLE1BQUFpZ0IsR0FBQWxzQixHQUVBeUwsRUFBQVEsTUFBQWlnQixHQUFBNkIsRUFBQXFPLFlBQUFsUSxJQUFBLEtBR0FxUSxJQUNBeE8sRUFBQXFPLFlBQUEsS0F6UUE3QyxHQUFBNTRCLFVBQUEsQ0FNQSsxQixJQUFBLFNBQUFyMEIsR0FhQSxPQVpBMkIsRUFBQTFCLEtBQUFELFdBR0FBLEVBQUF3SyxhQUNBdkssS0FBQXVLLFlBQUFwQyxTQUVBcEksRUFBQTRyQixjQUVBM3JCLEtBQUFpc0IsTUFBQWtELFVBQ0FudkIsS0FBQWlzQixNQUFBclEsT0FBQTdiLEVBQUE0ckIsWUFDQTNyQixLQUFBaXNCLE1BQUFybEIsUUFFQTVHLE1BU0FrNkIsS0FBQSxTQUFBQyxHQUNBbjZCLEtBQUF3c0IsUUFBQTROLFFBQUFELEVBNURBLEVBREEsR0FzRUF0TCxVQUFBLFNBQUFzRSxHQUNBLElBQUEzRyxFQUFBeHNCLEtBQUF3c0IsUUFDQSxJQUFBQSxFQUFBNE4sUUFBQSxDQU9BLElBQUE1RixFQUZBeDBCLEtBQUF1SyxZQUFBc3FCLGdCQUFBMUIsR0FHQSxJQUFBb0IsRUFBQXYwQixLQUFBdTBCLFlBS0E4RixFQUFBN04sRUFBQTZOLGdCQUlBQSxRQUFBMTRCLE1BQUE2ekIsTUFDQTZFLEVBQUE3TixFQUFBNk4sY0FBQSxNQUlBLElBREEsSUFBQTU5QixFQUFBLEVBQ0FBLEVBQUE4M0IsRUFBQTl3QixRQUNBK3dCLEVBQUFELEVBQUE5M0IsR0E5RkEsSUFzR0ErdkIsRUFBQTROLFNBQ0FDLEdBQUE3RixHQUFBNkYsSUFDQTdGLEVBQUErQyxpQkFBQThDLEdBR0E3RixFQUFBMXhCLFFBRkEweEIsRUFBQTNGLFVBQUFzRSxJQU9Ba0gsR0FBQTdGLEVBQUE3eUIsT0FBQTB6QixHQUFBQyxHQUFBQyxNQUNBOEUsRUFBQTdOLEVBQUE2TixjQUFBN0YsR0FFQS8zQixNQVNBYSxJQUFBLFNBQUFrM0IsR0FDQSxHQUFBQSxhQUFBa0IsR0FDQSxPQUFBbEIsRUFJQSxJQURBLElBQUFELEVBQUF2MEIsS0FBQXUwQixZQUNBOTNCLEVBQUEsRUFBdUJBLEVBQUE4M0IsRUFBQTl3QixPQUF3QmhILElBQy9DLEdBQUE4M0IsRUFBQTkzQixHQUFBc0QsUUFBQXkzQixPQUFBaEQsRUFDQSxPQUFBRCxFQUFBOTNCLEdBR0EsYUFTQXc5QixJQUFBLFNBQUF6RixHQUNBLEdBQUFwTyxFQUFBb08sRUFBQSxNQUFBeDBCLE1BQ0EsT0FBQUEsS0FJQSxJQUFBczZCLEVBQUF0NkIsS0FBQTFDLElBQUFrM0IsRUFBQXowQixRQUFBeTNCLE9BU0EsT0FSQThDLEdBQ0F0NkIsS0FBQW9LLE9BQUFrd0IsR0FHQXQ2QixLQUFBdTBCLFlBQUFybkIsS0FBQXNuQixHQUNBQSxFQUFBL0ksUUFBQXpyQixLQUVBQSxLQUFBdUssWUFBQXBDLFNBQ0Fxc0IsR0FRQXBxQixPQUFBLFNBQUFvcUIsR0FDQSxHQUFBcE8sRUFBQW9PLEVBQUEsU0FBQXgwQixNQUNBLE9BQUFBLEtBTUEsR0FIQXcwQixFQUFBeDBCLEtBQUExQyxJQUFBazNCLEdBR0EsQ0FDQSxJQUFBRCxFQUFBdjBCLEtBQUF1MEIsWUFDQW5OLEVBQUE4QixFQUFBcUwsRUFBQUMsSUFFQSxJQUFBcE4sSUFDQW1OLEVBQUFuRCxPQUFBaEssRUFBQSxHQUNBcG5CLEtBQUF1SyxZQUFBcEMsVUFJQSxPQUFBbkksTUFTQWtKLEdBQUEsU0FBQXF4QixFQUFBbnhCLEdBQ0EsR0FBQW14QixJQUFBbmhCLEdBR0FoUSxJQUFBZ1EsRUFBQSxDQUlBLElBQUF5Z0IsRUFBQTc1QixLQUFBNjVCLFNBS0EsT0FKQXZULEVBQUFrQyxFQUFBK1IsR0FBQSxTQUFBL0MsR0FDQXFDLEVBQUFyQyxHQUFBcUMsRUFBQXJDLElBQUEsR0FDQXFDLEVBQUFyQyxHQUFBdHFCLEtBQUE5RCxLQUVBcEosT0FTQThMLElBQUEsU0FBQXl1QixFQUFBbnhCLEdBQ0EsR0FBQW14QixJQUFBbmhCLEVBQUEsQ0FJQSxJQUFBeWdCLEVBQUE3NUIsS0FBQTY1QixTQVFBLE9BUEF2VCxFQUFBa0MsRUFBQStSLEdBQUEsU0FBQS9DLEdBQ0FwdUIsRUFHQXl3QixFQUFBckMsSUFBQXFDLEVBQUFyQyxHQUFBcEcsT0FBQWxJLEVBQUEyUSxFQUFBckMsR0FBQXB1QixHQUFBLFVBRkF5d0IsRUFBQXJDLEtBS0F4M0IsT0FRQTR1QixLQUFBLFNBQUE0SSxFQUFBZ0QsR0FFQXg2QixLQUFBRCxRQUFBcTVCLFdBa0VBLFNBQUE1QixFQUFBZ0QsR0FDQSxJQUFBQyxFQUFBenpCLEVBQUEwekIsWUFBQSxTQUNBRCxFQUFBRSxVQUFBbkQsR0FBQSxNQUNBaUQsRUFBQTl1QixRQUFBNnVCLEVBQ0FBLEVBQUE1ZSxPQUFBZ2YsY0FBQUgsR0FyRUFJLENBQUFyRCxFQUFBZ0QsR0FJQSxJQUFBWCxFQUFBNzVCLEtBQUE2NUIsU0FBQXJDLElBQUF4M0IsS0FBQTY1QixTQUFBckMsR0FBQW5PLFFBQ0EsR0FBQXdRLEtBQUFwMkIsT0FBQSxDQUlBKzJCLEVBQUFsMUIsS0FBQWt5QixFQUNBZ0QsRUFBQWp0QixlQUFBLFdBQ0FpdEIsRUFBQTlMLFNBQUFuaEIsa0JBSUEsSUFEQSxJQUFBOVEsRUFBQSxFQUNBQSxFQUFBbzlCLEVBQUFwMkIsUUFDQW8yQixFQUFBcDlCLEdBQUErOUIsR0FDQS85QixNQVFBMHlCLFFBQUEsV0FDQW52QixLQUFBbUosU0FBQTR3QixHQUFBLzVCLE1BQUEsR0FFQUEsS0FBQTY1QixTQUFBLEdBQ0E3NUIsS0FBQXdzQixRQUFBLEdBQ0F4c0IsS0FBQWlzQixNQUFBa0QsVUFDQW52QixLQUFBbUosUUFBQSxPQXlDQXpILEVBQUFxSCxHQUFBLENBQ0EyaEIsY0FDQUMsYUFDQUMsWUFDQUMsZUFFQXVLLGtCQUNBQyxlQUNBQyxpQkFDQUMsZUFDQUMsb0JBQ0FDLG1CQUNBcUYsYUFsckNBLEdBb3JDQWhRLGlCQUNBQyxpQkFDQUMsa0JBQ0FDLGVBQ0FDLGlCQUNBQyx1QkFDQUMscUJBQ0FDLGdCQUVBNEwsV0FDQXpMLFNBQ0F6c0IsZUFFQWt6QixjQUNBMUMsY0FDQWtCLHFCQUNBaUMsbUJBQ0FqQixvQkFFQWlFLGNBQ0FRLGtCQUNBNkUsSUFBQW5FLEdBQ0FvRSxJQUFBN0UsR0FDQThFLE1BQUF0RSxHQUNBdUUsTUFBQTVFLEdBQ0E2RSxPQUFBekUsR0FDQTBFLE1BQUE3RSxHQUVBcnRCLEdBQUFvZixFQUNBeGMsSUFBQTJjLEVBQ0FuQyxPQUNBa0IsUUFDQUYsU0FDQTVsQixTQUNBK2xCLFVBQ0F0QixTQUNBdUQsbUJBS0EsSUFBQWpyQixJQUFBLG9CQUFBa1osVUFBQSxJQUNBNU8sV0FHSTJjLEVBQUEsV0FDSixPQUFBM2MsSUFDS25NLEtBQUFMLEVBQUFGLEVBQUFFLEVBQUFDLE1BQUE0YyxJQUFBNWMsRUFBQUQsUUFBQW1wQixHQXRrRkwsQ0E2a0ZDam5CLE9BQUF1SSx3Q0M5a0ZELElBRkEsSUFBQXEwQixFQUFBLDBCQUVBLzZCLEVBQUEsRUFBY0EsRUFBQSs2QixFQUFBNTNCLFNBQUFoRixPQUFBNGEsZUFBNEMvWSxFQUMxRDdCLE9BQUE0YSxhQUFBNWEsT0FBQTQ4QixFQUFBLzZCLEdBQUEsZ0JBR0E5RCxFQUFBRCxRQUFBa0MsT0FBQTRhLDJDQ0FBN2MsRUFBQUQsUUFOQSxTQUFBdWEsR0FHQSxPQUFBQSxFQUFBRyxRQUFBLG1CQUFzQyxzQkNMdEMsTUFBQXFrQixFQUFzQmovQixFQUFRLElBQzlCay9CLEVBQXlCbC9CLEVBQVEsSUFDakNtL0IsRUFBeUJuL0IsRUFBUSxJQUNqQ28vQixFQUF1QnAvQixFQUFRLEdBQy9Cb0ksRUFBaUJwSSxFQUFRLElBQ3pCcS9CLEVBQTBCci9CLEVBQVEsSUFDbENzL0IsRUFBMEJ0L0IsRUFBUSxJQUNsQ3lILEVBQW9CekgsRUFBUSxHQUM1QjZILEVBQXdCN0gsRUFBUSxHQUNoQzRNLEVBQXFCNU0sRUFBUSxJQUM3QnUvQixFQUFrQ3YvQixFQUFRLElBUTFDOEMsRUFBQSxDQU9BbThCLGdCQVFBQyxtQkFRQUMsbUJBU0FDLGlCQVNBaDNCLFdBU0FpM0Isb0JBU0FDLG9CQVNBNzNCLGNBU0FJLGtCQVNBK0UsZUFVQTR5QiwwQkF2R2tDeC9CLEVBQVEsSUFpSDFDdS9CLDZCQUdBcC9CLEVBQUFELFFBQUE0QyxpQkNuSEEzQyxFQUFBRCxRQVhBLFNBQUErRyxHQUNBLElBQUFKLEVBQUEsQ0FBZ0I1QyxFQUFBLEVBQUFDLEVBQUEsR0FPaEIsT0FOQStDLEVBQUFtakIsUUFBQW5qQixFQUFBLFNBQUFILEdBQ0FELEVBQUE1QyxHQUFBNkMsRUFBQTdDLEVBQ0E0QyxFQUFBM0MsR0FBQTRDLEVBQUE1QyxJQUVBMkMsRUFBQTVDLEVBQUE0QyxFQUFBNUMsRUFBQWdELEVBQUFHLE9BQ0FQLEVBQUEzQyxFQUFBMkMsRUFBQTNDLEVBQUErQyxFQUFBRyxPQUNBUCxvQkNUQSxNQUFBczRCLEVBQXlCbi9CLEVBQVEsSUFDakNzL0IsRUFBMEJ0L0IsRUFBUSxJQU1sQ0csRUFBQUQsUUFKQSxTQUFBbUUsRUFBQTJPLEdBQ0EsT0FBQW1zQixFQUFBRyxFQUFBajdCLEVBQUEyTyxzQkNKQSxNQUFBd3NCLEVBQWtDeC9CLEVBQVEsSUFDMUNrL0IsRUFBeUJsL0IsRUFBUSxJQU1qQ0csRUFBQUQsUUFKQSxTQUFBbUUsRUFBQTJPLEVBQUE1TyxHQUNBLE9BQUFvN0IsRUFBQW43QixFQUFBMk8sRUFBQWtzQixFQUFBOTZCLHNCQ1FBLE1BQUFyQixFQUFlL0MsRUFBUSxJQUN2QjRDLEVBQWtCNUMsRUFBUSxJQW1CMUJ5L0IsRUFBQSxFQVVBQyxFQUFBLEVBOElBdi9CLEVBQUFELFFBM0lBLGNBQUE2QyxFQUNBVSxZQUFBQyxFQUFBLElBQ0EyRSxNQUFBM0UsR0FRQUMsS0FBQTJCLE1BQUFvNkIsRUFRQS83QixLQUFBZzhCLGFBQUEsR0FRQWg4QixLQUFBaThCLFdBQUEsR0FRQWo4QixLQUFBazhCLFVBQUEsR0FRQWw4QixLQUFBc3VCLFVBQUF3TixFQUVBMytCLE9BQUF1RSxPQUFBMUIsS0FBQUQsR0FTQUQsZ0JBQUEySCxHQUNBekgsS0FBQU0sR0FBQU4sS0FBQXVlLEdBQUE5VyxFQUNBekgsS0FBQU8sR0FBQVAsS0FBQXdlLEdBQUEvVyxFQUVBekgsS0FBQTJCLFFBQUEzQixLQUFBcUMsUUFBQTg1QixjQUNBbjhCLEtBQUF1ZSxHQUFBLE9BQUF2ZSxLQUFBd2UsR0FDQXhlLEtBQUFzdUIsVUFBQXR1QixLQUFBcUMsUUFBQXk1QixLQUNPLElBQUE5N0IsS0FBQXVlLElBQUF2ZSxLQUFBd2UsR0FBQSxFQUNQeGUsS0FBQXN1QixVQUFBdHVCLEtBQUFxQyxRQUFBKzVCLE1BQ09wOEIsS0FBQXVlLEdBQUEsR0FBQXZlLEtBQUF3ZSxHQUFBLEVBQ1B4ZSxLQUFBc3VCLFVBQUF0dUIsS0FBQXFDLFFBQUFnNkIsVUFDT3I4QixLQUFBdWUsR0FBQSxHQUFBdmUsS0FBQXdlLEdBQUEsRUFDUHhlLEtBQUFzdUIsVUFBQXR1QixLQUFBcUMsUUFBQWk2QixVQUNPLElBQUF0OEIsS0FBQXVlLElBQUF2ZSxLQUFBd2UsR0FBQSxFQUNQeGUsS0FBQXN1QixVQUFBdHVCLEtBQUFxQyxRQUFBazZCLE1BQ092OEIsS0FBQXVlLEdBQUEsR0FBQXZlLEtBQUF3ZSxHQUFBLEVBQ1B4ZSxLQUFBc3VCLFVBQUF0dUIsS0FBQXFDLFFBQUFtNkIsVUFDT3g4QixLQUFBdWUsR0FBQSxHQUFBdmUsS0FBQXdlLEdBQUEsRUFDUHhlLEtBQUFzdUIsVUFBQXR1QixLQUFBcUMsUUFBQW82QixVQUNPejhCLEtBQUF1ZSxHQUFBLE9BQUF2ZSxLQUFBd2UsS0FDUHhlLEtBQUFzdUIsVUFBQXR1QixLQUFBcUMsUUFBQXE2QixNQUdBLElBQUExOEIsS0FBQXVlLElBQUEsSUFBQXZlLEtBQUF3ZSxHQUNBeGUsS0FBQTJCLE1BQUEzQixLQUFBcUMsUUFBQTA1QixXQUVBLzdCLEtBQUEyQixNQUFBM0IsS0FBQXFDLFFBQUFzNkIsZUFXQTc4QixpQkFBQTJILEdBQ0F6SCxLQUFBMkIsUUFBQTNCLEtBQUFxQyxRQUFBczZCLGNBQ0EzOEIsS0FBQThjLEtBQUE5YyxLQUFBZzhCLGFBQUFoOEIsS0FBQXN1QixXQUNLdHVCLEtBQUEyQixRQUFBM0IsS0FBQXFDLFFBQUE4NUIsWUFDTG44QixLQUFBOGMsS0FBQTljLEtBQUFpOEIsV0FBQWo4QixLQUFBc3VCLFdBRUF0dUIsS0FBQThjLEtBQUE5YyxLQUFBazhCLFVBQUFsOEIsS0FBQXN1QixXQUVBdHVCLEtBQUE4YyxLQUFBM1UsT0FBQVYsR0FlQTNILGlCQUFBNmMsRUFBQUMsRUFBQS9FLEVBQUE1TixFQUFBRixFQUFBOFMsR0FDQSxJQUFBK2YsRUFBQSxHQUNBN2YsRUFBQWhaLE1BQUFDLFFBQUE0WSxHQUNBSSxFQUFBLEVBQ0FILElBQ0FBLEVBQUEsR0FFQSxRQUFBcGdCLEVBQUEsRUFBa0JBLEVBQUEsRUFBT0EsSUFBQSxDQUN6Qm1nQyxFQUFBbmdDLEdBQUEsSUFBQXdDLEVBQUEsQ0FDQTRHLE9BQUFvRSxFQUNBbkUsTUFBQWlFLEVBQ0FvTixNQUFBVSxJQUVBLFFBQUFyVSxFQUFBLEVBQW9CQSxFQUFBbVosRUFBZ0JuWixJQUVwQ3daLEVBREFELEVBQ0FILEVBQUFwWixHQUVBb1osRUFFQWdnQixFQUFBbmdDLEdBQUF3Z0IsU0FBQUQsRUFBQXhaLEVBQUFtWixFQUFBbGdCLEVBQUFvZ0IsR0FHQSxPQUFBK2Ysa0NDN0tBLElBQUFsOUIsRUFBQSxDQUNBbTlCLE9BTmV4Z0MsRUFBUSxHQU92QnlnQyxhQU5xQnpnQyxFQUFRLElBTzdCMGdDLFFBTmdCMWdDLEVBQVEsSUFPeEIyZ0MsVUFOa0IzZ0MsRUFBUSxLQVMxQkcsRUFBQUQsUUFBQW1ELG1CQ1BBLE1BQUE4RSxFQUFlbkksRUFBUSxHQUN2QnlILEVBQW9CekgsRUFBUSxHQUM1Qm8vQixFQUF1QnAvQixFQUFRLEdBQy9CNkgsRUFBd0I3SCxFQUFRLEdBaUZoQ0csRUFBQUQsUUEvRUEsY0FBQWlJLEVBQ0ExRSxZQUFBQyxFQUFBLElBQ0EyRSxNQUFBM0UsR0FRQUMsS0FBQWlqQixNQUFBLEdBRUE5bEIsT0FBQXVFLE9BQUExQixLQUFBRCxHQVVBRCxLQUFBOEIsRUFBQXBCLEdBQ0FBLEtBQUFSLEtBQUFRLE9BQUEsRUFDQSxJQUFBcUIsRUFBQUQsRUFBQU4sVUFDQU0sRUFBQU4sVUFBQXRCLEtBQUFzQixVQUNBTSxFQUFBaUQsT0FDQWpELEVBQUFrRCxVQUFBOUUsS0FBQU0sRUFBQUUsRUFBQVIsS0FBQU8sRUFBQUMsR0FDQW9CLEVBQUFtRCxPQUFBL0UsS0FBQVMsT0FDQW1CLEVBQUFrRCxXQUFBOUUsS0FBQSxFQUFBUSxHQUFBUixLQUFBLEVBQUFRLEdBQ0FvQixFQUFBUixVQUFBcEIsS0FBQW9CLFVBQ0FRLEVBQUFQLFlBQUFyQixLQUFBcUIsWUFFQSxRQUFBbUMsRUFBQSxFQUFrQkEsRUFBQXhELEtBQUFpakIsTUFBQXhmLE9BQXVCRCxJQUFBLENBQ3pDNUIsRUFBQUUsWUFDQUYsRUFBQW9ELFFBQUFoRixLQUFBTSxFQUFBTixLQUFBaWpCLE1BQUF6ZixHQUFBLEdBQUFsRCxHQUFBRSxHQUFBUixLQUFBTyxFQUFBUCxLQUFBaWpCLE1BQUF6ZixHQUFBLEdBQUFqRCxHQUFBQyxHQUNBLFFBQUEvRCxFQUFBLEVBQXFCQSxFQUFBdUQsS0FBQWlqQixNQUFBemYsR0FBQUMsT0FBMEJoSCxJQUMvQ21GLEVBQUFxRCxRQUFBakYsS0FBQWlqQixNQUFBemYsR0FBQS9HLEdBQUE2RCxFQUFBTixLQUFBTSxHQUFBRSxHQUFBUixLQUFBaWpCLE1BQUF6ZixHQUFBL0csR0FBQThELEVBQUFQLEtBQUFPLEdBQUFDLEdBRUFvQixFQUFBcUQsUUFBQWpGLEtBQUFNLEVBQUFOLEtBQUFpakIsTUFBQXpmLEdBQUEsR0FBQWxELEdBQUFFLEdBQUFSLEtBQUFPLEVBQUFQLEtBQUFpakIsTUFBQXpmLEdBQUEsR0FBQWpELEdBQUFDLEdBQ0FvQixFQUFBSyxZQUNBTCxFQUFBTSxPQUNBTixFQUFBZ0QsU0FHQWhELEVBQUFzRCxVQUNBdEQsRUFBQU4sVUFBQU8sRUFDQTZDLE1BQUFTLEtBQUF2RCxFQUFBcEIsR0FTQVYsV0FBQVUsR0FDQVIsS0FBQWlqQixNQUFBbmYsRUFBQTlELEtBQUFpakIsTUFBQXppQixHQUNBeThCLElBQUE3M0IsV0FBQTVFLEdBVUFWLGFBQUFxRCxHQUNBLFFBQUFLLEVBQUEsRUFBa0JBLEVBQUF4RCxLQUFBaWpCLE1BQUF4ZixPQUF1QkQsSUFDekMsR0FBQWk0QixFQUFBdDRCLEVBQUFlLEVBQUFsRSxLQUFBaWpCLE1BQUF6ZixHQUFBeEQsT0FDQSxTQUdBLDRCQy9FQSxNQUFBd0UsRUFBZW5JLEVBQVEsR0FDdkJ5SCxFQUFvQnpILEVBQVEsR0FDNUJvL0IsRUFBdUJwL0IsRUFBUSxHQUMvQjZILEVBQXdCN0gsRUFBUSxHQXlFaENHLEVBQUFELFFBdkVBLGNBQUFpSSxFQUNBMUUsWUFBQUMsRUFBQSxJQUNBMkUsTUFBQTNFLEdBUUFDLEtBQUFzRCxPQUFBLEdBRUFuRyxPQUFBdUUsT0FBQTFCLEtBQUFELEdBVUFELEtBQUE4QixFQUFBcEIsR0FDQUEsS0FBQVIsS0FBQVEsT0FBQSxFQUNBLElBQUFxQixFQUFBRCxFQUFBTixVQUNBTSxFQUFBTixVQUFBdEIsS0FBQXNCLFVBQ0FNLEVBQUFpRCxPQUNBakQsRUFBQWtELFVBQUE5RSxLQUFBTSxFQUFBRSxFQUFBUixLQUFBTyxFQUFBQyxHQUNBb0IsRUFBQW1ELE9BQUEvRSxLQUFBUyxPQUNBbUIsRUFBQWtELFdBQUE5RSxLQUFBLEVBQUFRLEdBQUFSLEtBQUEsRUFBQVEsR0FDQW9CLEVBQUFSLFVBQUFwQixLQUFBb0IsVUFDQVEsRUFBQVAsWUFBQXJCLEtBQUFxQixZQUVBTyxFQUFBRSxZQUNBRixFQUFBb0QsUUFBQWhGLEtBQUFNLEVBQUFOLEtBQUFzRCxPQUFBLEdBQUFoRCxHQUFBRSxHQUFBUixLQUFBTyxFQUFBUCxLQUFBc0QsT0FBQSxHQUFBL0MsR0FBQUMsR0FDQSxRQUFBL0QsRUFBQSxFQUFtQkEsRUFBQXVELEtBQUFzRCxPQUFBRyxPQUF3QmhILElBQzNDbUYsRUFBQXFELFFBQUFqRixLQUFBc0QsT0FBQTdHLEdBQUE2RCxFQUFBTixLQUFBTSxHQUFBRSxHQUFBUixLQUFBc0QsT0FBQTdHLEdBQUE4RCxFQUFBUCxLQUFBTyxHQUFBQyxHQUVBb0IsRUFBQXFELFFBQUFqRixLQUFBTSxFQUFBTixLQUFBc0QsT0FBQSxHQUFBaEQsR0FBQUUsR0FBQVIsS0FBQU8sRUFBQVAsS0FBQXNELE9BQUEsR0FBQS9DLEdBQUFDLEdBQ0FvQixFQUFBSyxZQUNBTCxFQUFBTSxPQUNBTixFQUFBZ0QsU0FFQWhELEVBQUFzRCxVQUNBdEQsRUFBQU4sVUFBQU8sRUFDQTZDLE1BQUFTLEtBQUF2RCxFQUFBcEIsR0FTQVYsV0FBQVUsR0FDQVIsS0FBQXNELE9BQUFRLEVBQUE5RCxLQUFBc0QsT0FBQTlDLEdBQ0FrRSxNQUFBVSxXQUFBNUUsR0FVQVYsYUFBQXFELEdBQ0EsT0FBQXM0QixFQUFBdDRCLEVBQUFlLEVBQUFsRSxLQUFBc0QsT0FBQXRELDBCQ3hFQSxNQUFBd0UsRUFBZW5JLEVBQVEsR0FrRnZCRyxFQUFBRCxRQWhGQSxjQUFBaUksRUFDQTFFLFlBQUFDLEVBQUEsSUFDQTJFLE1BQUEzRSxHQVFBQyxLQUFBdUYsVUFBQSxFQU9BdkYsS0FBQXdGLFdBQUEsRUFFQXJJLE9BQUF1RSxPQUFBMUIsS0FBQUQsR0FVQUQsS0FBQThCLEVBQUFwQixHQUNBQSxLQUFBUixLQUFBUSxPQUFBLEVBQ0EsSUFBQXFCLEVBQUFELEVBQUFOLFVBQ0FNLEVBQUFOLFVBQUF0QixLQUFBc0IsVUFDQU0sRUFBQWlELE9BQ0FqRCxFQUFBa0QsVUFBQTlFLEtBQUFNLEVBQUFFLEVBQUFSLEtBQUFPLEVBQUFDLEdBQ0FvQixFQUFBbUQsT0FBQS9FLEtBQUFTLE9BQ0FtQixFQUFBa0QsV0FBQTlFLEtBQUEsRUFBQVEsR0FBQVIsS0FBQSxFQUFBUSxHQUNBb0IsRUFBQVIsVUFBQXBCLEtBQUFvQixVQUNBUSxFQUFBUCxZQUFBckIsS0FBQXFCLFlBQ0FPLEVBQUE4RyxVQUNBMUksS0FBQU0sRUFBQU4sS0FBQXVGLFdBQUEvRSxHQUNBUixLQUFBTyxFQUFBUCxLQUFBd0YsWUFBQWhGLEVBQ0EsRUFBQVIsS0FBQXVGLFVBQUEvRSxFQUNBLEVBQUFSLEtBQUF3RixXQUFBaEYsR0FFQW9CLEVBQUFrSCxZQUNBOUksS0FBQU0sRUFBQU4sS0FBQXVGLFdBQUEvRSxHQUNBUixLQUFBTyxFQUFBUCxLQUFBd0YsWUFBQWhGLEVBQ0EsRUFBQVIsS0FBQXVGLFVBQUEvRSxFQUNBLEVBQUFSLEtBQUF3RixXQUFBaEYsR0FFQW9CLEVBQUFzRCxVQUNBdEQsRUFBQU4sVUFBQU8sRUFDQTZDLE1BQUFTLEtBQUF2RCxFQUFBcEIsR0FTQVYsV0FBQVUsR0FDQVIsS0FBQXdGLFdBQUF4RixLQUFBd0YsV0FBQWhGLEVBQ0FSLEtBQUF1RixVQUFBdkYsS0FBQXVGLFVBQUEvRSxFQUNBa0UsTUFBQVUsV0FBQTVFLEdBVUFWLGFBQUFxRCxHQUNBLE9BQUFBLEVBQUE3QyxHQUFBTixLQUFBTSxFQUFBTixLQUFBdUYsV0FBQXBDLEVBQUE3QyxHQUFBTixLQUFBTSxFQUFBTixLQUFBdUYsV0FBQXBDLEVBQUE1QyxHQUFBUCxLQUFBTyxFQUFBUCxLQUFBd0YsWUFBQXJDLEVBQUE1QyxHQUFBUCxLQUFBTyxFQUFBUCxLQUFBd0YsMkNDL0VBLElBQUE3RixFQUFBLENBQ0F1OUIsU0FMaUI3Z0MsRUFBUSxJQU16QjhnQyxVQUxrQjlnQyxFQUFRLElBTTFCK2dDLFNBTGlCL2dDLEVBQVEsS0FRekJHLEVBQUFELFFBQUFvRCxtQkNKQSxNQUFBMDlCLEVBQWNoaEMsRUFBUSxHQUl0QjJpQixFQUFBRCxNQUFBRSxPQUFBL2UsS0FBQWdmLE9BQ0FvZSxFQUFBdmUsTUFBQUssU0FBQW1lLE9BQUFDLG1CQWlFQWhoQyxFQUFBRCxRQS9EQSxjQUFBOGdDLEVBQ0F2OUIsWUFBQUMsRUFBQSxJQUNBMkUsTUFBQTNFLEdBUUFDLEtBQUF5OUIsV0FBQSxLQUVBdGdDLE9BQUF1RSxPQUFBMUIsS0FBQUQsR0FTQUQsbUJBQUFVLEdBQ0FBLEdBQUFSLEtBQUF5OUIsYUFDQXo5QixLQUFBeTlCLFdBQUFuOUIsRUFBQU4sS0FBQXk5QixXQUFBbjlCLEVBQUFFLEVBQ0FSLEtBQUF5OUIsV0FBQWw5QixFQUFBUCxLQUFBeTlCLFdBQUFsOUIsRUFBQUMsRUFDQVIsS0FBQW9DLGVBQUEsR0FFQXNDLE1BQUE2Z0IsbUJBQUEva0IsR0FVQVYsY0FBQTQ5QixHQUNBLEdBQUFBLEtBQUFyZCxXQUFBcWQsRUFBQTlkLFNBQUE4ZCxFQUFBbmQsWUFBQW1kLEVBQUFuZCxVQUFBdmdCLEtBQUFDLElBQUEsQ0FDQSxNQUFBMDlCLEVBQUFELEVBQUFyZCxVQUFBcmdCLEtBQUFvRSxTQUNBdzVCLEVBQUFGLEVBQUFyZCxVQUFBcmdCLEtBQUFxRSxTQUNBLEdBQUFzNUIsR0FBQUMsRUFBQSxDQUNBLElBQUFDLEVBQUFDLEVBQ0E5OUIsS0FBQXNFLGFBQ0F1NUIsRUFBQSxJQUFBN2UsRUFBQWhmLEtBQUFzRSxXQUFBaEUsRUFBQU4sS0FBQXNFLFdBQUEvRCxJQUVBUCxLQUFBeTlCLGFBQ0FLLEVBQUEsSUFBQTllLEVBQUFoZixLQUFBeTlCLFdBQUFuOUIsRUFBQU4sS0FBQXk5QixXQUFBbDlCLElBRUFzOUIsS0FBQUYsRUFBQWhjLGlCQUNBbWMsS0FBQUYsRUFBQWpjLGlCQUNBLE1BQUEyRCxFQUFBLElBQUFnWSxFQU1BLE9BTEFoWSxFQUFBeVksV0FBQUosRUFBQUMsRUFBQUMsRUFBQUMsR0FFQTk5QixLQUFBdUUsaUJBQ0FwSCxPQUFBdUUsT0FBQTRqQixFQUFBdGxCLEtBQUF1RSxpQkFFQW01QixFQUFBOWQsUUFBQW9lLFlBQUExWSx3QkNoRUEsTUFBQStYLEVBQWNoaEMsRUFBUSxHQUd0QjJpQixFQUFBRCxNQUFBRSxPQUFBL2UsS0FBQWdmLE9BQ0ErZSxFQUFBbGYsTUFBQUssU0FBQW1lLE9BQUFXLG9CQW9EQTFoQyxFQUFBRCxRQWxEQSxjQUFBOGdDLEVBQ0F2OUIsWUFBQUMsRUFBQSxJQUNBMkUsTUFBQTNFLEdBUUFDLEtBQUFtK0IsVUFBQSxLQUVBaGhDLE9BQUF1RSxPQUFBMUIsS0FBQUQsR0FVQUQsY0FBQTQ5QixHQUNBLEdBQUFBLEtBQUFyZCxXQUFBcWQsRUFBQTlkLFNBQUE4ZCxFQUFBbmQsWUFBQW1kLEVBQUFuZCxVQUFBdmdCLEtBQUFDLElBQUEsQ0FDQSxNQUFBMDlCLEVBQUFELEVBQUFyZCxVQUFBcmdCLEtBQUFvRSxTQUNBdzVCLEVBQUFGLEVBQUFyZCxVQUFBcmdCLEtBQUFxRSxTQUNBLEdBQUFzNUIsR0FBQUMsRUFBQSxDQUNBLElBQUFDLEVBQ0E3OUIsS0FBQXNFLGFBQ0F1NUIsRUFBQSxJQUFBN2UsRUFBQWhmLEtBQUFzRSxXQUFBaEUsRUFBQU4sS0FBQXNFLFdBQUEvRCxJQUVBczlCLEtBQUFGLEVBQUFoYyxpQkFDQSxJQUNBeWMsRUFEQTlZLEVBQUEsSUFBQTJZLEVBWUEsT0FUQUcsRUFEQXArQixLQUFBbStCLFVBQ0EsSUFBQW5mLEVBQUFoZixLQUFBbStCLFVBQUE3OUIsRUFBQU4sS0FBQW0rQixVQUFBNTlCLEdBRUEsSUFBQXllLEVBQUEsS0FFQXNHLEVBQUF5WSxXQUFBSixFQUFBQyxFQUFBQyxFQUFBTyxHQUVBcCtCLEtBQUF1RSxpQkFDQXBILE9BQUF1RSxPQUFBNGpCLEVBQUF0bEIsS0FBQXVFLGlCQUVBbTVCLEVBQUE5ZCxRQUFBb2UsWUFBQTFZLHdCQ2xEQSxNQUFBK1gsRUFBY2hoQyxFQUFRLEdBR3RCMmlCLEVBQUFELE1BQUFFLE9BQUEvZSxLQUFBZ2YsT0FDQW1mLEVBQUF0ZixNQUFBSyxTQUFBbWUsT0FBQWUsbUJBd0NBOWhDLEVBQUFELFFBckNBLGNBQUE4Z0MsRUFDQXY5QixZQUFBQyxFQUFBLElBQ0EyRSxNQUFBM0UsR0FFQTVDLE9BQUF1RSxPQUFBMUIsS0FBQUQsR0FVQUQsY0FBQTQ5QixHQUNBLEdBQUFBLEtBQUFyZCxXQUFBcWQsRUFBQTlkLFNBQUE4ZCxFQUFBbmQsWUFBQW1kLEVBQUFuZCxVQUFBdmdCLEtBQUFDLElBQUEsQ0FDQSxJQUFBMDlCLEVBQUFELEVBQUFyZCxVQUFBcmdCLEtBQUFvRSxTQUNBdzVCLEVBQUFGLEVBQUFyZCxVQUFBcmdCLEtBQUFxRSxTQUNBLEdBQUFzNUIsR0FBQUMsRUFBQSxDQUNBLElBQUFDLEVBQ0E3OUIsS0FBQXNFLGFBQ0F1NUIsRUFBQSxJQUFBN2UsRUFBQWhmLEtBQUFzRSxXQUFBaEUsRUFBQU4sS0FBQXNFLFdBQUEvRCxJQUVBczlCLEtBQUFGLEVBQUFoYyxpQkFDQSxJQUFBMkQsRUFBQSxJQUFBK1ksRUFPQSxPQUxBL1ksRUFBQXlZLFdBQUFKLEVBQUFDLEVBQUFDLE9BREFPLEdBR0FwK0IsS0FBQXVFLGlCQUNBcEgsT0FBQXVFLE9BQUE0akIsRUFBQXRsQixLQUFBdUUsaUJBRUFtNUIsRUFBQTlkLFFBQUFvZSxZQUFBMVksc0JDc0JBOW9CLEVBQUFELFFBOURBLE1BQ0F1RCxZQUFBQyxFQUFBLElBRUE1QyxPQUFBdUUsT0FBQTFCLEtBQUFELEdBRUFDLEtBQUE2Z0IsV0FBQTdnQixLQUFBNmdCLFlBQUEsR0FRQS9nQixRQUNBRSxLQUFBNmdCLFdBQUEsR0F3Q0EvZ0IsVUFBQXkrQixFQUFBQyxFQUFBdFosRUFBQVosR0FDQXRrQixLQUFBNmdCLFdBQUEwZCxHQUFBditCLEtBQUE2Z0IsV0FBQTBkLElBQUEsR0FDQXYrQixLQUFBNmdCLFdBQUEwZCxHQUFBcnhCLEtBQUEsQ0FBK0JqTixHQUFBdStCLEVBQUF0WixVQUFBdVosZUFBQSxLQUMvQnorQixLQUFBNmdCLFdBQUEyZCxHQUFBeCtCLEtBQUE2Z0IsV0FBQTJkLElBQUEsR0FDQXgrQixLQUFBNmdCLFdBQUEyZCxHQUFBdHhCLEtBQUEsQ0FBK0JqTixHQUFBcytCLEVBQUFyWixVQUFBdVosZUFBQSx3QkN6RC9CLE1BQUE5L0IsRUFBaUJ0QyxFQUFRLEdBQ3pCdUQsRUFBWXZELEVBQVEsSUE4S3BCRyxFQUFBRCxRQTVLQSxjQUFBb0MsRUFDQW1CLFlBQUFDLEVBQUEsSUFDQTJFLE1BQUEzRSxHQUNBK00sUUFBQUMsSUFBQSxrQkFBQWhOLEdBT0FDLEtBQUEwOUIsSUFBQSxLQVFBMTlCLEtBQUEwK0IsYUFBQSxFQVFBMStCLEtBQUFOLFNBQUEsS0FRQU0sS0FBQUwsT0FBQSxLQUVBeEMsT0FBQXVFLE9BQUExQixLQUFBRCxHQUVBQyxLQUFBMDlCLE1BQ0ExOUIsS0FBQTA5QixJQUFBLElBQUE5OUIsRUFBQUcsRUFBQTQrQixhQUdBMytCLEtBQUFOLFdBQ0FNLEtBQUFOLFNBQUEsSUFHQU0sS0FBQUwsU0FDQUssS0FBQUwsT0FBQSxJQVdBRyxVQUFBa2hCLEdBQ0FoaEIsS0FBQTArQixjQUNBMStCLEtBQUEwOUIsSUFBQXYxQixPQUFBNlksR0FDQWhoQixLQUFBMDlCLElBQUFrQixvQkFBQTUrQixLQUFBTixXQVdBSSxRQUFBa2lCLEdBQ0FoaUIsS0FBQU4sU0FBQXNpQixFQUFBL2hCLElBQUEraEIsRUFDQWhpQixLQUFBMDlCLElBQUF4YixRQUFBRixHQVNBbGlCLFVBQUFKLEdBQ0FxRSxNQUFBQyxRQUFBdEUsS0FDQUEsRUFBQSxDQUFBQSxJQUdBQSxFQUFBK21CLFFBQUF6RSxJQUNBaGlCLEtBQUFraUIsUUFBQUYsS0FVQWxpQixXQUFBa2lCLEdBQ0FoaUIsS0FBQTA5QixJQUFBbUIsV0FBQTdjLEVBQUEvaEIsV0FDQUQsS0FBQU4sU0FBQXNpQixFQUFBL2hCLElBU0FILGFBQUFKLEdBQ0FxRSxNQUFBQyxRQUFBdEUsS0FDQUEsRUFBQSxDQUFBQSxJQUVBQSxFQUFBK21CLFFBQUF6RSxJQUNBaGlCLEtBQUE2K0IsV0FBQTdjLEtBVUFsaUIsU0FBQXdsQixHQUNBdGxCLEtBQUFMLE9BQUEybEIsRUFBQXJsQixJQUFBcWxCLEVBQ0F0bEIsS0FBQTA5QixJQUFBb0IsU0FBQXhaLEdBU0F4bEIsVUFBQUgsR0FDQW9FLE1BQUFDLFFBQUFyRSxLQUNBQSxFQUFBLENBQUFBLElBRUFBLEVBQUE4bUIsUUFBQXpFLElBQ0FoaUIsS0FBQTgrQixTQUFBOWMsS0FVQWxpQixZQUFBd2xCLEdBQ0F0bEIsS0FBQTA5QixJQUFBcUIsWUFBQXpaLEVBQUFybEIsV0FDQUQsS0FBQUwsT0FBQTJsQixFQUFBcmxCLElBU0FILGFBQUFILEdBQ0FvRSxNQUFBQyxRQUFBckUsS0FDQUEsRUFBQSxDQUFBQSxJQUVBQSxFQUFBOG1CLFFBQUF6RSxJQUNBaGlCLEtBQUErK0IsWUFBQS9jLHVFQ3hLZSxJQUFBZ2QsRUFSZixTQUFBcDlCLEdBQ0FBLEVBQUFSLFVBQUEsT0FDQVEsRUFBQThHLFNBQUEsSUFBQTFJLEtBQUE4RixNQUFBOUYsS0FBQTZGLFFBQ0ExSSxPQUFBNkIsS0FBQWdCLEtBQUFOLFVBQUErbUIsUUFBQXdZLElBQ0FqL0IsS0FBQU4sU0FBQXUvQixHQUFBOTVCLEtBQUF2RCxzQkNIZSxNQUFNczlCLFVBQWFDLEVBQUFud0IsRUFDbENsUCxLQUFBOEIsRUFBQXBCLEdBQ0FBLEtBQUFSLEtBQUFRLE9BQUEsRUFDQW9CLEVBQUFpRCxPQUNBakQsRUFBQWtELFVBQUE5RSxLQUFBTSxFQUFBRSxFQUFBUixLQUFBTyxFQUFBQyxHQUNBb0IsRUFBQW1ELE9BQUEvRSxLQUFBUyxPQUNBbUIsRUFBQWtELFdBQUE5RSxLQUFBLEVBQUFRLEdBQUFSLEtBQUEsRUFBQVEsR0FDQW9CLEVBQUEwVixVQUFBdFgsS0FBQTZYLElBQUE3WCxLQUFBTSxFQUFBRSxFQUFBUixLQUFBNlgsSUFBQS9SLE1BQUEsRUFBQTlGLEtBQUFPLEVBQUFDLEVBQUFSLEtBQUE2WCxJQUFBaFMsT0FBQSxHQUNBakUsRUFBQXNELFdDVEE0SCxRQUFBQyxJQUFBLHdCQUVBLElBQUFxeUIsRUFBQSxDQUNBLHlDQUNBLHlDQUNBLHlDQUNBLHlDQUNBLDBDQUNBLHdEQUNBLGdEQUNBLHdEQUNBLGdDQUNBLFNBV2UsSUFBQUMsRUFQZkQsSUFBQW43QixJQUFBZ0wsS0FDQUEsRUFBQSxNQUFBQSxFQUFBLFFBQUFBLEVBQUEsS0FDQSxHQUFBQSxFQUFBLE9BQ0FBLHFCQ1pBLE1BQUFwUCxRQUFPQSxFQUFBSCxZQUF1QmhCLEVBQUEsT0FDOUIwK0IsU0FBT0EsR0FBYzErQixFQUFBLE1BQUtpQixRQUMxQmc4QixrQkFBT0EsRUFBQTczQixjQUFBKzNCLDZCQUErRG45QixFQUFBLE1BU3RFNGdDLEVBQUEsSUFBQXovQixFQUFBLENBQ0FvRyxTQUFBLFNBQ0FPLFdBQUEsV0FDQUMsaUJBQUEsSUFDQWs0QixXQUFBLENBQWVoZSxtQkFBQSxHQUNmeGIsS0FBUTY1QixFQUNSbDRCLFVBQUEsU0FBQXk0QixHQUNBQSxFQUFBQyxxQkFFQUQsRUFBQWp6QixhQUFBLEtBQ0FpekIsRUFBQWp6QixhQUFBLE1BRUFyRSxZQUFBLFNBQUFzM0IsR0FDQUEsRUFBQWwxQixXQUFxQjNMLEVBQUEsS0FBSStOLE1BQUFrQixhQUN6QjNOLEtBQUEwOUIsSUFBQStCLG9CQUFBLFdBckJBLElBd0JBRixFQUFBbDFCLFdBQXFCM0wsRUFBQSxLQUFJZ08sT0FBQWlCLGFBQ3pCM04sS0FBQTA5QixJQUFBK0Isb0JBQUEsVUF6QkEsSUE0QkFGLEVBQUFsMUIsV0FBcUIzTCxFQUFBLEtBQUk2TixJQUFBb0IsYUFDekIzTixLQUFBMDlCLElBQUErQixvQkFBQSxTQTdCQSxJQWdDQUYsRUFBQWwxQixXQUFxQjNMLEVBQUEsS0FBSThOLE1BQUFtQixhQUN6QjNOLEtBQUEwOUIsSUFBQStCLG9CQUFBLFdBakNBLElBb0NBRixFQUFBbDFCLFdBQUFrSCxFQUFBNUQsYUFDQTNOLEtBQUEwOUIsSUFBQWdDLFlBQUEsYUFHQUgsRUFBQWwxQixXQUFBcUgsRUFBQS9ELGFBQ0EzTixLQUFBMDlCLElBQUFnQyxZQUFBLE9BQUFDLEtBR0FKLEVBQUFqMUIsWUFBQXFELGFBQ0EzTixLQUFBMDlCLElBQUFrQyxhQUFBLE9BQUFqRSxFQUFBMzdCLEtBQUFOLFNBQUFtZ0MsTUFBQS83QixFQUFBeTdCLEVBQUFqMUIsWUFBQXVDLFNBQUEsRUFBQTdNLEtBQUEwOUIsSUFBQWw5QixRQTdDQSxLQWdEQTJILE9BQUEsU0FBQTZZLEdBQ0FoaEIsS0FBQTgvQixVQUFBOWUsR0FDQWhoQixLQUFBKy9CLE1BQUEvL0IsS0FBQSsvQixLQUFBbGYsWUFFQTdnQixLQUFBKy9CLEtBQUFsZixXQUFBNEYsUUFBQXVaLElBQ0EsTUFBQUMsRUFBQWpnQyxLQUFBTixTQUFBc2dDLEVBQUEvL0IsSUFDQWdnQyxLQUFBQyxNQUNBbGdDLEtBQUE2K0IsV0FBQW1CLEdBRUFDLEtBQUFFLE9BQ0FGLEVBQUE3K0IsVUFBQSxXQUlBcEIsS0FBQU4sU0FBQTBnQyxNQUFBcGdDLEtBQUFOLFNBQUEwZ0MsS0FBQXZmLFlBRUE3Z0IsS0FBQU4sU0FBQTBnQyxLQUFBdmYsV0FBQTRGLFFBQUF1WixJQUNBLE1BQUFDLEVBQUFqZ0MsS0FBQU4sU0FBQXNnQyxFQUFBLy9CLElBQ0FnZ0MsS0FBQUMsTUFDQWxnQyxLQUFBNitCLFdBQUFtQixHQUVBQyxLQUFBRSxPQUNBRixFQUFBNytCLFVBQUEsY0FVQWkvQixFQUFBcnhCLEVBQU90UCxTQUFBK21CLFFBQUEsU0FBQXFJLEdBQ1AsWUFBQUEsRUFBQTd1QixHQUNBNnVCLEVBQUFqWCxJQUFBeW5CLEVBQUFsNUIsZ0JBQUFrNkIsVUFBQSxtQkFDQWhCLEVBQUFTLEtBQUEsSUFBb0JiLEVBQUlwUSxHQUN4QndRLEVBQUFwZCxRQUFBb2QsRUFBQVMsVUFDRyxDQUNILE1BQUF2N0IsRUFBQTlFLEVBQUFvdkIsRUFBQXhwQixNQUNBZCxJQUNBc3FCLEVBQUFudUIsWUFBQSxFQUNBMitCLEVBQUFwZCxRQUFBLElBQUExZCxFQUFBc3FCLFFBTUEsTUFDQXlSLEVBQUEsZ0JBSUFDLEVBQUF0Z0MsS0FBQXVnQyxLQURBLG1CQUdBQyxFQUFBeGdDLEtBQUF1Z0MsS0FEQUYsbUJBRUF6ekIsUUFBQUMsSUFBQSxtQkFBQXl6QixFQUFBRSxHQUVBLE1BQUFDLEVBQUEsa0JBRUFDLEVBQUEsQ0FDQSxFQUNBSixFQUNBRSxFQUFBeGdDLEtBQUE4QixHQUFBLEVBQ0E5QixLQUFBOEIsR0FDQTlCLEtBQUE4QixHQUFBdytCLEVBQ0EsSUFBQXRnQyxLQUFBOEIsR0FBQTArQixHQUdBLElBQUE1akMsRUFBQSxDQUNBLENBQUErakMsSUFBQSxHQUNBLENBbkhBLEtBbUhBTixFQUFBSSxFQUFBLE9BQUFBLElBQ0EsQ0FwSEEsS0FvSEFKLEVBQUFJLEVBQUEsUUFBQUEsR0FDQSxDQUFBRSxJQXBIQSxNQXFIQSxDQUFBTixFQUFBSSxFQUFBLFFBQUFBLEdBQ0EsQ0FBQUosRUFBQUksRUFBQSxPQUFBQSxLQUdBLE1BQUFHLEVBQUFoa0MsRUFBQW1ILElBQUEsQ0FBQTg4QixFQUFBQyxLQUNBLENBQ0EzeEIsR0FBQTB4QixFQUNBRSxNQUFXQyxFQUFBbHlCLEVBQU1neUIsR0FDakJ2Z0MsTUFBQW1nQyxFQUFBSSxNQUlBbDBCLFFBQUFDLElBQUEsVUFBQSt6QixHQUVBLE1BQUFLLEVBQUFqaEMsS0FBQThkLEtBQ0E5ZCxLQUFBa2hDLElBQUF0a0MsRUFBQSxNQUFBQSxFQUFBLFNBQ0FvRCxLQUFBa2hDLElBQUF0a0MsRUFBQSxNQUFBQSxFQUFBLFVBR0F1a0MsRUFBQW5oQyxLQUFBOGQsS0FDQTlkLEtBQUFraEMsSUFBQXRrQyxFQUFBLE1BQUFBLEVBQUEsU0FDQW9ELEtBQUFraEMsSUFBQXRrQyxFQUFBLE1BQUFBLEVBQUEsVUFHQWdRLFFBQUFDLElBQUEsSUFBQW8wQixFQUFBRSxFQUFBRixFQUFBRSxFQUFBdmtDLEdBRUEsTUFBQXdrQyxFQUFBLENBQWdCaGhDLEVBQUF3Z0MsRUFBQSxHQUFBenhCLEdBQUEsR0FBQTlPLEVBQUF1Z0MsRUFBQSxHQUFBenhCLEdBQUEsSUFFaEJ5eEIsRUFBQXJhLFFBQUEsQ0FBQWxvQixFQUFBeWlDLEtBQ0FsMEIsUUFBQUMsSUFBQSxrQkFBQXhPLEdBQ0EsTUFBQWdqQyxFQUFBLENBQWVqaEMsRUFBQS9CLEVBQUE4USxHQUFBLEdBQUE5TyxFQUFBaEMsRUFBQThRLEdBQUEsSUFDZm15QixFQUFBM0YsRUFBQTBGLEVBQUEsQ0FBb0RqaEMsRUFBQWloQyxFQUFBamhDLEVBQUFDLEVBQUFnaEMsRUFBQWhoQyxFQUFBLElBQXdCaEMsRUFBQWtDLE9BQzVFZ2hDLEVBQUEsSUFBQS9oQyxFQUFBbTlCLE9BQUEsQ0FDQXY4QixFQUFBa2hDLEVBQUFsaEMsRUFDQUMsRUFBQWloQyxFQUFBamhDLEVBQ0FvRSxPQUFBLEdBQ0F4RCxZQUFBLEVBQ0FQLFlBQUEsRUFDQVEsVUFBQTdDLEVBQUEwaUMsTUFDQWQsTUFBQSxJQUVBYixFQUFBcGQsUUFBQXVmLEdBRUVwQyxFQUFTNVksUUFBQSxDQUFBaWIsRUFBQUMsS0FDWCxNQUFBQyxFQUFBLENBQ0F0aEMsRUFBQW9oQyxFQUFBLE9BQ0FuaEMsRUFBQW1oQyxFQUFBLEdBQ0FuOEIsVUFBQSxHQUNBQyxXQUFBLEtBQ0FyRSxZQUFBLEVBQ0FQLFlBQUEsSUFDQWloQyxTQUFBYixFQUNBNS9CLFVBQUE3QyxFQUFBMGlDLE1BQ0FmLE9BQUEsR0FHQTd3QixFQUFBd3NCLEVBQUF5RixFQUFBTSxFQUFBcmpDLEVBQUFrQyxPQUNBcU0sUUFBQUMsSUFBQSxhQUFBc0MsR0FFQXV5QixFQUFBdGhDLEVBQUErTyxFQUFBL08sRUFDQXNoQyxFQUFBcmhDLEVBQUE4TyxFQUFBOU8sRUFHQXFoQyxFQUFBdGhDLEdBQUFpaEMsRUFBQWpoQyxFQUFBd2dDLEVBQUEsR0FBQXp4QixHQUFBLEdBQ0F1eUIsRUFBQXJoQyxHQUFBZ2hDLEVBQUFoaEMsRUFBQXVnQyxFQUFBLEdBQUF6eEIsR0FBQSxHQUVBdXlCLEVBQUF0K0IsT0FBQSxDQUNBLENBQU9oRCxFQUFBc2hDLEVBQUFyOEIsVUFBQWhGLEdBQUFxaEMsRUFBQXA4QixZQUNQLENBQU9sRixFQUFBc2hDLEVBQUFyOEIsVUFBQWhGLEVBQUFxaEMsRUFBQXA4QixZQUNQLENBQU9sRixHQUFBc2hDLEVBQUFyOEIsVUFBQWhGLEVBQUFxaEMsRUFBQXA4QixZQUNQLENBQU9sRixHQUFBc2hDLEVBQUFyOEIsVUFBQWhGLEdBQUFxaEMsRUFBQXA4QixhQUdQbzhCLEVBQUF0K0IsT0FBQXMrQixFQUFBdCtCLE9BQUFXLElBQUE2OUIsR0FDQWpHLEVBQUEsQ0FBd0N2N0IsRUFBQSxFQUFBQyxFQUFBLEdBQVd1aEMsRUFBQXZqQyxFQUFBa0MsUUFHbkQsTUFBQXdPLEVBQUEsSUFBQXZQLEVBQUFxOUIsUUFBQTZFLEdBR0F0QyxFQUFBcGQsUUFBQWpULE9BVUFveEIsRUFBQXJ4QixFQUFPclAsT0FBQThtQixRQUFBLFNBQUFxSSxHQUNQLElBQUF4SixFQUNBLGFBQUF3SixFQUFBeHBCLE9BQ0FnZ0IsRUFBQSxJQUFBOFgsRUFBQXRPLElBR0F4SixHQUNBZ2EsRUFBQTVCLElBQUFvQixTQUFBeFosS0FLQXhZLFFBQUFDLElBQUF1eUIsR0FDQTdnQyxPQUFBNmdDLE9BSUFBLEVBQUF5QyxNQUNBekMsRUFBQTVCLElBQUErQixvQkFBQSxXQUFBdi9CLEtBQUFDLFNBQUEiLCJmaWxlIjoiaGV4b3V0LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSA0OCk7XG4iLCJcbndpbmRvdy5mcm96ZW5qcyA9IHtcbiAgR2FtZUNvcmUgOiByZXF1aXJlKCcuL0dhbWVDb3JlJyksXG4gIElucHV0TWFuYWdlciA6IHJlcXVpcmUoJy4vSW5wdXRNYW5hZ2VyJyksXG4gIFJlc291cmNlTWFuYWdlciA6IHJlcXVpcmUoJy4vUmVzb3VyY2VNYW5hZ2VyJyksXG4gIE1vdXNlQWN0aW9uIDogcmVxdWlyZSgnLi9Nb3VzZUFjdGlvbicpLFxuICBUb3VjaEFjdGlvbiA6IHJlcXVpcmUoJy4vVG91Y2hBY3Rpb24nKSxcbiAga2V5cyA6IHJlcXVpcmUoJy4va2V5cycpLFxuICBBbmltYXRpb246IHJlcXVpcmUoJy4vQW5pbWF0aW9uJyksXG4gIEFuaW1GcmFtZTogcmVxdWlyZSgnLi9BbmltRnJhbWUnKSxcbiAgdXRpbHMgOiByZXF1aXJlKCcuL3V0aWxzJyksXG4gIFNwcml0ZSA6IHJlcXVpcmUoJy4vU3ByaXRlJyksXG4gIHJlaW5lciA6IHtcbiAgICBDcmVhdHVyZSA6IHJlcXVpcmUoJy4vcmVpbmVyL0NyZWF0dXJlJylcbiAgfSxcbiAgc291bmRzIDoge1xuICAgIFdlYkF1ZGlvIDogcmVxdWlyZSgnLi9zb3VuZHMvV2ViQXVkaW8nKVxuICB9LFxuICBib3gyZCA6IHtcbiAgICBlbnRpdGllcyA6IHJlcXVpcmUoJy4vYm94MmQvZW50aXRpZXMnKSxcbiAgICBqb2ludHM6IHJlcXVpcmUoJy4vYm94MmQvam9pbnRzJyksXG4gICAgQm94IDogcmVxdWlyZSgnLi9ib3gyZC9Cb3gnKSxcbiAgICBCb3hHYW1lIDogcmVxdWlyZSgnLi9ib3gyZC9Cb3hHYW1lJylcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSB3aW5kb3cuZnJvemVuanM7XG4iLCJmdW5jdGlvbiBnZW5JZCgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkgKyAnXycgKyBEYXRlLm5vdygpO1xufVxuXG4vKipcbiAqIFRoaXMgcmVwcmVzZW50cyBhIGJvZHkgYW5kIHNoYXBlIGluIGEgQm94MmQgd29ybGQgdXNpbmcgcG9zaXRpb25zIGFuZCBzaXplcyByZWxhdGl2ZSB0byB0aGUgQm94MmQgd29ybGQgaW5zdGFuY2UuXG4gKiBAbmFtZSBFbnRpdHlcbiAqIEBjb25zdHJ1Y3RvciBFbnRpdHlcbiAqL1xuXG5jbGFzcyBFbnRpdHkge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogVGhlIGlkIGluIHdoaWNoIHRvIHJlZmVyZW5jZSB0aGlzIG9iamVjdC4gQWxzbyB0aGUgdXNlckRhdGEgcHJvcGVydHkgZm9yIGJveDJkIGJvZGllcy5cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5pZCA9IG9wdGlvbnMuaWQgfHwgZ2VuSWQoKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgZW50aXR5J3MgbG9jYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy54ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB5IGNvbXBvbmVudCBvZiB0aGUgZW50aXR5J3MgbG9jYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy55ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY2FsZSBpbiBwaXhlbHMgcGVyIG1ldGVyIGluIHdoaWNoIHRvIHJlcHJlc2VudCB0aGlzIEVudGl0eSBpbiB0aGUgYm94MmQgd29ybGRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5zY2FsZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgY3VycmVudCBhbmdsZSB0aGF0IHRoaXMgZW50aXR5IGlzIHJvdGF0ZWQgYXRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5hbmdsZSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgeCBhbmQgeSBsb2NhdGlvbnMgb2Ygd2hhdCBib3gyZCBjb25zaWRlcnMgdGhlIGVuaXR5J3MgY2VudGVyIG9mIG1hc3NcbiAgICAgKiBAdHlwZSB7UG9pbnR9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmNlbnRlciA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHRvIGRyYXcgdGhlIGNlbnRlciBwb2ludCBvZiBhbiBlbnRpdHlcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICAgdGhpcy5kcmF3Q2VudGVyID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwZXJjZW50YWdlIG9mIGZvcmNlIGluIHdoaWNoIHRoZSBlbnRpdHkgd2lsbCBib3VuY2UgYmFjayBmcm9tIGFub3RoZXIgYmFzZWQgb24gaXRzIGZvcmNlIHByZS1jb2xsaXNpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5yZXN0aXR1dGlvbiA9IDAuMztcblxuICAgIC8qKlxuICAgICAqIFRoZSB0d28tZGltZW5zaW9uYWwgZGVuc2l0eSBvZiB0aGUgZW50aXR5LiAgTWFzcyAvIGFyZWEuXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgIHRoaXMuZGVuc2l0eSA9IDEuMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbW91bnQgb2YgZnJpY3Rpb24gb24gdGggc3VyZmFjZSBvZiB0aGlzIGVudGl0eVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmZyaWN0aW9uID0gMC45O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGFtb3VudCBvZiBsaW5lYXIgdmVsb2NpdHkgdGhlIGVudGl0eSBzaG91bGQgbG9zZSBvdmVyIHRpbWVcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5saW5lYXJEYW1waW5nID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB2ZWxvY2l0eSBpbiBtZXRlcnMvc2Vjb25kIGdpdmVuIHRvIHRoaXMgZW50aXR5IGJ5IGJveDJkIGNhbGN1bGF0aW9uc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmxpbmVhclZlbG9jaXR5ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBhbmd1bGFyIHZlbG9jaXR5IGluIHJhZGlhbnMvc2Vjb25kIGdpdmVuIHRvIHRoaXMgZW50aXR5IGJ5IGJveDJkIGNhbGN1bGF0aW9uc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmFuZ3VsYXJWZWxvY2l0eSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb2YgYW1vdW50IG9mIGFuZ3VsYXIgdmVsb2NpdHkgYW4gZW50aXR5IHNob3VsZCBsb3NlIG92ZXIgdGltZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmFuZ3VsYXJEYW1waW5nID0gMDtcblxuICAgIC8qKlxuICAgICAqIElmIHRydWUsIHRoZSBlbnRpdHkgZG9lcyBjaGFuZ2UgaXRzIHBvc2l0aW9uIGFuZCBhbmdsZSBhcyB0aGUgcmVzdWx0IG9mIGJveDJkIGNhbGN1bGF0aW9uc1xuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5zdGF0aWNCb2R5ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgZmlsbFN0eWxlIHRvIHVzZSBmb3IgdGhlIGVudGl0eSdzIGRlZmF1bHQgcmVuZGVyZXJcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5maWxsU3R5bGUgPSAncmdiYSgxMjgsMTI4LDEyOCwwLjUpJztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzdHJva2VTdHlsZSB0byB1c2UgZm9yIHRoZSBlbnRpdHkncyBkZWZhdWx0IHJlbmRlcmVyXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgIHRoaXMuc3Ryb2tlU3R5bGUgPSAnIzAwMCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbGluZSB3aWR0aCB0byB1c2UgZm9yIHRoZSBlbnRpdHkncyBkZWZhdWx0IHJlbmRlcmVyXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgIHRoaXMubGluZVdpZHRoID0gMTtcblxuICAgIC8qKlxuICAgICAqIFRoZSAxNiBiaXQgaW50ZWdlciB1c2VkIGluIGRldGVybWluaW5nIHdoaWNoIG90aGVyIHR5cGVzIG9mIGVudGl0aWVzIHRoaXMgYm9keSB3aWxsIGNvbGxpZGUgd2l0aC5cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5tYXNrQml0cyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgMTYgYml0IGludGVnZXIgdXNlZCBpbiBkZXNjcmliaW5nIHRoZSB0eXBlIHRoYXQgdGhpcyBlbml0aXR5IGlzIGZvciBjb2xsaXNpb25zLlxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgICB0aGlzLmNhdGVnb3J5Qml0cyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgMTYgYml0IGludGVnZXIgdXNlZCBpbiBvdmVyaWRpbmcgbWFza0JpdHMgYW5kIGNhdGVnb3J5Qml0cyBmb3IgY29sbGlzaW9uIGRldGVjdGlvbi5cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBFbnRpdHkjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICAgdGhpcy5ncm91cEluZGV4ID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoaXMgZW50aXR5IHdpdGggdGhlIHN0YXRlIHBhc3NlZCBpblxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIFN0YXRlIHRvIG1lcmdlIHdpdGggdGhpcyBvYmplY3RcbiAgICovXG4gIHVwZGF0ZShzdGF0ZSl7XG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBzdGF0ZSk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgdGhlIEVudGl0eSBhdCBhIGdpdmVuIHNjYWxlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgRW50aXR5I1xuICAgKiBAcGFyYW0ge0NvbnRleHR9IGN0eCBUaGUgSFRNTDUgMmQgZHJhd2luZyBjb250ZXh0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSBUaGUgc2NhbGUgdG8gZHJhdyB0aGUgZW50aXR5IGF0XG4gICAqL1xuICBkcmF3KGN0eCwgc2NhbGUpe1xuICAgIHNjYWxlID0gc2NhbGUgfHwgdGhpcy5zY2FsZSB8fCAxO1xuICAgIHZhciBvZ0xpbmVXaWR0aCA9IGN0eC5saW5lV2lkdGg7XG4gICAgY3R4LmxpbmVXaWR0aCA9IHRoaXMubGluZVdpZHRoO1xuICAgIC8vIGJsYWNrIGNpcmNsZSBpbiBlbnRpdHkncyBsb2NhdGlvblxuICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLnN0cm9rZVN0eWxlO1xuICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICBjdHguYXJjKHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSwgNCwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICBjdHguZmlsbCgpO1xuXG4gICAgLy8geWVsbG93IGNpcmNsZSBpbiBlbnRpdHkncyBnZW9tZXRyaWMgY2VudGVyXG4gICAgaWYodGhpcy5jZW50ZXIgJiYgdGhpcy5kcmF3Q2VudGVyKXtcbiAgICAgIGN0eC5maWxsU3R5bGUgPSB0aGlzLmNlbnRlclN0eWxlIHx8ICd5ZWxsb3cnO1xuICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgY3R4LmFyYyh0aGlzLmNlbnRlci54ICogc2NhbGUsIHRoaXMuY2VudGVyLnkgKiBzY2FsZSwgMiwgMCwgTWF0aC5QSSAqIDIsIHRydWUpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LmZpbGwoKTtcbiAgICB9XG5cbiAgICBjdHgubGluZVdpZHRoID0gb2dMaW5lV2lkdGg7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGVzIHRoZSBwb3NpdGlvbiBhbmQgZGltZW5zaW9ucyBvZiB0aGlzIHNoYXBlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEVudGl0eSNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIFRoZSBzY2FsZSB0byBtdWx0aXBseSB0aGUgZGltZW50aW9ucyBieVxuICAgKi9cbiAgc2NhbGVTaGFwZShzY2FsZSl7XG4gICAgdGhpcy54ID0gdGhpcy54ICogc2NhbGU7XG4gICAgdGhpcy55ID0gdGhpcy55ICogc2NhbGU7XG4gICAgdGhpcy5hbHJlYWR5U2NhbGVkID0gdHJ1ZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVudGl0eTtcblxuIiwiLyoqXG4gKiBUaGUgR2FtZUFjdGlvbiBoYW5kbGVzIERPTSBldmVudHMgZm9yIHVzZSBpbiBnYW1lcy5cbiAqIEBuYW1lIEdhbWVBY3Rpb25cbiAqIEBjb25zdHJ1Y3RvciBHYW1lQWN0aW9uXG4gKi9cblxuLyoqXG4gKiBBIG1hcCBvZiBzdGF0aWMgY29uc3RhbnRzIGZvciBpbnRlcm5hbCB1c2VcbiAqIEB0eXBlIHtPYmplY3R9XG4gKiBAbWVtYmVyT2YgR2FtZUFjdGlvbiNcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBOT1JNQUwgTm9ybWFsIGJlaGF2aW9yLiBUaGUgaXNQcmVzc2VkKCkgbWV0aG9kIHJldHVybnMgdHJ1ZSBhcyBsb25nIGFzIHRoZSBrZXkgaXMgaGVsZCBkb3duLlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IERFVEVDVF9JTklUQUxfUFJFU1NfT05MWSBJbml0aWFsIHByZXNzIGJlaGF2aW9yLiBUaGUgaXNQcmVzc2VkKCkgbWV0aG9kIHJldHVybnMgdHJ1ZSBvbmx5IGFmdGVyIHRoZSBrZXkgaXMgZmlyc3QgcHJlc3NlZCwgYW5kIG5vdCBhZ2FpbiB1bnRpbCB0aGUga2V5IGlzIHJlbGVhc2VkIGFuZCBwcmVzc2VkIGFnYWluLlxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFNUQVRFX1JFTEVBU0VEIFZhbHVlIGZvciByZWxlYXNlZCBzdGF0ZVxuICogQHByb3BlcnR5IHtOdW1iZXJ9IFNUQVRFX1BSRVNTRUQgVmFsdWUgZm9yIHByZXNzZWQgc3RhdGVcbiAqIEBwcm9wZXJ0eSB7TnVtYmVyfSBTVEFURV9XQUlUSU5HX0ZPUl9SRUxFQVNFIFZhbHVlIGZvciB3YWl0aW5nIGZvciByZWxlYXNlIHN0YXRlXG4gKiBAcHJvcGVydHkge051bWJlcn0gU1RBVEVfTU9WRUQgVmFsdWUgZm9yIG1vdmVkIHN0YXRlXG4gKi9cbmNvbnN0IHN0YXRpY3MgPSB7XG4gIE5PUk1BTDogMCxcbiAgREVURUNUX0lOSVRBTF9QUkVTU19PTkxZOiAxLFxuICBTVEFURV9SRUxFQVNFRDogMCxcbiAgU1RBVEVfUFJFU1NFRDogMSxcbiAgU1RBVEVfV0FJVElOR19GT1JfUkVMRUFTRTogMixcbiAgU1RBVEVfTU9WRUQ6IDNcbn07XG5cbmNsYXNzIEdhbWVBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgIC8qKlxuICAgICAqIEEgbmFtZSB0byByZWZlcmVuY2UgdGhlIEdhbWVBY3Rpb24gd2l0aFxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEdhbWVBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdG8gZGV0ZWN0IG9ubHkgdGhlIGludGlhbCBwcmVzcyBvZiB0aGUgZ2FtZSBhY3Rpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5iZWhhdmlvciA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBIb3cgbWFueSB0aW1lcyB0aGUgR2FtZUFjdGlvbiBoYXMgYmVlbiBwcmVzc2VkXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUFjdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYW1vdW50ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBHYW1lQWN0aW9uXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUFjdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuc3RhdGUgPSAwO1xuXG4gICAgdGhpcy5zdGF0aWNzID0gc3RhdGljcztcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnJlc2V0KCk7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXRzIHRoaXMgR2FtZUFjdGlvbiBzbyB0aGF0IGl0IGFwcGVhcnMgbGlrZSBpdCBoYXNuJ3QgYmVlbiBwcmVzc2VkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVBY3Rpb24jXG4gICAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLnN0YXRlID0gc3RhdGljcy5TVEFURV9SRUxFQVNFRDtcbiAgICB0aGlzLmFtb3VudCA9IDA7XG4gIH1cblxuICAvKipcbiAgICogVGFwcyB0aGlzIEdhbWVBY3Rpb24uIFNhbWUgYXMgY2FsbGluZyBwcmVzcygpIGZvbGxvd2VkIGJ5IHJlbGVhc2UoKS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgKi9cbiAgdGFwKCkge1xuICAgIHRoaXMucHJlc3MoKTtcbiAgICB0aGlzLnJlbGVhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIHRoYXQgdGhlIGtleSB3YXMgcHJlc3NlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgKi9cbiAgcHJlc3MoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRpY3MuU1RBVEVfUFJFU1NFRDtcbiAgICBpZih0aGlzLmJlaGF2aW9yID09PSBzdGF0aWNzLkRFVEVDVF9JTklUQUxfUFJFU1NfT05MWSl7XG4gICAgICB0aGlzLnByZXNzQW10KDEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIHRoYXQgdGhlIGtleSB3YXMgcHJlc3NlZCBhIHNwZWNpZmllZCBudW1iZXIgb2YgdGltZXMsIG9yIHRoYXQgdGhlIG1vdXNlIG1vdmUgYSBzcGVjaWZpZWQgZGlzdGFuY2UuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUFjdGlvbiNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgaXMgcHJlc3NlZFxuICAgKi9cbiAgcHJlc3NBbXQoYW1vdW50KSB7XG4gICAgaWYgKHRoaXMuc3RhdGUgIT09IHN0YXRpY3MuU1RBVEVfV0FJVElOR19GT1JfUkVMRUFTRSkge1xuICAgICAgdGhpcy5hbW91bnQgKz0gYW1vdW50O1xuICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRpY3MuU1RBVEVfV0FJVElOR19GT1JfUkVMRUFTRTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2lnbmFscyB0aGF0IHRoZSBrZXkgd2FzIHJlbGVhc2VkXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUFjdGlvbiNcbiAgICovXG4gIHJlbGVhc2UoKSB7XG4gICAgdGhpcy5zdGF0ZSA9IHN0YXRpY3MuU1RBVEVfUkVMRUFTRUQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBrZXkgd2FzIHByZXNzZWQgb3Igbm90IHNpbmNlIGxhc3QgY2hlY2tlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQWN0aW9uI1xuICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHRoZSBrZXkgaXMgcHJlc3NlZCwgZWxzZSBmYWxzZVxuICAgKi9cbiAgaXNQcmVzc2VkKCkge1xuICAgIGlmKHRoaXMuc3RhdGUgPT09IHN0YXRpY3MuU1RBVEVfUFJFU1NFRCl7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBGb3Iga2V5cywgdGhpcyBpcyB0aGUgbnVtYmVyIG9mIHRpbWVzIHRoZSBrZXkgd2FzIHByZXNzZWQgc2luY2UgaXQgd2FzIGxhc3QgY2hlY2tlZC5cbiAgICogRm9yIG1vdXNlIG1vdmVtZW50LCB0aGlzIGlzIHRoZSBkaXN0YW5jZSBtb3ZlZC5cbiAgICpcbiAgICogVGhpcyBSZXNldHMgdGhlIGFtb3VudCB0byB6ZXJvIGFmdGVyIGJlaW5nIGNoZWNrZWQhXG4gICAqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUFjdGlvbiNcbiAgICogQHJldHVybiB7TnVtYmVyfSBOdW1iZXIgb2YgdGltZXMgdGhlIGtleSB3YXMgcHJlc3NlZCBvciBkaXN0YW5jZSBtb3VzZSB3YXMgbW92ZWRcbiAgICovXG4gIGdldEFtb3VudCgpIHtcbiAgICB2YXIgcmV0VmFsID0gdGhpcy5hbW91bnQ7XG4gICAgaWYgKHJldFZhbCAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMuc3RhdGUgPT09IHN0YXRpY3MuU1RBVEVfUkVMRUFTRUQpIHtcbiAgICAgICAgdGhpcy5hbW91bnQgPSAwO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLmJlaGF2aW9yID09PSBzdGF0aWNzLkRFVEVDVF9JTklUQUxfUFJFU1NfT05MWSkge1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGljcy5TVEFURV9XQUlUSU5HX0ZPUl9SRUxFQVNFO1xuICAgICAgICB0aGlzLmFtb3VudCA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXRWYWw7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lQWN0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBVc2luZyBSYXktQ2FzdGluZyBmb3JtdWxhIGJhc2VkIG9uXG4vLyBodHRwOi8vd3d3LmVjc2UucnBpLmVkdS9Ib21lcGFnZXMvd3JmL1Jlc2VhcmNoL1Nob3J0X05vdGVzL3BucG9seS5odG1sXG4vLyBhbmQgaHR0cHM6Ly9naXRodWIuY29tL3N1YnN0YWNrL3BvaW50LWluLXBvbHlnb24vXG4vLyBSZS13cml0dGVuIGZvciBtb3N0IHJlYWRhYmlsaXR5IGFuZCBmb3IgdXNlIHdpdGggcG9pbnQgb2JqZWN0cyBpbnN0ZWFkIG9mIGFycmF5c1xuXG5mdW5jdGlvbiBwb2ludEluUG9seShwb2ludCwgcG9seWdvbil7XG4gIGlmKCFwb2ludCB8fCAhcG9seWdvbil7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgdmFyIHBvbHkgPSBwb2x5Z29uLnBvaW50cyB8fCBwb2x5Z29uO1xuXG4gIHZhciBpbnNpZGVQb2x5ID0gZmFsc2U7XG4gIHZhciBqID0gcG9seS5sZW5ndGggLSAxO1xuXG4gIGZvcih2YXIgaSA9IDA7IGkgPCBwb2x5Lmxlbmd0aDsgaiA9IGkrKyl7XG4gICAgdmFyIHhpID0gcG9seVtpXS54O1xuICAgIHZhciB5aSA9IHBvbHlbaV0ueTtcbiAgICB2YXIgeGogPSBwb2x5W2pdLng7XG4gICAgdmFyIHlqID0gcG9seVtqXS55O1xuXG4gICAgaWYoeWkgPiBwb2ludC55ICE9PSB5aiA+IHBvaW50Lnkpe1xuICAgICAgaWYocG9pbnQueCA8ICh4aiAtIHhpKSAqIChwb2ludC55IC0geWkpIC8gKHlqIC0geWkpICsgeGkpe1xuICAgICAgICBpbnNpZGVQb2x5ID0gIWluc2lkZVBvbHk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGluc2lkZVBvbHk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcG9pbnRJblBvbHk7XG4iLCJcbmZ1bmN0aW9uIHNjYWxlUG9pbnRzKHBvaW50cywgc2NhbGUpe1xuICBpZihBcnJheS5pc0FycmF5KHBvaW50cykpe1xuICAgIHBvaW50cyA9IHBvaW50cy5tYXAoZnVuY3Rpb24ocG9pbnQpe1xuICAgICAgcmV0dXJuIHNjYWxlUG9pbnRzKHBvaW50LCBzY2FsZSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZih0eXBlb2Ygc2NhbGUgPT09ICdvYmplY3QnKXtcbiAgICBwb2ludHMgPSB7XG4gICAgICB4OiBwb2ludHMueCAqIHNjYWxlLngsXG4gICAgICB5OiBwb2ludHMueSAqIHNjYWxlLnlcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHBvaW50cyA9IHtcbiAgICAgIHg6IHBvaW50cy54ICogc2NhbGUsXG4gICAgICB5OiBwb2ludHMueSAqIHNjYWxlXG4gICAgfTtcbiAgfVxuICByZXR1cm4gcG9pbnRzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNjYWxlUG9pbnRzO1xuIiwiXG5mdW5jdGlvbiB0cmFuc2xhdGVQb2ludHMocG9pbnRzLCB0cmFuc2xhdGlvbil7XG4gIGlmKEFycmF5LmlzQXJyYXkocG9pbnRzKSl7XG4gICAgcG9pbnRzID0gcG9pbnRzLm1hcChmdW5jdGlvbihwb2ludCl7XG4gICAgICByZXR1cm4gdHJhbnNsYXRlUG9pbnRzKHBvaW50LCB0cmFuc2xhdGlvbik7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcG9pbnRzID0ge1xuICAgICAgeDogcG9pbnRzLngsXG4gICAgICB5OiBwb2ludHMueVxuICAgIH07XG5cbiAgICBpZih0cmFuc2xhdGlvbi54ICE9IG51bGwpe1xuICAgICAgcG9pbnRzLnggKz0gdHJhbnNsYXRpb24ueDtcbiAgICB9XG5cbiAgICBpZih0cmFuc2xhdGlvbi55ICE9IG51bGwpe1xuICAgICAgcG9pbnRzLnkgKz0gdHJhbnNsYXRpb24ueTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBvaW50cztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0cmFuc2xhdGVQb2ludHM7XG4iLCIvKipcbiAqIFRoaXMgcmVwcmVzZW50cyBhIGpvaW50IGJldHdlZW4gdHdvIGJvZGllcy5cbiAqIEBuYW1lIEpvaW50XG4gKiBAY29uc3RydWN0b3IgSm9pbnRcbiAqL1xuXG5cbmNsYXNzIEpvaW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcblxuICAgIC8qKlxuICAgICAqIFRoZSBpZCBvZiB0aGUgZmlyc3QgZW50aXR5IHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byB0aGlzIGpvaW50XG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAbWVtYmVyT2YgSm9pbnQjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmJvZHlJZDEgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGlkIG9mIHRoZSBzZWNvbmQgZW50aXR5IHRoYXQgd2lsbCBiZSBhdHRhY2hlZCB0byB0aGlzIGpvaW50XG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAbWVtYmVyT2YgSm9pbnQjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmJvZHlJZDIgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQSBwb2ludCBvbiB0aGUgZmlyc3QgZW50aXR5IHdoZXJlIGJlIGF0dGFjaGVkIHRvIHRoZSBzZWNvbmQgYm9keS4gSWYgbm8gcG9pbnQgaXMgc3BlY2lmaWVkLCB0aGUgZmlyc3QgYm9keSB3aWxsIGJlIGF0dGFjaGVkIGF0IGl0cyBjZW50ZXIgcG9pbnQuXG4gICAgICogQHR5cGUge09iamVjdH1cbiAgICAgKiBAbWVtYmVyT2YgSm9pbnQjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmJvZHlQb2ludDEgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQW4gb2JqZWN0IHdpdGggYW55IG90aGVyIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgbWl4ZWQgaW50byB0aGUgYm94MmQgam9pbnQgZGVmaW5pdGlvbi5cbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBKb2ludCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuam9pbnRBdHRyaWJ1dGVzID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGVzIHRoZSBwb3NpdGlvbiB0aGF0IG9uIHRoZSBmaXJzdCBib2R5IHRoYXQgdGhlIGpvaW50IGlzIGNvbm5lY3RlZCBhdC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBKb2ludCNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBzY2FsZSB0byBtdWx0aXBseSB0aGUgZGltZW50aW9ucyBieVxuICAgKi9cbiAgc2NhbGVKb2ludExvY2F0aW9uKHNjYWxlKXtcbiAgICBpZihzY2FsZSAmJiB0aGlzLmJvZHlQb2ludDEpe1xuICAgICAgdGhpcy5ib2R5UG9pbnQxLnggPSB0aGlzLmJvZHlQb2ludDEueCAqIHNjYWxlO1xuICAgICAgdGhpcy5ib2R5UG9pbnQxLnkgPSB0aGlzLmJvZHlQb2ludDEueSAqIHNjYWxlO1xuICAgICAgdGhpcy5hbHJlYWR5U2NhbGVkID0gdHJ1ZTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBKb2ludDtcbiIsIi8qKlxuICogVGhpcyByZXByZXNlbnRzIGEgQ2lyY2xlIGJvZHkgYW5kIHNoYXBlIGluIGEgQm94MmQgd29ybGRcbiAqIEBuYW1lIENpcmNsZVxuICogQGNvbnN0cnVjdG9yIENpcmNsZVxuICogQGV4dGVuZHMgRW50aXR5XG4gKi9cblxuY29uc3QgRW50aXR5ID0gcmVxdWlyZSgnLi9FbnRpdHknKTtcbmNvbnN0IGRpc3RhbmNlID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvZGlzdGFuY2UnKTtcblxuY2xhc3MgQ2lyY2xlIGV4dGVuZHMgRW50aXR5e1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJhZGl1cyBvZiB0aGlzIGNpcmNsZS5cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBDaXJjbGUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnJhZGl1cyA9IDE7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIERyYXdzIHRoZSBDaXJjbGUgYXQgYSBnaXZlbiBzY2FsZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIENpcmNsZSNcbiAgICogQHBhcmFtIHtDb250ZXh0fSBjdHggVGhlIGRyYXdpbmcgY29udGV4dFxuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIHNjYWxlIGF0IHdoaWNoIHRvIGRyYXdcbiAgICovXG4gIGRyYXcoY3R4LCBzY2FsZSl7XG4gICAgc2NhbGUgPSBzY2FsZSB8fCB0aGlzLnNjYWxlIHx8IDE7XG4gICAgdmFyIG9nTGluZVdpZHRoID0gY3R4LmxpbmVXaWR0aDtcbiAgICBjdHgubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGg7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuZmlsbFN0eWxlO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuc3Ryb2tlU3R5bGU7XG4gICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgIGN0eC5hcmModGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlLCB0aGlzLnJhZGl1cyAqIHNjYWxlLCAwLCBNYXRoLlBJICogMiwgdHJ1ZSk7XG4gICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgIGN0eC5maWxsKCk7XG4gICAgY3R4LnN0cm9rZSgpO1xuXG4gICAgaWYoIXRoaXMuc3RhdGljQm9keSl7XG4gICAgICBjdHguc2F2ZSgpO1xuICAgICAgY3R4LnRyYW5zbGF0ZSh0aGlzLnggKiBzY2FsZSwgdGhpcy55ICogc2NhbGUpO1xuICAgICAgY3R4LnJvdGF0ZSh0aGlzLmFuZ2xlKTtcbiAgICAgIGN0eC50cmFuc2xhdGUoLSh0aGlzLngpICogc2NhbGUsIC0odGhpcy55KSAqIHNjYWxlKTtcbiAgICAgIGN0eC5iZWdpblBhdGgoKTtcbiAgICAgIGN0eC5tb3ZlVG8odGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlKTtcbiAgICAgIGN0eC5saW5lVG8odGhpcy54ICogc2NhbGUsICh0aGlzLnkgKiBzY2FsZSkgLSAodGhpcy5yYWRpdXMgKiBzY2FsZSkpO1xuICAgICAgY3R4LmNsb3NlUGF0aCgpO1xuICAgICAgY3R4LnN0cm9rZSgpO1xuICAgICAgY3R4LnJlc3RvcmUoKTtcbiAgICB9XG4gICAgY3R4LmxpbmVXaWR0aCA9IG9nTGluZVdpZHRoO1xuXG4gICAgc3VwZXIuZHJhdyhjdHgsIHNjYWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIHNoYXBlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQ2lyY2xlI1xuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIGFtb3VudCB0aGUgc2hhcGUgc2hvdWxkIHNjYWxlXG4gICAqL1xuICBzY2FsZVNoYXBlKHNjYWxlKXtcbiAgICB0aGlzLnJhZGl1cyA9IHRoaXMucmFkaXVzICogc2NhbGU7XG4gICAgc3VwZXIuc2NhbGVTaGFwZShzY2FsZSk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBnaXZlbiBwb2ludCBpcyBjb250YWluZWQgd2l0aGluIHRoaXMgQ2lyY2xlLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIENpcmNsZSNcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IEFuIG9iamVjdCB3aXRoIHggYW5kIHkgdmFsdWVzLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHBvaW50IGlzIGluIHNoYXBlIGVsc2UgZmFsc2VcbiAgICovXG4gIHBvaW50SW5TaGFwZShwb2ludCl7XG4gICAgcmV0dXJuIChkaXN0YW5jZShwb2ludCwgdGhpcykgPD0gdGhpcy5yYWRpdXMpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDaXJjbGU7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgXCJlbnRpdGllc1wiOiBbXG4gICAge1xuICAgICAgXCJwb2ludHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IC0xMDAsXG4gICAgICAgICAgXCJ5XCI6IC0xMDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiA1NjguMTAxMTMsXG4gICAgICAgICAgXCJ5XCI6IC0xMDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiA1NjguMTAxMTMsXG4gICAgICAgICAgXCJ5XCI6IDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAwLFxuICAgICAgICAgIFwieVwiOiA1NDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAtMTAwLFxuICAgICAgICAgIFwieVwiOiA1NDBcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBcInhcIjogMCxcbiAgICAgIFwieVwiOiAwLFxuICAgICAgXCJzdGF0aWNCb2R5XCI6IHRydWUsXG4gICAgICBcInpvbmVcIjogZmFsc2UsXG4gICAgICBcInR5cGVcIjogXCJQb2x5Z29uXCIsXG4gICAgICBcImlkXCI6IFwidWxlZnR3XCIsXG4gICAgICBcInJlc3RpdHV0aW9uXCI6IDVcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicG9pbnRzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAtMTAwLFxuICAgICAgICAgIFwieVwiOiA1NDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAwLFxuICAgICAgICAgIFwieVwiOiA1NDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiA1NjguMTAxMTMsXG4gICAgICAgICAgXCJ5XCI6IDEwODBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiA1NjguMTAxMTMsXG4gICAgICAgICAgXCJ5XCI6IDExODBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAtMTAwLFxuICAgICAgICAgIFwieVwiOiAxMTgwXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgXCJ4XCI6IDAsXG4gICAgICBcInlcIjogMCxcbiAgICAgIFwic3RhdGljQm9keVwiOiB0cnVlLFxuICAgICAgXCJ6b25lXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IFwiUG9seWdvblwiLFxuICAgICAgXCJyZXN0aXR1dGlvblwiOiA1LFxuICAgICAgXCJpZFwiOiBcImxsZWZ0d1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInBvaW50c1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogMTM1MS44OTg4NyxcbiAgICAgICAgICBcInlcIjogLTEwMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IDIwMjAsXG4gICAgICAgICAgXCJ5XCI6IC0xMDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAyMDIwLFxuICAgICAgICAgIFwieVwiOiA1NDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAxOTIwLFxuICAgICAgICAgIFwieVwiOiA1NDBcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAxMzUxLjg5ODg3LFxuICAgICAgICAgIFwieVwiOiAwXG4gICAgICAgIH0sXG4gICAgICBdLFxuICAgICAgXCJ4XCI6IDAsXG4gICAgICBcInlcIjogMCxcbiAgICAgIFwic3RhdGljQm9keVwiOiB0cnVlLFxuICAgICAgXCJ6b25lXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IFwiUG9seWdvblwiLFxuICAgICAgXCJyZXN0aXR1dGlvblwiOiA1LFxuICAgICAgXCJpZFwiOiBcInVyaWdodHR3XCJcbiAgICB9LFxuICAgIHtcbiAgICAgIFwicG9pbnRzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgIFwieFwiOiAxMzUxLjg5ODg3LFxuICAgICAgICAgIFwieVwiOiAxMDgwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogMTkyMCxcbiAgICAgICAgICBcInlcIjogNTQwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogMjAyMCxcbiAgICAgICAgICBcInlcIjogNTQwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICBcInhcIjogMjAyMCxcbiAgICAgICAgICBcInlcIjogMTE4MFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgXCJ4XCI6IDEzNTEuODk4ODcsXG4gICAgICAgICAgXCJ5XCI6IDExODBcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICBcInhcIjogMCxcbiAgICAgIFwieVwiOiAwLFxuICAgICAgXCJzdGF0aWNCb2R5XCI6IHRydWUsXG4gICAgICBcInpvbmVcIjogZmFsc2UsXG4gICAgICBcInR5cGVcIjogXCJQb2x5Z29uXCIsXG4gICAgICBcInJlc3RpdHV0aW9uXCI6IDUsXG4gICAgICBcImlkXCI6IFwibHJpZ2h0dHdcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ4XCI6IDk2MCxcbiAgICAgIFwieVwiOiAxMTgwLFxuICAgICAgXCJoYWxmV2lkdGhcIjogMTAwMCxcbiAgICAgIFwiaGFsZkhlaWdodFwiOiAxMDAsXG4gICAgICBcInN0YXRpY0JvZHlcIjogdHJ1ZSxcbiAgICAgIFwiem9uZVwiOiBmYWxzZSxcbiAgICAgIFwidHlwZVwiOiBcIlJlY3RhbmdsZVwiLFxuICAgICAgXCJpZFwiOiBcImJvdHRvbXdcIixcbiAgICAgIFwicmVzdGl0dXRpb25cIjogNVxuICAgIH0sXG4gICAge1xuICAgICAgXCJ4XCI6IDk2MCxcbiAgICAgIFwieVwiOiAtMTAwLFxuICAgICAgXCJoYWxmV2lkdGhcIjogMTAwMCxcbiAgICAgIFwiaGFsZkhlaWdodFwiOiAxMDAsXG4gICAgICBcInN0YXRpY0JvZHlcIjogdHJ1ZSxcbiAgICAgIFwiem9uZVwiOiBmYWxzZSxcbiAgICAgIFwidHlwZVwiOiBcIlJlY3RhbmdsZVwiLFxuICAgICAgXCJpZFwiOiBcInRvcHdcIlxuICAgIH0sXG4gICAge1xuICAgICAgXCJ4XCI6IDk2MCxcbiAgICAgIFwieVwiOiA1NDAsXG4gICAgICBcImhhbGZXaWR0aFwiOiA5LFxuICAgICAgXCJoYWxmSGVpZ2h0XCI6IDIwLFxuICAgICAgXCJzdGF0aWNCb2R5XCI6IGZhbHNlLFxuICAgICAgXCJ6b25lXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IFwiUmVjdGFuZ2xlXCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcIiNFRUNFQjNcIixcbiAgICAgIFwic3Ryb2tlU3R5bGVcIjogXCIjRUVDRUIzXCIsXG4gICAgICBcImlkXCI6IFwibmVja1wiXG4gICAgfSxcbiAgICB7XG4gICAgICBcInhcIjogOTYwLFxuICAgICAgXCJ5XCI6IDUyNyxcbiAgICAgIFwicmFkaXVzXCI6IDI0LFxuICAgICAgXCJzdGF0aWNCb2R5XCI6IGZhbHNlLFxuICAgICAgXCJ6b25lXCI6IGZhbHNlLFxuICAgICAgXCJ0eXBlXCI6IFwiQ2lyY2xlXCIsXG4gICAgICBcImZpbGxTdHlsZVwiOiBcInJnYmEoMjM5LDIwOCwyMDcsMC4yKVwiLFxuICAgICAgXCJpZFwiOiBcImhlYWRcIlxuICAgIH0sXG4gIF0sXG4gIFwiam9pbnRzXCI6IFtcbiAgICB7XG4gICAgICBcImJvZHlJZDFcIjogXCJoZWFkXCIsXG4gICAgICBcImJvZHlJZDJcIjogXCJuZWNrXCIsXG4gICAgICBcInR5cGVcIjogXCJSZXZvbHV0ZVwiLFxuICAgICAgXCJpZFwiOiBcImhlYWRcIixcbiAgICAgIFwiam9pbnRBdHRyaWJ1dGVzXCI6IHtcbiAgICAgICAgXCJlbmFibGVMaW1pdFwiOiB0cnVlLFxuICAgICAgICBcImxvd2VyQW5nbGVcIjogLTAuNSxcbiAgICAgICAgXCJ1cHBlckFuZ2xlXCI6IDAuNVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJib2R5SWQxXCI6IFwicnVsZWdcIixcbiAgICAgIFwiYm9keUlkMlwiOiBcInRvcnNvXCIsXG4gICAgICBcInR5cGVcIjogXCJSZXZvbHV0ZVwiLFxuICAgICAgXCJpZFwiOiBcInJoaXBcIixcbiAgICAgIFwiYm9keVBvaW50MVwiOiB7XG4gICAgICAgIFwieFwiOiAyMTAsXG4gICAgICAgIFwieVwiOiAyNzNcbiAgICAgIH0sXG4gICAgICBcImpvaW50QXR0cmlidXRlc1wiOiB7XG4gICAgICAgIFwiZW5hYmxlTGltaXRcIjogdHJ1ZSxcbiAgICAgICAgXCJsb3dlckFuZ2xlXCI6IC0wLjc4NTM4NSxcbiAgICAgICAgXCJ1cHBlckFuZ2xlXCI6IDEuNTcwNzk2XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcImJvZHlJZDFcIjogXCJsbGxlZ1wiLFxuICAgICAgXCJib2R5SWQyXCI6IFwibHVsZWdcIixcbiAgICAgIFwidHlwZVwiOiBcIlJldm9sdXRlXCIsXG4gICAgICBcImlkXCI6IFwibGtuZWVcIixcbiAgICAgIFwiYm9keVBvaW50MVwiOiB7XG4gICAgICAgIFwieFwiOiAxNTcsXG4gICAgICAgIFwieVwiOiAzNjRcbiAgICAgIH0sXG4gICAgICBcImpvaW50QXR0cmlidXRlc1wiOiB7XG4gICAgICAgIFwiZW5hYmxlTGltaXRcIjogdHJ1ZSxcbiAgICAgICAgXCJsb3dlckFuZ2xlXCI6IC0wLjE4NTM4NSxcbiAgICAgICAgXCJ1cHBlckFuZ2xlXCI6IDEuNTcwNzk2XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcImJvZHlJZDFcIjogXCJybGxlZ1wiLFxuICAgICAgXCJib2R5SWQyXCI6IFwicnVsZWdcIixcbiAgICAgIFwidHlwZVwiOiBcIlJldm9sdXRlXCIsXG4gICAgICBcImlkXCI6IFwicmtuZWVcIixcbiAgICAgIFwiYm9keVBvaW50MVwiOiB7XG4gICAgICAgIFwieFwiOiAyMzEsXG4gICAgICAgIFwieVwiOiAzNjRcbiAgICAgIH0sXG4gICAgICBcImpvaW50QXR0cmlidXRlc1wiOiB7XG4gICAgICAgIFwiZW5hYmxlTGltaXRcIjogdHJ1ZSxcbiAgICAgICAgXCJsb3dlckFuZ2xlXCI6IC0xLjU3MDc5NixcbiAgICAgICAgXCJ1cHBlckFuZ2xlXCI6IDAuMTg1Mzg1XG4gICAgICB9XG4gICAgfSxcbiAgICB7XG4gICAgICBcImJvZHlJZDFcIjogXCJsaGFuZFwiLFxuICAgICAgXCJib2R5SWQyXCI6IFwibGxhcm1cIixcbiAgICAgIFwidHlwZVwiOiBcIlJldm9sdXRlXCIsXG4gICAgICBcImlkXCI6IFwibGhhbmRcIixcbiAgICAgIFwiYm9keVBvaW50MVwiOiB7XG4gICAgICAgIFwieFwiOiAxMjUsXG4gICAgICAgIFwieVwiOiAzMDJcbiAgICAgIH0sXG4gICAgICBcImpvaW50QXR0cmlidXRlc1wiOiB7XG4gICAgICAgIFwiZW5hYmxlTGltaXRcIjogdHJ1ZSxcbiAgICAgICAgXCJsb3dlckFuZ2xlXCI6IC0xLjYsXG4gICAgICAgIFwidXBwZXJBbmdsZVwiOiAxLjZcbiAgICAgIH1cbiAgICB9LFxuICAgIHtcbiAgICAgIFwiYm9keUlkMVwiOiBcInJoYW5kXCIsXG4gICAgICBcImJvZHlJZDJcIjogXCJybGFybVwiLFxuICAgICAgXCJ0eXBlXCI6IFwiUmV2b2x1dGVcIixcbiAgICAgIFwiaWRcIjogXCJyaGFuZFwiLFxuICAgICAgXCJib2R5UG9pbnQxXCI6IHtcbiAgICAgICAgXCJ4XCI6IDI2OCxcbiAgICAgICAgXCJ5XCI6IDI5MFxuICAgICAgfSxcbiAgICAgIFwiam9pbnRBdHRyaWJ1dGVzXCI6IHtcbiAgICAgICAgXCJlbmFibGVMaW1pdFwiOiB0cnVlLFxuICAgICAgICBcImxvd2VyQW5nbGVcIjogLTEuNixcbiAgICAgICAgXCJ1cHBlckFuZ2xlXCI6IDEuNlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJib2R5SWQxXCI6IFwibGZvb3RcIixcbiAgICAgIFwiYm9keUlkMlwiOiBcImxsbGVnXCIsXG4gICAgICBcInR5cGVcIjogXCJSZXZvbHV0ZVwiLFxuICAgICAgXCJpZFwiOiBcImxmb290XCIsXG4gICAgICBcImJvZHlQb2ludDFcIjoge1xuICAgICAgICBcInhcIjogMTQ3LFxuICAgICAgICBcInlcIjogNDI2XG4gICAgICB9LFxuICAgICAgXCJqb2ludEF0dHJpYnV0ZXNcIjoge1xuICAgICAgICBcImVuYWJsZUxpbWl0XCI6IHRydWUsXG4gICAgICAgIFwibG93ZXJBbmdsZVwiOiAtMS4wNzA3OTYsXG4gICAgICAgIFwidXBwZXJBbmdsZVwiOiAwLjc4NTM4NVxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJib2R5SWQxXCI6IFwicmZvb3RcIixcbiAgICAgIFwiYm9keUlkMlwiOiBcInJsbGVnXCIsXG4gICAgICBcInR5cGVcIjogXCJSZXZvbHV0ZVwiLFxuICAgICAgXCJpZFwiOiBcInJmb290XCIsXG4gICAgICBcImJvZHlQb2ludDFcIjoge1xuICAgICAgICBcInhcIjogMjM4LFxuICAgICAgICBcInlcIjogNDI3XG4gICAgICB9LFxuICAgICAgXCJqb2ludEF0dHJpYnV0ZXNcIjoge1xuICAgICAgICBcImVuYWJsZUxpbWl0XCI6IHRydWUsXG4gICAgICAgIFwibG93ZXJBbmdsZVwiOiAtMC43ODUzODUsXG4gICAgICAgIFwidXBwZXJBbmdsZVwiOiAxLjA3MDc5NlxuICAgICAgfVxuICAgIH0sXG4gICAge1xuICAgICAgXCJib2R5SWQxXCI6IFwidGh1bWJcIixcbiAgICAgIFwiYm9keUlkMlwiOiBcImxoYW5kXCIsXG4gICAgICBcInR5cGVcIjogXCJSZXZvbHV0ZVwiLFxuICAgICAgXCJpZFwiOiBcInRodW1iXCIsXG4gICAgICBcImJvZHlQb2ludDFcIjoge1xuICAgICAgICBcInhcIjogMTI3LFxuICAgICAgICBcInlcIjogMzE1XG4gICAgICB9LFxuICAgICAgXCJqb2ludEF0dHJpYnV0ZXNcIjoge1xuICAgICAgICBcImVuYWJsZUxpbWl0XCI6IHRydWUsXG4gICAgICAgIFwibG93ZXJBbmdsZVwiOiAwLjEsXG4gICAgICAgIFwidXBwZXJBbmdsZVwiOiAtMC4xXG4gICAgICB9XG4gICAgfVxuICBdLFxuICBcImNhbnZhc1wiOiB7XG4gICAgXCJoZWlnaHRcIjogNjAwLFxuICAgIFwid2lkdGhcIjogODAwXG4gIH0sXG4gIFwiYmFja0ltZ1wiOiBudWxsXG59OyIsIi8qKlxuICogVGhlIEdhbWVDb3JlIGNsYXNzIHByb3ZpZGVzIHRoZSBiYXNlIHRvIGJ1aWxkIGdhbWVzIG9uLlxuICogQG5hbWUgR2FtZUNvcmVcbiAqIEBjb25zdHJ1Y3RvciBHYW1lQ29yZVxuICogQGV4YW1wbGVcbiAqIHZhciBteUdhbWUgPSBuZXcgR2FtZUNvcmUoe1xuICogICBjYW52YXNJZDogJ215Q2FudmFzJyxcbiAqICAgdXBkYXRlOiBmdW5jdGlvbihtaWxsaXMpe1xuICogICAgIC8vIGRvIHVwZGF0aW5nIG9mIGdhbWUgc3RhdGVcbiAqICAgfSxcbiAqICAgZHJhdzogZnVuY3Rpb24oY29udGV4dCl7XG4gKiAgICAgLy8gZG8gZHJhd2luZyBvZiB0aGUgZ2FtZVxuICogICB9XG4gKiB9KTtcbiAqXG4gKiAvL3N0YXJ0IHRoZSBnYW1lXG4gKiBteUdhbWUucnVuKCk7XG4gKi9cblxuY29uc3QgSW5wdXRNYW5hZ2VyID0gcmVxdWlyZSgnLi9JbnB1dE1hbmFnZXInKTtcbmNvbnN0IFJlc291cmNlTWFuYWdlciA9IHJlcXVpcmUoJy4vUmVzb3VyY2VNYW5hZ2VyJyk7XG5cbmNsYXNzIEdhbWVDb3JlIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdGhlIGdhbWUgc2hvdWxkIGJlIHJ1bm5pbmcgaXRzIGxvb3BcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGlkIG9mIHRoZSBjYW52YXMgZWxlbWVudCB0byB1c2UgcmVuZGVyIHRoZSBnYW1lIG9uXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmNhbnZhc0lkID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIE1heCBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGJldHdlZW4gdXBkYXRlcy4gKGluIGNhc2UgdXNlciBzd2l0Y2hlcyB0YWJzIGFuZCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgcGF1c2VzKVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5tYXhTdGVwID0gNDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdHlwZSBvZiBjb250ZXh0IHRvIHJlcXVlc3QgZnJvbSB0aGUgY2FudmFzLiAgMmQgb3IgM2RcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuY29udGV4dFR5cGUgPSAnMmQnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGhlaWdodCBvZiB0aGUgR2FtZSBhbmQgY2FudmFzXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmhlaWdodCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggb2YgdGhlIEdhbWUgYW5kIGNhbnZhc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgUmVzb3VyY2VNYW5hZ2VyIHRvIGJlIHVzZWQgZm9yIGdhbWVcbiAgICAgKiBAdHlwZSB7UmVzb3VyY2VNYW5hZ2VyfVxuICAgICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMucmVzb3VyY2VNYW5hZ2VyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBJbnB1dE1hbmFnZXIgdG8gYmUgdXNlZCBmb3IgZ2FtZVxuICAgICAqIEB0eXBlIHtJbnB1dE1hbmFnZXJ9XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5pbnB1dE1hbmFnZXIgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0eWxlIHRvIGJlIHVzZWQgZm9yIHRoZSBmb3JlZ3JvdW5kIHdoaWxlIGdhbWUgcmVzb3VyY2VzIGFyZSBsb2FkaW5nXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmxvYWRpbmdGb3JlZ3JvdW5kID0gJyMwMEYnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHN0eWxlIHRvIGJlIHVzZWQgZm9yIHRoZSBiYWNrZ3JvdW5kIHdoaWxlIGdhbWUgcmVzb3VyY2VzIGFyZSBsb2FkaW5nXG4gICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmxvYWRpbmdCYWNrZ3JvdW5kID0gJyNGRkYnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIElEIG9mIGEgRE9NIGVsZW1lbnQgdGhhdCBjb250YWlucyB0aGUgZ2FtZSdzIGNhbnZhc1xuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5nYW1lQXJlYUlkID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBwZXJjZW50YWdlICgwIHRvIDEuMCkgb2YgdGhlIGhlaWdodCBhbmQgd2lkdGggdGhlIGNhbnZhcyBzaG91bGQgdXNlIHRvIGZpbGwgaW4gaXRzIGNvbnRhaW5lciBET00gZWxlbWVudFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5jYW52YXNQZXJjZW50YWdlID0gMDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cbiAgICBpZighdGhpcy5yZXNvdXJjZU1hbmFnZXIpe1xuICAgICAgdGhpcy5yZXNvdXJjZU1hbmFnZXIgPSBuZXcgUmVzb3VyY2VNYW5hZ2VyKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGhlaWdodCBvbiB5b3VyIEdhbWVDb3JlIGluc3RhbmNlIGFuZCBvbiB5b3VyIGNhbnZhcyByZWZlcmVuY2VcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG5ld0hlaWdodCBUaGUgbmV3IGhlaWdodCBkZXNpcmVkXG4gICAqL1xuICBzZXRIZWlnaHQobmV3SGVpZ2h0KXtcbiAgICB0aGlzLmhlaWdodCA9IG5ld0hlaWdodDtcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSBuZXdIZWlnaHQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgd2lkdGggb24geW91ciBHYW1lQ29yZSBpbnN0YW5jZSBhbmQgb24geW91ciBjYW52YXMgcmVmZXJlbmNlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBuZXdXaWR0aCBUaGUgbmV3IHdpZHRoIGRlc2lyZWRcbiAgICovXG4gIHNldFdpZHRoKG5ld1dpZHRoKXtcbiAgICB0aGlzLndpZHRoID0gbmV3V2lkdGg7XG4gICAgdGhpcy5jYW52YXMud2lkdGggPSBuZXdXaWR0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIHRoZSBnYW1lIGxvb3AgdGhhdCBpdCdzIHRpbWUgdG8gcXVpdFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKi9cbiAgc3RvcCgpIHtcbiAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIExhdW5jaGVzIHRoZSBnYW1lLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKi9cbiAgcnVuKCkge1xuICAgIGlmKCF0aGlzLmlzUnVubmluZyl7XG4gICAgICB0aGlzLmluaXQoKTtcbiAgICAgIHRoaXMubG9hZFJlc291cmNlcyh0aGlzLnJlc291cmNlTWFuYWdlcik7XG4gICAgICB0aGlzLmluaXRJbnB1dCh0aGlzLmlucHV0TWFuYWdlcik7XG4gICAgICB0aGlzLmxhdW5jaExvb3AoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FuIGJlIG92ZXJpZGRlbiBpbiBHYW1lQ29yZSBzdWJjbGFzc2VzIHRvIGxvYWQgaW1hZ2VzIGFuZCBzb3VuZHNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICogQHBhcmFtIHtSZXNvdXJjZU1hbmFnZXJ9IHJlc291cmNlTWFuYWdlclxuICAgKi9cbiAgbG9hZFJlc291cmNlcyhyZXNvdXJjZU1hbmFnZXIpe1xuXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgc2NyZWVuIG1vZGUgYW5kIGluaXRpYXRlcyBhbmQgb2JqZWN0cy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBHYW1lQ29yZSNcbiAgICovXG4gIGluaXQoKSB7XG4gICAgaWYoIXRoaXMuY2FudmFzKXtcbiAgICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5jYW52YXNJZCk7XG4gICAgfVxuICAgIGlmKCF0aGlzLmNhbnZhcyl7XG4gICAgICBcbiAgICAgIGFsZXJ0KCdTb3JyeSwgeW91ciBicm93c2VyIGRvZXMgbm90IHN1cHBvcnQgY2FudmFzLiAgSSByZWNvbW1lbmQgYW55IGJyb3dzZXIgYnV0IEludGVybmV0IEV4cGxvcmVyJyk7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmKCF0aGlzLmNvbnRleHQpe1xuICAgICAgdGhpcy5jb250ZXh0ID0gdGhpcy5jYW52YXMuZ2V0Q29udGV4dCh0aGlzLmNvbnRleHRUeXBlKTtcbiAgICB9XG4gICAgaWYoIXRoaXMuY29udGV4dCl7XG4gICAgICBhbGVydCgnU29ycnksIHlvdXIgYnJvd3NlciBkb2VzIG5vdCBzdXBwb3J0IGEgJyArIHRoaXMuY29udGV4dFR5cGUgKyAnIGRyYXdpbmcgc3VyZmFjZSBvbiBjYW52YXMuICBJIHJlY29tbWVuZCBhbnkgYnJvd3NlciBidXQgSW50ZXJuZXQgRXhwbG9yZXInKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLnNldEhlaWdodCh0aGlzLmhlaWdodCB8fCB0aGlzLmNhbnZhcy5oZWlnaHQpO1xuICAgIHRoaXMuc2V0V2lkdGgodGhpcy53aWR0aCB8fCB0aGlzLmNhbnZhcy53aWR0aCk7XG5cbiAgICBpZighdGhpcy5pbnB1dE1hbmFnZXIpe1xuICAgICAgLy9oYW5kbGUgcmVzaXppbmcgaWYgZ2FtZUFyZWEgYW5kIGNhbnZhc1BlcmNlbnRhZ2UgYXJlIHNwZWNpZmllZFxuICAgICAgaWYodGhpcy5nYW1lQXJlYUlkICYmIHRoaXMuY2FudmFzUGVyY2VudGFnZSl7XG4gICAgICAgIHRoaXMuaW5wdXRNYW5hZ2VyID0gbmV3IElucHV0TWFuYWdlcih7XG4gICAgICAgICAgY2FudmFzOiB0aGlzLmNhbnZhcyxcbiAgICAgICAgICBnYW1lQXJlYTogZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5nYW1lQXJlYUlkKSxcbiAgICAgICAgICBjYW52YXNQZXJjZW50YWdlOiB0aGlzLmNhbnZhc1BlcmNlbnRhZ2VcbiAgICAgICAgfSk7XG4gICAgICB9ZWxzZXtcbiAgICAgICAgdGhpcy5pbnB1dE1hbmFnZXIgPSBuZXcgSW5wdXRNYW5hZ2VyKHtcbiAgICAgICAgICBjYW52YXM6IHRoaXMuY2FudmFzXG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuaW5wdXRNYW5hZ2VyLnJlc2l6ZSgpO1xuXG4gICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbiBiZSBvdmVyaWRkZW4gaW4gdGhlIHN1YmNsYXNzZXMgdG8gbWFwIHVzZXIgaW5wdXQgdG8gYWN0aW9uc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKiBAcGFyYW0ge0lucHV0TWFuYWdlcn0gaW5wdXRNYW5hZ2VyXG4gICAqL1xuICBpbml0SW5wdXQoaW5wdXRNYW5hZ2VyKSB7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBDYW4gYmUgb3ZlcmlkZGVuIGluIHRoZSBzdWJjbGFzc2VzIHRvIGRlYWwgd2l0aCB1c2VyIGlucHV0IGJlZm9yZSB1cGRhdGluZyB0aGUgZ2FtZSBzdGF0ZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKiBAcGFyYW0ge0lucHV0TWFuYWdlcn0gaW5wdXRNYW5hZ2VyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGFwc2VkVGltZSBFbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gICAqL1xuICBoYW5kbGVJbnB1dChpbnB1dE1hbmFnZXIsZWxhcHNlZFRpbWUpIHtcblxuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnMgdGhyb3VnaCB0aGUgZ2FtZSBsb29wIHVudGlsIHN0b3AoKSBpcyBjYWxsZWQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAqL1xuICBnYW1lTG9vcCgpIHtcbiAgICB0aGlzLmN1cnJUaW1lID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgdGhpcy5lbGFwc2VkVGltZSA9IE1hdGgubWluKHRoaXMuY3VyclRpbWUgLSB0aGlzLnByZXZUaW1lLCB0aGlzLm1heFN0ZXApO1xuICAgIHRoaXMucHJldlRpbWUgPSB0aGlzLmN1cnJUaW1lO1xuXG4gICAgLy9pdCdzIHVzaW5nIGEgcmVzb3VyY2UgbWFuYWdlciwgYnV0IHJlc291cmNlcyBoYXZlbid0IGZpbmlzaGVkXG4gICAgaWYodGhpcy5yZXNvdXJjZU1hbmFnZXIgJiYgIXRoaXMucmVzb3VyY2VNYW5hZ2VyLnJlc291cmNlc1JlYWR5KCkpe1xuICAgICAgdGhpcy51cGRhdGVMb2FkaW5nU2NyZWVuKHRoaXMuZWxhcHNlZFRpbWUpO1xuICAgICAgdGhpcy5kcmF3TG9hZGluZ1NjcmVlbih0aGlzLmNvbnRleHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmhhbmRsZUlucHV0KHRoaXMuaW5wdXRNYW5hZ2VyLHRoaXMuZWxhcHNlZFRpbWUpO1xuICAgICAgaWYoIXRoaXMucGF1c2VkKXtcbiAgICAgICAgLy8gdXBkYXRlXG4gICAgICAgIHRoaXMudXBkYXRlKHRoaXMuZWxhcHNlZFRpbWUpO1xuICAgICAgfVxuICAgICAgLy8gZHJhdyB0aGUgc2NyZWVuXG4gICAgICB0aGlzLmNvbnRleHQuc2F2ZSgpO1xuICAgICAgdGhpcy5kcmF3KHRoaXMuY29udGV4dCk7XG4gICAgICB0aGlzLmNvbnRleHQucmVzdG9yZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMYXVuY2hlcyB0aGUgZ2FtZSBsb29wLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKi9cbiAgbGF1bmNoTG9vcCgpe1xuICAgIHRoaXMuZWxhcHNlZFRpbWUgPSAwO1xuICAgIHZhciBzdGFydFRpbWUgPSBEYXRlLm5vdygpO1xuICAgIHRoaXMuY3VyclRpbWUgPSBzdGFydFRpbWU7XG4gICAgdGhpcy5wcmV2VGltZSA9IHN0YXJ0VGltZTtcblxuICAgIC8vbmVlZCB0byBrZWVwIHRoZSBjb250ZXh0IGRlZmluZWQgaGVyZSBzbyB0aGUgZ2FtZSBsb29wIGhhcyBhY2Nlc3MgdG8gaXRcbiAgICB0aGlzLmxvb3BSdW5uZXIgPSB0aGlzLmxvb3BSdW5uZXIuYmluZCh0aGlzKTtcbiAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMubG9vcFJ1bm5lcik7XG4gIH1cblxuICBsb29wUnVubmVyKCl7XG4gICAgdGhpcy5nYW1lTG9vcCgpO1xuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5sb29wUnVubmVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaG91bGQgYmUgb3ZlcnJpZGRlbiB0byB1cGRhdGUgdGhlIHN0YXRlIG9mIHRoZSBnYW1lL2FuaW1hdGlvbiBiYXNlZCBvbiB0aGUgYW1vdW50IG9mIGVsYXBzZWQgdGltZSB0aGF0IGhhcyBwYXNzZWQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGFwc2VkVGltZSBFbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gICAqL1xuICB1cGRhdGUoZWxhcHNlZFRpbWUpIHtcblxuXG4gIH1cblxuICAvKipcbiAgICogQ2FuIGJlIG92ZXJyaWRkZW4gdG8gdXBkYXRlIHRoZSBzdGF0ZSBvZiB0aGUgZ2FtZS9hbmltYXRpb24gd2hpbGUgYSBjdXN0b20gbG9hZGluZyBzY3JlZW4gaXMgZGlzcGxheWVkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKiBAcGFyYW0ge051bWJlcn0gZWxhcHNlZFRpbWUgRWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgKi9cbiAgdXBkYXRlTG9hZGluZ1NjcmVlbihlbGFwc2VkVGltZSkge1xuXG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgdG8gdGhlIHNjcmVlbi4gU3ViY2xhc3NlcyBvciBpbnN0YW5jZXMgbXVzdCBvdmVycmlkZSB0aGlzIG1ldGhvZCB0byBwYWludCBpdGVtcyB0byB0aGUgc2NyZWVuLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVDb3JlI1xuICAgKiBAcGFyYW0ge0NvbnRleHR9IGNvbnRleHQgQW4gSFRNTDUgY2FudmFzIGRyYXdpbmcgY29udGV4dC5cbiAgICovXG4gIGRyYXcoY29udGV4dCl7XG4gICAgaWYodGhpcy5jb250ZXh0VHlwZSA9PT0gJzJkJyl7XG4gICAgICBjb250ZXh0LmZvbnQgPSBcIjE0cHggc2Fucy1zZXJpZlwiO1xuICAgICAgY29udGV4dC5maWxsVGV4dChcIlRoaXMgZ2FtZSBkb2VzIG5vdCBoYXZlIGl0cyBvd24gZHJhdyBmdW5jdGlvbiFcIiwgMTAsIDUwKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgdGhlIHByb2dyZXNzIG9mIHRoZSByZXNvdXJjZSBtYW5nZXIgdG8gdGhlIHNjcmVlbiB3aGlsZSBsb2FkaW5nLlxuICAgKiBTdWJjbGFzc2VzIG9yIGluc3RhbmNlcyBtYXkgb3ZlcnJpZGUgZm9yIGN1c3RvbSBsb2FkaW5nIGFuaW1hdGlvbnMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgR2FtZUNvcmUjXG4gICAqIEBwYXJhbSB7Q29udGV4dH0gY29udGV4dCBBbiBIVE1MNSBjYW52YXMgZHJhd2luZyBjb250ZXh0LlxuICAgKi9cbiAgZHJhd0xvYWRpbmdTY3JlZW4oY29udGV4dCl7XG4gICAgaWYodGhpcy5yZXNvdXJjZU1hbmFnZXIgJiYgKHRoaXMuY29udGV4dFR5cGUgPT09ICcyZCcpKXtcbiAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gdGhpcy5sb2FkaW5nQmFja2dyb3VuZDtcbiAgICAgIGNvbnRleHQuZmlsbFJlY3QoMCwwLCB0aGlzLndpZHRoLHRoaXMuaGVpZ2h0KTtcblxuICAgICAgY29udGV4dC5maWxsU3R5bGUgPSB0aGlzLmxvYWRpbmdGb3JlZ3JvdW5kO1xuICAgICAgY29udGV4dC5zdHJva2VTdHlsZSA9IHRoaXMubG9hZGluZ0ZvcmVncm91bmQ7XG5cbiAgICAgIHZhciB0ZXh0UHhTaXplID0gTWF0aC5mbG9vcih0aGlzLmhlaWdodC8xMik7XG5cbiAgICAgIGNvbnRleHQuZm9udCA9IFwiYm9sZCBcIiArIHRleHRQeFNpemUgKyBcInB4IHNhbnMtc2VyaWZcIjtcblxuICAgICAgY29udGV4dC5maWxsVGV4dChcIkxvYWRpbmcuLi4gXCIgKyB0aGlzLnJlc291cmNlTWFuYWdlci5nZXRQZXJjZW50Q29tcGxldGUoKSArIFwiJVwiLCB0aGlzLndpZHRoICogMC4xLCB0aGlzLmhlaWdodCAqIDAuNTUpO1xuXG4gICAgICBjb250ZXh0LnN0cm9rZVJlY3QodGhpcy53aWR0aCAqIDAuMSwgdGhpcy5oZWlnaHQgKiAwLjcsIHRoaXMud2lkdGggKiAwLjgsIHRoaXMuaGVpZ2h0ICogMC4xKTtcbiAgICAgIGNvbnRleHQuZmlsbFJlY3QodGhpcy53aWR0aCAqIDAuMSwgdGhpcy5oZWlnaHQgKiAwLjcsICh0aGlzLndpZHRoICogMC44KSAqIHRoaXMucmVzb3VyY2VNYW5hZ2VyLmdldFBlcmNlbnRDb21wbGV0ZSgpLzEwMCwgdGhpcy5oZWlnaHQgKiAwLjEpO1xuXG4gICAgICBjb250ZXh0LmxpbmVXaWR0aCA9IDQ7XG4gICAgfVxuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBHYW1lQ29yZTtcbiIsIi8qKlxuICogVGhlIElucHV0TWFuYWdlciBoYW5kbGVzIERPTSBldmVudHMgZm9yIHVzZSBpbiBnYW1lcy5cbiAqIEBuYW1lIElucHV0TWFuYWdlclxuICogQGNvbnN0cnVjdG9yIElucHV0TWFuYWdlclxuICovXG5cbmNvbnN0IEhhbW1lciA9IHJlcXVpcmUoJ2hhbW1lcmpzJyk7XG5cbmNvbnN0IEdhbWVBY3Rpb24gPSByZXF1aXJlKCcuL0dhbWVBY3Rpb24nKTtcbmNvbnN0IFRvdWNoQWN0aW9uID0gcmVxdWlyZSgnLi9Ub3VjaEFjdGlvbicpO1xuY29uc3QgTW91c2VBY3Rpb24gPSByZXF1aXJlKCcuL01vdXNlQWN0aW9uJyk7XG5jb25zdCBpbnNpZGVDYW52YXMgPSByZXF1aXJlKCcuL3V0aWxzL2luc2lkZUNhbnZhcycpO1xuY29uc3Qga2V5cyA9IHJlcXVpcmUoJy4va2V5cycpO1xuXG5mdW5jdGlvbiBvbiAoZWxlbWVudCwgbmFtZSwgaGFuZGxlcikge1xuICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIobmFtZSwgaGFuZGxlcik7XG4gIHJldHVybiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKG5hbWUsIGhhbmRsZXIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBvc2l0aW9uKG5vZGUpe1xuICB2YXIgYm91bmRpbmdSZWN0ID0gbm9kZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICB4OiBib3VuZGluZ1JlY3QubGVmdCxcbiAgICB5OiBib3VuZGluZ1JlY3QudG9wXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldENvbXB1dGVkU3R5bGUobm9kZSl7XG4gIHJldHVybiB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShub2RlLCBudWxsKSB8fCB7fTtcbn1cblxuZnVuY3Rpb24gdG9QaXhlbCh2YWx1ZSl7XG4gIHJldHVybiBwYXJzZUZsb2F0KHZhbHVlKSB8fCAwO1xufVxuXG5mdW5jdGlvbiBnZXRNYXJnaW5FeHRlbnRzKG5vZGUpe1xuICB2YXIgc3R5bGUgPSBnZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICB2YXIgbCA9IHRvUGl4ZWwoc3R5bGUubWFyZ2luTGVmdCk7XG4gIHZhciB0ID0gdG9QaXhlbChzdHlsZS5tYXJnaW5Ub3ApO1xuICB2YXIgciA9IHRvUGl4ZWwoc3R5bGUubWFyZ2luUmlnaHQpO1xuICB2YXIgYiA9IHRvUGl4ZWwoc3R5bGUubWFyZ2luQm90dG9tKTtcbiAgcmV0dXJuIHtcbiAgICB3OiBsICsgcixcbiAgICBoOiB0ICsgYlxuICB9O1xufVxuXG5jbGFzcyBJbnB1dE1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogT2JqZWN0IG9mIGtleUFjdGlvbnMgYmVpbmcgbGlzdGVuZWQgZm9yXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmtleUFjdGlvbnMgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIE1vdXNlQWN0aW9uIHRvIGtlZXAgdHJhY2sgb2YgdGhlIG1vdXNlJ3Mgc3RhdGVcbiAgICAgKiBAdHlwZSB7TW91c2VBY3Rpb259XG4gICAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMubW91c2VBY3Rpb24gPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFRvdWNoQWN0aW9uIHRvIGtlZXAgdHJhY2sgb2YgdG91Y2ggZXZlbnRzXG4gICAgICogQHR5cGUge1RvdWNoQWN0aW9ufVxuICAgICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnRvdWNoQWN0aW9uID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBIVE1MNSBjYW52YXMgb24gd2hpY2ggdG8gbGlzdGVuIGZvciBldmVudHNcbiAgICAgKiBAdHlwZSB7Q2FudmFzfVxuICAgICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmNhbnZhcyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIG9yIG5vdCB0byBsaXN0ZW4gZm9yIG1vdXNlIGV2ZW50c1xuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKiBAZGVwcmVjYXRlZCBNb3VzZSBpcyBhbHdheXMgaGFuZGxlZCwgdXNlIGVtdWxhdGVNb3VzZSB0byBzcGVjaWZ5IGhvdyB0byBoYW5kbGUgaXRcbiAgICAgKi9cbiAgICB0aGlzLmhhbmRsZU1vdXNlID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgb3Igbm90IHRvIGxpc3RlbiBmb3IgdG91Y2ggZXZlbnRzXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqIEBkZXByZWNhdGVkIFRvdWNoIGlzIGFsd2F5cyBoYW5kbGVkLCB1c2UgZW11bGF0ZU1vdXNlIHRvIHNwZWNpZnkgaG93IHRvIGhhbmRsZSBpdFxuICAgICAqL1xuICAgIHRoaXMuaGFuZGxlVG91Y2ggPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdG8gbGlzdGVuIGZvciBrZXlib2FyZCBldmVudHNcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5oYW5kbGVLZXlzID0gdHJ1ZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBET00gZWxlbWVudCB0aGF0IGNvbnRhaW5zIHRoZSBnYW1lJ3MgY2FudmFzXG4gICAgICogQHR5cGUge0VsZW1lbnR9XG4gICAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZ2FtZUFyZWEgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHBlcmNlbnRhZ2UgKDAgdG8gMS4wKSBvZiB0aGUgaGVpZ2h0IGFuZCB3aWR0aCB0aGUgY2FudmFzIHNob3VsZCB1c2UgdG8gZmlsbCBpbiBpdHMgY29udGFpbmVyIERPTSBlbGVtZW50XG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5jYW52YXNQZXJjZW50YWdlID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEVtdWxhdGUgbW91c2UgZXZlbnRzIHdoZW4gdXNpbmcgdG91Y2hcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5lbXVsYXRlTW91c2UgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogSW5zdGFuY2Ugb2YgSGFtbWVyLmpzIC0gWW91IGNhbiBwYXNzIGluIGEgSGFtbWVyKCkgY29uc3RydWN0b3Igd2l0aCBvcHRpb25zIHRvIGN1c3RvbWl6ZSB5b3VyIEhhbW1lciBpbnN0YW5jZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdCBIYW1tZXIgaW5zdGFuY2UsIGJvdW5kIHRvIGRvY3VtZW50LCB3aXRoIHByZXZlbnRfZGVmYXVsdDogdHJ1ZSwgZHJhZ19tYXhfdG91Y2hlczogMCwgYW5kIGhvbGQ6IGZhbHNlXG4gICAgICovXG4gICAgdGhpcy5oYW1tZXIgPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblxuICAgIGlmKCF0aGlzLmhhbW1lcil7XG4gICAgICB0aGlzLmhhbW1lciA9IG5ldyBIYW1tZXIoZG9jdW1lbnQuYm9keSwge1xuICAgICAgICBwcmV2ZW50X2RlZmF1bHQ6IHRydWUsXG4gICAgICAgIGRyYWdfbWF4X3RvdWNoZXM6IDAsXG4gICAgICAgIC8vIEhvbGQgdXNlcyBzZXRUaW1lb3V0IHdoaWNoIGlzIHZlcnkgYmFkIGZvciBwZXJmb3JtYW5jZVxuICAgICAgICAvLyBUT0RPOiBEbyB3ZSB3YW50IHRvIGFsbG93IHRoaXMgdG8gYmUgb3ZlcnJpZGRlbj9cbiAgICAgICAgaG9sZDogZmFsc2VcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmKCF0aGlzLmtleUFjdGlvbnMpe1xuICAgICAgdGhpcy5rZXlBY3Rpb25zID0ge307XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2xlYW51cChoYW5kbGVyKXtcbiAgICAgIGhhbmRsZXIucmVtb3ZlKCk7XG4gICAgfVxuXG4gICAgaWYodGhpcy5oYW5kbGVLZXlzKXtcbiAgICAgIHRoaXMucHVzaENsZWFudXAob24oZG9jdW1lbnQsICdrZXlkb3duJywgdGhpcy5rZXlkb3duLmJpbmQodGhpcykpLCBjbGVhbnVwKTtcbiAgICAgIHRoaXMucHVzaENsZWFudXAob24oZG9jdW1lbnQsICdrZXl1cCcsIHRoaXMua2V5dXAuYmluZCh0aGlzKSksIGNsZWFudXApO1xuICAgIH1cblxuICAgIGlmKCdvbnRvdWNoc3RhcnQnIGluIGRvY3VtZW50KXtcbiAgICAgIHRoaXMucHVzaENsZWFudXAob24oZG9jdW1lbnQsICd0b3VjaHN0YXJ0JywgdGhpcy50b3VjaHN0YXJ0LmJpbmQodGhpcykpLCBjbGVhbnVwKTtcbiAgICAgIHRoaXMucHVzaENsZWFudXAob24oZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLnRvdWNobW92ZS5iaW5kKHRoaXMpKSwgY2xlYW51cCk7XG4gICAgICB0aGlzLnB1c2hDbGVhbnVwKG9uKGRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLnRvdWNoZW5kLmJpbmQodGhpcykpLCBjbGVhbnVwKTtcblxuICAgIH1cbiAgICBlbHNle1xuICAgICAgdGhpcy5wdXNoQ2xlYW51cChvbihkb2N1bWVudCwgJ21vdXNlZG93bicsIHRoaXMubW91c2Vkb3duLmJpbmQodGhpcykpLCBjbGVhbnVwKTtcbiAgICAgIHRoaXMucHVzaENsZWFudXAob24oZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLm1vdXNlbW92ZS5iaW5kKHRoaXMpKSwgY2xlYW51cCk7XG4gICAgICB0aGlzLnB1c2hDbGVhbnVwKG9uKGRvY3VtZW50LCAnbW91c2V1cCcsIHRoaXMubW91c2V1cC5iaW5kKHRoaXMpKSwgY2xlYW51cCk7XG4gICAgfVxuXG5cbiAgICBpZighdGhpcy5tb3VzZUFjdGlvbil7XG4gICAgICB0aGlzLm1vdXNlQWN0aW9uID0gbmV3IE1vdXNlQWN0aW9uKCk7XG4gICAgfVxuXG4gICAgaWYoIXRoaXMudG91Y2hBY3Rpb24pe1xuICAgICAgdGhpcy50b3VjaEFjdGlvbiA9IG5ldyBUb3VjaEFjdGlvbigpO1xuICAgIH1cblxuICAgIGlmKHRoaXMuZW11bGF0ZU1vdXNlKXtcblxuICAgICAgLy9kYSBoZWxsIGhhbW1lciwgZ290dGEgZG8gdGhpcyBvdXJzZXZsZXMgbm93P1xuXG4gICAgICAvLyB0aGlzLm9uKCd0b3VjaCcsIHRoaXMubW91c2Vkb3duLmJpbmQodGhpcykpO1xuICAgICAgLy8gdGhpcy5vbignZHJhZycsIHRoaXMubW91c2Vtb3ZlLmJpbmQodGhpcykpO1xuICAgICAgLy8gdGhpcy5vbigncmVsZWFzZScsIHRoaXMubW91c2V1cC5iaW5kKHRoaXMpKTtcblxuICAgIH0gZWxzZSB7XG5cbiAgICAgIC8vZGEgaGVsbCBoYW1tZXIsIGdvdHRhIGRvIHRoaXMgb3Vyc2V2bGVzIG5vdz9cbiAgICAgIC8vIHRoaXMub24oJ3RvdWNoJywgdGhpcy50b3VjaHN0YXJ0LmJpbmQodGhpcykpO1xuICAgICAgLy8gdGhpcy5vbignZHJhZycsIHRoaXMudG91Y2htb3ZlLmJpbmQodGhpcykpO1xuICAgICAgLy8gdGhpcy5vbigncmVsZWFzZScsIHRoaXMudG91Y2hlbmQuYmluZCh0aGlzKSk7XG5cbiAgICB9XG5cbiAgICBpZih0aGlzLmdhbWVBcmVhICYmIHRoaXMuY2FudmFzUGVyY2VudGFnZSl7XG4gICAgICB2YXIgaGFuZGxlciA9IHRoaXMucmVzaXplLmJpbmQodGhpcyk7XG5cbiAgICAgIC8vIExpc3RlbiBmb3IgcmVzaXplIGNoYW5nZXNcblxuICAgICAgdGhpcy5wdXNoQ2xlYW51cChvbih3aW5kb3csICdyZXNpemUnLCBoYW5kbGVyKSwgY2xlYW51cCk7XG4gICAgICB0aGlzLnB1c2hDbGVhbnVwKG9uKHdpbmRvdywgJ29yaWVudGF0aW9uY2hhbmdlJywgaGFuZGxlciksIGNsZWFudXApO1xuICAgIH1cblxuICAgIHRoaXMubm9ybWFsaXplUG9pbnQgPSB0aGlzLm5vcm1hbGl6ZVBvaW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5pbnNpZGVDYW52YXMgPSB0aGlzLmluc2lkZUNhbnZhcy5iaW5kKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyB5b3UgdG8gYmluZCBvdGhlciBIYW1tZXIuanMgZXZlbnRzIChzdWNoIGFzIFN3aXBlIG9yIERvdWJsZXRhcCk7XG4gICAqIFdhcm5pbmc6IE9ubHkgc2V0IGZsYWdzIG9yIHZhcmlhYmxlcyBpbiB0aGlzIGhhbmRsZXIsIG90aGVyd2lzZSB5b3VyIGdhbWUgbWlnaHQgYmVjb21lIHNsb3dcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge1N0cmluZ30gZ2VzdHVyZSBUaGUgZ2VzdHVyZSB0byBiaW5kXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBoYW5kbGVyIEV2ZW50IGhhbmRsZXIgY2FsbGJhY2tcbiAgICogQHJldHVybiB7T2JqZWN0fSBPYmplY3QgY29udGFpbmluZyB0aGUgcmVtb3ZlIGZ1bmN0aW9uIGZvciByZW1vdmluZyB0aGUgZXZlbnQuXG4gICAqL1xuICBvbihnZXN0dXJlLCBoYW5kbGVyKXtcbiAgICB2YXIgaGFtbWVyID0gdGhpcy5oYW1tZXI7XG4gICAgdmFyIHJlbW92ZUNsZWFudXAgPSB0aGlzLnJlbW92ZUNsZWFudXA7XG5cbiAgICBoYW1tZXIub24oZ2VzdHVyZSwgaGFuZGxlcik7XG4gICAgdmFyIGNsZWFudXAgPSB0aGlzLnB1c2hDbGVhbnVwKFtnZXN0dXJlLCBoYW5kbGVyXSwgZnVuY3Rpb24oYXJncyl7XG4gICAgICBoYW1tZXIub2ZmLmFwcGx5KGhhbW1lciwgYXJncyk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVtb3ZlOiBmdW5jdGlvbigpe1xuICAgICAgICByZW1vdmVDbGVhbnVwKGNsZWFudXApO1xuICAgICAgICBjbGVhbnVwKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmUgd2hldGhlciBhIHBvaW50IGlzIHdpdGhpbiB0aGUgSW5wdXRNYW5hZ2VyJ3MgY2FudmFzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtQb2ludH0gcG9pbnQgUG9pbnQgdG8gdGVzdFxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgcG9pbnQgaXMgaW5zaWRlIHRoaXMgSW5wdXRNYW5hZ2VyJ3MgY2FudmFzXG4gICAqL1xuICBpbnNpZGVDYW52YXMocG9pbnQpe1xuICAgIHJldHVybiBpbnNpZGVDYW52YXMocG9pbnQsIHRoaXMuY2FudmFzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNYXBzIGEgR2FtZUFjdGlvbiB0byBhIHNwZWNpZmljIGtleS4gVGhlIGtleSBjb2RlcyBhcmUgZGVmaW5lZCBpbiBkb2pvLmtleXMuXG4gICAqIElmIHRoZSBrZXkgYWxyZWFkeSBoYXMgYSBHYW1lQWN0aW9uIG1hcHBlZCB0byBpdCwgdGhlIG5ldyBHYW1lQWN0aW9uIG92ZXJ3cml0ZXMgaXQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0ge0dhbWVBY3Rpb259IGdhbWVBY3Rpb24gdGhlIEdhbWVBY3Rpb24gdG8gbWFwXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBrZXlDb2RlIGRvam8ua2V5cyBrZXkgY29kZSwgb3IgY2hhcmFjdGVyXG4gICAqL1xuICBtYXBUb0tleShnYW1lQWN0aW9uLCBrZXlDb2RlKXtcbiAgICB0aGlzLmtleUFjdGlvbnNba2V5Q29kZV0gPSBnYW1lQWN0aW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBHYW1lQWN0aW9uIHRvIGEga2V5XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0ge09iamVjdH0ga2V5Q29kZSBLZXkgY2hhcmFjdGVyIG9yIGRvam8va2V5cyBrZXkgY29kZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW49fSBpbml0aWFsUHJlc3NPbmx5IERvIG9ubHkgb25lIGZpcmUgb2YgdGhlIGFjdGlvbiBwZXIga2V5cHJlc3NcbiAgICogQHJldHVybiB7R2FtZUFjdGlvbn0gR2FtZUFjdGlvbiB0aGF0IGlzIG1hcHBlZCB0byBrZXlDb2RlXG4gICAqL1xuICBhZGRLZXlBY3Rpb24oa2V5Q29kZSwgaW5pdGlhbFByZXNzT25seSl7XG4gICAgdmFyIGdhID0gbmV3IEdhbWVBY3Rpb24oKTtcbiAgICBpZihpbml0aWFsUHJlc3NPbmx5KXtcbiAgICAgIGdhLmJlaGF2aW9yID0gZ2EuZGV0ZWN0SW5pdGlhbFByZXNzT25seTtcbiAgICB9XG4gICAgdGhpcy5tYXBUb0tleShnYSxrZXlDb2RlKTtcblxuICAgIHJldHVybiBnYTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGRzIGFycm93IGtleSBHYW1lQWN0aW9uc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICovXG4gIGFkZEFycm93S2V5QWN0aW9ucygpe1xuICAgIHRoaXMuYWRkS2V5QWN0aW9uKGtleXMuVVApO1xuICAgIHRoaXMuYWRkS2V5QWN0aW9uKGtleXMuRE9XTik7XG4gICAgdGhpcy5hZGRLZXlBY3Rpb24oa2V5cy5MRUZUKTtcbiAgICB0aGlzLmFkZEtleUFjdGlvbihrZXlzLlJJR0hUKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBtb3VzZXVwIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBsb3dlcmNhc2UgbmFtZSBpbnN0ZWFkIC0gc2FtZSBzeW50YXggYXMgbm9ybWFsIGV2ZW50IGhhbmRsaW5nXG4gICAqL1xuICBtb3VzZVVwKGUpIHtcbiAgICB0aGlzLm1vdXNldXAoZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gbW91c2V1cCBldmVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqL1xuICBtb3VzZXVwKGUpe1xuICAgIHRoaXMubW91c2VBY3Rpb24ucmVsZWFzZSh0aGlzLm5vcm1hbGl6ZVBvaW50KGUpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBtb3VzZWRvd24gZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGxvd2VyY2FzZSBuYW1lIGluc3RlYWQgLSBzYW1lIHN5bnRheCBhcyBub3JtYWwgZXZlbnQgaGFuZGxpbmdcbiAgICovXG4gIG1vdXNlRG93bihlKXtcbiAgICB0aGlzLm1vdXNlZG93bihlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBtb3VzZWRvd24gZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgbW91c2Vkb3duKGUpe1xuICAgIC8vIEVuc3VyZSBtb3VzZSBoYXMgYmVlbiByZWxlYXNlZFxuICAgIHRoaXMubW91c2VBY3Rpb24ucmVsZWFzZShudWxsKTtcbiAgICB2YXIgY3VycmVudFBvaW50ID0gdGhpcy5ub3JtYWxpemVQb2ludChlKTtcbiAgICB0aGlzLm1vdXNlQWN0aW9uLmluc2lkZUNhbnZhcyA9IHRoaXMuaW5zaWRlQ2FudmFzKGN1cnJlbnRQb2ludCk7XG4gICAgdGhpcy5tb3VzZUFjdGlvbi5wcmVzcyhjdXJyZW50UG9pbnQpO1xuICB9XG5cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gbW91c2Vtb3ZlIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBsb3dlcmNhc2UgbmFtZSBpbnN0ZWFkIC0gc2FtZSBzeW50YXggYXMgbm9ybWFsIGV2ZW50IGhhbmRsaW5nXG4gICAqL1xuICBtb3VzZU1vdmUoZSl7XG4gICAgdGhpcy5tb3VzZW1vdmUoZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gbW91c2Vtb3ZlIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIG1vdXNlbW92ZShlKXtcbiAgICB0aGlzLm1vdXNlQWN0aW9uLnBvc2l0aW9uID0gdGhpcy5ub3JtYWxpemVQb2ludChlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiB0b3VjaHN0YXJ0IGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgVXNlIHRoZSBsb3dlcmNhc2UgbmFtZSBpbnN0ZWFkIC0gc2FtZSBzeW50YXggYXMgbm9ybWFsIGV2ZW50IGhhbmRsaW5nXG4gICAqL1xuICB0b3VjaFN0YXJ0KGUpe1xuICAgIHRoaXMudG91Y2hzdGFydChlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiB0b3VjaHN0YXJ0IGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIHRvdWNoc3RhcnQoZSl7XG4gICAgLy8gRW5zdXJlIHRvdWNoIGhhcyBiZWVuIHJlbGVhc2VkXG4gICAgdGhpcy50b3VjaEFjdGlvbi5yZWxlYXNlKG51bGwpO1xuICAgIGNvbnNvbGUubG9nKGUudG91Y2hlcywgZSk7XG4gICAgLy9Ub3VjaExpc3QgZG9lc24ndCBpbXBsZW1lbnQgLm1hcCgpXG4gICAgY29uc3QgY3VycmVudFBvaW50cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS50b3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50UG9pbnRzLnB1c2godGhpcy5ub3JtYWxpemVQb2ludChlLnRvdWNoZXNbaV0pKTtcbiAgICB9XG4gICAgdGhpcy50b3VjaEFjdGlvbi5pbnNpZGVDYW52YXMgPSBjdXJyZW50UG9pbnRzLnNvbWUodGhpcy5pbnNpZGVDYW52YXMpO1xuICAgIHRoaXMudG91Y2hBY3Rpb24ucHJlc3MoY3VycmVudFBvaW50cyk7XG4gICAgaWYodGhpcy5lbXVsYXRlTW91c2Upe1xuICAgICAgdGhpcy5tb3VzZWRvd24oZS50b3VjaGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdG91Y2hlbmQgZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGxvd2VyY2FzZSBuYW1lIGluc3RlYWQgLSBzYW1lIHN5bnRheCBhcyBub3JtYWwgZXZlbnQgaGFuZGxpbmdcbiAgICovXG4gIHRvdWNoRW5kKGUpe1xuICAgIHRoaXMudG91Y2hlbmQoZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdG91Y2hlbmQgZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgdG91Y2hlbmQoZSl7XG4gICAgLy9Ub3VjaExpc3QgZG9lc24ndCBpbXBsZW1lbnQgLm1hcCgpXG4gICAgY29uc3QgY3VycmVudFBvaW50cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZS50b3VjaGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjdXJyZW50UG9pbnRzLnB1c2godGhpcy5ub3JtYWxpemVQb2ludChlLnRvdWNoZXNbaV0pKTtcbiAgICB9XG4gICAgdGhpcy50b3VjaEFjdGlvbi5yZWxlYXNlKGN1cnJlbnRQb2ludHMpO1xuICAgIGlmKHRoaXMuZW11bGF0ZU1vdXNlKXtcbiAgICAgIHRoaXMubW91c2VVcChlLnRvdWNoZXNbMF0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiB0b3VjaG1vdmUgZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGxvd2VyY2FzZSBuYW1lIGluc3RlYWQgLSBzYW1lIHN5bnRheCBhcyBub3JtYWwgZXZlbnQgaGFuZGxpbmdcbiAgICovXG4gIHRvdWNoTW92ZShlKXtcbiAgICB0aGlzLnRvdWNobW92ZShlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiB0b3VjaG1vdmUgZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAgdG91Y2htb3ZlKGUpe1xuICAgIC8vVG91Y2hMaXN0IGRvZXNuJ3QgaW1wbGVtZW50IC5tYXAoKVxuICAgIGNvbnN0IGN1cnJlbnRQb2ludHMgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGUudG91Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgY3VycmVudFBvaW50cy5wdXNoKHRoaXMubm9ybWFsaXplUG9pbnQoZS50b3VjaGVzW2ldKSk7XG4gICAgfVxuICAgIHRoaXMudG91Y2hBY3Rpb24ucG9zaXRpb25zID0gY3VycmVudFBvaW50cztcbiAgICBpZih0aGlzLnRvdWNoQWN0aW9uLnN0YXJ0UG9zaXRpb25zKXtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gICAgaWYodGhpcy5lbXVsYXRlTW91c2Upe1xuICAgICAgdGhpcy5tb3VzZW1vdmUoZS50b3VjaGVzWzBdKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0cmlldmVzIHRoZSBHYW1lQWN0aW9uIGFzc29jaWF0ZWQgd2l0aCB0aGUga2V5Q29kZSBvbiB0aGUgZXZlbnQgb2JqZWN0XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQHJldHVybiB7R2FtZUFjdGlvbnxudWxsfSBUaGUgR2FtZUFjdGlvbiBhc3NvY2lhdGVkIHdpdGggdGhlIGtleUNvZGUgZWxzZSBudWxsXG4gICAqL1xuICBnZXRLZXlBY3Rpb24oZSkge1xuICAgIGlmICh0aGlzLmtleUFjdGlvbnMpIHtcbiAgICAgIHJldHVybiB0aGlzLmtleUFjdGlvbnNbZS5rZXlDb2RlXSB8fCB0aGlzLmtleUFjdGlvbnNbU3RyaW5nLmZyb21DaGFyQ29kZShlLmtleUNvZGUpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGtleXByZXNzIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICogQGRlcHJlY2F0ZWQgVXNlIGtleWRvd24gaW5zdGVhZCAtIHNhbWUgc3ludGF4IGFzIG5vcm1hbCBldmVudCBoYW5kbGluZ1xuICAgKi9cbiAga2V5UHJlc3NlZChlKSB7XG4gICAgdGhpcy5rZXlkb3duKGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGtleWRvd24gZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKiBAZGVwcmVjYXRlZCBVc2UgdGhlIGxvd2VyY2FzZSBuYW1lIGluc3RlYWQgLSBzYW1lIHN5bnRheCBhcyBub3JtYWwgZXZlbnQgaGFuZGxpbmdcbiAgICovXG4gIGtleURvd24oZSl7XG4gICAgdGhpcy5rZXlkb3duKGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGtleWRvd24gZXZlbnRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBlIEV2ZW50IG9iamVjdFxuICAgKi9cbiAga2V5ZG93bihlKSB7XG4gICAgdmFyIGdhbWVBY3Rpb24gPSB0aGlzLmdldEtleUFjdGlvbihlKTtcbiAgICBpZiAoZ2FtZUFjdGlvbiAmJiAhZ2FtZUFjdGlvbi5pc1ByZXNzZWQoKSkge1xuICAgICAgZ2FtZUFjdGlvbi5wcmVzcygpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBrZXl1cCBldmVudFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIElucHV0TWFuYWdlciNcbiAgICogQHBhcmFtICB7RXZlbnR9IGUgRXZlbnQgb2JqZWN0XG4gICAqIEBkZXByZWNhdGVkIFVzZSBrZXl1cCBpbnN0ZWFkIC0gc2FtZSBzeW50YXggYXMgbm9ybWFsIGV2ZW50IGhhbmRsaW5nXG4gICAqL1xuICBrZXlSZWxlYXNlZChlKXtcbiAgICB0aGlzLmtleXVwKGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGtleXVwIGV2ZW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtFdmVudH0gZSBFdmVudCBvYmplY3RcbiAgICovXG4gIGtleXVwKGUpIHtcbiAgICB2YXIgZ2FtZUFjdGlvbiA9IHRoaXMuZ2V0S2V5QWN0aW9uKGUpO1xuICAgIGlmIChnYW1lQWN0aW9uKSB7XG4gICAgICBnYW1lQWN0aW9uLnJlbGVhc2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBnZXQgYSBub3JtYWxpemVkIHBvaW50IG91dCBvZiBhbiBFdmVudCBvYmplY3RcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBldnQgRXZlbnQgb2JqZWN0XG4gICAqIEByZXR1cm4ge1BvaW50fSBOb3JtYWxpemVkIHBvaW50XG4gICAqIEBkZXByZWNhdGVkIERlcHJlY2F0ZWQgaW4gZmF2b3Igb2Ygbm9ybWFsaXplUG9pbnQgZnVuY3Rpb24gKFNhbWUgZnVuY3Rpb25hbGl0eSwgZGlmZmVyZW50IG5hbWUpXG4gICAqL1xuICBnZXRNb3VzZUxvYyhldnQpe1xuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVBvaW50KGV2dCk7XG4gIH1cblxuICAvKipcbiAgICogVXNlZCB0byBnZXQgYSBub3JtYWxpemVkIHBvaW50IG91dCBvZiBhbiBFdmVudCBvYmplY3RcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBJbnB1dE1hbmFnZXIjXG4gICAqIEBwYXJhbSAge0V2ZW50fSBldnQgRXZlbnQgb2JqZWN0XG4gICAqIEByZXR1cm4ge1BvaW50fSBOb3JtYWxpemVkIHBvaW50XG4gICAqL1xuICBub3JtYWxpemVQb2ludChldnQpe1xuICAgIGlmKGV2dCl7XG4gICAgICB2YXIgY29vcmRzTSA9IHBvc2l0aW9uKHRoaXMuY2FudmFzKTtcbiAgICAgIGlmKHRoaXMuem9vbVJhdGlvKXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiBNYXRoLnJvdW5kKChldnQuY2xpZW50WCAtIGNvb3Jkc00ueCkgLyB0aGlzLnpvb21SYXRpbyksXG4gICAgICAgICAgeTogTWF0aC5yb3VuZCgoZXZ0LmNsaWVudFkgLSBjb29yZHNNLnkpIC8gdGhpcy56b29tUmF0aW8pXG4gICAgICAgIH07XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB4OiBNYXRoLnJvdW5kKGV2dC5jbGllbnRYIC0gY29vcmRzTS54KSxcbiAgICAgICAgICB5OiBNYXRoLnJvdW5kKGV2dC5jbGllbnRZIC0gY29vcmRzTS55KVxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIHJlc2l6ZSB0aGUgY2FudmFzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgSW5wdXRNYW5hZ2VyI1xuICAgKi9cbiAgcmVzaXplKCl7XG4gICAgaWYodGhpcy5nYW1lQXJlYSAmJiB0aGlzLmNhbnZhc1BlcmNlbnRhZ2UgJiYgdGhpcy5jYW52YXMpe1xuICAgICAgdmFyIGNhbnZhc1dpZHRoID0gdGhpcy5jYW52YXMud2lkdGg7XG4gICAgICB2YXIgY2FudmFzSGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0O1xuXG4gICAgICB2YXIgYm9keU1hcmdpbnMgPSBnZXRNYXJnaW5FeHRlbnRzKGRvY3VtZW50LmJvZHkpO1xuXG4gICAgICB2YXIgbmV3V2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aCAtIGJvZHlNYXJnaW5zLnc7XG4gICAgICB2YXIgbmV3SGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0IC0gYm9keU1hcmdpbnMuaDtcblxuICAgICAgdmFyIHdpZHRoVG9IZWlnaHQgPSBjYW52YXNXaWR0aCAvIGNhbnZhc0hlaWdodDtcbiAgICAgIHZhciBuZXdXaWR0aFRvSGVpZ2h0ID0gbmV3V2lkdGggLyBuZXdIZWlnaHQ7XG5cbiAgICAgIHZhciBuZXdXaWR0aFN0eWxlID0gJyc7XG4gICAgICB2YXIgbmV3SGVpZ2h0U3R5bGUgPSAnJztcbiAgICAgIGlmIChuZXdXaWR0aFRvSGVpZ2h0ID4gd2lkdGhUb0hlaWdodCkge1xuICAgICAgICBuZXdXaWR0aCA9IG5ld0hlaWdodCAqIHdpZHRoVG9IZWlnaHQ7XG4gICAgICAgIG5ld1dpZHRoU3R5bGUgPSBuZXdXaWR0aCArICdweCc7XG4gICAgICAgIG5ld0hlaWdodFN0eWxlID0gbmV3SGVpZ2h0ICsgJ3B4JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld1dpZHRoU3R5bGUgPSBuZXdXaWR0aCArICdweCc7XG4gICAgICAgIG5ld0hlaWdodFN0eWxlID0gTWF0aC5yb3VuZChuZXdXaWR0aCAvIHdpZHRoVG9IZWlnaHQpICsgJ3B4JztcbiAgICAgIH1cblxuICAgICAgdGhpcy56b29tUmF0aW8gPSBuZXdXaWR0aCAvIGNhbnZhc1dpZHRoICogdGhpcy5jYW52YXNQZXJjZW50YWdlO1xuXG4gICAgICB0aGlzLmdhbWVBcmVhLnN0eWxlLndpZHRoID0gbmV3V2lkdGhTdHlsZTtcbiAgICAgIHRoaXMuZ2FtZUFyZWEuc3R5bGUuaGVpZ2h0ID0gbmV3SGVpZ2h0U3R5bGU7XG5cbiAgICAgIHZhciBjYW52YXNQZXJjZW50YWdlU3R5bGUgPSBNYXRoLmZsb29yKHRoaXMuY2FudmFzUGVyY2VudGFnZSAqIDEwMCkgKyAnJSc7XG4gICAgICB0aGlzLmNhbnZhcy5zdHlsZS53aWR0aCA9IGNhbnZhc1BlcmNlbnRhZ2VTdHlsZTtcbiAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmhlaWdodCA9IGNhbnZhc1BlcmNlbnRhZ2VTdHlsZTtcbiAgICAgIHRoaXMuY2FudmFzLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuICAgICAgdGhpcy5jYW52YXMuc3R5bGUubWFyZ2luTGVmdCA9ICdhdXRvJztcbiAgICAgIHRoaXMuY2FudmFzLnN0eWxlLm1hcmdpblJpZ2h0ID0gJ2F1dG8nO1xuICAgIH1cbiAgfVxuXG4gIHB1c2hDbGVhbnVwKGEsIGIpe1xuICAgIC8vIGNvbnNvbGUubG9nKCdwdXNoQ2xlYW51cCcsIGEsIGIpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBJbnB1dE1hbmFnZXI7XG4iLCIvKipcbiAqIEEgR2FtZUFjdGlvbiB0aGF0IGhhbmRsZXMgVG91Y2ggZXZlbnRzXG4gKiBAbmFtZSBUb3VjaEFjdGlvblxuICogQGNvbnN0cnVjdG9yIFRvdWNoQWN0aW9uXG4gKiBAZXh0ZW5kcyB7R2FtZUFjdGlvbn1cbiAqL1xuXG5jb25zdCBHYW1lQWN0aW9uID0gcmVxdWlyZSgnLi9HYW1lQWN0aW9uJyk7XG5cbmNsYXNzIFRvdWNoQWN0aW9uIGV4dGVuZHMgR2FtZUFjdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBwb3NpdGlvbnMgd2hlcmUgdG91Y2hzdGFydCBoYXBwZW5lZFxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKiBAbWVtYmVyT2YgVG91Y2hBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnN0YXJ0UG9zaXRpb25zID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEFycmF5IG9mIHBvc2l0aW9ucyB3aGVyZSB0b3VjaGVuZCBoYXBwZW5lZFxuICAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAgKiBAbWVtYmVyT2YgVG91Y2hBY3Rpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmVuZFBvc2l0aW9ucyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBcnJheSBvZiBwb3NpdGlvbnMgd2hlcmUgdG91Y2htb3ZlIGhhcHBlbmVkXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqIEBtZW1iZXJPZiBUb3VjaEFjdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb25zID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdldGhlciBhbnkgb2YgdGhlIHRvdWNoIGFjdGlvbnMgb3JpZ2luYXRlZCBpbnNpZGUgdGhlIGNhbnZhc1xuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBtZW1iZXJPZiBUb3VjaEFjdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaW5zaWRlQ2FudmFzID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIHRoYXQgdGhlIHRvdWNoIHdhcyBpbml0aWF0ZWQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgVG91Y2hBY3Rpb24jXG4gICAqIEBwYXJhbSB7QXJyYXl9IHN0YXJ0UG9zaXRpb25zIEFycmF5IG9mIHBvaW50cyB3aGVyZSB0b3VjaCB3YXMgcHJlc3NlZFxuICAgKi9cbiAgcHJlc3Moc3RhcnRQb3NpdGlvbnMpe1xuICAgIHRoaXMuc3RhcnRQb3NpdGlvbnMgPSBzdGFydFBvc2l0aW9ucztcbiAgICB0aGlzLnBvc2l0aW9ucyA9IHN0YXJ0UG9zaXRpb25zO1xuICAgIHN1cGVyLnByZXNzKHN0YXJ0UG9zaXRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIHRoYXQgdGhlIHRvdWNoIHdhcyByZWxlYXNlZFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFRvdWNoQWN0aW9uI1xuICAgKiBAcGFyYW0ge0FycmF5fSBlbmRQb3NpdGlvbnMgQXJyYXkgb2YgcG9pbnRzIHdoZXJlIHRvdWNoIHdhcyByZWxlYXNlZFxuICAgKi9cbiAgcmVsZWFzZShlbmRQb3NpdGlvbnMpe1xuICAgIHRoaXMuZW5kUG9zaXRpb25zID0gZW5kUG9zaXRpb25zO1xuICAgIHN1cGVyLnJlbGVhc2UoZW5kUG9zaXRpb25zKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRvdWNoQWN0aW9uO1xuIiwiLyoqXG4gKiBBIEdhbWVBY3Rpb24gdGhhdCBoYW5kbGVzIE1vdXNlIGV2ZW50c1xuICogQG5hbWUgTW91c2VBY3Rpb25cbiAqIEBjb25zdHJ1Y3RvciBNb3VzZUFjdGlvblxuICogQGV4dGVuZHMge0dhbWVBY3Rpb259XG4gKi9cblxuY29uc3QgR2FtZUFjdGlvbiA9IHJlcXVpcmUoJy4vR2FtZUFjdGlvbicpO1xuXG5jbGFzcyBNb3VzZUFjdGlvbiBleHRlbmRzIEdhbWVBY3Rpb24ge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gd2hlcmUgbW91c2Vkb3duIGhhcHBlbmVkXG4gICAgICogQHR5cGUge1BvaW50fVxuICAgICAqIEBtZW1iZXJPZiBNb3VzZUFjdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuc3RhcnRQb3NpdGlvbiA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBQb3NpdGlvbiB3aGVyZSBtb3VzZXVwIGhhcHBlbmVkXG4gICAgICogQHR5cGUge1BvaW50fVxuICAgICAqIEBtZW1iZXJPZiBNb3VzZUFjdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZW5kUG9zaXRpb24gPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gd2hlcmUgbW91c2Vtb3ZlIGhhcHBlbmVkXG4gICAgICogQHR5cGUge1BvaW50fVxuICAgICAqIEBtZW1iZXJPZiBNb3VzZUFjdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMucG9zaXRpb24gPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogV2V0aGVyIHRoZSBtb3VzZSBhY3Rpb24gb3JpZ2luYXRlZCBpbnNpZGUgdGhlIGNhbnZhc1xuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBtZW1iZXJPZiBNb3VzZUFjdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaW5zaWRlQ2FudmFzID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBTaWduYWxzIHRoYXQgdGhlIG1vdXNlIHdhcyBwcmVzc2VkLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEdhbWVBY3Rpb24jXG4gICAqL1xuICBwcmVzcyhzdGFydFBvc2l0aW9uKXtcbiAgICB0aGlzLnN0YXJ0UG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xuICAgIHRoaXMucG9zaXRpb24gPSBzdGFydFBvc2l0aW9uO1xuICAgIHN1cGVyLnByZXNzKHN0YXJ0UG9zaXRpb24pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNpZ25hbHMgdGhhdCB0aGUgbW91c2Ugd2FzIHJlbGVhc2VkXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgTW91c2VBY3Rpb24jXG4gICAqIEBwYXJhbSAge1BvaW50fSBlbmRQb3NpdGlvbiBUaGUgcG9pbnQgd2hlcmUgbW91c2Ugd2FzIHJlbGVhc2VkXG4gICAqL1xuICByZWxlYXNlKGVuZFBvc2l0aW9uKXtcbiAgICB0aGlzLmVuZFBvc2l0aW9uID0gZW5kUG9zaXRpb24gfHwgdGhpcy5wb3NpdGlvbjtcbiAgICBzdXBlci5yZWxlYXNlKGVuZFBvc2l0aW9uKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE1vdXNlQWN0aW9uO1xuIiwiZnVuY3Rpb24gaW5zaWRlQ2FudmFzKHB0LCBjYW52YXMpe1xuICBpZigocHQueCA8IDApIHx8IChwdC54ID4gIGNhbnZhcy53aWR0aCkgfHwgKHB0LnkgPCAwKSB8fCAocHQueSA+IGNhbnZhcy5oZWlnaHQpKXtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNpZGVDYW52YXM7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ0FOQ0VMOiAzLFxuICBIRUxQOiA2LFxuICBCQUNLX1NQQUNFOiA4LFxuICBUQUI6IDksXG4gIENMRUFSOiAxMixcbiAgUkVUVVJOOiAxMyxcbiAgRU5URVI6IDE0LFxuICBTSElGVDogMTYsXG4gIENPTlRST0w6IDE3LFxuICBBTFQ6IDE4LFxuICBQQVVTRTogMTksXG4gIENBUFNfTE9DSzogMjAsXG4gIEVTQ0FQRTogMjcsXG4gIFNQQUNFOiAzMixcbiAgUEFHRV9VUDogMzMsXG4gIFBBR0VfRE9XTjogMzQsXG4gIEVORDogMzUsXG4gIEhPTUU6IDM2LFxuICBMRUZUOiAzNyxcbiAgVVA6IDM4LFxuICBSSUdIVDogMzksXG4gIERPV046IDQwLFxuICBQUklOVFNDUkVFTjogNDQsXG4gIElOU0VSVDogNDUsXG4gIERFTEVURTogNDYsXG4gIE5VTTA6IDQ4LFxuICBOVU0xOiA0OSxcbiAgTlVNMjogNTAsXG4gIE5VTTM6IDUxLFxuICBOVU00OiA1MixcbiAgTlVNNTogNTMsXG4gIE5VTTY6IDU0LFxuICBOVU03OiA1NSxcbiAgTlVNODogNTYsXG4gIE5VTTk6IDU3LFxuICBTRU1JQ09MT046IDU5LFxuICBFUVVBTFM6IDYxLFxuICBBOiA2NSxcbiAgQjogNjYsXG4gIEM6IDY3LFxuICBEOiA2OCxcbiAgRTogNjksXG4gIEY6IDcwLFxuICBHOiA3MSxcbiAgSDogNzIsXG4gIEk6IDczLFxuICBKOiA3NCxcbiAgSzogNzUsXG4gIEw6IDc2LFxuICBNOiA3NyxcbiAgTjogNzgsXG4gIE86IDc5LFxuICBQOiA4MCxcbiAgUTogODEsXG4gIFI6IDgyLFxuICBTOiA4MyxcbiAgVDogODQsXG4gIFU6IDg1LFxuICBWOiA4NixcbiAgVzogODcsXG4gIFg6IDg4LFxuICBZOiA4OSxcbiAgWjogOTAsXG4gIENPTlRFWFRfTUVOVTogOTMsXG4gIE5VTVBBRDA6IDk2LFxuICBOVU1QQUQxOiA5NyxcbiAgTlVNUEFEMjogOTgsXG4gIE5VTVBBRDM6IDk5LFxuICBOVU1QQUQ0OiAxMDAsXG4gIE5VTVBBRDU6IDEwMSxcbiAgTlVNUEFENjogMTAyLFxuICBOVU1QQUQ3OiAxMDMsXG4gIE5VTVBBRDg6IDEwNCxcbiAgTlVNUEFEOTogMTA1LFxuICBNVUxUSVBMWTogMTA2LFxuICBBREQ6IDEwNyxcbiAgU0VQQVJBVE9SOiAxMDgsXG4gIFNVQlRSQUNUOiAxMDksXG4gIERFQ0lNQUw6IDExMCxcbiAgRElWSURFOiAxMTEsXG4gIEYxOiAxMTIsXG4gIEYyOiAxMTMsXG4gIEYzOiAxMTQsXG4gIEY0OiAxMTUsXG4gIEY1OiAxMTYsXG4gIEY2OiAxMTcsXG4gIEY3OiAxMTgsXG4gIEY4OiAxMTksXG4gIEY5OiAxMjAsXG4gIEYxMDogMTIxLFxuICBGMTE6IDEyMixcbiAgRjEyOiAxMjMsXG4gIEYxMzogMTI0LFxuICBGMTQ6IDEyNSxcbiAgRjE1OiAxMjYsXG4gIEYxNjogMTI3LFxuICBGMTc6IDEyOCxcbiAgRjE4OiAxMjksXG4gIEYxOTogMTMwLFxuICBGMjA6IDEzMSxcbiAgRjIxOiAxMzIsXG4gIEYyMjogMTMzLFxuICBGMjM6IDEzNCxcbiAgRjI0OiAxMzUsXG4gIE5VTV9MT0NLOiAxNDQsXG4gIFNDUk9MTF9MT0NLOiAxNDUsXG4gIFVQX0RQQUQ6IDE3NSxcbiAgRE9XTl9EUEFEOiAxNzYsXG4gIExFRlRfRFBBRDogMTc3LFxuICBSSUdIVF9EUEFEOiAxNzgsXG4gIENPTU1BOiAxODgsXG4gIFBFUklPRDogMTkwLFxuICBTTEFTSDogMTkxLFxuICBCQUNLX1FVT1RFOiAxOTIsXG4gIE9QRU5fQlJBQ0tFVDogMjE5LFxuICBCQUNLX1NMQVNIOiAyMjAsXG4gIENMT1NFX0JSQUNLRVQ6IDIyMSxcbiAgUVVPVEU6IDIyMixcbiAgTUVUQTogMjI0XG59O1xuIiwiLyoqXG4gKiBUaGUgUmVzb3VyY2VNYW5hZ2VyIGhhbmRsZXMgbG9hZGluZyBpbWFnZXMgYW5kIHNvdW5kcyBmb3IgdXNlIGluIGdhbWVzLlxuICogQG5hbWUgUmVzb3VyY2VNYW5hZ2VyXG4gKiBAY29uc3RydWN0b3IgUmVzb3VyY2VNYW5hZ2VyXG4gKi9cblxuICd1c2Ugc3RyaWN0JztcblxuY29uc3QgaGFzID0gcmVxdWlyZSgnLi9oYXMnKTtcbmNvbnN0IFNvdW5kID0gcmVxdWlyZSgnLi9zb3VuZHMvU291bmQnKTtcbmNvbnN0IFdlYkF1ZGlvID0gcmVxdWlyZSgnLi9zb3VuZHMvV2ViQXVkaW8nKTtcblxudmFyIHJlc291cmNlTGlzdCA9IHt9O1xuXG4vL1RPRE86IG1vdmUgdGhlc2UgdG8gaXRzIG93biBtb2R1bGUgZm9yIHVuaXQgdGVzdGluZz9cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgoYmFzZURpciwgcGF0aCl7XG4gIHZhciBqb2luZWRQYXRoID0gcGF0aDtcbiAgaWYoYmFzZURpcil7XG4gICAgam9pbmVkUGF0aCA9IFtiYXNlRGlyLCBwYXRoXS5qb2luKCcvJyk7XG4gIH1cbiAgcmV0dXJuIGpvaW5lZFBhdGgucmVwbGFjZSgvXFwvezIsfS9nLCAnLycpO1xufVxuXG5mdW5jdGlvbiBmbGlwWChpbWFnZSl7XG4gIHZhciBvZmZzY3JlZW5DYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgb2Zmc2NyZWVuQ2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgb2Zmc2NyZWVuQ2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG4gIHZhciBjdHggPSBvZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICBjdHgudHJhbnNsYXRlKG9mZnNjcmVlbkNhbnZhcy53aWR0aCwgMCk7XG4gIGN0eC5zY2FsZSgtMSwgMSk7XG4gIGN0eC5kcmF3SW1hZ2UoaW1hZ2UsIDAsIDApO1xuICByZXR1cm4gb2Zmc2NyZWVuQ2FudmFzLnRvRGF0YVVSTCgpO1xufVxuXG5mdW5jdGlvbiBmbGlwWShpbWFnZSl7XG4gIHZhciBvZmZzY3JlZW5DYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgb2Zmc2NyZWVuQ2FudmFzLmhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgb2Zmc2NyZWVuQ2FudmFzLndpZHRoID0gaW1hZ2Uud2lkdGg7XG4gIHZhciBjdHggPSBvZmZzY3JlZW5DYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcblxuICBjdHgudHJhbnNsYXRlKDAsIG9mZnNjcmVlbkNhbnZhcy5oZWlnaHQpO1xuICBjdHguc2NhbGUoMSwgLTEpO1xuICBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwKTtcbiAgcmV0dXJuIG9mZnNjcmVlbkNhbnZhcy50b0RhdGFVUkwoKTtcbn1cblxuY2xhc3MgSW1hZ2VXcmFwcGVyIHtcbiAgY29uc3RydWN0b3IoZmlsZW5hbWUpe1xuICAgIHZhciBzZWxmID0gdGhpcztcbiAgICBzZWxmLm5hbWUgPSBmaWxlbmFtZTtcbiAgICBzZWxmLmNvbXBsZXRlID0gZmFsc2U7XG4gICAgc2VsZi5pbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBzZWxmLmltZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmNvbXBsZXRlID0gdHJ1ZTtcbiAgICB9LCBmYWxzZSk7XG4gIH1cblxuICBsb2FkKCl7XG4gICAgdGhpcy5pbWcuc3JjID0gdGhpcy5uYW1lO1xuICB9XG59XG5cblxuY2xhc3MgUmVzb3VyY2VNYW5hZ2VyIHtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBhbGwgdGhlIHJlc291cmNlcyBoYXZlIGJlZW4gbG9hZGVkXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIFJlc291cmNlTWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYWxsTG9hZGVkID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYmFzZSBkaXJlY3RvcnkgdG8gbG9hZCBpbWFnZXMgZnJvbVxuICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICogQG1lbWJlck9mIFJlc291cmNlTWFuYWdlciNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaW1hZ2VEaXIgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGJhc2UgZGlyZWN0b3J5IHRvIGxvYWQgc291bmRzIGZyb21cbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnNvdW5kRGlyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIGFsbCB0aGUgcmVzb3VyY2VzIGJ5IHRoZWlyIFVSTHNcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnJlc291cmNlTGlzdCA9IHJlc291cmNlTGlzdDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cbiAgICAvLyBUT0RPIG5vdCBzdXJlIGEgYmV0dGVyIHdheVxuICAgIGlmKCF0aGlzLlNvdW5kKXtcbiAgICAgIGlmKGhhcygnV2ViQXVkaW8nKSl7XG4gICAgICAgIHRoaXMuU291bmQgPSBXZWJBdWRpbztcbiAgICAgIH1cbiAgICAgIGVsc2V7XG4gICAgICAgIHRoaXMuU291bmQgPSBTb3VuZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgYW4gaW1hZ2UgKG9yIGEgY29sbGVjdGlvbiBvZiBpbWFnZXMpLCBhbmQgdHJhY2tzIGlmIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmVzb3VyY2VNYW5hZ2VyI1xuICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gZmlsZXMgRmlsZW5hbWUgb2YgdGhlIGltYWdlIHJlbGF0aXZlIHRoZSBHYW1lJ3MgSFRNTCBwYWdlLlxuICAgKiBAcmV0dXJucyB7SW1hZ2V8QXJyYXl9IFJldHVybiB0eXBlIGJhc2VkIG9uIGFyZ3VtZW50OiBJbWFnZSBpZiBTdHJpbmcgb3IgQXJyYXkgb2YgSW1hZ2VzIGlmIEFycmF5XG4gICAqL1xuICBsb2FkSW1hZ2UoZmlsZXMpe1xuICAgIGxldCBzaW5nbGVGaWxlID0gZmFsc2U7XG4gICAgaWYoIUFycmF5LmlzQXJyYXkoZmlsZXMpKSB7XG4gICAgICBzaW5nbGVGaWxlID0gdHJ1ZTtcbiAgICAgIGZpbGVzID0gW2ZpbGVzXTtcbiAgICB9XG5cbiAgICBjb25zdCBmaWxlTGlzdCA9IGZpbGVzLm1hcCgoZmlsZSkgPT4ge1xuICAgICAgY29uc3QgZmlsZW5hbWUgPSBub3JtYWxpemVQYXRoKHRoaXMuaW1hZ2VEaXIsIGZpbGUpO1xuICAgICAgLy9pZiB3ZSBhbHJlYWR5IGhhdmUgdGhlIGltYWdlLCBqdXN0IHJldHVybiBpdFxuICAgICAgaWYodGhpcy5yZXNvdXJjZUxpc3RbZmlsZW5hbWVdKXtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVzb3VyY2VMaXN0W2ZpbGVuYW1lXS5pbWc7XG4gICAgICB9XG4gICAgICB0aGlzLmFsbExvYWRlZCA9IGZhbHNlO1xuXG4gICAgICBjb25zdCB3cmFwcGVyID0gbmV3IEltYWdlV3JhcHBlcihmaWxlbmFtZSk7XG4gICAgICAvLyBOZWVkIHRvIGV4cGxpY2l0bHkgY2FsbCBsb2FkIGJlY2F1c2UgZmxpcEltYWdlIGFsc28gdXNlcyB0aGlzIG9iamVjdFxuICAgICAgLy8gd2hpY2ggaXMgcHJvYmFibHkgYSBiYWQgaWRlYSBhbmQgc2hvdWxkIGNoYW5nZSBpbiBmdXR1cmVcbiAgICAgIC8vIFRPRE86IGRpZmZlcmVudCBvYmplY3RzIGZvciBmbGlwcGVkIGltYWdlIGFuZCByZWd1bGFyIGltYWdlXG4gICAgICB3cmFwcGVyLmxvYWQoKTtcbiAgICAgIHRoaXMucmVzb3VyY2VMaXN0W2ZpbGVuYW1lXSA9IHdyYXBwZXI7XG4gICAgICByZXR1cm4gd3JhcHBlci5pbWc7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gc2luZ2xlRmlsZSA/IGZpbGVMaXN0WzBdIDogZmlsZUxpc3Q7XG4gIH1cblxuICAvKipcbiAgICogTG9hZHMgYSBzb3VuZCBmaWxlIChvciBhIGNvbGxlY3Rpb24gb2Ygc291bmQgZmlsZXMpLCBhbmQgdHJhY2tzIGlmIGl0IGhhcyBmaW5pc2hlZCBsb2FkaW5nXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmVzb3VyY2VNYW5hZ2VyI1xuICAgKiBAcGFyYW0ge1N0cmluZ3xBcnJheX0gZmlsZW5hbWUgRmlsZW5hbWUgb2YgdGhlIHNvdW5kIHJlbGF0aXZlIHRoZSBHYW1lJ3MgSFRNTCBwYWdlLlxuICAgKiBAcmV0dXJucyB7U291bmR8QXJyYXl9IFJldHVybiB0eXBlIGJhc2VkIG9uIGFyZ3VtZW50OiBTb3VuZCBPYmplY3QgaWYgU3RyaW5nIG9yIEFycmF5IG9mIFNvdW5kIE9iamVjdHMgaWYgQXJyYXlcbiAgICovXG4gIGxvYWRTb3VuZChmaWxlcyl7XG4gICAgbGV0IHNpbmdsZUZpbGUgPSBmYWxzZTtcbiAgICBpZighQXJyYXkuaXNBcnJheShmaWxlcykpIHtcbiAgICAgIHNpbmdsZUZpbGUgPSB0cnVlO1xuICAgICAgZmlsZXMgPSBbZmlsZXNdO1xuICAgIH1cblxuICAgIGNvbnN0IGZpbGVMaXN0ID0gZmlsZXMubWFwKChmaWxlKSA9PiB7XG4gICAgICBjb25zdCBmaWxlbmFtZSA9IG5vcm1hbGl6ZVBhdGgodGhpcy5zb3VuZERpciwgZmlsZSk7XG4gICAgICAvL2lmIHdlIGFscmVhZHkgaGF2ZSB0aGUgc291bmQsIGp1c3QgcmV0dXJuIGl0XG4gICAgICBpZih0aGlzLnJlc291cmNlTGlzdFtmaWxlbmFtZV0pe1xuICAgICAgICByZXR1cm4gdGhpcy5yZXNvdXJjZUxpc3RbZmlsZW5hbWVdO1xuICAgICAgfVxuICAgICAgdGhpcy5hbGxMb2FkZWQgPSBmYWxzZTtcblxuICAgICAgY29uc3Qgc291bmQgPSBuZXcgdGhpcy5Tb3VuZChmaWxlbmFtZSk7XG4gICAgICB0aGlzLnJlc291cmNlTGlzdFtmaWxlbmFtZV0gPSBzb3VuZDtcbiAgICAgIHJldHVybiBzb3VuZDtcbiAgICB9KTtcblxuICAgIHJldHVybiBzaW5nbGVGaWxlID8gZmlsZUxpc3RbMF0gOiBmaWxlTGlzdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBGbGlwcyBhbiBpbWFnZSB1c2luZyB0aGUgbG9naWMgaW4gYSBmbGlwIGZ1bmN0aW9uIHBhc3NlZCBhbmQgYXR0YWNoZXMgdG8gcmVzb3VyY2UgbWFuYWdlciB3aXRoIG5hbWVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAqIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IG5hbWUgTmFtZSBmb3IgY2FjaGluZyBmbGlwcGVkIGltYWdlXG4gICAqIEBwYXJhbSAge0ltYWdlfSBpbWFnZSBJbWFnZSB0byBiZSBmbGlwcGVkXG4gICAqIEBwYXJhbSAge0Z1bmN0aW9ufSBmbGlwRm4gRnVuY3Rpb24gY29udGFpbmluZyBsb2dpYyB0byBmbGlwIGltYWdlXG4gICAqIEByZXR1cm4ge0ltYWdlfSBGbGlwcGVkIGltYWdlXG4gICAqL1xuICBmbGlwSW1hZ2UobmFtZSwgaW1hZ2UsIGZsaXBGbil7XG4gICAgdGhpcy5hbGxMb2FkZWQgPSBmYWxzZTtcblxuICAgIGNvbnN0IHdyYXBwZXIgPSBuZXcgSW1hZ2VXcmFwcGVyKG5hbWUpO1xuICAgIHRoaXMucmVzb3VyY2VMaXN0W25hbWVdID0gd3JhcHBlcjtcbiAgICBjb25zdCBpbWcyID0gbmV3IEltYWdlKCk7XG4gICAgZnVuY3Rpb24gZG9GbGlwKCkge1xuICAgICAgd3JhcHBlci5pbWcuc3JjID0gZmxpcEZuKGltZzIpO1xuICAgICAgaW1nMi5yZW1vdmVFdmVudExpc3RlbmVyKCdsb2FkJywgZG9GbGlwKTtcbiAgICB9XG4gICAgaW1nMi5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZG9GbGlwKTtcbiAgICBpbWcyLnNyYyA9IGltYWdlLnNyYztcblxuICAgIHJldHVybiB3cmFwcGVyLmltZztcbiAgfVxuXG4gIC8qKlxuICAgKiBGbGlwIGltYWdlIGFsb25nIHgtYXhpcyB1c2luZyBkZWZhdWx0IGZsaXAgbG9naWNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAqIEBwYXJhbSAge1N0cmluZ3xOdW1iZXJ9IG5hbWUgTmFtZSBmb3IgY2FjaGluZyBmbGlwcGVkIGltYWdlXG4gICAqIEBwYXJhbSAge0ltYWdlfSBpbWFnZSBJbWFnZSB0byBiZSBmbGlwcGVkXG4gICAqIEByZXR1cm4ge0ltYWdlfSBGbGlwcGVkIGltYWdlXG4gICAqL1xuICBmbGlwSW1hZ2VYKG5hbWUsIGltYWdlKXtcbiAgICByZXR1cm4gdGhpcy5mbGlwSW1hZ2UobmFtZSwgaW1hZ2UsIGZsaXBYKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGbGlwIGltYWdlIGFsb25nIHRoZSB5LWF4aXMgdXNpbmcgZGVmYXVsdCBmbGlwIGxvZ2ljXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmVzb3VyY2VNYW5hZ2VyI1xuICAgKiBAcGFyYW0gIHtTdHJpbmd8TnVtYmVyfSBuYW1lIE5hbWUgZm9yIGNhY2hpbmcgZmxpcHBlZCBpbWFnZVxuICAgKiBAcGFyYW0gIHtJbWFnZX0gaW1hZ2UgSW1hZ2UgdG8gYmUgZmxpcHBlZFxuICAgKiBAcmV0dXJuIHtJbWFnZX0gRmxpcHBlZCBpbWFnZVxuICAgKi9cbiAgZmxpcEltYWdlWShuYW1lLCBpbWFnZSl7XG4gICAgcmV0dXJuIHRoaXMuZmxpcEltYWdlKG5hbWUsIGltYWdlLCBmbGlwWSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIHJlc291cmNlcyBoYXZlIGZpbmlzaGVkIGxvYWRpbmdcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAqL1xuICByZXNvdXJjZXNSZWFkeSgpe1xuICAgIGlmKHRoaXMuYWxsTG9hZGVkKXtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IodmFyIGZpbGVuYW1lIGluIHRoaXMucmVzb3VyY2VMaXN0KXtcbiAgICAgICAgdmFyIHJlc291cmNlID0gdGhpcy5yZXNvdXJjZUxpc3RbZmlsZW5hbWVdO1xuICAgICAgICBpZighcmVzb3VyY2UuY29tcGxldGUpe1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5hbGxMb2FkZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldHMgdGhlIHBlcmNlbnQgb2YgcmVzb3VyY2VzIGxvYWRlZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBSZXNvdXJjZU1hbmFnZXIjXG4gICAqIEByZXR1cm4ge051bWJlcn0gVGhlIHBlcmNlbnQgb2YgcmVzb3VyY2VzIGxvYWRlZFxuICAgKi9cbiAgZ2V0UGVyY2VudENvbXBsZXRlKCl7XG4gICAgdmFyIG51bUNvbXBsZXRlID0gMC4wO1xuICAgIHZhciBsZW5ndGggPSAwO1xuICAgIGZvcih2YXIgZmlsZW5hbWUgaW4gdGhpcy5yZXNvdXJjZUxpc3Qpe1xuICAgICAgdmFyIHJlc291cmNlID0gdGhpcy5yZXNvdXJjZUxpc3RbZmlsZW5hbWVdO1xuICAgICAgbGVuZ3RoKys7XG4gICAgICBpZihyZXNvdXJjZS5jb21wbGV0ZSl7XG4gICAgICAgIG51bUNvbXBsZXRlID0gbnVtQ29tcGxldGUgKyAxLjA7XG4gICAgICB9XG4gICAgfVxuICAgIGlmKGxlbmd0aCA9PT0gMCl7XG4gICAgICByZXR1cm4gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIE1hdGgucm91bmQoKG51bUNvbXBsZXRlIC8gbGVuZ3RoKSAqIDEwMC4wKTtcbiAgICB9XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJlc291cmNlTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuLy8gaGFja3kgc2ltcGxlIGltcGxlbWVudGF0aW9uIG9mIGhhc1xuXG5jb25zdCBnbG9iYWxBdWRpb0NvbnRleHQgPSByZXF1aXJlKCcuL3NoaW1zL0F1ZGlvQ29udGV4dCcpO1xuXG5cbmZ1bmN0aW9uIGhhcyhjaGVjayl7XG5cbiAgaWYoY2hlY2sgPT0gJ3NoaXR0eVNvdW5kJyl7XG4gICAgcmV0dXJuICEhKChoYXMoJ2FuZHJvaWQnKSB8fCBoYXMoJ2lvcycpKSAmJiBoYXMoJ3dlYmtpdCcpKTtcbiAgfVxuICBlbHNlIGlmKGNoZWNrID09ICdhbmRyb2lkJyl7XG4gICAgcmV0dXJuIChwYXJzZUZsb2F0KG5hdmlnYXRvci51c2VyQWdlbnQuc3BsaXQoXCJBbmRyb2lkIFwiKVsxXSkgfHwgdW5kZWZpbmVkKTtcbiAgfVxuICBlbHNlIGlmKGNoZWNrID09ICdpb3MnKXtcbiAgICAvL1RPRE8gbmVlZCBzb21ldGhpbmcgZm9yIHRoaXNcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgZWxzZSBpZihjaGVjayA9PSAnd2Via2l0Jyl7XG4gICAgcmV0dXJuIChwYXJzZUZsb2F0KG5hdmlnYXRvci51c2VyQWdlbnQuc3BsaXQoXCJXZWJLaXQvXCIpWzFdKSB8fCB1bmRlZmluZWQpO1xuICB9XG4gIGVsc2UgaWYoY2hlY2sgPT0gJ1dlYkF1ZGlvJyl7XG4gICAgcmV0dXJuICEhZ2xvYmFsLkF1ZGlvQ29udGV4dDtcbiAgfVxuICBlbHNlIGlmIChjaGVjayA9PT0gJ3RvdWNoJykge1xuICAgIHJldHVybiAnb250b3VjaHN0YXJ0JyBpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzO1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwiLyoqXG4gKiBBbiBBdWRpbyBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIGEgZ2VuZXJpYyBBUElcbiAqIEBuYW1lIFNvdW5kXG4gKiBAY29uc3RydWN0b3IgU291bmRcbiAqL1xuXG5cbi8qKlxuICogTWFwIG9mIGF1ZGlvIHR5cGVzIGFuZCBjb2RlY3MgdXNlZCBpbiBmYWxsYmFjayBsb2FkaW5nIG9mIHNvdW5kcyA8YnI+XG4gKiBSZWZlcmVuY2U6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvSFRNTC9TdXBwb3J0ZWRfbWVkaWFfZm9ybWF0c1xuICogQHR5cGUge09iamVjdH1cbiAqIEBtZW1iZXJPZiBTb3VuZCNcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8vbXBlZycgJy5tcDMnXG4gKiBAcHJvcGVydHkge1N0cmluZ30gJ2F1ZGlvL3dlYm0nICcud2VibSdcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8vb2dnJyAnLm9nZydcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8vd2F2JyAnLndhdidcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8vYWFjJyAnLmFhYydcbiAqIEBwcm9wZXJ0eSB7U3RyaW5nfSAnYXVkaW8veC1tNGEnICcubTRhJ1xuICogQGV4YW1wbGVcbiAqIC8vIFRvIG92ZXJyaWRlIHRoZSBkZWZhdWx0IGZvcm1hdHM6XG4gKiAvLyBEbyB0aGlzIGJlZm9yZSBsb2FkaW5nIGFueSBzb3VuZHNcbiAqIHJlcXVpcmUoW1xuICogICAnZnJvemVuL3NvdW5kcy9Tb3VuZCdcbiAqIF0sIGZ1bmN0aW9uKFNvdW5kKXtcbiAqICAgU291bmQucHJvdG90eXBlLmZvcm1hdHMgPSB7XG4gKiAgICAgJ2F1ZGlvL21wZWcnOiAnLm1wMycsXG4gKiAgICAgJ2F1ZGlvL3dlYm0nOiAnLndlYm0nXG4gKiAgIH07XG4gKiB9KTtcbiAqL1xuY29uc3QgZm9ybWF0cyA9IHtcbiAgJ2F1ZGlvL21wZWcnOiAnLm1wMycsXG4gICdhdWRpby93ZWJtJzogJy53ZWJtJyxcbiAgJ2F1ZGlvL29nZyc6ICcub2dnJyxcbiAgJ2F1ZGlvL3dhdic6ICcud2F2JyxcbiAgJ2F1ZGlvL2FhYyc6ICcuYWFjJyxcbiAgJ2F1ZGlvL3gtbTRhJzogJy5tNGEnXG59O1xuXG5cblxuY2xhc3MgU291bmQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhlIEF1ZGlvIG9iamVjdCAtIHR5cGljYWxseSB0aGUgZmlsZW5hbWVcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBtZW1iZXJPZiBTb3VuZCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMubmFtZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBTaWduYWxzIGlmIHRoZSBBdWRpbyBvYmplY3QgaGFzIGNvbXBsZXRlZCBsb2FkaW5nXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5jb21wbGV0ZSA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyB0aGUgYnJvd3NlciBcInByb2JhYmx5XCIgY2FuIHBsYXlcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5wcm9iYWJseSA9IFtdO1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgZXh0ZW5zaW9ucyB0aGUgYnJvd3NlciBcIm1heWJlXCIgY2FuIHBsYXlcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5tYXliZSA9IFtdO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblxuICAgIHRoaXMuZm9ybWF0cyA9IGZvcm1hdHM7XG5cbiAgICBpZih0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpe1xuICAgICAgdGhpcy5sb2FkKG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBMb2FkIHRoZSBzb3VuZCBieSBmaWxlbmFtZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgKiBAcGFyYW0gIHtTdHJpbmd9IGZpbGVuYW1lIFRoZSBmaWxlbmFtZSBvZiB0aGUgZmlsZSB0byBsb2FkXG4gICAqL1xuICBsb2FkKGZpbGVuYW1lKXtcbiAgICB0aGlzLm5hbWUgPSBmaWxlbmFtZTtcbiAgICB0aGlzLmNvbXBsZXRlID0gdHJ1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb29wIHRoZSBzb3VuZCBhdCBhIGNlcnRhaW4gdm9sdW1lXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgU291bmQjXG4gICAqIEBwYXJhbSAge051bWJlcn0gdm9sdW1lIFZhbHVlIG9mIHZvbHVtZSAtIGJldHdlZW4gMCBhbmQgMVxuICAgKi9cbiAgbG9vcCh2b2x1bWUpe31cblxuICAvKipcbiAgICogUGxheSB0aGUgc291bmQgYXQgYSBjZXJ0YWluIHZvbHVtZSBhbmQgc3RhcnQgdGltZVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFNvdW5kI1xuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHZvbHVtZSAgICBWYWx1ZSBvZiB2b2x1bWUgLSBiZXR3ZWVuIDAgYW5kIDFcbiAgICogQHBhcmFtICB7TnVtYmVyfSBzdGFydFRpbWUgVmFsdWUgb2YgbWlsbGlzZWNvbmRzIGludG8gdGhlIHRyYWNrIHRvIHN0YXJ0XG4gICAqL1xuICBwbGF5KHZvbHVtZSwgc3RhcnRUaW1lKXt9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCB1c2VkIHRvIGNvbnN0cnVjdCBBdWRpbyBvYmplY3RzIGludGVybmFsbHlcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBTb3VuZCNcbiAgICogQHByaXZhdGVcbiAgICogQHBhcmFtICB7TnVtYmVyfSB2b2x1bWUgVmFsdWUgb2Ygdm9sdW1lIC0gYmV0d2VlbiAwIGFuZCAxXG4gICAqIEBwYXJhbSAge0Jvb2xlYW59IGxvb3AgV2hldGhlciBvciBub3QgdG8gbG9vcCBhdWRpb1xuICAgKiBAcmV0dXJuIHtBdWRpb30gQXVkaW8gb2JqZWN0IHRoYXQgd2FzIGNvbnN0cnVjdGVkXG4gICAqL1xuICBfaW5pdEF1ZGlvKHZvbHVtZSwgbG9vcCl7fVxuXG4gIC8qKlxuICAgKiBNZXRob2QgdXNlZCB0byBnZW5lcmF0ZSBhIGNhY2hlIG9mIGV4dGVuc2lvbnMgKHByb2JhYmx5L21heWJlIGFycmF5cykgdG8gdHJ5IGxvYWRpbmdcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBTb3VuZCNcbiAgICogQHByaXZhdGVcbiAgICogQHJldHVybiB7U3RyaW5nfSBGaXJzdCBleHRlbnNpb24gdG8gdHJ5IGxvYWRpbmdcbiAgICovXG4gIF9jaG9vc2VGb3JtYXQoKXtcbiAgICBpZighdGhpcy5wcm9iYWJseS5sZW5ndGggJiYgIXRoaXMubWF5YmUubGVuZ3RoKXtcbiAgICAgIC8vIEZpZ3VyZSBvdXQgdGhlIGJlc3QgZXh0ZW5zaW9uIGlmIHdlIGhhdmUgbm8gY2FjaGVcbiAgICAgIHZhciBhdWRpbyA9IG5ldyBBdWRpbygpO1xuICAgICAgdmFyIGNvZGVjO1xuICAgICAgdmFyIHJlc3VsdDtcbiAgICAgIGZvcihjb2RlYyBpbiB0aGlzLmZvcm1hdHMpe1xuICAgICAgICByZXN1bHQgPSBhdWRpby5jYW5QbGF5VHlwZShjb2RlYyk7XG4gICAgICAgIGlmKHJlc3VsdCA9PT0gJ3Byb2JhYmx5Jyl7XG4gICAgICAgICAgdGhpcy5wcm9iYWJseS5wdXNoKHRoaXMuZm9ybWF0c1tjb2RlY10pO1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYocmVzdWx0ID09PSAnbWF5YmUnKXtcbiAgICAgICAgICB0aGlzLm1heWJlLnB1c2godGhpcy5mb3JtYXRzW2NvZGVjXSk7XG4gICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZih0aGlzLnByb2JhYmx5Lmxlbmd0aCl7XG4gICAgICByZXR1cm4gdGhpcy5wcm9iYWJseVswXTtcbiAgICB9XG5cbiAgICBpZih0aGlzLm1heWJlLmxlbmd0aCl7XG4gICAgICByZXR1cm4gdGhpcy5tYXliZVswXTtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIHVzZWQgdG8gcmVtb3ZlIGEgZXh0ZW5zaW9uIHRoYXQgZGlkbid0IHdvcmsgYW5kIHJldHVybiB0aGUgbmV4dCB2aWFibGUgZXh0ZW5zaW9uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgU291bmQjXG4gICAqIEBwcml2YXRlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gTmV4dCBleHRlbnNpb24gdG8gdHJ5IGxvYWRpbmdcbiAgICovXG4gIF9uZXh0Rm9ybWF0KCl7XG4gICAgaWYodGhpcy5wcm9iYWJseS5sZW5ndGggPiAxKXtcbiAgICAgIHRoaXMucHJvYmFibHkuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0aGlzLnByb2JhYmx5WzBdO1xuICAgIH1cblxuICAgIGlmKHRoaXMucHJvYmFibHkubGVuZ3RoID09PSAxKXtcbiAgICAgIHRoaXMucHJvYmFibHkubGVuZ3RoID0gMDtcbiAgICAgIGlmKHRoaXMubWF5YmUubGVuZ3RoKXtcbiAgICAgICAgcmV0dXJuIHRoaXMubWF5YmVbMF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYodGhpcy5tYXliZS5sZW5ndGggPiAxKXtcbiAgICAgIHRoaXMubWF5YmUuc2hpZnQoKTtcbiAgICAgIHJldHVybiB0aGlzLm1heWJlWzBdO1xuICAgIH1cblxuICAgIGlmKHRoaXMubWF5YmUubGVuZ3RoID09PSAxKXtcbiAgICAgIHRoaXMubWF5YmUubGVuZ3RoID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gJyc7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNvdW5kO1xuIiwiLyoqXG4gKiBBbiBBdWRpbyBvYmplY3QgdGhhdCBpbXBsZW1lbnRzIFdlYkF1ZGlvIGludG8gYSBnZW5lcmljIEFQSVxuICogQG5hbWUgV2ViQXVkaW9cbiAqIEBjb25zdHJ1Y3RvciBXZWJBdWRpb1xuICogQGV4dGVuZHMgU291bmRcbiAqL1xuXG5jb25zdCBTb3VuZCA9IHJlcXVpcmUoJy4vU291bmQnKTtcbmNvbnN0IHJlbW92ZUV4dGVuc2lvbiA9IHJlcXVpcmUoJy4uL3V0aWxzL3JlbW92ZUV4dGVuc2lvbicpO1xuY29uc3QgaGFzID0gcmVxdWlyZSgnLi4vaGFzJyk7XG5cbnZhciBhdWRpb0NvbnRleHQgPSBudWxsO1xuXG5cbmlmKGhhcygnV2ViQXVkaW8nKSl7XG4gIGF1ZGlvQ29udGV4dCA9IG5ldyB3aW5kb3cuQXVkaW9Db250ZXh0KCk7XG59XG5cbmlmKGhhcygnc2hpdHR5U291bmQnKSl7XG4gIC8vIFNpbWlsYXIgc3RyYXRlZ3kgdG8gaHR0cHM6Ly9naXRodWIuY29tL0NyZWF0ZUpTL1NvdW5kSlNcbiAgZnVuY3Rpb24gaGFuZGxlU2hpdHR5KCkge1xuICAgIGNvbnN0IHNvdXJjZSA9IGF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICBzb3VyY2UuYnVmZmVyID0gYXVkaW9Db250ZXh0LmNyZWF0ZUJ1ZmZlcigxLCAxLCAyMjA1MCk7XG4gICAgc291cmNlLmNvbm5lY3QoYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICBzb3VyY2Uuc3RhcnQoMCk7XG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVNoaXR0eSk7XG4gIH1cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIGhhbmRsZVNoaXR0eSk7XG59XG5cbmNsYXNzIFdlYkF1ZGlvIGV4dGVuZHMgU291bmQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogVGhlIFdlYkF1ZGlvIEF1ZGlvQ29udGV4dCAtIHVzZWQgdG8gcGVyZm9ybSBvcGVyYXRpb25zIG9uIGEgc291bmRcbiAgICAgKiBAdHlwZSB7QXVkaW9Db250ZXh0fVxuICAgICAqIEBtZW1iZXJPZiBXZWJBdWRpbyNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYXVkaW9Db250ZXh0ID0gYXVkaW9Db250ZXh0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIHNvdW5kIGJ1ZmZlclxuICAgICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAgICogQG1lbWJlck9mIFdlYkF1ZGlvI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5idWZmZXIgPSBudWxsO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIGxvYWQoZmlsZW5hbWUpe1xuICAgIHZhciBzZWxmID0gdGhpcztcblxuICAgIHRoaXMubmFtZSA9IGZpbGVuYW1lO1xuXG4gICAgdmFyIGJhc2VuYW1lID0gcmVtb3ZlRXh0ZW5zaW9uKGZpbGVuYW1lKTtcbiAgICBpZihiYXNlbmFtZSA9PT0gZmlsZW5hbWUpe1xuICAgICAgZmlsZW5hbWUgPSBiYXNlbmFtZSArIHRoaXMuX2Nob29zZUZvcm1hdCgpO1xuICAgIH1cbiAgICAvLyBmaWxlbmFtZSA9IHJlcS50b1VybChmaWxlbmFtZSk7XG5cbiAgICBmdW5jdGlvbiBkZWNvZGVBdWRpb0RhdGEoZSl7XG4gICAgICAvLyBEZWNvZGUgYXN5bmNocm9ub3VzbHlcbiAgICAgIHNlbGYuYXVkaW9Db250ZXh0LmRlY29kZUF1ZGlvRGF0YShlLnRhcmdldC5yZXNwb25zZSxcbiAgICAgICAgZnVuY3Rpb24oYnVmZmVyKXtcbiAgICAgICAgICBzZWxmLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICAgICAgICBzZWxmLmNvbXBsZXRlID0gdHJ1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgZnVuY3Rpb24oZXJyKXtcbiAgICAgICAgICB2YXIgZm9ybWF0ID0gc2VsZi5fbmV4dEZvcm1hdCgpO1xuICAgICAgICAgIGlmKGZvcm1hdCl7XG4gICAgICAgICAgICBzZWxmLmxvYWQoc2VsZi5uYW1lKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VsZi5jb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBicm93c2VyIGhhcyBBdWRpb0NvbnRleHQsIGl0J3MgbmV3IGVub3VnaCBmb3IgWE1MSHR0cFJlcXVlc3RcbiAgICB2YXIgcmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIHJlcXVlc3Qub3BlbignR0VUJywgZmlsZW5hbWUsIHRydWUpO1xuICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gJ2FycmF5YnVmZmVyJztcblxuICAgIHJlcXVlc3Qub25sb2FkID0gZGVjb2RlQXVkaW9EYXRhO1xuICAgIHJlcXVlc3Quc2VuZCgpO1xuICB9XG5cbiAgbG9vcCh2b2x1bWUpe1xuICAgIC8vIFJldHVybiBlYXJseSBpZiB3ZSBkb24ndCBoYXZlIGEgYnVmZmVyIHRvIHByb3RlY3QgZnJvbSB1bmxvYWRlZCByZXNvdXJjZXNcbiAgICBpZighdGhpcy5idWZmZXIpe1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHZhciBhdWRpbyA9IHRoaXMuX2luaXRBdWRpbyh2b2x1bWUsIHRydWUpO1xuICAgIGF1ZGlvLnN0YXJ0KDApO1xuICB9XG5cbiAgcGxheSh2b2x1bWUsIHN0YXJ0VGltZSl7XG4gICAgLy8gUmV0dXJuIGVhcmx5IGlmIHdlIGRvbid0IGhhdmUgYSBidWZmZXIgdG8gcHJvdGVjdCBmcm9tIHVubG9hZGVkIHJlc291cmNlc1xuICAgIGlmKCF0aGlzLmJ1ZmZlcil7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc3RhcnRUaW1lID0gc3RhcnRUaW1lIHx8IDA7XG5cbiAgICB2YXIgYXVkaW8gPSB0aGlzLl9pbml0QXVkaW8odm9sdW1lLCBmYWxzZSk7XG4gICAgYXVkaW8uc3RhcnQoc3RhcnRUaW1lKTtcbiAgfVxuXG4gIF9pbml0QXVkaW8odm9sdW1lLCBsb29wKXtcbiAgICBsb29wID0gdHlwZW9mIGxvb3AgPT09ICdib29sZWFuJyA/IGxvb3AgOiBmYWxzZTtcblxuICAgIHZhciBzb3VyY2UgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVCdWZmZXJTb3VyY2UoKTtcbiAgICBzb3VyY2UuYnVmZmVyID0gdGhpcy5idWZmZXI7XG4gICAgc291cmNlLmxvb3AgPSBsb29wO1xuICAgIGlmKHZvbHVtZSl7XG4gICAgICB2YXIgZ2Fpbk5vZGUgPSB0aGlzLmF1ZGlvQ29udGV4dC5jcmVhdGVHYWluKCk7XG4gICAgICBnYWluTm9kZS5nYWluLnZhbHVlID0gdm9sdW1lO1xuICAgICAgc291cmNlLmNvbm5lY3QoZ2Fpbk5vZGUpO1xuICAgICAgZ2Fpbk5vZGUuY29ubmVjdCh0aGlzLmF1ZGlvQ29udGV4dC5kZXN0aW5hdGlvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNvdXJjZS5jb25uZWN0KHRoaXMuYXVkaW9Db250ZXh0LmRlc3RpbmF0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFdlYkF1ZGlvO1xuIiwiLyoqXG4gKiBSZXByZXNlbnRzIGEgc2VyaWVzIG9mIGZyYW1lcyB0aGF0IGNhbiBiZSByZW5kZXJlZCBhcyBhbiBhbmltYXRpb24uXG4gKiBAbmFtZSBBbmltYXRpb25cbiAqIEBjb25zdHJ1Y3RvciBBbmltYXRpb25cbiAqL1xuXG5jb25zdCBBbmltRnJhbWUgPSByZXF1aXJlKCcuL0FuaW1GcmFtZScpO1xuXG5cbmNsYXNzIEFuaW1hdGlvbiB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIGN1cnJlbnQgZnJhbWUgYmVpbmcgdXNlZCB0byByZW5kZXIgdGhpcyBBbmltYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmN1cnJGcmFtZUluZGV4ID0gMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBjdXJyZW50IG51bWJlciBvZiBtaWxsaXNlY29uZHMgdGhhdCB0aGlzIGFuaW1hdGlvbiBoYXMgYmVlbiBydW5uaW5nXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5hbmltVGltZSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdG90YWwgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmb3IgYSBjb21wbGV0ZSBjeWNsZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEFuaW1hdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMudG90YWxEdXJhdGlvbiA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaGVpZ2h0IGluIHBpeGVsc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEFuaW1hdGlvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaGVpZ2h0ID0gNjQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgd2lkdGggaW4gcGl4ZWxzXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IDY0O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIHRvIHJlbmRlclxuICAgICAqIEB0eXBlIHtJbWFnZX1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5pbWFnZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgb2Zmc2V0IG9mIHRoZSBvZiBwaXhlbHMgaW4gdGhlIHggc2xvdCBmcm9tIHRoZSBzb3VyY2UgaW1hZ2VcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLm9mZnNldFggPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG9mZnNldCBvZiB0aGUgb2YgcGl4ZWxzIGluIHRoZSB5IHNsb3QgZnJvbSB0aGUgc291cmNlIGltYWdlXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5vZmZzZXRZID0gMDtcblxuICAgIHRoaXMuZnJhbWVzID0gdW5kZWZpbmVkO1xuXG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5zdGFydCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gY3JlYXRlIGFuIGFuaW1hdGlvbiBmcm9tIGEgc2hlZXQgb2YgdGlsZXNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAqIEBwYXJhbSAge051bWJlcn0gZnJhbWVDb3VudCBOdW1iZXIgb2YgZnJhbWVzIGluIHRoZSBhbmltYXRpb25cbiAgICogQHBhcmFtICB7TnVtYmVyfEFycmF5fSBmcmFtZVRpbWVzIFZhbHVlIG9yIGFycmF5IG9mIHZhbHVlcyBjb3JyZXNwb25kaW5nIHRvIGFtb3VudCBvZiB0aW1lIHBlciBmcmFtZVxuICAgKiBAcGFyYW0gIHtJbWFnZX0gaW1nIEltYWdlIHNoZWV0IHRvIGNyZWF0ZSBhbmltYXRpb24gZnJvbVxuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IHcgV2lkdGggb2YgZWFjaCB0aWxlIGluIHBpeGVsc1xuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGggSGVpZ2h0IG9mIGVhY2ggdGlsZSBpbiBwaXhlbHNcbiAgICogQHBhcmFtICB7TnVtYmVyfSB5U2xvdCBTbG90IG9uIFkgYXhpcyB0byBzdGFydCBjcmVhdGluZyB0aWxlc1xuICAgKiBAcmV0dXJuIHtBbmltYXRpb259IEFuaW1hdGlvbiBnZW5lcmF0ZWQgdXNpbmcgcGFyYW1ldGVyc1xuICAgKi9cbiAgY3JlYXRlRnJvbVNoZWV0KGZyYW1lQ291bnQsIGZyYW1lVGltZXMsIGltZywgdywgaCwgeVNsb3Qpe1xuICAgIHZhciBhbmltID0gbmV3IEFuaW1hdGlvbih7XG4gICAgICBpbWFnZTogaW1nLFxuICAgICAgaGVpZ2h0OiBoLFxuICAgICAgd2lkdGg6IHdcbiAgICB9KTtcblxuICAgIHZhciBpc0ZUQXJyYXkgPSBBcnJheS5pc0FycmF5KGZyYW1lVGltZXMpO1xuXG4gICAgdmFyIGN1cnJlbnRGcmFtZVRpbWUgPSAxO1xuICAgIGlmKCF5U2xvdCl7XG4gICAgICB5U2xvdCA9IDA7XG4gICAgfVxuICAgIGZvcih2YXIgaiA9IDA7IGogPCBmcmFtZUNvdW50OyBqKyspe1xuICAgICAgaWYoaXNGVEFycmF5KXtcbiAgICAgICAgY3VycmVudEZyYW1lVGltZSA9IGZyYW1lVGltZXNbal07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjdXJyZW50RnJhbWVUaW1lID0gZnJhbWVUaW1lcztcbiAgICAgIH1cbiAgICAgIGFuaW0uYWRkRnJhbWUoY3VycmVudEZyYW1lVGltZSwgaiwgeVNsb3QpO1xuICAgIH1cbiAgICByZXR1cm4gYW5pbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZHVwbGljYXRlIG9mIHRoaXMgYW5pbWF0aW9uLiBUaGUgbGlzdCBvZiBmcmFtZXNcbiAgICogYXJlIHNoYXJlZCBiZXR3ZWVuIHRoZSB0d28gQW5pbWF0aW9ucywgYnV0IGVhY2ggQW5pbWF0aW9uXG4gICAqIGNhbiBiZSBhbmltYXRlZCBpbmRlcGVuZGVudGx5LlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEFuaW1hdGlvbiNcbiAgICovXG4gIGNsb25lKCl7XG4gICAgcmV0dXJuIG5ldyBBbmltYXRpb24oe1xuICAgICAgaW1hZ2U6IHRoaXMuaW1hZ2UsXG4gICAgICBmcmFtZXM6IHRoaXMuZnJhbWVzLFxuICAgICAgdG90YWxEdXJhdGlvbjogdGhpcy50b3RhbER1cmF0aW9uXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhbiBpbWFnZSB0byB0aGUgYW5pbWF0aW9uIHdpdGggdGhlIHNwZWNpZmllZCBkdXJhdGlvbiAodGltZSB0byBkaXNwbGF5IHRoZSBpbWFnZSkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uI1xuICAgKiBAcGFyYW0ge051bWJlcn0gZHVyYXRpb24gRHVyYXRpb24gb2YgdGhlIGZyYW1lXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpbWFnZVNsb3RYIFNsb3Qgb24gdGhlIFggYXhpcyBmb3IgdGhlIGZyYW1lXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBpbWFnZVNsb3RZIFNsb3Qgb24gdGhlIFkgYXhpcyBmb3IgdGhlIGZyYW1lXG4gICAqL1xuICBhZGRGcmFtZShkdXJhdGlvbiwgaW1hZ2VTbG90WCwgaW1hZ2VTbG90WSl7XG4gICAgaWYoIXRoaXMuZnJhbWVzKXtcbiAgICAgIHRoaXMuZnJhbWVzID0gW107XG4gICAgfVxuICAgIHRoaXMudG90YWxEdXJhdGlvbiArPSBkdXJhdGlvbjtcbiAgICB0aGlzLmZyYW1lcy5wdXNoKG5ldyBBbmltRnJhbWUoe1xuICAgICAgZW5kVGltZTogdGhpcy50b3RhbER1cmF0aW9uLFxuICAgICAgaW1hZ2U6IHRoaXMuaW1hZ2UsXG4gICAgICBpbWdTbG90WDogaW1hZ2VTbG90WCxcbiAgICAgIGltZ1Nsb3RZOiBpbWFnZVNsb3RZXG4gICAgfSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyB0aGlzIGFuaW1hdGlvbiBvdmVyIGZyb20gdGhlIGJlZ2lubmluZy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAqL1xuICBzdGFydCgpe1xuICAgIHRoaXMuYW5pbVRpbWUgPSAwO1xuICAgIHRoaXMuY3VyckZyYW1lSW5kZXggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhpcyBhbmltYXRpb24ncyBjdXJyZW50IGltYWdlIChmcmFtZSksIGlmIG5lY2Nlc2FyeS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGFwc2VkVGltZSBFbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gICAqL1xuICB1cGRhdGUoZWxhcHNlZFRpbWUpe1xuICAgIGlmICh0aGlzLmZyYW1lcy5sZW5ndGggPiAxKSB7XG4gICAgICB0aGlzLmFuaW1UaW1lICs9IGVsYXBzZWRUaW1lO1xuXG4gICAgICBpZiAodGhpcy5hbmltVGltZSA+PSB0aGlzLnRvdGFsRHVyYXRpb24pIHtcbiAgICAgICAgdGhpcy5hbmltVGltZSA9IHRoaXMuYW5pbVRpbWUgJSB0aGlzLnRvdGFsRHVyYXRpb247XG4gICAgICAgIHRoaXMuY3VyckZyYW1lSW5kZXggPSAwO1xuICAgICAgfVxuXG4gICAgICB3aGlsZSAodGhpcy5hbmltVGltZSA+IHRoaXMuZnJhbWVzW3RoaXMuY3VyckZyYW1lSW5kZXhdLmVuZFRpbWUpIHtcbiAgICAgICAgdGhpcy5jdXJyRnJhbWVJbmRleCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoaXMgQW5pbWF0aW9uJ3MgY3VycmVudCBhbmltYXRpb24gZnJhbWUuIFJldHVybnMgbnVsbCBpZiB0aGlzIGFuaW1hdGlvbiBoYXMgbm8gZnJhbWVzLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEFuaW1hdGlvbiNcbiAgICogQHJldHVybiB7QW5pbWF0aW9uRnJhbWV8bnVsbH0gVGhlIGFuaW1hdGlvbiBmcmFtZSBhdCB0aGUgY3VycmVudCBmcmFtZSBpbmRleCBvciBudWxsIGlmIG5vIGZyYW1lcyBhcmUgYXZhaWxhYmxlXG4gICAqL1xuICBnZXRDdXJyZW50RnJhbWUoKXtcbiAgICBpZiAodGhpcy5mcmFtZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZnJhbWVzW3RoaXMuY3VyckZyYW1lSW5kZXhdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgY3VycmVudCBmcmFtZSBpbnRvIGEgMmQgY29udGV4dC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBBbmltYXRpb24jXG4gICAqIEBwYXJhbSB7Q29udGV4dH0gY29udGV4dCBUaGUgSFRNTDUgZHJhd2luZyBjYW52YXNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHggVGhlIHggY29vcmRpbmF0ZSBpbiB0aGUgZ3JhcGhpY3MgY29udGV4dFxuICAgKiBAcGFyYW0ge051bWJlcn0geSBUaGUgeSBjb29yZGluYXRlIGluIHRoZSBncmFwaGljcyBjb250ZXh0XG4gICAqL1xuICBkcmF3KGNvbnRleHQsIHgsIHkpe1xuICAgIHZhciBjZiA9IHRoaXMuZ2V0Q3VycmVudEZyYW1lKCk7XG4gICAgY29udGV4dC5kcmF3SW1hZ2UodGhpcy5pbWFnZSwgY2YuaW1nU2xvdFggKiB0aGlzLndpZHRoICsgdGhpcy5vZmZzZXRYLCBjZi5pbWdTbG90WSAqIHRoaXMuaGVpZ2h0ICsgdGhpcy5vZmZzZXRZLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwgeCwgeSwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQW5pbWF0aW9uO1xuIiwiLyoqXG4gKiBSZXByZXNlbnRzIGEgYSBzaW5nbGUgZnJhbWUgaW4gYW4gYW5pbWF0aW9uLlxuICogQG5hbWUgQW5pbWF0aW9uRnJhbWVcbiAqIEBjb25zdHJ1Y3RvciBBbmltYXRpb25GcmFtZVxuICogQHBhcmFtIHtPYmplY3R9IG1peGluIE9iamVjdCBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gbWl4aW5cbiAqL1xuXG5jbGFzcyBBbmltRnJhbWUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogVGhlIGVuZGluZyB0aW1lIGluIG1pbGxpc2Vjb25kcyBvZiB0aGlzIGZyYW1lIHJlbGF0aXZlIHRvIGl0cyBBbmltYXRpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBBbmltYXRpb25GcmFtZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZW5kVGltZSA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaG9yaXpvbnRhbCBwb3NpdGlvbiBvZiB0aGUgZ3JvdXAgb2YgZnJhbWVzIGNvbnRhaW5lZCBpbiBhIHNpbmdsZSBpbWFnZVxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEFuaW1hdGlvbkZyYW1lI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5pbWdTbG90WCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmVydGljYWwgcG9zaXRpb24gb2YgdGhlIGdyb3VwIG9mIGZyYW1lcyBjb250YWluZWQgaW4gYSBzaW5nbGUgaW1hZ2VcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBBbmltYXRpb25GcmFtZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuaW1nU2xvdFkgPSAwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGltYWdlIHRvIHJlbmRlclxuICAgICAqIEB0eXBlIHtJbWFnZX1cbiAgICAgKiBAbWVtYmVyT2YgQW5pbWF0aW9uRnJhbWUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmltYWdlID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEFuaW1GcmFtZTtcbiIsImNvbnN0IHJhZENvbnN0ID0gTWF0aC5QSSAvIDE4MC4wO1xuXG5mdW5jdGlvbiBkZWdyZWVzVG9SYWRpYW5zKGRlZ3JlZXMpe1xuICByZXR1cm4gZGVncmVlcyAqIHJhZENvbnN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZ3JlZXNUb1JhZGlhbnM7XG4iLCJcbmNvbnN0IGRlZ0NvbnN0ID0gMTgwLjAgLyBNYXRoLlBJO1xuXG5mdW5jdGlvbiByYWRpYW5zVG9EZWdyZWVzKHJhZGlhbnMpe1xuICByZXR1cm4gcmFkaWFucyAqIGRlZ0NvbnN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJhZGlhbnNUb0RlZ3JlZXM7XG4iLCJmdW5jdGlvbiBkaXN0YW5jZShwMSwgcDIpe1xuICByZXR1cm4gTWF0aC5zcXJ0KCAoKHAyLnggLSBwMS54KSAqIChwMi54IC0gcDEueCkpICsgKChwMi55IC0gcDEueSkgKiAocDIueSAtIHAxLnkpKSApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRpc3RhbmNlO1xuIiwiXG5mdW5jdGlvbiByYWRpYW5zRnJvbUNlbnRlcihjZW50ZXIgPSB7eDogMC4wLCB5OiAwLjB9LCBwdCl7XG5cbiAgLy9zYW1lIHBvaW50XG4gIGlmKChjZW50ZXIueCA9PT0gcHQueCkgJiYgKGNlbnRlci55ID09PSBwdC55KSl7XG4gICAgcmV0dXJuIDA7XG4gIH1lbHNlIGlmKGNlbnRlci54ID09PSBwdC54KXtcbiAgICBpZihjZW50ZXIueSA+IHB0Lnkpe1xuICAgICAgcmV0dXJuIDA7XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gTWF0aC5QSTtcbiAgICB9XG4gIH1lbHNlIGlmKGNlbnRlci55ID09PSBwdC55KXtcbiAgICBpZihjZW50ZXIueCA+IHB0Lngpe1xuICAgICAgcmV0dXJuIDEuNSAqIE1hdGguUEk7XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gTWF0aC5QSSAvIDI7XG4gICAgfVxuICB9ZWxzZSBpZigoY2VudGVyLnggPCBwdC54KSAmJiAoY2VudGVyLnkgPiBwdC55KSl7XG4gICAgLy9xdWFkcmFudCAxXG4gICAgLy9jb25zb2xlLmxvZygncXVhZDEnLGNlbnRlci54LGNlbnRlci55LHB0LngscHQueSwnbycscHQueCAtIGNlbnRlci54LCdhJyxwdC55IC0gY2VudGVyLnkpO1xuICAgIHJldHVybiBNYXRoLmF0YW4oKHB0LnggLSBjZW50ZXIueCkvKGNlbnRlci55IC0gcHQueSkpO1xuICB9XG4gIGVsc2UgaWYoKGNlbnRlci54IDwgcHQueCkgJiYgKGNlbnRlci55IDwgcHQueSkpe1xuICAgIC8vcXVhZHJhbnQgMlxuICAgIC8vY29uc29sZS5sb2coJ3F1YWQyJyxjZW50ZXIueCxjZW50ZXIueSxwdC54LHB0LnkpO1xuICAgIHJldHVybiBNYXRoLlBJIC8gMiArIE1hdGguYXRhbigocHQueSAtIGNlbnRlci55KS8ocHQueCAtIGNlbnRlci54KSk7XG4gIH1cbiAgZWxzZSBpZigoY2VudGVyLnggPiBwdC54KSAmJiAoY2VudGVyLnkgPCBwdC55KSl7XG4gICAgLy9xdWFkcmFudCAzXG4gICAgLy9jb25zb2xlLmxvZygncXVhZDMnLGNlbnRlci54LGNlbnRlci55LHB0LngscHQueSk7XG4gICAgcmV0dXJuIE1hdGguUEkgKyBNYXRoLmF0YW4oKGNlbnRlci54IC0gcHQueCkvKHB0LnkgLSBjZW50ZXIueSkpO1xuICB9XG4gIGVsc2V7XG4gICAgLy9xdWFkcmFudCA0XG4gICAgLy9jb25zb2xlLmxvZygncXVhZDQnLGNlbnRlci54LGNlbnRlci55LHB0LngscHQueSk7XG4gICAgcmV0dXJuIDEuNSAqIE1hdGguUEkgKyBNYXRoLmF0YW4oKGNlbnRlci55IC0gcHQueSkvKGNlbnRlci54IC0gcHQueCkpO1xuICB9XG5cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByYWRpYW5zRnJvbUNlbnRlcjtcbiIsIlxuZnVuY3Rpb24gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcihjZW50ZXIgPSB7eDogMC4wLCB5OiAwLjB9LCBwdCwgYW5nbGUpe1xuICBjb25zdCBzID0gTWF0aC5zaW4oYW5nbGUpO1xuICBjb25zdCBjID0gTWF0aC5jb3MoYW5nbGUpO1xuICBjb25zdCBuZXdQdCA9IHt9O1xuXG4gIC8vIHRyYW5zbGF0ZSBwb2ludCBiYWNrIHRvIG9yaWdpbjpcbiAgbmV3UHQueCA9IHB0LnggLSBjZW50ZXIueDtcbiAgbmV3UHQueSA9IHB0LnkgLSBjZW50ZXIueTtcblxuICAvLyByb3RhdGUgcG9pbnRcbiAgY29uc3QgeG5ldyA9IG5ld1B0LnggKiBjIC0gbmV3UHQueSAqIHM7XG4gIGNvbnN0IHluZXcgPSBuZXdQdC54ICogcyArIG5ld1B0LnkgKiBjO1xuXG4gIC8vIHRyYW5zbGF0ZSBwb2ludCBiYWNrOlxuICBuZXdQdC54ID0geG5ldyArIGNlbnRlci54O1xuICBuZXdQdC55ID0geW5ldyArIGNlbnRlci55O1xuICByZXR1cm4gbmV3UHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcjtcbiIsIi8qKlxuICogVGhlIFNwcml0ZSBjbGFzcyByZXByZXNlbnRzIGEgc2ltcGxlIGFuaW1hdGVkIGNoYXJhY3RlciBmb3IgYSBnYW1lXG4gKiBAbmFtZSBTcHJpdGVcbiAqIEBjb25zdHJ1Y3RvciBTcHJpdGVcbiAqL1xuXG5jbGFzcyBTcHJpdGUge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogVGhlIHggcG9zaXRpb24gb2YgdGhlIHNwcml0ZSBpbiBwaXhlbHNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBTcHJpdGUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnggPSAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgeSBwb3NpdGlvbiBvZiB0aGUgc3ByaXRlIGluIHBpeGVsc1xuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMueSA9IDAuMDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgdmVsb2NpdHkgaW4gcGl4ZWxzIHBlciBzZWNvbmRcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBTcHJpdGUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmR4ID0gMC4wO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHkgY29tcG9uZW50IG9mIHRoZSB2ZWxvY2l0eSBpbiBwaXhlbHMgcGVyIHNlY29uZFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZHkgPSAwLjA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWF4IHNwZWVkIGEgc3ByaXRlIGNhbiBtb3ZlIGluIGVpdGhlciBkaXJlY3Rpb25cbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBTcHJpdGUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLm1heFNwZWVkID0gMC4wO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG5hbWUgb2YgdGhpcyBTcHJpdGVcbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBtZW1iZXJPZiBTcHJpdGUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLm5hbWUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIHJhZGl1cyBvZiB0aGlzIHNwcml0ZSBpbiBwaXhlbHMgZm9yIHNpbXBsZSBjb2xsaXNpb24gZGV0ZWN0aW9uXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgU3ByaXRlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5jb2xsaXNpb25SYWRpdXMgPSA0MDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGlzIFNwcml0ZSdzIEFuaW1hdGlvbiBhbmQgaXRzIHBvc2l0aW9uIGJhc2VkIG9uIHRoZSB2ZWxvY2l0eS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBTcHJpdGUjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGFwc2VkVGltZSBUaGUgZWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kcyBzaW5jZSB0aGUgcHJldmlvdXMgdXBkYXRlXG4gICAqL1xuICB1cGRhdGUoZWxhcHNlZFRpbWUpe1xuICAgIHRoaXMueCArPSB0aGlzLmR4ICogZWxhcHNlZFRpbWU7XG4gICAgdGhpcy55ICs9IHRoaXMuZHkgKiBlbGFwc2VkVGltZTtcbiAgICB0aGlzLmFuaW0udXBkYXRlKGVsYXBzZWRUaW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBtYXhTcGVlZCB1cCB0byB0aGUgc3BlZWQgbGltaXRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBTcHJpdGUjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB2IFNwZWVkIGxpbWl0XG4gICAqIEByZXR1cm4ge051bWJlcn0gbWF4U3BlZWQgdXAgdG8gc3BlZWQgbGltaXRcbiAgICovXG4gIGxpbWl0U3BlZWQodil7XG4gICAgaWYodGhpcy5tYXhTcGVlZCl7XG4gICAgICBpZihNYXRoLmFicyh2KSA+IHRoaXMubWF4U3BlZWQpe1xuICAgICAgICBpZih2ID4gMCl7XG4gICAgICAgICAgcmV0dXJuIHRoaXMubWF4U3BlZWQ7XG4gICAgICAgIH1lbHNlIGlmKHYgPCAwKXtcbiAgICAgICAgICByZXR1cm4gdGhpcy5tYXhTcGVlZDtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgcmV0dXJuICAwO1xuICAgICAgICB9XG4gICAgICB9ZWxzZXtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgICB9XG4gICAgfWVsc2V7XG4gICAgICByZXR1cm4gdjtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0cyB0aGlzIFNwcml0ZSdzIGN1cnJlbnQgYW5pbWF0aW9uIGZyYW1lLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICogQHJldHVybiB7QW5pbWF0aW9uRnJhbWV9IFRoZSBjdXJyZW50IGZyYW1lIG9mIHRoZSBBbmltYXRpb25cbiAgICovXG4gIGdldEN1cnJlbnRGcmFtZSgpe1xuICAgIGlmKHRoaXMuYW5pbSl7XG4gICAgICByZXR1cm4gdGhpcy5hbmltLmdldEN1cnJlbnRGcmFtZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgc3ByaXRlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgU3ByaXRlI1xuICAgKiBAcGFyYW0ge0NvbnRleHR9IGNvbnRleHQgVGhlIEhUTUw1IGRyYXdpbmcgY29udGV4dFxuICAgKi9cbiAgZHJhdyhjb250ZXh0KXtcbiAgICBpZih0aGlzLmFuaW0pe1xuICAgICAgdGhpcy5hbmltLmRyYXcoY29udGV4dCwgdGhpcy54LCB0aGlzLnkpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZXMgdGhlIGluc3RhbmNlIG9mIFNwcml0ZSBpdCBpcyBjYWxsZWQgdXBvblxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIFNwcml0ZSNcbiAgICogQHJldHVybiB7U3ByaXRlfSBBIGNsb25lIG9mIHRoZSBTcHJpdGVcbiAgICovXG4gIGNsb25lKCkge1xuICAgIHJldHVybiBuZXcgU3ByaXRlKHtcbiAgICAgIGFuaW06IHRoaXMuYW5pbS5jbG9uZSgpXG4gICAgfSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBTcHJpdGU7XG5cbiIsIi8qKlxuICogVGhpcyB3cmFwcyB0aGUgYm94MmQgd29ybGQgdGhhdCBjb250YWlucyBib2RpZXMsIHNoYXBlcywgYW5kIHBlcmZvcm1zIHRoZSBwaHlzaWNzIGNhbGN1bGF0aW9ucy5cbiAqIEBuYW1lIEJveFxuICogQGNvbnN0cnVjdG9yIEJveFxuICovXG5cbmNvbnN0IENvbnRhY3QgPSByZXF1aXJlKCcuL2xpc3RlbmVycy9Db250YWN0Jyk7XG5cblxuY29uc29sZS5sb2coQm94MkQsICdCb3gyRCcsIGdsb2JhbCwgd2luZG93KTtcblxuLy8gYm94MmQgZ2xvYmFsc1xuY29uc3QgQjJWZWMyID0gQm94MkQuQ29tbW9uLk1hdGguYjJWZWMyO1xuY29uc3QgQjJCb2R5RGVmID0gQm94MkQuRHluYW1pY3MuYjJCb2R5RGVmO1xuY29uc3QgQjJCb2R5ID0gQm94MkQuRHluYW1pY3MuYjJCb2R5O1xuY29uc3QgQjJGaXh0dXJlRGVmID0gQm94MkQuRHluYW1pY3MuYjJGaXh0dXJlRGVmO1xuY29uc3QgQjJGaXh0dXJlID0gQm94MkQuRHluYW1pY3MuYjJGaXh0dXJlO1xuY29uc3QgQjJXb3JsZCA9IEJveDJELkR5bmFtaWNzLmIyV29ybGQ7XG5jb25zdCBCMlBvbHlnb25TaGFwZSA9IEJveDJELkNvbGxpc2lvbi5TaGFwZXMuYjJQb2x5Z29uU2hhcGU7XG5jb25zdCBCMkNpcmNsZVNoYXBlID0gQm94MkQuQ29sbGlzaW9uLlNoYXBlcy5iMkNpcmNsZVNoYXBlO1xuXG5jbGFzcyBCb3gge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBjeWNsZXMgcGVyIHNlY29uZCBleHBlY3RlZCBpbiB1cGRhdGUgY2FsY3VhdGlvbnNcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBCb3gjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmludGVydmFsUmF0ZSA9IDYwO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciBvciBub3QgdG8gdHJ5IHRvIGNvbXBlbnNhdGUgY2FsY3VsYXRpb25zIGJhc2VkIG9uIHBlcmZvcm1hbmNlXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYWRhcHRpdmUgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIHRoZSBib2RpZXMgaW4gdGhlIGJveDJkIHdvcmxkIHJlZmVyZW5jZWQgYnkgdGhlaXIgZ2l2ZW4gdXNlckRhdGFcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBCb3gjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmJvZGllc01hcCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBBIG1hcCBvZiB0aGUgZml4dHVyZXMgaW4gdGhlIGJveDJkIHdvcmxkIHJlZmVyZW5jZWQgYnkgdGhlaXIgZ2l2ZW4gdXNlckRhdGFcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBCb3gjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmZpeHR1cmVzTWFwID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIHRoZSBqb2ludHMgaW4gdGhlIGJveDJkIHdvcmxkIHJlZmVyZW5jZWQgYnkgdGhlaXIgZ2l2ZW4gdXNlckRhdGFcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBCb3gjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmpvaW50c01hcCA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgaW5zdGFuY2Ugb2YgdGhlIEJveDJELkR5bmFtaWNzLmIyV29ybGQgd29ybGQgY2xhc3MgdGhhdCB0aGUgYm9kaWVzLCBmaXh0dXJlcywgYW5kIGpvaW50cyBhcmUgdXNlZCBpbi5cbiAgICAgKiBAdHlwZSB7QjJXb3JsZH1cbiAgICAgKiBAbWVtYmVyT2YgQm94I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5iMldvcmxkID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRoZSB4IGNvbXBvbmVudCBvZiB0aGUgYjJXb3JsZCdzIGdyYXZpdHkgaW4gbWV0ZXJzL3NlY29uZCBzcXVhcmVkXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgQm94I1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5ncmF2aXR5WCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgeSBjb21wb25lbnQgb2YgdGhlIGIyV29ybGQncyBncmF2aXR5IGluIG1ldGVycy9zZWNvbmQgc3F1YXJlZFxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuZ3Jhdml0eVkgPSA5Ljg7XG5cbiAgICAvKipcbiAgICAgKiBBbGxvdyBib3gyZCB0byBza2lwIHBoeXNpY3MgY2FsY3VsYXRpb25zIG9uIGJvZGllcyBhdCByZXN0IGZvciBwZXJmb3JtYW5jZVxuICAgICAqIEB0eXBlIHtCb29sZWFufVxuICAgICAqIEBtZW1iZXJPZiBCb3gjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmFsbG93U2xlZXAgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBhZGQgYSBsaXN0ZW5lciB0byBjb2xsaXNpb24gZXZlbnRzLiBEZWZhdWx0IGJlaGF2aW9yIGFkZHMgY29sbGlzaW9uIGRhdGEgdG8gZW50aXRpZXMgb24gdXBkYXRlIGN5Y2xlXG4gICAgICogQHR5cGUge0Jvb2xlYW59XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMucmVzb2x2ZUNvbGxpc2lvbnMgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIEEgY29udGFjdCBsaXN0ZW5lciBmb3IgY2FsbGJhY2tzIG9uIGNvbGxpc2lvbiBldmVudHMuIERlZmF1bHQgaXMgdGhpcyBib3ggaXRzZWxmLlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIEJveCNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuY29udGFjdExpc3RlbmVyID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIE1hcCBvZiBjb2xsaXNpb25zLiBJbnN0YW50aWF0ZWQgaW4gdXBkYXRlIGlmIHJlc29sdmVDb2xsaXNpb25zIGlzIHRydWVcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBtZW1iZXJPZiBCb3gjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmNvbGxpc2lvbnMgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG51bWJlciBvZiBwaXhlbHMgdGhhdCByZXByZXNudCBvbmUgbWV0ZXIgaW4gdGhlIGJveDJkIHdvcmxkLiAoMzAgcGl4ZWxzIH4gMSBtZXRlciBpbiBib3gyZClcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICAqIEBtZW1iZXJPZiBCb3gjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnNjYWxlID0gMzA7XG5cbiAgICB0aGlzLmJvZGllc01hcCA9IHt9O1xuICAgIHRoaXMuZml4dHVyZXNNYXAgPSB7fTtcbiAgICB0aGlzLmpvaW50c01hcCA9IHt9O1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG5cbiAgICB0aGlzLmIyV29ybGQgPSBuZXcgQjJXb3JsZChuZXcgQjJWZWMyKHRoaXMuZ3Jhdml0eVgsIHRoaXMuZ3Jhdml0eVkpLCB0aGlzLmFsbG93U2xlZXApO1xuXG4gICAgaWYodGhpcy5pbnRlcnZhbFJhdGUpe1xuICAgICAgdGhpcy5pbnRlcnZhbFJhdGUgPSBwYXJzZUludCh0aGlzLmludGVydmFsUmF0ZSwgMTApO1xuICAgIH1cblxuXG4gICAgaWYodGhpcy5yZXNvbHZlQ29sbGlzaW9ucyl7XG4gICAgICB0aGlzLmNvbnRhY3RMaXN0ZW5lciA9IG5ldyBDb250YWN0KCk7XG4gICAgfVxuXG4gICAgaWYodGhpcy5jb250YWN0TGlzdGVuZXIpe1xuICAgICAgdGhpcy5hZGRDb250YWN0TGlzdGVuZXIodGhpcy5jb250YWN0TGlzdGVuZXIpO1xuICAgIH1cblxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgYm94MmQgcGh5c2ljcyBjYWxjdWxhdGlvbnNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSAge051bWJlcn0gbWlsbGlzIFRoZSBtaWxsaXNlY29uZHMgdXNlZCB0byBkZXRlcm1pbmUgZnJhbWVyYXRlIGZvciBib3gyZCBzdGVwXG4gICAqIEByZXR1cm4ge051bWJlcn0gVGhlIGFtb3VudCBvZiBtaWxsaXNlY29uZHMgdGhlIHVwZGF0ZSB0b29rXG4gICAqL1xuICB1cGRhdGUobWlsbGlzKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ3VwZGF0ZSBtaWxsaXMnLCBtaWxsaXMpO1xuXG4gICAgaWYodGhpcy5jb250YWN0TGlzdGVuZXIgJiYgdGhpcy5jb250YWN0TGlzdGVuZXIucmVzZXQpe1xuICAgICAgdGhpcy5jb250YWN0TGlzdGVuZXIucmVzZXQoKTtcbiAgICB9XG5cbiAgICB2YXIgc3RhcnQgPSBEYXRlLm5vdygpO1xuICAgIGlmKG1pbGxpcyl7XG4gICAgICB0aGlzLmIyV29ybGQuU3RlcChtaWxsaXMgLyAxMDAwIC8qIGZyYW1lLXJhdGUgKi8sIDEwIC8qIHZlbG9jaXR5IGl0ZXJhdGlvbnMgKi8sIDEwIC8qcG9zaXRpb24gaXRlcmF0aW9ucyovKTtcbiAgICAgIHRoaXMuYjJXb3JsZC5DbGVhckZvcmNlcygpO1xuICAgIH1lbHNle1xuICAgICAgdmFyIHN0ZXBSYXRlID0gKHRoaXMuYWRhcHRpdmUpID8gKHN0YXJ0IC0gdGhpcy5sYXN0VGltZXN0YW1wKSAvIDEwMDAgOiAoMSAvIHRoaXMuaW50ZXJ2YWxSYXRlKTtcbiAgICAgIHRoaXMuYjJXb3JsZC5TdGVwKHN0ZXBSYXRlIC8qIGZyYW1lLXJhdGUgKi8sIDEwIC8qIHZlbG9jaXR5IGl0ZXJhdGlvbnMgKi8sIDEwIC8qcG9zaXRpb24gaXRlcmF0aW9ucyovKTtcbiAgICAgIHRoaXMuYjJXb3JsZC5DbGVhckZvcmNlcygpO1xuICAgIH1cblxuICAgIHJldHVybiAoRGF0ZS5ub3coKSAtIHN0YXJ0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXRzIHRoZSBjdXJyZW50IHN0YXRlIG9mIHRoZSBvYmplY3RzIGluIHRoZSBib3gyZCB3b3JsZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHN0YXRlIG9mIHRoZSBib3gyZCB3b3JsZFxuICAgKi9cbiAgZ2V0U3RhdGUoKSB7XG4gICAgdmFyIHN0YXRlID0ge307XG4gICAgICBmb3IgKHZhciBiID0gdGhpcy5iMldvcmxkLkdldEJvZHlMaXN0KCk7IGI7IGIgPSBiLm1fbmV4dCkge1xuICAgICAgICBpZiAoYi5Jc0FjdGl2ZSgpICYmIHR5cGVvZiBiLkdldFVzZXJEYXRhKCkgIT09ICd1bmRlZmluZWQnICYmIGIuR2V0VXNlckRhdGEoKSAhPT0gbnVsbCkge1xuICAgICAgICAgIHN0YXRlW2IuR2V0VXNlckRhdGEoKV0gPSB7XG4gICAgICAgICAgICB4OiBiLkdldFBvc2l0aW9uKCkueCxcbiAgICAgICAgICAgIHk6IGIuR2V0UG9zaXRpb24oKS55LFxuICAgICAgICAgICAgYW5nbGU6IGIuR2V0QW5nbGUoKSxcbiAgICAgICAgICAgIGNlbnRlcjoge1xuICAgICAgICAgICAgICB4OiBiLkdldFdvcmxkQ2VudGVyKCkueCxcbiAgICAgICAgICAgICAgeTogYi5HZXRXb3JsZENlbnRlcigpLnlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5lYXJWZWxvY2l0eTogYi5tX2xpbmVhclZlbG9jaXR5LFxuICAgICAgICAgICAgYW5ndWxhclZlbG9jaXR5OiBiLm1fYW5ndWxhclZlbG9jaXR5XG4gICAgICAgICAgfTtcbiAgICAgICAgICBpZih0aGlzLmNvbnRhY3RMaXN0ZW5lciAmJiB0aGlzLmNvbnRhY3RMaXN0ZW5lci5jb2xsaXNpb25zKXtcbiAgICAgICAgICAgIHN0YXRlW2IuR2V0VXNlckRhdGEoKV0uY29sbGlzaW9ucyA9IHRoaXMuY29udGFjdExpc3RlbmVyLmNvbGxpc2lvbnNbYi5HZXRVc2VyRGF0YSgpXSB8fCBudWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHN0YXRlIGluIHRoZSBFbnRpdHkgb2JqZWN0cyB0aGF0IGFyZSBtb2RpZmllZCBieSBib3gyZCBjYWxjdWxhdGlvbnMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gZW50aXRpZXMgQW4gYXJyYXkgb3IgbWFwIG9mIEVudGl0eSBvYmplY3RzXG4gICAqL1xuICB1cGRhdGVFeHRlcm5hbFN0YXRlKGVudGl0aWVzKXtcbiAgICAvL3VwZGF0ZSB0aGUgZHlhbm1pYyBzaGFwZXMgd2l0aCBib3gyZCBjYWxjdWxhdGlvbnNcbiAgICB2YXIgYm9kaWVzU3RhdGUgPSB0aGlzLmdldFN0YXRlKCk7XG4gICAgZm9yICh2YXIgaWQgaW4gYm9kaWVzU3RhdGUpIHtcbiAgICAgIHZhciBlbnRpdHkgPSBlbnRpdGllc1tpZF07XG4gICAgICAvL3VwZGF0ZSBhbnkgZHluYW1pYyBib2RpZXNcbiAgICAgIGlmIChlbnRpdHkgJiYgIWVudGl0eS5zdGF0aWNCb2R5KXtcbiAgICAgICAgZW50aXR5LnVwZGF0ZShib2RpZXNTdGF0ZVtpZF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBtYXAgb2YgZW50aXRpZXMgdG8gdGhlIEJveFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtPYmplY3R9IGJvZHlFbnRpdGllcyBNYXAgb2YgZW50aXRpZXNcbiAgICovXG4gIHNldEJvZGllcyhib2R5RW50aXRpZXMpIHtcbiAgICBmb3IodmFyIGlkIGluIGJvZHlFbnRpdGllcykge1xuICAgICAgdmFyIGVudGl0eSA9IGJvZHlFbnRpdGllc1tpZF07XG4gICAgICB0aGlzLmFkZEJvZHkoZW50aXR5KTtcbiAgICB9XG4gICAgdGhpcy5yZWFkeSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGFuIEVudGl0eSB0byB0aGUgYm94MmQgd29ybGQgd2hpY2ggd2lsbCBpbnRlcm5hbGx5IGJlIGNvbnZlcnRlZCB0byBhIGJveDJkIGJvZHkgYW5kIGZpeHR1cmUgKGF1dG8gc2NhbGVkIHdpdGggQm94J3Mgc2NhbGUgcHJvcGVydHkgaWYgdGhlIGVudGl0eSBoYXNuJ3QgYmVlbiBzY2FsZWQgeWV0KVxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtFbnRpdHl9IGVudGl0eSBBbnkgRW50aXR5IG9iamVjdFxuICAgKi9cbiAgYWRkQm9keShlbnRpdHkpIHtcbiAgICAvKmpzaGludCBlcW51bGw6dHJ1ZSAqL1xuXG4gICAgaWYoIWVudGl0eS5hbHJlYWR5U2NhbGVkKXtcbiAgICAgIGVudGl0eS5zY2FsZVNoYXBlKDEgLyB0aGlzLnNjYWxlKTtcbiAgICAgIGVudGl0eS5zY2FsZSA9IHRoaXMuc2NhbGU7XG4gICAgfVxuXG4gICAgdmFyIGJvZHlEZWYgPSBuZXcgQjJCb2R5RGVmKCk7XG4gICAgdmFyIGZpeERlZiA9IG5ldyBCMkZpeHR1cmVEZWYoKTtcbiAgICB2YXIgaSxqLHBvaW50cyx2ZWMsdmVjcztcbiAgICBmaXhEZWYucmVzdGl0dXRpb24gPSBlbnRpdHkucmVzdGl0dXRpb247XG4gICAgZml4RGVmLmRlbnNpdHkgPSBlbnRpdHkuZGVuc2l0eTtcbiAgICBmaXhEZWYuZnJpY3Rpb24gPSBlbnRpdHkuZnJpY3Rpb247XG5cblxuICAgIC8vdGhlc2UgdGhyZWUgcHJvcHMgYXJlIGZvciBjdXN0b20gY29sbGlzaW9uIGZpbHRlcmluZ1xuICAgIGlmKGVudGl0eS5tYXNrQml0cyAhPSBudWxsKXtcbiAgICAgIGZpeERlZi5maWx0ZXIubWFza0JpdHMgPSBlbnRpdHkubWFza0JpdHM7XG4gICAgfVxuICAgIGlmKGVudGl0eS5jYXRlZ29yeUJpdHMgIT0gbnVsbCl7XG4gICAgICBmaXhEZWYuZmlsdGVyLmNhdGVnb3J5Qml0cyA9IGVudGl0eS5jYXRlZ29yeUJpdHM7XG4gICAgfVxuICAgIGlmKGVudGl0eS5ncm91cEluZGV4ICE9IG51bGwpe1xuICAgICAgZml4RGVmLmZpbHRlci5ncm91cEluZGV4ID0gZW50aXR5Lmdyb3VwSW5kZXg7XG4gICAgfVxuXG4gICAgaWYoZW50aXR5LnN0YXRpY0JvZHkpe1xuICAgICAgYm9keURlZi50eXBlID0gIEIyQm9keS5iMl9zdGF0aWNCb2R5O1xuICAgIH0gZWxzZSB7XG4gICAgICBib2R5RGVmLnR5cGUgPSBCMkJvZHkuYjJfZHluYW1pY0JvZHk7XG4gICAgfVxuXG4gICAgYm9keURlZi5wb3NpdGlvbi54ID0gZW50aXR5Lng7XG4gICAgYm9keURlZi5wb3NpdGlvbi55ID0gZW50aXR5Lnk7XG4gICAgYm9keURlZi51c2VyRGF0YSA9IGVudGl0eS5pZDtcbiAgICBib2R5RGVmLmFuZ2xlID0gZW50aXR5LmFuZ2xlO1xuICAgIGJvZHlEZWYubGluZWFyRGFtcGluZyA9IGVudGl0eS5saW5lYXJEYW1waW5nO1xuICAgIGJvZHlEZWYuYW5ndWxhckRhbXBpbmcgPSBlbnRpdHkuYW5ndWxhckRhbXBpbmc7XG4gICAgdmFyIGJvZHkgPSB0aGlzLmIyV29ybGQuQ3JlYXRlQm9keShib2R5RGVmKTtcblxuXG4gICAgaWYgKGVudGl0eS5yYWRpdXMpIHsgLy9jaXJjbGVcbiAgICAgIGZpeERlZi5zaGFwZSA9IG5ldyBCMkNpcmNsZVNoYXBlKGVudGl0eS5yYWRpdXMpO1xuICAgICAgYm9keS5DcmVhdGVGaXh0dXJlKGZpeERlZik7XG4gICAgfSBlbHNlIGlmIChlbnRpdHkucG9pbnRzKSB7IC8vcG9seWdvblxuICAgICAgcG9pbnRzID0gW107XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgZW50aXR5LnBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2ZWMgPSBuZXcgQjJWZWMyKCk7XG4gICAgICAgIHZlYy5TZXQoZW50aXR5LnBvaW50c1tpXS54LCBlbnRpdHkucG9pbnRzW2ldLnkpO1xuICAgICAgICBwb2ludHNbaV0gPSB2ZWM7XG4gICAgICB9XG4gICAgICBmaXhEZWYuc2hhcGUgPSBuZXcgQjJQb2x5Z29uU2hhcGUoKTtcbiAgICAgIGZpeERlZi5zaGFwZS5TZXRBc0FycmF5KHBvaW50cywgcG9pbnRzLmxlbmd0aCk7XG4gICAgICBib2R5LkNyZWF0ZUZpeHR1cmUoZml4RGVmKTtcbiAgICB9IGVsc2UgaWYoZW50aXR5LnBvbHlzKSB7IC8vY29tcGxleCBvYmplY3RcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGVudGl0eS5wb2x5cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgcG9pbnRzID0gZW50aXR5LnBvbHlzW2pdO1xuICAgICAgICAgICAgdmVjcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZlYyA9IG5ldyBCMlZlYzIoKTtcbiAgICAgICAgICAgICAgICB2ZWMuU2V0KHBvaW50c1tpXS54LCBwb2ludHNbaV0ueSk7XG4gICAgICAgICAgICAgICAgdmVjc1tpXSA9IHZlYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpeERlZi5zaGFwZSA9IG5ldyBCMlBvbHlnb25TaGFwZSgpO1xuICAgICAgICAgICAgZml4RGVmLnNoYXBlLlNldEFzQXJyYXkodmVjcywgdmVjcy5sZW5ndGgpO1xuICAgICAgICAgICAgYm9keS5DcmVhdGVGaXh0dXJlKGZpeERlZik7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgeyAvL3JlY3RhbmdsZVxuICAgICAgZml4RGVmLnNoYXBlID0gbmV3IEIyUG9seWdvblNoYXBlKCk7XG4gICAgICBmaXhEZWYuc2hhcGUuU2V0QXNCb3goZW50aXR5LmhhbGZXaWR0aCwgZW50aXR5LmhhbGZIZWlnaHQpO1xuICAgICAgYm9keS5DcmVhdGVGaXh0dXJlKGZpeERlZik7XG4gICAgfVxuXG5cbiAgICB0aGlzLmJvZGllc01hcFtlbnRpdHkuaWRdID0gYm9keTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHBvc2l0aW9uIG9mIGFuIGVudGl0eS5cbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJvZHlJZCBUaGUgaWQgb2YgdGhlIEVudGl0eS9Cb2R5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSB4IFRoZSBuZXcgeCBjb29yZGluYXRlIGluIGJveDJkIHNwYWNlXG4gICAqIEBwYXJhbSB7TnVtYmVyfSB5IFRoZSBuZXcgeSBjb29yZGluYXRlIGluIGJveDJkIHNwYWNlXG4gICAqL1xuICBzZXRQb3NpdGlvbihib2R5SWQsIHgsIHkpe1xuICAgIHZhciBib2R5ID0gdGhpcy5ib2RpZXNNYXBbYm9keUlkXTtcbiAgICBib2R5LlNldFBvc2l0aW9uKG5ldyBCMlZlYzIoeCwgeSkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgYW5nbGUgb2YgYW4gZW50aXR5LlxuICAgKlxuICAgKiBUaGlzIG11c3QgYmUgZG9uZSBvdXRzaWRlIG9mIHRoZSB1cGRhdGUoKSBpdGVyYXRpb24hXG4gICAqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge051bWJlcn0gYm9keUlkIFRoZSBpZCBvZiB0aGUgRW50aXR5L0JvZHlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlIFRoZSBuZXcgYW5nbGUgb2YgdGhlIGJvZHkgaW4gcmFkaWFuc1xuICAgKi9cbiAgc2V0QW5nbGUoYm9keUlkLCBhbmdsZSl7XG4gICAgdmFyIGJvZHkgPSB0aGlzLmJvZGllc01hcFtib2R5SWRdO1xuICAgIGNvbnNvbGUubG9nKCdzZXQgYW5nbGUnLCBib2R5LnNldEFuZ2xlLCBib2R5KTtcbiAgICBib2R5LnNldEFuZ2xlKGFuZ2xlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGxpbmVhciB2ZWxvY2l0eSBvZiBhbiBlbnRpdHkuXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib2R5SWQgVGhlIGlkIG9mIHRoZSBFbnRpdHkvQm9keVxuICAgKiBAcGFyYW0ge051bWJlcn0geCBUaGUgbmV3IHggY29tcG9uZW50IG9mIHRoZSB2ZWxvY2l0eVxuICAgKiBAcGFyYW0ge051bWJlcn0geSBUaGUgbmV3IHkgY29tcG9uZW50IG9mIHRoZSB2ZWxvY2l0eVxuICAgKi9cbiAgc2V0TGluZWFyVmVsb2NpdHkoYm9keUlkLCB4LCB5KXtcbiAgICB2YXIgYm9keSA9IHRoaXMuYm9kaWVzTWFwW2JvZHlJZF07XG4gICAgYm9keS5TZXRMaW5lYXJWZWxvY2l0eShuZXcgQjJWZWMyKHgsIHkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGFuZ3VsYXIgdmVsb2NpdHkgb2YgYW4gZW50aXR5LlxuICAgKlxuICAgKiBUaGlzIG11c3QgYmUgZG9uZSBvdXRzaWRlIG9mIHRoZSB1cGRhdGUoKSBpdGVyYXRpb24hXG4gICAqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge051bWJlcn0gYm9keUlkIFRoZSBpZCBvZiB0aGUgRW50aXR5L0JvZHlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHZlbG9jaXR5IFRoZSBhbmd1bGFyIHZlbG9jaXR5IGZvciB0aGUgYm9keVxuICAgKi9cbiAgc2V0QW5ndWxhclZlbG9jaXR5KGJvZHlJZCwgdmVsb2NpdHkpe1xuICAgIHZhciBib2R5ID0gdGhpcy5ib2RpZXNNYXBbYm9keUlkXTtcbiAgICBib2R5LlNldEFuZ3VsYXJWZWxvY2l0eSh2ZWxvY2l0eSk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYW4gaW1wdWxzZSB0byBhIGJvZHkgYXQgYW4gYW5nbGUgaW4gZGVncmVlc1xuICAgKlxuICAgKiBUaGlzIG11c3QgYmUgZG9uZSBvdXRzaWRlIG9mIHRoZSB1cGRhdGUoKSBpdGVyYXRpb24hXG4gICAqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge051bWJlcn0gYm9keUlkIFRoZSBpZCBvZiB0aGUgRW50aXR5L0JvZHlcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGRlZ3JlZXMgVGhlIGFuZ2xlIGluIHdoaWNoIHRvIGFwcGx5IHRoZSBpbXB1bHNlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gcG93ZXIgVGhlIGltcHVsc2UgcG93ZXIuXG4gICAqL1xuICBhcHBseUltcHVsc2VEZWdyZWVzKGJvZHlJZCwgZGVncmVlcywgcG93ZXIpIHtcbiAgICB2YXIgYm9keSA9IHRoaXMuYm9kaWVzTWFwW2JvZHlJZF07XG4gICAgYm9keS5BcHBseUltcHVsc2UoXG4gICAgICBuZXcgQjJWZWMyKE1hdGguc2luKGRlZ3JlZXMgKiAoTWF0aC5QSSAvIDE4MCkpICogcG93ZXIsXG4gICAgICBNYXRoLmNvcyhkZWdyZWVzICogKE1hdGguUEkgLyAxODApKSAqIHBvd2VyICogLTEpLFxuICAgICAgYm9keS5HZXRXb3JsZENlbnRlcigpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBhIGZvcmNlIHRvIGEgYm9keSBhdCBhbiBhbmdsZSBpbiBkZWdyZWVzXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib2R5SWQgVGhlIGlkIG9mIHRoZSBFbnRpdHkvQm9keVxuICAgKiBAcGFyYW0ge051bWJlcn0gZGVncmVlcyBUaGUgYW5nbGUgaW4gd2hpY2ggdG8gYXBwbHkgdGhlIGZvcmNlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gcG93ZXIgVGhlIHBvd2VyIG9mIHRoZSBmb3JjZS4gKFRoZSBhYmlsaXR5IHRvIGRlc3Ryb3kgYSBwbGFuZXQgaXMgaW5zaWduaWZpY2FudCBuZXh0IHRvIHRoaXMpXG4gICAqL1xuICBhcHBseUZvcmNlRGVncmVlcyhib2R5SWQsIGRlZ3JlZXMsIHBvd2VyKSB7XG4gICAgdmFyIGJvZHkgPSB0aGlzLmJvZGllc01hcFtib2R5SWRdO1xuICAgIGJvZHkuQXBwbHlGb3JjZShcbiAgICAgIG5ldyBCMlZlYzIoTWF0aC5zaW4oZGVncmVlcyAqIChNYXRoLlBJIC8gMTgwKSkgKiBwb3dlcixcbiAgICAgIE1hdGguY29zKGRlZ3JlZXMgKiAoTWF0aC5QSSAvIDE4MCkpICogcG93ZXIgKiAtMSksXG4gICAgICBib2R5LkdldFdvcmxkQ2VudGVyKClcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IGFuIGltcHVsc2UgdG8gYSBib2R5IGF0IGFuIGFuZ2xlIGluIHJhZGlhbnNcbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJvZHlJZCBUaGUgaWQgb2YgdGhlIEVudGl0eS9Cb2R5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYWRpYW5zIFRoZSBhbmdsZSBpbiB3aGljaCB0byBhcHBseSB0aGUgaW1wdWxzZS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHBvd2VyIFRoZSBpbXB1bHNlIHBvd2VyLlxuICAgKi9cbiAgYXBwbHlJbXB1bHNlKGJvZHlJZCwgcmFkaWFucywgcG93ZXIpIHtcbiAgICB2YXIgYm9keSA9IHRoaXMuYm9kaWVzTWFwW2JvZHlJZF07XG4gICAgYm9keS5BcHBseUltcHVsc2UoXG4gICAgICBuZXcgQjJWZWMyKE1hdGguc2luKHJhZGlhbnMpICogcG93ZXIsXG4gICAgICBNYXRoLmNvcyhyYWRpYW5zKSAqIHBvd2VyICogLTEpLFxuICAgICAgYm9keS5HZXRXb3JsZENlbnRlcigpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBhIGZvcmNlIHRvIGEgYm9keSBhdCBhbiBhbmdsZSBpbiByYWRpYW5zXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib2R5SWQgVGhlIGlkIG9mIHRoZSBFbnRpdHkvQm9keVxuICAgKiBAcGFyYW0ge051bWJlcn0gcmFkaWFucyBUaGUgYW5nbGUgaW4gd2hpY2ggdG8gYXBwbHkgdGhlIGZvcmNlLlxuICAgKiBAcGFyYW0ge051bWJlcn0gcG93ZXIgVGhlIHBvd2VyIG9mIHRoZSBmb3JjZS4gKFRoZSBhYmlsaXR5IHRvIGRlc3Ryb3kgYSBwbGFuZXQgaXMgaW5zaWduaWZpY2FudCBuZXh0IHRvIHRoaXMpXG4gICAqL1xuICBhcHBseUZvcmNlKGJvZHlJZCwgcmFkaWFucywgcG93ZXIpIHtcbiAgICB2YXIgYm9keSA9IHRoaXMuYm9kaWVzTWFwW2JvZHlJZF07XG4gICAgYm9keS5BcHBseUZvcmNlKFxuICAgICAgbmV3IEIyVmVjMihNYXRoLnNpbihyYWRpYW5zKSAqIHBvd2VyLFxuICAgICAgTWF0aC5jb3MocmFkaWFucykgKiBwb3dlciAqIC0xKSxcbiAgICAgIGJvZHkuR2V0V29ybGRDZW50ZXIoKVxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgdG9ycXVlIChyb3RhdGlvbiBmb3JjZSkgdG8gYSBib2R5LlxuICAgKiBQb3NpdGl2ZSB2YWx1ZXMgYXJlIGNsb2Nrd2lzZSwgbmVnYXRpdmUgdmFsdWVzIGFyZSBjb3VudGVyLWNsb2Nrd2lzZS5cbiAgICpcbiAgICogVGhpcyBtdXN0IGJlIGRvbmUgb3V0c2lkZSBvZiB0aGUgdXBkYXRlKCkgaXRlcmF0aW9uIVxuICAgKlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveCNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGJvZHlJZCBUaGUgaWQgb2YgdGhlIEVudGl0eS9Cb2R5XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBwb3dlciBUaGUgcG93ZXIgb2YgdGhlIHRvcnF1ZS5cbiAgICovXG4gIGFwcGx5VG9ycXVlKGJvZHlJZCwgcG93ZXIpIHtcbiAgICB2YXIgYm9keSA9IHRoaXMuYm9kaWVzTWFwW2JvZHlJZF07XG4gICAgYm9keS5BcHBseVRvcnF1ZShwb3dlcik7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgd29ybGQncyBncmF2aXR5XG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7T2JqZWN0fSB2ZWN0b3IgQW4gb2JqZWN0IHdpdGggeCBhbmQgeSB2YWx1ZXMgaW4gbWV0ZXJzIHBlciBzZWNvbmQgc3F1YXJlZC5cbiAgICovXG4gIHNldEdyYXZpdHkodmVjdG9yKSB7XG4gICAgdGhpcy5iMldvcmxkLlNldEdyYXZpdHkobmV3IEIyVmVjMih2ZWN0b3IueCwgdmVjdG9yLnkpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBib2R5IGZyb20gdGhlIGJveDJkIHdvcmxkXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBib2R5SWQgVGhlIGlkIG9mIHRoZSBFbnRpdHkvQm9keVxuICAgKi9cbiAgcmVtb3ZlQm9keShpZCkge1xuICAgIGlmKHRoaXMuYm9kaWVzTWFwW2lkXSl7XG4gICAgICBpZih0aGlzLmZpeHR1cmVzTWFwW2lkXSl7XG4gICAgICAgIHRoaXMuYm9kaWVzTWFwW2lkXS5EZXN0cm95Rml4dHVyZSh0aGlzLmZpeHR1cmVzTWFwW2lkXSk7XG4gICAgICB9XG4gICAgICB0aGlzLmIyV29ybGQuRGVzdHJveUJvZHkodGhpcy5ib2RpZXNNYXBbaWRdKTtcbiAgICAgIC8vZGVsZXRlIHRoaXMuZml4dHVyZXNNYXBbaWRdO1xuICAgICAgZGVsZXRlIHRoaXMuYm9kaWVzTWFwW2lkXTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV2FrZSB1cCBhIGJvZHkgaW4gdGhlIGJveDJkIHdvcmxkIHNvIHRoYXQgYm94MmQgd2lsbCBjb250aW51ZSB0byBydW4gY2FsY3VsYXRpb25zIG9uIGl0LlxuICAgKlxuICAgKiBUaGlzIG11c3QgYmUgZG9uZSBvdXRzaWRlIG9mIHRoZSB1cGRhdGUoKSBpdGVyYXRpb24hXG4gICAqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge051bWJlcn0gYm9keUlkIFRoZSBpZCBvZiB0aGUgRW50aXR5L0JvZHlcbiAgICovXG4gIHdha2VVcEJvZHkoaWQpIHtcbiAgICBpZih0aGlzLmJvZGllc01hcFtpZF0pe1xuICAgICAgdGhpcy5ib2RpZXNNYXBbaWRdLlNldEF3YWtlKHRydWUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBjb250YWN0TGlzdGVuZXIgdG8gdGhlIGIyV29ybGRcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYWxsYmFja3MgT2JqZWN0IGNvbnRhaW5pbmcgYSBiZWdpbkNvbnRhbnQsIGVuZENvbnRhY3QgYW5kL29yIHByZVNvbHZlL3Bvc3RTb2x2ZSBrZXlzIGFuZCBjYWxsYmFja3NcbiAgICovXG4gIGFkZENvbnRhY3RMaXN0ZW5lcihjb250YWN0TGlzdGVuZXIpe1xuICAgIHZhciBsaXN0ZW5lciA9IG5ldyBCb3gyRC5EeW5hbWljcy5iMkNvbnRhY3RMaXN0ZW5lcigpO1xuICAgIGlmKGNvbnRhY3RMaXN0ZW5lci5iZWdpbkNvbnRhY3Qpe1xuICAgICAgbGlzdGVuZXIuQmVnaW5Db250YWN0ID0gZnVuY3Rpb24oY29udGFjdCl7XG4gICAgICAgIGNvbnRhY3RMaXN0ZW5lci5iZWdpbkNvbnRhY3QoY29udGFjdC5tX2ZpeHR1cmVBLm1fYm9keS5tX3VzZXJEYXRhLCBjb250YWN0Lm1fZml4dHVyZUIubV9ib2R5Lm1fdXNlckRhdGEsIGNvbnRhY3QpO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYoY29udGFjdExpc3RlbmVyLmVuZENvbnRhY3Qpe1xuICAgICAgbGlzdGVuZXIuRW5kQ29udGFjdCA9IGZ1bmN0aW9uKGNvbnRhY3Qpe1xuICAgICAgICBjb250YWN0TGlzdGVuZXIuZW5kQ29udGFjdChjb250YWN0Lm1fZml4dHVyZUEubV9ib2R5Lm1fdXNlckRhdGEsIGNvbnRhY3QubV9maXh0dXJlQi5tX2JvZHkubV91c2VyRGF0YSwgY29udGFjdCk7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZihjb250YWN0TGlzdGVuZXIucHJlU29sdmUpe1xuICAgICAgbGlzdGVuZXIuUHJlU29sdmUgPSBmdW5jdGlvbihjb250YWN0LCBvbGRNYW5pZm9sZCl7XG4gICAgICAgIGNvbnRhY3RMaXN0ZW5lci5wcmVTb2x2ZShjb250YWN0Lm1fZml4dHVyZUEubV9ib2R5Lm1fdXNlckRhdGEsIGNvbnRhY3QubV9maXh0dXJlQi5tX2JvZHkubV91c2VyRGF0YSwgb2xkTWFuaWZvbGQsIGNvbnRhY3QpO1xuICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGNvbnRhY3RMaXN0ZW5lci5wb3N0U29sdmUpe1xuICAgICAgbGlzdGVuZXIuUG9zdFNvbHZlID0gZnVuY3Rpb24oY29udGFjdCwgaW1wdWxzZSl7XG4gICAgICAgIGNvbnRhY3RMaXN0ZW5lci5wb3N0U29sdmUoY29udGFjdC5tX2ZpeHR1cmVBLm1fYm9keS5tX3VzZXJEYXRhLCBjb250YWN0Lm1fZml4dHVyZUIubV9ib2R5Lm1fdXNlckRhdGEsIGltcHVsc2UsIGNvbnRhY3QpO1xuICAgICAgfTtcbiAgICB9XG4gICAgdGhpcy5iMldvcmxkLlNldENvbnRhY3RMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgam9pbnQgZnJvbSB0aGUgd29ybGQuXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiwgYW5kIEJFRk9SRSBhbnkgYm9kaWVzIGNvbm5lY3RlZCB0byB0aGUgam9pbnQgYXJlIHJlbW92ZWQhXG4gICAqXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94I1xuICAgKiBAcGFyYW0ge051bWJlcn0gam9pbnRJZCBUaGUgaWQgb2Ygam9pbnQgdG8gYmUgZGVzdHJveWVkLlxuICAgKi9cbiAgcmVtb3ZlSm9pbnQoam9pbnRJZCkge1xuICAgIGlmKHRoaXMuam9pbnRzTWFwW2pvaW50SWRdKXtcbiAgICAgIHRoaXMuYjJXb3JsZC5EZXN0cm95Sm9pbnQodGhpcy5qb2ludHNNYXBbam9pbnRJZF0pO1xuICAgICAgZGVsZXRlIHRoaXMuam9pbnRzTWFwW2pvaW50SWRdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBqb2ludCB0byB0aGUgYm94MmQgd29ybGQuXG4gICAqXG4gICAqIFRoaXMgbXVzdCBiZSBkb25lIG91dHNpZGUgb2YgdGhlIHVwZGF0ZSgpIGl0ZXJhdGlvbiFcbiAgICpcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3gjXG4gICAqIEBwYXJhbSB7Sm9pbnR9IEEgam9pbnQgZGVmaW5pdGlvbi5cbiAgICovXG4gIGFkZEpvaW50KGpvaW50KSB7XG4gICAgaWYoam9pbnQgJiYgam9pbnQuaWQgJiYgIXRoaXMuam9pbnRzTWFwW2pvaW50LmlkXSl7XG5cbiAgICAgIGlmKCFqb2ludC5hbHJlYWR5U2NhbGVkICYmIGpvaW50LnNjYWxlSm9pbnRMb2NhdGlvbil7XG4gICAgICAgIGpvaW50LnNjYWxlSm9pbnRMb2NhdGlvbigxIC8gdGhpcy5zY2FsZSk7XG4gICAgICAgIGpvaW50LnNjYWxlID0gdGhpcy5zY2FsZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGIySm9pbnQgPSBqb2ludC5jcmVhdGVCMkpvaW50KHRoaXMpO1xuICAgICAgaWYoYjJKb2ludCl7XG4gICAgICAgIHRoaXMuam9pbnRzTWFwW2pvaW50LmlkXSA9IGIySm9pbnQ7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQm94O1xuXG4iLCJjb25zdCBjb2xvcnMgPSBbXG4gICcjMDBERDAwJyxcbiAgJyNERDAwMDAnLFxuICAnI0VFRUVFRScsXG4gICcjQTA1MjJEJyxcbiAgJyMwMDAwREQnLFxuICAnI0ZGOEMwMCcsXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbG9yczsiLCIvKiEgSGFtbWVyLkpTIC0gdjIuMC43IC0gMjAxNi0wNC0yMlxuICogaHR0cDovL2hhbW1lcmpzLmdpdGh1Yi5pby9cbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYgSm9yaWsgVGFuZ2VsZGVyO1xuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlICovXG4oZnVuY3Rpb24od2luZG93LCBkb2N1bWVudCwgZXhwb3J0TmFtZSwgdW5kZWZpbmVkKSB7XG4gICd1c2Ugc3RyaWN0JztcblxudmFyIFZFTkRPUl9QUkVGSVhFUyA9IFsnJywgJ3dlYmtpdCcsICdNb3onLCAnTVMnLCAnbXMnLCAnbyddO1xudmFyIFRFU1RfRUxFTUVOVCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXG52YXIgVFlQRV9GVU5DVElPTiA9ICdmdW5jdGlvbic7XG5cbnZhciByb3VuZCA9IE1hdGgucm91bmQ7XG52YXIgYWJzID0gTWF0aC5hYnM7XG52YXIgbm93ID0gRGF0ZS5ub3c7XG5cbi8qKlxuICogc2V0IGEgdGltZW91dCB3aXRoIGEgZ2l2ZW4gc2NvcGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKiBAcGFyYW0ge051bWJlcn0gdGltZW91dFxuICogQHBhcmFtIHtPYmplY3R9IGNvbnRleHRcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHNldFRpbWVvdXRDb250ZXh0KGZuLCB0aW1lb3V0LCBjb250ZXh0KSB7XG4gICAgcmV0dXJuIHNldFRpbWVvdXQoYmluZEZuKGZuLCBjb250ZXh0KSwgdGltZW91dCk7XG59XG5cbi8qKlxuICogaWYgdGhlIGFyZ3VtZW50IGlzIGFuIGFycmF5LCB3ZSB3YW50IHRvIGV4ZWN1dGUgdGhlIGZuIG9uIGVhY2ggZW50cnlcbiAqIGlmIGl0IGFpbnQgYW4gYXJyYXkgd2UgZG9uJ3Qgd2FudCB0byBkbyBhIHRoaW5nLlxuICogdGhpcyBpcyB1c2VkIGJ5IGFsbCB0aGUgbWV0aG9kcyB0aGF0IGFjY2VwdCBhIHNpbmdsZSBhbmQgYXJyYXkgYXJndW1lbnQuXG4gKiBAcGFyYW0geyp8QXJyYXl9IGFyZ1xuICogQHBhcmFtIHtTdHJpbmd9IGZuXG4gKiBAcGFyYW0ge09iamVjdH0gW2NvbnRleHRdXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaW52b2tlQXJyYXlBcmcoYXJnLCBmbiwgY29udGV4dCkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGFyZykpIHtcbiAgICAgICAgZWFjaChhcmcsIGNvbnRleHRbZm5dLCBjb250ZXh0KTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuLyoqXG4gKiB3YWxrIG9iamVjdHMgYW5kIGFycmF5c1xuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0b3JcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKi9cbmZ1bmN0aW9uIGVhY2gob2JqLCBpdGVyYXRvciwgY29udGV4dCkge1xuICAgIHZhciBpO1xuXG4gICAgaWYgKCFvYmopIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChvYmouZm9yRWFjaCkge1xuICAgICAgICBvYmouZm9yRWFjaChpdGVyYXRvciwgY29udGV4dCk7XG4gICAgfSBlbHNlIGlmIChvYmoubGVuZ3RoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgb2JqLmxlbmd0aCkge1xuICAgICAgICAgICAgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGkgaW4gb2JqKSB7XG4gICAgICAgICAgICBvYmouaGFzT3duUHJvcGVydHkoaSkgJiYgaXRlcmF0b3IuY2FsbChjb250ZXh0LCBvYmpbaV0sIGksIG9iaik7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogd3JhcCBhIG1ldGhvZCB3aXRoIGEgZGVwcmVjYXRpb24gd2FybmluZyBhbmQgc3RhY2sgdHJhY2VcbiAqIEBwYXJhbSB7RnVuY3Rpb259IG1ldGhvZFxuICogQHBhcmFtIHtTdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgbmV3IGZ1bmN0aW9uIHdyYXBwaW5nIHRoZSBzdXBwbGllZCBtZXRob2QuXG4gKi9cbmZ1bmN0aW9uIGRlcHJlY2F0ZShtZXRob2QsIG5hbWUsIG1lc3NhZ2UpIHtcbiAgICB2YXIgZGVwcmVjYXRpb25NZXNzYWdlID0gJ0RFUFJFQ0FURUQgTUVUSE9EOiAnICsgbmFtZSArICdcXG4nICsgbWVzc2FnZSArICcgQVQgXFxuJztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBlID0gbmV3IEVycm9yKCdnZXQtc3RhY2stdHJhY2UnKTtcbiAgICAgICAgdmFyIHN0YWNrID0gZSAmJiBlLnN0YWNrID8gZS5zdGFjay5yZXBsYWNlKC9eW15cXChdKz9bXFxuJF0vZ20sICcnKVxuICAgICAgICAgICAgLnJlcGxhY2UoL15cXHMrYXRcXHMrL2dtLCAnJylcbiAgICAgICAgICAgIC5yZXBsYWNlKC9eT2JqZWN0Ljxhbm9ueW1vdXM+XFxzKlxcKC9nbSwgJ3thbm9ueW1vdXN9KClAJykgOiAnVW5rbm93biBTdGFjayBUcmFjZSc7XG5cbiAgICAgICAgdmFyIGxvZyA9IHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS53YXJuIHx8IHdpbmRvdy5jb25zb2xlLmxvZyk7XG4gICAgICAgIGlmIChsb2cpIHtcbiAgICAgICAgICAgIGxvZy5jYWxsKHdpbmRvdy5jb25zb2xlLCBkZXByZWNhdGlvbk1lc3NhZ2UsIHN0YWNrKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWV0aG9kLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBleHRlbmQgb2JqZWN0LlxuICogbWVhbnMgdGhhdCBwcm9wZXJ0aWVzIGluIGRlc3Qgd2lsbCBiZSBvdmVyd3JpdHRlbiBieSB0aGUgb25lcyBpbiBzcmMuXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0XG4gKiBAcGFyYW0gey4uLk9iamVjdH0gb2JqZWN0c190b19hc3NpZ25cbiAqIEByZXR1cm5zIHtPYmplY3R9IHRhcmdldFxuICovXG52YXIgYXNzaWduO1xuaWYgKHR5cGVvZiBPYmplY3QuYXNzaWduICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgYXNzaWduID0gZnVuY3Rpb24gYXNzaWduKHRhcmdldCkge1xuICAgICAgICBpZiAodGFyZ2V0ID09PSB1bmRlZmluZWQgfHwgdGFyZ2V0ID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY29udmVydCB1bmRlZmluZWQgb3IgbnVsbCB0byBvYmplY3QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBvdXRwdXQgPSBPYmplY3QodGFyZ2V0KTtcbiAgICAgICAgZm9yICh2YXIgaW5kZXggPSAxOyBpbmRleCA8IGFyZ3VtZW50cy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKHNvdXJjZSAhPT0gdW5kZWZpbmVkICYmIHNvdXJjZSAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIG5leHRLZXkgaW4gc291cmNlKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UuaGFzT3duUHJvcGVydHkobmV4dEtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG91dHB1dFtuZXh0S2V5XSA9IHNvdXJjZVtuZXh0S2V5XTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH07XG59IGVsc2Uge1xuICAgIGFzc2lnbiA9IE9iamVjdC5hc3NpZ247XG59XG5cbi8qKlxuICogZXh0ZW5kIG9iamVjdC5cbiAqIG1lYW5zIHRoYXQgcHJvcGVydGllcyBpbiBkZXN0IHdpbGwgYmUgb3ZlcndyaXR0ZW4gYnkgdGhlIG9uZXMgaW4gc3JjLlxuICogQHBhcmFtIHtPYmplY3R9IGRlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzcmNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW21lcmdlPWZhbHNlXVxuICogQHJldHVybnMge09iamVjdH0gZGVzdFxuICovXG52YXIgZXh0ZW5kID0gZGVwcmVjYXRlKGZ1bmN0aW9uIGV4dGVuZChkZXN0LCBzcmMsIG1lcmdlKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhzcmMpO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGtleXMubGVuZ3RoKSB7XG4gICAgICAgIGlmICghbWVyZ2UgfHwgKG1lcmdlICYmIGRlc3Rba2V5c1tpXV0gPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgICAgIGRlc3Rba2V5c1tpXV0gPSBzcmNba2V5c1tpXV07XG4gICAgICAgIH1cbiAgICAgICAgaSsrO1xuICAgIH1cbiAgICByZXR1cm4gZGVzdDtcbn0sICdleHRlbmQnLCAnVXNlIGBhc3NpZ25gLicpO1xuXG4vKipcbiAqIG1lcmdlIHRoZSB2YWx1ZXMgZnJvbSBzcmMgaW4gdGhlIGRlc3QuXG4gKiBtZWFucyB0aGF0IHByb3BlcnRpZXMgdGhhdCBleGlzdCBpbiBkZXN0IHdpbGwgbm90IGJlIG92ZXJ3cml0dGVuIGJ5IHNyY1xuICogQHBhcmFtIHtPYmplY3R9IGRlc3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBzcmNcbiAqIEByZXR1cm5zIHtPYmplY3R9IGRlc3RcbiAqL1xudmFyIG1lcmdlID0gZGVwcmVjYXRlKGZ1bmN0aW9uIG1lcmdlKGRlc3QsIHNyYykge1xuICAgIHJldHVybiBleHRlbmQoZGVzdCwgc3JjLCB0cnVlKTtcbn0sICdtZXJnZScsICdVc2UgYGFzc2lnbmAuJyk7XG5cbi8qKlxuICogc2ltcGxlIGNsYXNzIGluaGVyaXRhbmNlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjaGlsZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gYmFzZVxuICogQHBhcmFtIHtPYmplY3R9IFtwcm9wZXJ0aWVzXVxuICovXG5mdW5jdGlvbiBpbmhlcml0KGNoaWxkLCBiYXNlLCBwcm9wZXJ0aWVzKSB7XG4gICAgdmFyIGJhc2VQID0gYmFzZS5wcm90b3R5cGUsXG4gICAgICAgIGNoaWxkUDtcblxuICAgIGNoaWxkUCA9IGNoaWxkLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoYmFzZVApO1xuICAgIGNoaWxkUC5jb25zdHJ1Y3RvciA9IGNoaWxkO1xuICAgIGNoaWxkUC5fc3VwZXIgPSBiYXNlUDtcblxuICAgIGlmIChwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGFzc2lnbihjaGlsZFAsIHByb3BlcnRpZXMpO1xuICAgIH1cbn1cblxuLyoqXG4gKiBzaW1wbGUgZnVuY3Rpb24gYmluZFxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb250ZXh0XG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmZ1bmN0aW9uIGJpbmRGbihmbiwgY29udGV4dCkge1xuICAgIHJldHVybiBmdW5jdGlvbiBib3VuZEZuKCkge1xuICAgICAgICByZXR1cm4gZm4uYXBwbHkoY29udGV4dCwgYXJndW1lbnRzKTtcbiAgICB9O1xufVxuXG4vKipcbiAqIGxldCBhIGJvb2xlYW4gdmFsdWUgYWxzbyBiZSBhIGZ1bmN0aW9uIHRoYXQgbXVzdCByZXR1cm4gYSBib29sZWFuXG4gKiB0aGlzIGZpcnN0IGl0ZW0gaW4gYXJncyB3aWxsIGJlIHVzZWQgYXMgdGhlIGNvbnRleHRcbiAqIEBwYXJhbSB7Qm9vbGVhbnxGdW5jdGlvbn0gdmFsXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJnc11cbiAqIEByZXR1cm5zIHtCb29sZWFufVxuICovXG5mdW5jdGlvbiBib29sT3JGbih2YWwsIGFyZ3MpIHtcbiAgICBpZiAodHlwZW9mIHZhbCA9PSBUWVBFX0ZVTkNUSU9OKSB7XG4gICAgICAgIHJldHVybiB2YWwuYXBwbHkoYXJncyA/IGFyZ3NbMF0gfHwgdW5kZWZpbmVkIDogdW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbDtcbn1cblxuLyoqXG4gKiB1c2UgdGhlIHZhbDIgd2hlbiB2YWwxIGlzIHVuZGVmaW5lZFxuICogQHBhcmFtIHsqfSB2YWwxXG4gKiBAcGFyYW0geyp9IHZhbDJcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBpZlVuZGVmaW5lZCh2YWwxLCB2YWwyKSB7XG4gICAgcmV0dXJuICh2YWwxID09PSB1bmRlZmluZWQpID8gdmFsMiA6IHZhbDE7XG59XG5cbi8qKlxuICogYWRkRXZlbnRMaXN0ZW5lciB3aXRoIG11bHRpcGxlIGV2ZW50cyBhdCBvbmNlXG4gKiBAcGFyYW0ge0V2ZW50VGFyZ2V0fSB0YXJnZXRcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICovXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVycyh0YXJnZXQsIHR5cGVzLCBoYW5kbGVyKSB7XG4gICAgZWFjaChzcGxpdFN0cih0eXBlcyksIGZ1bmN0aW9uKHR5cGUpIHtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgZmFsc2UpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIHJlbW92ZUV2ZW50TGlzdGVuZXIgd2l0aCBtdWx0aXBsZSBldmVudHMgYXQgb25jZVxuICogQHBhcmFtIHtFdmVudFRhcmdldH0gdGFyZ2V0XG4gKiBAcGFyYW0ge1N0cmluZ30gdHlwZXNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGhhbmRsZXJcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGFyZ2V0LCB0eXBlcywgaGFuZGxlcikge1xuICAgIGVhY2goc3BsaXRTdHIodHlwZXMpLCBmdW5jdGlvbih0eXBlKSB7XG4gICAgICAgIHRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGhhbmRsZXIsIGZhbHNlKTtcbiAgICB9KTtcbn1cblxuLyoqXG4gKiBmaW5kIGlmIGEgbm9kZSBpcyBpbiB0aGUgZ2l2ZW4gcGFyZW50XG4gKiBAbWV0aG9kIGhhc1BhcmVudFxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gbm9kZVxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gcGFyZW50XG4gKiBAcmV0dXJuIHtCb29sZWFufSBmb3VuZFxuICovXG5mdW5jdGlvbiBoYXNQYXJlbnQobm9kZSwgcGFyZW50KSB7XG4gICAgd2hpbGUgKG5vZGUpIHtcbiAgICAgICAgaWYgKG5vZGUgPT0gcGFyZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogc21hbGwgaW5kZXhPZiB3cmFwcGVyXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gZmluZFxuICogQHJldHVybnMge0Jvb2xlYW59IGZvdW5kXG4gKi9cbmZ1bmN0aW9uIGluU3RyKHN0ciwgZmluZCkge1xuICAgIHJldHVybiBzdHIuaW5kZXhPZihmaW5kKSA+IC0xO1xufVxuXG4vKipcbiAqIHNwbGl0IHN0cmluZyBvbiB3aGl0ZXNwYWNlXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcmV0dXJucyB7QXJyYXl9IHdvcmRzXG4gKi9cbmZ1bmN0aW9uIHNwbGl0U3RyKHN0cikge1xuICAgIHJldHVybiBzdHIudHJpbSgpLnNwbGl0KC9cXHMrL2cpO1xufVxuXG4vKipcbiAqIGZpbmQgaWYgYSBhcnJheSBjb250YWlucyB0aGUgb2JqZWN0IHVzaW5nIGluZGV4T2Ygb3IgYSBzaW1wbGUgcG9seUZpbGxcbiAqIEBwYXJhbSB7QXJyYXl9IHNyY1xuICogQHBhcmFtIHtTdHJpbmd9IGZpbmRcbiAqIEBwYXJhbSB7U3RyaW5nfSBbZmluZEJ5S2V5XVxuICogQHJldHVybiB7Qm9vbGVhbnxOdW1iZXJ9IGZhbHNlIHdoZW4gbm90IGZvdW5kLCBvciB0aGUgaW5kZXhcbiAqL1xuZnVuY3Rpb24gaW5BcnJheShzcmMsIGZpbmQsIGZpbmRCeUtleSkge1xuICAgIGlmIChzcmMuaW5kZXhPZiAmJiAhZmluZEJ5S2V5KSB7XG4gICAgICAgIHJldHVybiBzcmMuaW5kZXhPZihmaW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgc3JjLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKChmaW5kQnlLZXkgJiYgc3JjW2ldW2ZpbmRCeUtleV0gPT0gZmluZCkgfHwgKCFmaW5kQnlLZXkgJiYgc3JjW2ldID09PSBmaW5kKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG59XG5cbi8qKlxuICogY29udmVydCBhcnJheS1saWtlIG9iamVjdHMgdG8gcmVhbCBhcnJheXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuZnVuY3Rpb24gdG9BcnJheShvYmopIHtcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwob2JqLCAwKTtcbn1cblxuLyoqXG4gKiB1bmlxdWUgYXJyYXkgd2l0aCBvYmplY3RzIGJhc2VkIG9uIGEga2V5IChsaWtlICdpZCcpIG9yIGp1c3QgYnkgdGhlIGFycmF5J3MgdmFsdWVcbiAqIEBwYXJhbSB7QXJyYXl9IHNyYyBbe2lkOjF9LHtpZDoyfSx7aWQ6MX1dXG4gKiBAcGFyYW0ge1N0cmluZ30gW2tleV1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW3NvcnQ9RmFsc2VdXG4gKiBAcmV0dXJucyB7QXJyYXl9IFt7aWQ6MX0se2lkOjJ9XVxuICovXG5mdW5jdGlvbiB1bmlxdWVBcnJheShzcmMsIGtleSwgc29ydCkge1xuICAgIHZhciByZXN1bHRzID0gW107XG4gICAgdmFyIHZhbHVlcyA9IFtdO1xuICAgIHZhciBpID0gMDtcblxuICAgIHdoaWxlIChpIDwgc3JjLmxlbmd0aCkge1xuICAgICAgICB2YXIgdmFsID0ga2V5ID8gc3JjW2ldW2tleV0gOiBzcmNbaV07XG4gICAgICAgIGlmIChpbkFycmF5KHZhbHVlcywgdmFsKSA8IDApIHtcbiAgICAgICAgICAgIHJlc3VsdHMucHVzaChzcmNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlc1tpXSA9IHZhbDtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIGlmIChzb3J0KSB7XG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zb3J0KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXN1bHRzID0gcmVzdWx0cy5zb3J0KGZ1bmN0aW9uIHNvcnRVbmlxdWVBcnJheShhLCBiKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFba2V5XSA+IGJba2V5XTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbi8qKlxuICogZ2V0IHRoZSBwcmVmaXhlZCBwcm9wZXJ0eVxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHtTdHJpbmd9IHByb3BlcnR5XG4gKiBAcmV0dXJucyB7U3RyaW5nfFVuZGVmaW5lZH0gcHJlZml4ZWRcbiAqL1xuZnVuY3Rpb24gcHJlZml4ZWQob2JqLCBwcm9wZXJ0eSkge1xuICAgIHZhciBwcmVmaXgsIHByb3A7XG4gICAgdmFyIGNhbWVsUHJvcCA9IHByb3BlcnR5WzBdLnRvVXBwZXJDYXNlKCkgKyBwcm9wZXJ0eS5zbGljZSgxKTtcblxuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IFZFTkRPUl9QUkVGSVhFUy5sZW5ndGgpIHtcbiAgICAgICAgcHJlZml4ID0gVkVORE9SX1BSRUZJWEVTW2ldO1xuICAgICAgICBwcm9wID0gKHByZWZpeCkgPyBwcmVmaXggKyBjYW1lbFByb3AgOiBwcm9wZXJ0eTtcblxuICAgICAgICBpZiAocHJvcCBpbiBvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9wO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBnZXQgYSB1bmlxdWUgaWRcbiAqIEByZXR1cm5zIHtudW1iZXJ9IHVuaXF1ZUlkXG4gKi9cbnZhciBfdW5pcXVlSWQgPSAxO1xuZnVuY3Rpb24gdW5pcXVlSWQoKSB7XG4gICAgcmV0dXJuIF91bmlxdWVJZCsrO1xufVxuXG4vKipcbiAqIGdldCB0aGUgd2luZG93IG9iamVjdCBvZiBhbiBlbGVtZW50XG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcmV0dXJucyB7RG9jdW1lbnRWaWV3fFdpbmRvd31cbiAqL1xuZnVuY3Rpb24gZ2V0V2luZG93Rm9yRWxlbWVudChlbGVtZW50KSB7XG4gICAgdmFyIGRvYyA9IGVsZW1lbnQub3duZXJEb2N1bWVudCB8fCBlbGVtZW50O1xuICAgIHJldHVybiAoZG9jLmRlZmF1bHRWaWV3IHx8IGRvYy5wYXJlbnRXaW5kb3cgfHwgd2luZG93KTtcbn1cblxudmFyIE1PQklMRV9SRUdFWCA9IC9tb2JpbGV8dGFibGV0fGlwKGFkfGhvbmV8b2QpfGFuZHJvaWQvaTtcblxudmFyIFNVUFBPUlRfVE9VQ0ggPSAoJ29udG91Y2hzdGFydCcgaW4gd2luZG93KTtcbnZhciBTVVBQT1JUX1BPSU5URVJfRVZFTlRTID0gcHJlZml4ZWQod2luZG93LCAnUG9pbnRlckV2ZW50JykgIT09IHVuZGVmaW5lZDtcbnZhciBTVVBQT1JUX09OTFlfVE9VQ0ggPSBTVVBQT1JUX1RPVUNIICYmIE1PQklMRV9SRUdFWC50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG52YXIgSU5QVVRfVFlQRV9UT1VDSCA9ICd0b3VjaCc7XG52YXIgSU5QVVRfVFlQRV9QRU4gPSAncGVuJztcbnZhciBJTlBVVF9UWVBFX01PVVNFID0gJ21vdXNlJztcbnZhciBJTlBVVF9UWVBFX0tJTkVDVCA9ICdraW5lY3QnO1xuXG52YXIgQ09NUFVURV9JTlRFUlZBTCA9IDI1O1xuXG52YXIgSU5QVVRfU1RBUlQgPSAxO1xudmFyIElOUFVUX01PVkUgPSAyO1xudmFyIElOUFVUX0VORCA9IDQ7XG52YXIgSU5QVVRfQ0FOQ0VMID0gODtcblxudmFyIERJUkVDVElPTl9OT05FID0gMTtcbnZhciBESVJFQ1RJT05fTEVGVCA9IDI7XG52YXIgRElSRUNUSU9OX1JJR0hUID0gNDtcbnZhciBESVJFQ1RJT05fVVAgPSA4O1xudmFyIERJUkVDVElPTl9ET1dOID0gMTY7XG5cbnZhciBESVJFQ1RJT05fSE9SSVpPTlRBTCA9IERJUkVDVElPTl9MRUZUIHwgRElSRUNUSU9OX1JJR0hUO1xudmFyIERJUkVDVElPTl9WRVJUSUNBTCA9IERJUkVDVElPTl9VUCB8IERJUkVDVElPTl9ET1dOO1xudmFyIERJUkVDVElPTl9BTEwgPSBESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTDtcblxudmFyIFBST1BTX1hZID0gWyd4JywgJ3knXTtcbnZhciBQUk9QU19DTElFTlRfWFkgPSBbJ2NsaWVudFgnLCAnY2xpZW50WSddO1xuXG4vKipcbiAqIGNyZWF0ZSBuZXcgaW5wdXQgdHlwZSBtYW5hZ2VyXG4gKiBAcGFyYW0ge01hbmFnZXJ9IG1hbmFnZXJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKiBAcmV0dXJucyB7SW5wdXR9XG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gSW5wdXQobWFuYWdlciwgY2FsbGJhY2spIHtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdGhpcy5tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgdGhpcy5lbGVtZW50ID0gbWFuYWdlci5lbGVtZW50O1xuICAgIHRoaXMudGFyZ2V0ID0gbWFuYWdlci5vcHRpb25zLmlucHV0VGFyZ2V0O1xuXG4gICAgLy8gc21hbGxlciB3cmFwcGVyIGFyb3VuZCB0aGUgaGFuZGxlciwgZm9yIHRoZSBzY29wZSBhbmQgdGhlIGVuYWJsZWQgc3RhdGUgb2YgdGhlIG1hbmFnZXIsXG4gICAgLy8gc28gd2hlbiBkaXNhYmxlZCB0aGUgaW5wdXQgZXZlbnRzIGFyZSBjb21wbGV0ZWx5IGJ5cGFzc2VkLlxuICAgIHRoaXMuZG9tSGFuZGxlciA9IGZ1bmN0aW9uKGV2KSB7XG4gICAgICAgIGlmIChib29sT3JGbihtYW5hZ2VyLm9wdGlvbnMuZW5hYmxlLCBbbWFuYWdlcl0pKSB7XG4gICAgICAgICAgICBzZWxmLmhhbmRsZXIoZXYpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHRoaXMuaW5pdCgpO1xuXG59XG5cbklucHV0LnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzaG91bGQgaGFuZGxlIHRoZSBpbnB1dEV2ZW50IGRhdGEgYW5kIHRyaWdnZXIgdGhlIGNhbGxiYWNrXG4gICAgICogQHZpcnR1YWxcbiAgICAgKi9cbiAgICBoYW5kbGVyOiBmdW5jdGlvbigpIHsgfSxcblxuICAgIC8qKlxuICAgICAqIGJpbmQgdGhlIGV2ZW50c1xuICAgICAqL1xuICAgIGluaXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmV2RWwgJiYgYWRkRXZlbnRMaXN0ZW5lcnModGhpcy5lbGVtZW50LCB0aGlzLmV2RWwsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZUYXJnZXQgJiYgYWRkRXZlbnRMaXN0ZW5lcnModGhpcy50YXJnZXQsIHRoaXMuZXZUYXJnZXQsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZXaW4gJiYgYWRkRXZlbnRMaXN0ZW5lcnMoZ2V0V2luZG93Rm9yRWxlbWVudCh0aGlzLmVsZW1lbnQpLCB0aGlzLmV2V2luLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1bmJpbmQgdGhlIGV2ZW50c1xuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmV2RWwgJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy5lbGVtZW50LCB0aGlzLmV2RWwsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZUYXJnZXQgJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnModGhpcy50YXJnZXQsIHRoaXMuZXZUYXJnZXQsIHRoaXMuZG9tSGFuZGxlcik7XG4gICAgICAgIHRoaXMuZXZXaW4gJiYgcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoZ2V0V2luZG93Rm9yRWxlbWVudCh0aGlzLmVsZW1lbnQpLCB0aGlzLmV2V2luLCB0aGlzLmRvbUhhbmRsZXIpO1xuICAgIH1cbn07XG5cbi8qKlxuICogY3JlYXRlIG5ldyBpbnB1dCB0eXBlIG1hbmFnZXJcbiAqIGNhbGxlZCBieSB0aGUgTWFuYWdlciBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtIYW1tZXJ9IG1hbmFnZXJcbiAqIEByZXR1cm5zIHtJbnB1dH1cbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRJbnN0YW5jZShtYW5hZ2VyKSB7XG4gICAgdmFyIFR5cGU7XG4gICAgdmFyIGlucHV0Q2xhc3MgPSBtYW5hZ2VyLm9wdGlvbnMuaW5wdXRDbGFzcztcblxuICAgIGlmIChpbnB1dENsYXNzKSB7XG4gICAgICAgIFR5cGUgPSBpbnB1dENsYXNzO1xuICAgIH0gZWxzZSBpZiAoU1VQUE9SVF9QT0lOVEVSX0VWRU5UUykge1xuICAgICAgICBUeXBlID0gUG9pbnRlckV2ZW50SW5wdXQ7XG4gICAgfSBlbHNlIGlmIChTVVBQT1JUX09OTFlfVE9VQ0gpIHtcbiAgICAgICAgVHlwZSA9IFRvdWNoSW5wdXQ7XG4gICAgfSBlbHNlIGlmICghU1VQUE9SVF9UT1VDSCkge1xuICAgICAgICBUeXBlID0gTW91c2VJbnB1dDtcbiAgICB9IGVsc2Uge1xuICAgICAgICBUeXBlID0gVG91Y2hNb3VzZUlucHV0O1xuICAgIH1cbiAgICByZXR1cm4gbmV3IChUeXBlKShtYW5hZ2VyLCBpbnB1dEhhbmRsZXIpO1xufVxuXG4vKipcbiAqIGhhbmRsZSBpbnB1dCBldmVudHNcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50VHlwZVxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGlucHV0SGFuZGxlcihtYW5hZ2VyLCBldmVudFR5cGUsIGlucHV0KSB7XG4gICAgdmFyIHBvaW50ZXJzTGVuID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoO1xuICAgIHZhciBjaGFuZ2VkUG9pbnRlcnNMZW4gPSBpbnB1dC5jaGFuZ2VkUG9pbnRlcnMubGVuZ3RoO1xuICAgIHZhciBpc0ZpcnN0ID0gKGV2ZW50VHlwZSAmIElOUFVUX1NUQVJUICYmIChwb2ludGVyc0xlbiAtIGNoYW5nZWRQb2ludGVyc0xlbiA9PT0gMCkpO1xuICAgIHZhciBpc0ZpbmFsID0gKGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpICYmIChwb2ludGVyc0xlbiAtIGNoYW5nZWRQb2ludGVyc0xlbiA9PT0gMCkpO1xuXG4gICAgaW5wdXQuaXNGaXJzdCA9ICEhaXNGaXJzdDtcbiAgICBpbnB1dC5pc0ZpbmFsID0gISFpc0ZpbmFsO1xuXG4gICAgaWYgKGlzRmlyc3QpIHtcbiAgICAgICAgbWFuYWdlci5zZXNzaW9uID0ge307XG4gICAgfVxuXG4gICAgLy8gc291cmNlIGV2ZW50IGlzIHRoZSBub3JtYWxpemVkIHZhbHVlIG9mIHRoZSBkb21FdmVudHNcbiAgICAvLyBsaWtlICd0b3VjaHN0YXJ0LCBtb3VzZXVwLCBwb2ludGVyZG93bidcbiAgICBpbnB1dC5ldmVudFR5cGUgPSBldmVudFR5cGU7XG5cbiAgICAvLyBjb21wdXRlIHNjYWxlLCByb3RhdGlvbiBldGNcbiAgICBjb21wdXRlSW5wdXREYXRhKG1hbmFnZXIsIGlucHV0KTtcblxuICAgIC8vIGVtaXQgc2VjcmV0IGV2ZW50XG4gICAgbWFuYWdlci5lbWl0KCdoYW1tZXIuaW5wdXQnLCBpbnB1dCk7XG5cbiAgICBtYW5hZ2VyLnJlY29nbml6ZShpbnB1dCk7XG4gICAgbWFuYWdlci5zZXNzaW9uLnByZXZJbnB1dCA9IGlucHV0O1xufVxuXG4vKipcbiAqIGV4dGVuZCB0aGUgZGF0YSB3aXRoIHNvbWUgdXNhYmxlIHByb3BlcnRpZXMgbGlrZSBzY2FsZSwgcm90YXRlLCB2ZWxvY2l0eSBldGNcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYW5hZ2VyXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqL1xuZnVuY3Rpb24gY29tcHV0ZUlucHV0RGF0YShtYW5hZ2VyLCBpbnB1dCkge1xuICAgIHZhciBzZXNzaW9uID0gbWFuYWdlci5zZXNzaW9uO1xuICAgIHZhciBwb2ludGVycyA9IGlucHV0LnBvaW50ZXJzO1xuICAgIHZhciBwb2ludGVyc0xlbmd0aCA9IHBvaW50ZXJzLmxlbmd0aDtcblxuICAgIC8vIHN0b3JlIHRoZSBmaXJzdCBpbnB1dCB0byBjYWxjdWxhdGUgdGhlIGRpc3RhbmNlIGFuZCBkaXJlY3Rpb25cbiAgICBpZiAoIXNlc3Npb24uZmlyc3RJbnB1dCkge1xuICAgICAgICBzZXNzaW9uLmZpcnN0SW5wdXQgPSBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCk7XG4gICAgfVxuXG4gICAgLy8gdG8gY29tcHV0ZSBzY2FsZSBhbmQgcm90YXRpb24gd2UgbmVlZCB0byBzdG9yZSB0aGUgbXVsdGlwbGUgdG91Y2hlc1xuICAgIGlmIChwb2ludGVyc0xlbmd0aCA+IDEgJiYgIXNlc3Npb24uZmlyc3RNdWx0aXBsZSkge1xuICAgICAgICBzZXNzaW9uLmZpcnN0TXVsdGlwbGUgPSBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCk7XG4gICAgfSBlbHNlIGlmIChwb2ludGVyc0xlbmd0aCA9PT0gMSkge1xuICAgICAgICBzZXNzaW9uLmZpcnN0TXVsdGlwbGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RJbnB1dCA9IHNlc3Npb24uZmlyc3RJbnB1dDtcbiAgICB2YXIgZmlyc3RNdWx0aXBsZSA9IHNlc3Npb24uZmlyc3RNdWx0aXBsZTtcbiAgICB2YXIgb2Zmc2V0Q2VudGVyID0gZmlyc3RNdWx0aXBsZSA/IGZpcnN0TXVsdGlwbGUuY2VudGVyIDogZmlyc3RJbnB1dC5jZW50ZXI7XG5cbiAgICB2YXIgY2VudGVyID0gaW5wdXQuY2VudGVyID0gZ2V0Q2VudGVyKHBvaW50ZXJzKTtcbiAgICBpbnB1dC50aW1lU3RhbXAgPSBub3coKTtcbiAgICBpbnB1dC5kZWx0YVRpbWUgPSBpbnB1dC50aW1lU3RhbXAgLSBmaXJzdElucHV0LnRpbWVTdGFtcDtcblxuICAgIGlucHV0LmFuZ2xlID0gZ2V0QW5nbGUob2Zmc2V0Q2VudGVyLCBjZW50ZXIpO1xuICAgIGlucHV0LmRpc3RhbmNlID0gZ2V0RGlzdGFuY2Uob2Zmc2V0Q2VudGVyLCBjZW50ZXIpO1xuXG4gICAgY29tcHV0ZURlbHRhWFkoc2Vzc2lvbiwgaW5wdXQpO1xuICAgIGlucHV0Lm9mZnNldERpcmVjdGlvbiA9IGdldERpcmVjdGlvbihpbnB1dC5kZWx0YVgsIGlucHV0LmRlbHRhWSk7XG5cbiAgICB2YXIgb3ZlcmFsbFZlbG9jaXR5ID0gZ2V0VmVsb2NpdHkoaW5wdXQuZGVsdGFUaW1lLCBpbnB1dC5kZWx0YVgsIGlucHV0LmRlbHRhWSk7XG4gICAgaW5wdXQub3ZlcmFsbFZlbG9jaXR5WCA9IG92ZXJhbGxWZWxvY2l0eS54O1xuICAgIGlucHV0Lm92ZXJhbGxWZWxvY2l0eVkgPSBvdmVyYWxsVmVsb2NpdHkueTtcbiAgICBpbnB1dC5vdmVyYWxsVmVsb2NpdHkgPSAoYWJzKG92ZXJhbGxWZWxvY2l0eS54KSA+IGFicyhvdmVyYWxsVmVsb2NpdHkueSkpID8gb3ZlcmFsbFZlbG9jaXR5LnggOiBvdmVyYWxsVmVsb2NpdHkueTtcblxuICAgIGlucHV0LnNjYWxlID0gZmlyc3RNdWx0aXBsZSA/IGdldFNjYWxlKGZpcnN0TXVsdGlwbGUucG9pbnRlcnMsIHBvaW50ZXJzKSA6IDE7XG4gICAgaW5wdXQucm90YXRpb24gPSBmaXJzdE11bHRpcGxlID8gZ2V0Um90YXRpb24oZmlyc3RNdWx0aXBsZS5wb2ludGVycywgcG9pbnRlcnMpIDogMDtcblxuICAgIGlucHV0Lm1heFBvaW50ZXJzID0gIXNlc3Npb24ucHJldklucHV0ID8gaW5wdXQucG9pbnRlcnMubGVuZ3RoIDogKChpbnB1dC5wb2ludGVycy5sZW5ndGggPlxuICAgICAgICBzZXNzaW9uLnByZXZJbnB1dC5tYXhQb2ludGVycykgPyBpbnB1dC5wb2ludGVycy5sZW5ndGggOiBzZXNzaW9uLnByZXZJbnB1dC5tYXhQb2ludGVycyk7XG5cbiAgICBjb21wdXRlSW50ZXJ2YWxJbnB1dERhdGEoc2Vzc2lvbiwgaW5wdXQpO1xuXG4gICAgLy8gZmluZCB0aGUgY29ycmVjdCB0YXJnZXRcbiAgICB2YXIgdGFyZ2V0ID0gbWFuYWdlci5lbGVtZW50O1xuICAgIGlmIChoYXNQYXJlbnQoaW5wdXQuc3JjRXZlbnQudGFyZ2V0LCB0YXJnZXQpKSB7XG4gICAgICAgIHRhcmdldCA9IGlucHV0LnNyY0V2ZW50LnRhcmdldDtcbiAgICB9XG4gICAgaW5wdXQudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBjb21wdXRlRGVsdGFYWShzZXNzaW9uLCBpbnB1dCkge1xuICAgIHZhciBjZW50ZXIgPSBpbnB1dC5jZW50ZXI7XG4gICAgdmFyIG9mZnNldCA9IHNlc3Npb24ub2Zmc2V0RGVsdGEgfHwge307XG4gICAgdmFyIHByZXZEZWx0YSA9IHNlc3Npb24ucHJldkRlbHRhIHx8IHt9O1xuICAgIHZhciBwcmV2SW5wdXQgPSBzZXNzaW9uLnByZXZJbnB1dCB8fCB7fTtcblxuICAgIGlmIChpbnB1dC5ldmVudFR5cGUgPT09IElOUFVUX1NUQVJUIHx8IHByZXZJbnB1dC5ldmVudFR5cGUgPT09IElOUFVUX0VORCkge1xuICAgICAgICBwcmV2RGVsdGEgPSBzZXNzaW9uLnByZXZEZWx0YSA9IHtcbiAgICAgICAgICAgIHg6IHByZXZJbnB1dC5kZWx0YVggfHwgMCxcbiAgICAgICAgICAgIHk6IHByZXZJbnB1dC5kZWx0YVkgfHwgMFxuICAgICAgICB9O1xuXG4gICAgICAgIG9mZnNldCA9IHNlc3Npb24ub2Zmc2V0RGVsdGEgPSB7XG4gICAgICAgICAgICB4OiBjZW50ZXIueCxcbiAgICAgICAgICAgIHk6IGNlbnRlci55XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaW5wdXQuZGVsdGFYID0gcHJldkRlbHRhLnggKyAoY2VudGVyLnggLSBvZmZzZXQueCk7XG4gICAgaW5wdXQuZGVsdGFZID0gcHJldkRlbHRhLnkgKyAoY2VudGVyLnkgLSBvZmZzZXQueSk7XG59XG5cbi8qKlxuICogdmVsb2NpdHkgaXMgY2FsY3VsYXRlZCBldmVyeSB4IG1zXG4gKiBAcGFyYW0ge09iamVjdH0gc2Vzc2lvblxuICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVJbnRlcnZhbElucHV0RGF0YShzZXNzaW9uLCBpbnB1dCkge1xuICAgIHZhciBsYXN0ID0gc2Vzc2lvbi5sYXN0SW50ZXJ2YWwgfHwgaW5wdXQsXG4gICAgICAgIGRlbHRhVGltZSA9IGlucHV0LnRpbWVTdGFtcCAtIGxhc3QudGltZVN0YW1wLFxuICAgICAgICB2ZWxvY2l0eSwgdmVsb2NpdHlYLCB2ZWxvY2l0eVksIGRpcmVjdGlvbjtcblxuICAgIGlmIChpbnB1dC5ldmVudFR5cGUgIT0gSU5QVVRfQ0FOQ0VMICYmIChkZWx0YVRpbWUgPiBDT01QVVRFX0lOVEVSVkFMIHx8IGxhc3QudmVsb2NpdHkgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgdmFyIGRlbHRhWCA9IGlucHV0LmRlbHRhWCAtIGxhc3QuZGVsdGFYO1xuICAgICAgICB2YXIgZGVsdGFZID0gaW5wdXQuZGVsdGFZIC0gbGFzdC5kZWx0YVk7XG5cbiAgICAgICAgdmFyIHYgPSBnZXRWZWxvY2l0eShkZWx0YVRpbWUsIGRlbHRhWCwgZGVsdGFZKTtcbiAgICAgICAgdmVsb2NpdHlYID0gdi54O1xuICAgICAgICB2ZWxvY2l0eVkgPSB2Lnk7XG4gICAgICAgIHZlbG9jaXR5ID0gKGFicyh2LngpID4gYWJzKHYueSkpID8gdi54IDogdi55O1xuICAgICAgICBkaXJlY3Rpb24gPSBnZXREaXJlY3Rpb24oZGVsdGFYLCBkZWx0YVkpO1xuXG4gICAgICAgIHNlc3Npb24ubGFzdEludGVydmFsID0gaW5wdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXNlIGxhdGVzdCB2ZWxvY2l0eSBpbmZvIGlmIGl0IGRvZXNuJ3Qgb3ZlcnRha2UgYSBtaW5pbXVtIHBlcmlvZFxuICAgICAgICB2ZWxvY2l0eSA9IGxhc3QudmVsb2NpdHk7XG4gICAgICAgIHZlbG9jaXR5WCA9IGxhc3QudmVsb2NpdHlYO1xuICAgICAgICB2ZWxvY2l0eVkgPSBsYXN0LnZlbG9jaXR5WTtcbiAgICAgICAgZGlyZWN0aW9uID0gbGFzdC5kaXJlY3Rpb247XG4gICAgfVxuXG4gICAgaW5wdXQudmVsb2NpdHkgPSB2ZWxvY2l0eTtcbiAgICBpbnB1dC52ZWxvY2l0eVggPSB2ZWxvY2l0eVg7XG4gICAgaW5wdXQudmVsb2NpdHlZID0gdmVsb2NpdHlZO1xuICAgIGlucHV0LmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbn1cblxuLyoqXG4gKiBjcmVhdGUgYSBzaW1wbGUgY2xvbmUgZnJvbSB0aGUgaW5wdXQgdXNlZCBmb3Igc3RvcmFnZSBvZiBmaXJzdElucHV0IGFuZCBmaXJzdE11bHRpcGxlXG4gKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAqIEByZXR1cm5zIHtPYmplY3R9IGNsb25lZElucHV0RGF0YVxuICovXG5mdW5jdGlvbiBzaW1wbGVDbG9uZUlucHV0RGF0YShpbnB1dCkge1xuICAgIC8vIG1ha2UgYSBzaW1wbGUgY29weSBvZiB0aGUgcG9pbnRlcnMgYmVjYXVzZSB3ZSB3aWxsIGdldCBhIHJlZmVyZW5jZSBpZiB3ZSBkb24ndFxuICAgIC8vIHdlIG9ubHkgbmVlZCBjbGllbnRYWSBmb3IgdGhlIGNhbGN1bGF0aW9uc1xuICAgIHZhciBwb2ludGVycyA9IFtdO1xuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAoaSA8IGlucHV0LnBvaW50ZXJzLmxlbmd0aCkge1xuICAgICAgICBwb2ludGVyc1tpXSA9IHtcbiAgICAgICAgICAgIGNsaWVudFg6IHJvdW5kKGlucHV0LnBvaW50ZXJzW2ldLmNsaWVudFgpLFxuICAgICAgICAgICAgY2xpZW50WTogcm91bmQoaW5wdXQucG9pbnRlcnNbaV0uY2xpZW50WSlcbiAgICAgICAgfTtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHRpbWVTdGFtcDogbm93KCksXG4gICAgICAgIHBvaW50ZXJzOiBwb2ludGVycyxcbiAgICAgICAgY2VudGVyOiBnZXRDZW50ZXIocG9pbnRlcnMpLFxuICAgICAgICBkZWx0YVg6IGlucHV0LmRlbHRhWCxcbiAgICAgICAgZGVsdGFZOiBpbnB1dC5kZWx0YVlcbiAgICB9O1xufVxuXG4vKipcbiAqIGdldCB0aGUgY2VudGVyIG9mIGFsbCB0aGUgcG9pbnRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IHBvaW50ZXJzXG4gKiBAcmV0dXJuIHtPYmplY3R9IGNlbnRlciBjb250YWlucyBgeGAgYW5kIGB5YCBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIGdldENlbnRlcihwb2ludGVycykge1xuICAgIHZhciBwb2ludGVyc0xlbmd0aCA9IHBvaW50ZXJzLmxlbmd0aDtcblxuICAgIC8vIG5vIG5lZWQgdG8gbG9vcCB3aGVuIG9ubHkgb25lIHRvdWNoXG4gICAgaWYgKHBvaW50ZXJzTGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiByb3VuZChwb2ludGVyc1swXS5jbGllbnRYKSxcbiAgICAgICAgICAgIHk6IHJvdW5kKHBvaW50ZXJzWzBdLmNsaWVudFkpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIHggPSAwLCB5ID0gMCwgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBwb2ludGVyc0xlbmd0aCkge1xuICAgICAgICB4ICs9IHBvaW50ZXJzW2ldLmNsaWVudFg7XG4gICAgICAgIHkgKz0gcG9pbnRlcnNbaV0uY2xpZW50WTtcbiAgICAgICAgaSsrO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgIHg6IHJvdW5kKHggLyBwb2ludGVyc0xlbmd0aCksXG4gICAgICAgIHk6IHJvdW5kKHkgLyBwb2ludGVyc0xlbmd0aClcbiAgICB9O1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgdmVsb2NpdHkgYmV0d2VlbiB0d28gcG9pbnRzLiB1bml0IGlzIGluIHB4IHBlciBtcy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBkZWx0YVRpbWVcbiAqIEBwYXJhbSB7TnVtYmVyfSB4XG4gKiBAcGFyYW0ge051bWJlcn0geVxuICogQHJldHVybiB7T2JqZWN0fSB2ZWxvY2l0eSBgeGAgYW5kIGB5YFxuICovXG5mdW5jdGlvbiBnZXRWZWxvY2l0eShkZWx0YVRpbWUsIHgsIHkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB4OiB4IC8gZGVsdGFUaW1lIHx8IDAsXG4gICAgICAgIHk6IHkgLyBkZWx0YVRpbWUgfHwgMFxuICAgIH07XG59XG5cbi8qKlxuICogZ2V0IHRoZSBkaXJlY3Rpb24gYmV0d2VlbiB0d28gcG9pbnRzXG4gKiBAcGFyYW0ge051bWJlcn0geFxuICogQHBhcmFtIHtOdW1iZXJ9IHlcbiAqIEByZXR1cm4ge051bWJlcn0gZGlyZWN0aW9uXG4gKi9cbmZ1bmN0aW9uIGdldERpcmVjdGlvbih4LCB5KSB7XG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgICAgcmV0dXJuIERJUkVDVElPTl9OT05FO1xuICAgIH1cblxuICAgIGlmIChhYnMoeCkgPj0gYWJzKHkpKSB7XG4gICAgICAgIHJldHVybiB4IDwgMCA/IERJUkVDVElPTl9MRUZUIDogRElSRUNUSU9OX1JJR0hUO1xuICAgIH1cbiAgICByZXR1cm4geSA8IDAgPyBESVJFQ1RJT05fVVAgOiBESVJFQ1RJT05fRE9XTjtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIGFic29sdXRlIGRpc3RhbmNlIGJldHdlZW4gdHdvIHBvaW50c1xuICogQHBhcmFtIHtPYmplY3R9IHAxIHt4LCB5fVxuICogQHBhcmFtIHtPYmplY3R9IHAyIHt4LCB5fVxuICogQHBhcmFtIHtBcnJheX0gW3Byb3BzXSBjb250YWluaW5nIHggYW5kIHkga2V5c1xuICogQHJldHVybiB7TnVtYmVyfSBkaXN0YW5jZVxuICovXG5mdW5jdGlvbiBnZXREaXN0YW5jZShwMSwgcDIsIHByb3BzKSB7XG4gICAgaWYgKCFwcm9wcykge1xuICAgICAgICBwcm9wcyA9IFBST1BTX1hZO1xuICAgIH1cbiAgICB2YXIgeCA9IHAyW3Byb3BzWzBdXSAtIHAxW3Byb3BzWzBdXSxcbiAgICAgICAgeSA9IHAyW3Byb3BzWzFdXSAtIHAxW3Byb3BzWzFdXTtcblxuICAgIHJldHVybiBNYXRoLnNxcnQoKHggKiB4KSArICh5ICogeSkpO1xufVxuXG4vKipcbiAqIGNhbGN1bGF0ZSB0aGUgYW5nbGUgYmV0d2VlbiB0d28gY29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7T2JqZWN0fSBwMVxuICogQHBhcmFtIHtPYmplY3R9IHAyXG4gKiBAcGFyYW0ge0FycmF5fSBbcHJvcHNdIGNvbnRhaW5pbmcgeCBhbmQgeSBrZXlzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IGFuZ2xlXG4gKi9cbmZ1bmN0aW9uIGdldEFuZ2xlKHAxLCBwMiwgcHJvcHMpIHtcbiAgICBpZiAoIXByb3BzKSB7XG4gICAgICAgIHByb3BzID0gUFJPUFNfWFk7XG4gICAgfVxuICAgIHZhciB4ID0gcDJbcHJvcHNbMF1dIC0gcDFbcHJvcHNbMF1dLFxuICAgICAgICB5ID0gcDJbcHJvcHNbMV1dIC0gcDFbcHJvcHNbMV1dO1xuICAgIHJldHVybiBNYXRoLmF0YW4yKHksIHgpICogMTgwIC8gTWF0aC5QSTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIHJvdGF0aW9uIGRlZ3JlZXMgYmV0d2VlbiB0d28gcG9pbnRlcnNldHNcbiAqIEBwYXJhbSB7QXJyYXl9IHN0YXJ0IGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcGFyYW0ge0FycmF5fSBlbmQgYXJyYXkgb2YgcG9pbnRlcnNcbiAqIEByZXR1cm4ge051bWJlcn0gcm90YXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0Um90YXRpb24oc3RhcnQsIGVuZCkge1xuICAgIHJldHVybiBnZXRBbmdsZShlbmRbMV0sIGVuZFswXSwgUFJPUFNfQ0xJRU5UX1hZKSArIGdldEFuZ2xlKHN0YXJ0WzFdLCBzdGFydFswXSwgUFJPUFNfQ0xJRU5UX1hZKTtcbn1cblxuLyoqXG4gKiBjYWxjdWxhdGUgdGhlIHNjYWxlIGZhY3RvciBiZXR3ZWVuIHR3byBwb2ludGVyc2V0c1xuICogbm8gc2NhbGUgaXMgMSwgYW5kIGdvZXMgZG93biB0byAwIHdoZW4gcGluY2hlZCB0b2dldGhlciwgYW5kIGJpZ2dlciB3aGVuIHBpbmNoZWQgb3V0XG4gKiBAcGFyYW0ge0FycmF5fSBzdGFydCBhcnJheSBvZiBwb2ludGVyc1xuICogQHBhcmFtIHtBcnJheX0gZW5kIGFycmF5IG9mIHBvaW50ZXJzXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHNjYWxlXG4gKi9cbmZ1bmN0aW9uIGdldFNjYWxlKHN0YXJ0LCBlbmQpIHtcbiAgICByZXR1cm4gZ2V0RGlzdGFuY2UoZW5kWzBdLCBlbmRbMV0sIFBST1BTX0NMSUVOVF9YWSkgLyBnZXREaXN0YW5jZShzdGFydFswXSwgc3RhcnRbMV0sIFBST1BTX0NMSUVOVF9YWSk7XG59XG5cbnZhciBNT1VTRV9JTlBVVF9NQVAgPSB7XG4gICAgbW91c2Vkb3duOiBJTlBVVF9TVEFSVCxcbiAgICBtb3VzZW1vdmU6IElOUFVUX01PVkUsXG4gICAgbW91c2V1cDogSU5QVVRfRU5EXG59O1xuXG52YXIgTU9VU0VfRUxFTUVOVF9FVkVOVFMgPSAnbW91c2Vkb3duJztcbnZhciBNT1VTRV9XSU5ET1dfRVZFTlRTID0gJ21vdXNlbW92ZSBtb3VzZXVwJztcblxuLyoqXG4gKiBNb3VzZSBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gTW91c2VJbnB1dCgpIHtcbiAgICB0aGlzLmV2RWwgPSBNT1VTRV9FTEVNRU5UX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gTU9VU0VfV0lORE9XX0VWRU5UUztcblxuICAgIHRoaXMucHJlc3NlZCA9IGZhbHNlOyAvLyBtb3VzZWRvd24gc3RhdGVcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoTW91c2VJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgZXZlbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gTUVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBNT1VTRV9JTlBVVF9NQVBbZXYudHlwZV07XG5cbiAgICAgICAgLy8gb24gc3RhcnQgd2Ugd2FudCB0byBoYXZlIHRoZSBsZWZ0IG1vdXNlIGJ1dHRvbiBkb3duXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiBldi5idXR0b24gPT09IDApIHtcbiAgICAgICAgICAgIHRoaXMucHJlc3NlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfTU9WRSAmJiBldi53aGljaCAhPT0gMSkge1xuICAgICAgICAgICAgZXZlbnRUeXBlID0gSU5QVVRfRU5EO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbW91c2UgbXVzdCBiZSBkb3duXG4gICAgICAgIGlmICghdGhpcy5wcmVzc2VkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICB0aGlzLnByZXNzZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCBldmVudFR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiBbZXZdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfTU9VU0UsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbnZhciBQT0lOVEVSX0lOUFVUX01BUCA9IHtcbiAgICBwb2ludGVyZG93bjogSU5QVVRfU1RBUlQsXG4gICAgcG9pbnRlcm1vdmU6IElOUFVUX01PVkUsXG4gICAgcG9pbnRlcnVwOiBJTlBVVF9FTkQsXG4gICAgcG9pbnRlcmNhbmNlbDogSU5QVVRfQ0FOQ0VMLFxuICAgIHBvaW50ZXJvdXQ6IElOUFVUX0NBTkNFTFxufTtcblxuLy8gaW4gSUUxMCB0aGUgcG9pbnRlciB0eXBlcyBpcyBkZWZpbmVkIGFzIGFuIGVudW1cbnZhciBJRTEwX1BPSU5URVJfVFlQRV9FTlVNID0ge1xuICAgIDI6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgMzogSU5QVVRfVFlQRV9QRU4sXG4gICAgNDogSU5QVVRfVFlQRV9NT1VTRSxcbiAgICA1OiBJTlBVVF9UWVBFX0tJTkVDVCAvLyBzZWUgaHR0cHM6Ly90d2l0dGVyLmNvbS9qYWNvYnJvc3NpL3N0YXR1cy80ODA1OTY0Mzg0ODk4OTA4MTZcbn07XG5cbnZhciBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTID0gJ3BvaW50ZXJkb3duJztcbnZhciBQT0lOVEVSX1dJTkRPV19FVkVOVFMgPSAncG9pbnRlcm1vdmUgcG9pbnRlcnVwIHBvaW50ZXJjYW5jZWwnO1xuXG4vLyBJRTEwIGhhcyBwcmVmaXhlZCBzdXBwb3J0LCBhbmQgY2FzZS1zZW5zaXRpdmVcbmlmICh3aW5kb3cuTVNQb2ludGVyRXZlbnQgJiYgIXdpbmRvdy5Qb2ludGVyRXZlbnQpIHtcbiAgICBQT0lOVEVSX0VMRU1FTlRfRVZFTlRTID0gJ01TUG9pbnRlckRvd24nO1xuICAgIFBPSU5URVJfV0lORE9XX0VWRU5UUyA9ICdNU1BvaW50ZXJNb3ZlIE1TUG9pbnRlclVwIE1TUG9pbnRlckNhbmNlbCc7XG59XG5cbi8qKlxuICogUG9pbnRlciBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gUG9pbnRlckV2ZW50SW5wdXQoKSB7XG4gICAgdGhpcy5ldkVsID0gUE9JTlRFUl9FTEVNRU5UX0VWRU5UUztcbiAgICB0aGlzLmV2V2luID0gUE9JTlRFUl9XSU5ET1dfRVZFTlRTO1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblxuICAgIHRoaXMuc3RvcmUgPSAodGhpcy5tYW5hZ2VyLnNlc3Npb24ucG9pbnRlckV2ZW50cyA9IFtdKTtcbn1cblxuaW5oZXJpdChQb2ludGVyRXZlbnRJbnB1dCwgSW5wdXQsIHtcbiAgICAvKipcbiAgICAgKiBoYW5kbGUgbW91c2UgZXZlbnRzXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGV2XG4gICAgICovXG4gICAgaGFuZGxlcjogZnVuY3Rpb24gUEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciBzdG9yZSA9IHRoaXMuc3RvcmU7XG4gICAgICAgIHZhciByZW1vdmVQb2ludGVyID0gZmFsc2U7XG5cbiAgICAgICAgdmFyIGV2ZW50VHlwZU5vcm1hbGl6ZWQgPSBldi50eXBlLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgnbXMnLCAnJyk7XG4gICAgICAgIHZhciBldmVudFR5cGUgPSBQT0lOVEVSX0lOUFVUX01BUFtldmVudFR5cGVOb3JtYWxpemVkXTtcbiAgICAgICAgdmFyIHBvaW50ZXJUeXBlID0gSUUxMF9QT0lOVEVSX1RZUEVfRU5VTVtldi5wb2ludGVyVHlwZV0gfHwgZXYucG9pbnRlclR5cGU7XG5cbiAgICAgICAgdmFyIGlzVG91Y2ggPSAocG9pbnRlclR5cGUgPT0gSU5QVVRfVFlQRV9UT1VDSCk7XG5cbiAgICAgICAgLy8gZ2V0IGluZGV4IG9mIHRoZSBldmVudCBpbiB0aGUgc3RvcmVcbiAgICAgICAgdmFyIHN0b3JlSW5kZXggPSBpbkFycmF5KHN0b3JlLCBldi5wb2ludGVySWQsICdwb2ludGVySWQnKTtcblxuICAgICAgICAvLyBzdGFydCBhbmQgbW91c2UgbXVzdCBiZSBkb3duXG4gICAgICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCAmJiAoZXYuYnV0dG9uID09PSAwIHx8IGlzVG91Y2gpKSB7XG4gICAgICAgICAgICBpZiAoc3RvcmVJbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBzdG9yZS5wdXNoKGV2KTtcbiAgICAgICAgICAgICAgICBzdG9yZUluZGV4ID0gc3RvcmUubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChldmVudFR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSkge1xuICAgICAgICAgICAgcmVtb3ZlUG9pbnRlciA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpdCBub3QgZm91bmQsIHNvIHRoZSBwb2ludGVyIGhhc24ndCBiZWVuIGRvd24gKHNvIGl0J3MgcHJvYmFibHkgYSBob3ZlcilcbiAgICAgICAgaWYgKHN0b3JlSW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB1cGRhdGUgdGhlIGV2ZW50IGluIHRoZSBzdG9yZVxuICAgICAgICBzdG9yZVtzdG9yZUluZGV4XSA9IGV2O1xuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCBldmVudFR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiBzdG9yZSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogW2V2XSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBwb2ludGVyVHlwZSxcbiAgICAgICAgICAgIHNyY0V2ZW50OiBldlxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAocmVtb3ZlUG9pbnRlcikge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIGZyb20gdGhlIHN0b3JlXG4gICAgICAgICAgICBzdG9yZS5zcGxpY2Uoc3RvcmVJbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxudmFyIFNJTkdMRV9UT1VDSF9JTlBVVF9NQVAgPSB7XG4gICAgdG91Y2hzdGFydDogSU5QVVRfU1RBUlQsXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHRvdWNoZW5kOiBJTlBVVF9FTkQsXG4gICAgdG91Y2hjYW5jZWw6IElOUFVUX0NBTkNFTFxufTtcblxudmFyIFNJTkdMRV9UT1VDSF9UQVJHRVRfRVZFTlRTID0gJ3RvdWNoc3RhcnQnO1xudmFyIFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTID0gJ3RvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsJztcblxuLyoqXG4gKiBUb3VjaCBldmVudHMgaW5wdXRcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuZnVuY3Rpb24gU2luZ2xlVG91Y2hJbnB1dCgpIHtcbiAgICB0aGlzLmV2VGFyZ2V0ID0gU0lOR0xFX1RPVUNIX1RBUkdFVF9FVkVOVFM7XG4gICAgdGhpcy5ldldpbiA9IFNJTkdMRV9UT1VDSF9XSU5ET1dfRVZFTlRTO1xuICAgIHRoaXMuc3RhcnRlZCA9IGZhbHNlO1xuXG4gICAgSW5wdXQuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChTaW5nbGVUb3VjaElucHV0LCBJbnB1dCwge1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFRFaGFuZGxlcihldikge1xuICAgICAgICB2YXIgdHlwZSA9IFNJTkdMRV9UT1VDSF9JTlBVVF9NQVBbZXYudHlwZV07XG5cbiAgICAgICAgLy8gc2hvdWxkIHdlIGhhbmRsZSB0aGUgdG91Y2ggZXZlbnRzP1xuICAgICAgICBpZiAodHlwZSA9PT0gSU5QVVRfU1RBUlQpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhcnRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuc3RhcnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHRvdWNoZXMgPSBub3JtYWxpemVTaW5nbGVUb3VjaGVzLmNhbGwodGhpcywgZXYsIHR5cGUpO1xuXG4gICAgICAgIC8vIHdoZW4gZG9uZSwgcmVzZXQgdGhlIHN0YXJ0ZWQgc3RhdGVcbiAgICAgICAgaWYgKHR5cGUgJiAoSU5QVVRfRU5EIHwgSU5QVVRfQ0FOQ0VMKSAmJiB0b3VjaGVzWzBdLmxlbmd0aCAtIHRvdWNoZXNbMV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXJ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY2FsbGJhY2sodGhpcy5tYW5hZ2VyLCB0eXBlLCB7XG4gICAgICAgICAgICBwb2ludGVyczogdG91Y2hlc1swXSxcbiAgICAgICAgICAgIGNoYW5nZWRQb2ludGVyczogdG91Y2hlc1sxXSxcbiAgICAgICAgICAgIHBvaW50ZXJUeXBlOiBJTlBVVF9UWVBFX1RPVUNILFxuICAgICAgICAgICAgc3JjRXZlbnQ6IGV2XG4gICAgICAgIH0pO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIEB0aGlzIHtUb3VjaElucHV0fVxuICogQHBhcmFtIHtPYmplY3R9IGV2XG4gKiBAcGFyYW0ge051bWJlcn0gdHlwZSBmbGFnXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfEFycmF5fSBbYWxsLCBjaGFuZ2VkXVxuICovXG5mdW5jdGlvbiBub3JtYWxpemVTaW5nbGVUb3VjaGVzKGV2LCB0eXBlKSB7XG4gICAgdmFyIGFsbCA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XG4gICAgdmFyIGNoYW5nZWQgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKTtcblxuICAgIGlmICh0eXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkpIHtcbiAgICAgICAgYWxsID0gdW5pcXVlQXJyYXkoYWxsLmNvbmNhdChjaGFuZ2VkKSwgJ2lkZW50aWZpZXInLCB0cnVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gW2FsbCwgY2hhbmdlZF07XG59XG5cbnZhciBUT1VDSF9JTlBVVF9NQVAgPSB7XG4gICAgdG91Y2hzdGFydDogSU5QVVRfU1RBUlQsXG4gICAgdG91Y2htb3ZlOiBJTlBVVF9NT1ZFLFxuICAgIHRvdWNoZW5kOiBJTlBVVF9FTkQsXG4gICAgdG91Y2hjYW5jZWw6IElOUFVUX0NBTkNFTFxufTtcblxudmFyIFRPVUNIX1RBUkdFVF9FVkVOVFMgPSAndG91Y2hzdGFydCB0b3VjaG1vdmUgdG91Y2hlbmQgdG91Y2hjYW5jZWwnO1xuXG4vKipcbiAqIE11bHRpLXVzZXIgdG91Y2ggZXZlbnRzIGlucHV0XG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIElucHV0XG4gKi9cbmZ1bmN0aW9uIFRvdWNoSW5wdXQoKSB7XG4gICAgdGhpcy5ldlRhcmdldCA9IFRPVUNIX1RBUkdFVF9FVkVOVFM7XG4gICAgdGhpcy50YXJnZXRJZHMgPSB7fTtcblxuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoVG91Y2hJbnB1dCwgSW5wdXQsIHtcbiAgICBoYW5kbGVyOiBmdW5jdGlvbiBNVEVoYW5kbGVyKGV2KSB7XG4gICAgICAgIHZhciB0eXBlID0gVE9VQ0hfSU5QVVRfTUFQW2V2LnR5cGVdO1xuICAgICAgICB2YXIgdG91Y2hlcyA9IGdldFRvdWNoZXMuY2FsbCh0aGlzLCBldiwgdHlwZSk7XG4gICAgICAgIGlmICghdG91Y2hlcykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayh0aGlzLm1hbmFnZXIsIHR5cGUsIHtcbiAgICAgICAgICAgIHBvaW50ZXJzOiB0b3VjaGVzWzBdLFxuICAgICAgICAgICAgY2hhbmdlZFBvaW50ZXJzOiB0b3VjaGVzWzFdLFxuICAgICAgICAgICAgcG9pbnRlclR5cGU6IElOUFVUX1RZUEVfVE9VQ0gsXG4gICAgICAgICAgICBzcmNFdmVudDogZXZcbiAgICAgICAgfSk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQHRoaXMge1RvdWNoSW5wdXR9XG4gKiBAcGFyYW0ge09iamVjdH0gZXZcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eXBlIGZsYWdcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR8QXJyYXl9IFthbGwsIGNoYW5nZWRdXG4gKi9cbmZ1bmN0aW9uIGdldFRvdWNoZXMoZXYsIHR5cGUpIHtcbiAgICB2YXIgYWxsVG91Y2hlcyA9IHRvQXJyYXkoZXYudG91Y2hlcyk7XG4gICAgdmFyIHRhcmdldElkcyA9IHRoaXMudGFyZ2V0SWRzO1xuXG4gICAgLy8gd2hlbiB0aGVyZSBpcyBvbmx5IG9uZSB0b3VjaCwgdGhlIHByb2Nlc3MgY2FuIGJlIHNpbXBsaWZpZWRcbiAgICBpZiAodHlwZSAmIChJTlBVVF9TVEFSVCB8IElOUFVUX01PVkUpICYmIGFsbFRvdWNoZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHRhcmdldElkc1thbGxUb3VjaGVzWzBdLmlkZW50aWZpZXJdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIFthbGxUb3VjaGVzLCBhbGxUb3VjaGVzXTtcbiAgICB9XG5cbiAgICB2YXIgaSxcbiAgICAgICAgdGFyZ2V0VG91Y2hlcyxcbiAgICAgICAgY2hhbmdlZFRvdWNoZXMgPSB0b0FycmF5KGV2LmNoYW5nZWRUb3VjaGVzKSxcbiAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXMgPSBbXSxcbiAgICAgICAgdGFyZ2V0ID0gdGhpcy50YXJnZXQ7XG5cbiAgICAvLyBnZXQgdGFyZ2V0IHRvdWNoZXMgZnJvbSB0b3VjaGVzXG4gICAgdGFyZ2V0VG91Y2hlcyA9IGFsbFRvdWNoZXMuZmlsdGVyKGZ1bmN0aW9uKHRvdWNoKSB7XG4gICAgICAgIHJldHVybiBoYXNQYXJlbnQodG91Y2gudGFyZ2V0LCB0YXJnZXQpO1xuICAgIH0pO1xuXG4gICAgLy8gY29sbGVjdCB0b3VjaGVzXG4gICAgaWYgKHR5cGUgPT09IElOUFVUX1NUQVJUKSB7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICB3aGlsZSAoaSA8IHRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICB0YXJnZXRJZHNbdGFyZ2V0VG91Y2hlc1tpXS5pZGVudGlmaWVyXSA9IHRydWU7XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgY2hhbmdlZCB0b3VjaGVzIHRvIG9ubHkgY29udGFpbiB0b3VjaGVzIHRoYXQgZXhpc3QgaW4gdGhlIGNvbGxlY3RlZCB0YXJnZXQgaWRzXG4gICAgaSA9IDA7XG4gICAgd2hpbGUgKGkgPCBjaGFuZ2VkVG91Y2hlcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKHRhcmdldElkc1tjaGFuZ2VkVG91Y2hlc1tpXS5pZGVudGlmaWVyXSkge1xuICAgICAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXMucHVzaChjaGFuZ2VkVG91Y2hlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhbnVwIHJlbW92ZWQgdG91Y2hlc1xuICAgICAgICBpZiAodHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgICAgICBkZWxldGUgdGFyZ2V0SWRzW2NoYW5nZWRUb3VjaGVzW2ldLmlkZW50aWZpZXJdO1xuICAgICAgICB9XG4gICAgICAgIGkrKztcbiAgICB9XG5cbiAgICBpZiAoIWNoYW5nZWRUYXJnZXRUb3VjaGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIFtcbiAgICAgICAgLy8gbWVyZ2UgdGFyZ2V0VG91Y2hlcyB3aXRoIGNoYW5nZWRUYXJnZXRUb3VjaGVzIHNvIGl0IGNvbnRhaW5zIEFMTCB0b3VjaGVzLCBpbmNsdWRpbmcgJ2VuZCcgYW5kICdjYW5jZWwnXG4gICAgICAgIHVuaXF1ZUFycmF5KHRhcmdldFRvdWNoZXMuY29uY2F0KGNoYW5nZWRUYXJnZXRUb3VjaGVzKSwgJ2lkZW50aWZpZXInLCB0cnVlKSxcbiAgICAgICAgY2hhbmdlZFRhcmdldFRvdWNoZXNcbiAgICBdO1xufVxuXG4vKipcbiAqIENvbWJpbmVkIHRvdWNoIGFuZCBtb3VzZSBpbnB1dFxuICpcbiAqIFRvdWNoIGhhcyBhIGhpZ2hlciBwcmlvcml0eSB0aGVuIG1vdXNlLCBhbmQgd2hpbGUgdG91Y2hpbmcgbm8gbW91c2UgZXZlbnRzIGFyZSBhbGxvd2VkLlxuICogVGhpcyBiZWNhdXNlIHRvdWNoIGRldmljZXMgYWxzbyBlbWl0IG1vdXNlIGV2ZW50cyB3aGlsZSBkb2luZyBhIHRvdWNoLlxuICpcbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgSW5wdXRcbiAqL1xuXG52YXIgREVEVVBfVElNRU9VVCA9IDI1MDA7XG52YXIgREVEVVBfRElTVEFOQ0UgPSAyNTtcblxuZnVuY3Rpb24gVG91Y2hNb3VzZUlucHV0KCkge1xuICAgIElucHV0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB2YXIgaGFuZGxlciA9IGJpbmRGbih0aGlzLmhhbmRsZXIsIHRoaXMpO1xuICAgIHRoaXMudG91Y2ggPSBuZXcgVG91Y2hJbnB1dCh0aGlzLm1hbmFnZXIsIGhhbmRsZXIpO1xuICAgIHRoaXMubW91c2UgPSBuZXcgTW91c2VJbnB1dCh0aGlzLm1hbmFnZXIsIGhhbmRsZXIpO1xuXG4gICAgdGhpcy5wcmltYXJ5VG91Y2ggPSBudWxsO1xuICAgIHRoaXMubGFzdFRvdWNoZXMgPSBbXTtcbn1cblxuaW5oZXJpdChUb3VjaE1vdXNlSW5wdXQsIElucHV0LCB7XG4gICAgLyoqXG4gICAgICogaGFuZGxlIG1vdXNlIGFuZCB0b3VjaCBldmVudHNcbiAgICAgKiBAcGFyYW0ge0hhbW1lcn0gbWFuYWdlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBpbnB1dEV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0RGF0YVxuICAgICAqL1xuICAgIGhhbmRsZXI6IGZ1bmN0aW9uIFRNRWhhbmRsZXIobWFuYWdlciwgaW5wdXRFdmVudCwgaW5wdXREYXRhKSB7XG4gICAgICAgIHZhciBpc1RvdWNoID0gKGlucHV0RGF0YS5wb2ludGVyVHlwZSA9PSBJTlBVVF9UWVBFX1RPVUNIKSxcbiAgICAgICAgICAgIGlzTW91c2UgPSAoaW5wdXREYXRhLnBvaW50ZXJUeXBlID09IElOUFVUX1RZUEVfTU9VU0UpO1xuXG4gICAgICAgIGlmIChpc01vdXNlICYmIGlucHV0RGF0YS5zb3VyY2VDYXBhYmlsaXRpZXMgJiYgaW5wdXREYXRhLnNvdXJjZUNhcGFiaWxpdGllcy5maXJlc1RvdWNoRXZlbnRzKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3aGVuIHdlJ3JlIGluIGEgdG91Y2ggZXZlbnQsIHJlY29yZCB0b3VjaGVzIHRvICBkZS1kdXBlIHN5bnRoZXRpYyBtb3VzZSBldmVudFxuICAgICAgICBpZiAoaXNUb3VjaCkge1xuICAgICAgICAgICAgcmVjb3JkVG91Y2hlcy5jYWxsKHRoaXMsIGlucHV0RXZlbnQsIGlucHV0RGF0YSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNNb3VzZSAmJiBpc1N5bnRoZXRpY0V2ZW50LmNhbGwodGhpcywgaW5wdXREYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jYWxsYmFjayhtYW5hZ2VyLCBpbnB1dEV2ZW50LCBpbnB1dERhdGEpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZW1vdmUgdGhlIGV2ZW50IGxpc3RlbmVyc1xuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMudG91Y2guZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm1vdXNlLmRlc3Ryb3koKTtcbiAgICB9XG59KTtcblxuZnVuY3Rpb24gcmVjb3JkVG91Y2hlcyhldmVudFR5cGUsIGV2ZW50RGF0YSkge1xuICAgIGlmIChldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkge1xuICAgICAgICB0aGlzLnByaW1hcnlUb3VjaCA9IGV2ZW50RGF0YS5jaGFuZ2VkUG9pbnRlcnNbMF0uaWRlbnRpZmllcjtcbiAgICAgICAgc2V0TGFzdFRvdWNoLmNhbGwodGhpcywgZXZlbnREYXRhKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50VHlwZSAmIChJTlBVVF9FTkQgfCBJTlBVVF9DQU5DRUwpKSB7XG4gICAgICAgIHNldExhc3RUb3VjaC5jYWxsKHRoaXMsIGV2ZW50RGF0YSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRMYXN0VG91Y2goZXZlbnREYXRhKSB7XG4gICAgdmFyIHRvdWNoID0gZXZlbnREYXRhLmNoYW5nZWRQb2ludGVyc1swXTtcblxuICAgIGlmICh0b3VjaC5pZGVudGlmaWVyID09PSB0aGlzLnByaW1hcnlUb3VjaCkge1xuICAgICAgICB2YXIgbGFzdFRvdWNoID0ge3g6IHRvdWNoLmNsaWVudFgsIHk6IHRvdWNoLmNsaWVudFl9O1xuICAgICAgICB0aGlzLmxhc3RUb3VjaGVzLnB1c2gobGFzdFRvdWNoKTtcbiAgICAgICAgdmFyIGx0cyA9IHRoaXMubGFzdFRvdWNoZXM7XG4gICAgICAgIHZhciByZW1vdmVMYXN0VG91Y2ggPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpID0gbHRzLmluZGV4T2YobGFzdFRvdWNoKTtcbiAgICAgICAgICAgIGlmIChpID4gLTEpIHtcbiAgICAgICAgICAgICAgICBsdHMuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzZXRUaW1lb3V0KHJlbW92ZUxhc3RUb3VjaCwgREVEVVBfVElNRU9VVCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBpc1N5bnRoZXRpY0V2ZW50KGV2ZW50RGF0YSkge1xuICAgIHZhciB4ID0gZXZlbnREYXRhLnNyY0V2ZW50LmNsaWVudFgsIHkgPSBldmVudERhdGEuc3JjRXZlbnQuY2xpZW50WTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGFzdFRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIHQgPSB0aGlzLmxhc3RUb3VjaGVzW2ldO1xuICAgICAgICB2YXIgZHggPSBNYXRoLmFicyh4IC0gdC54KSwgZHkgPSBNYXRoLmFicyh5IC0gdC55KTtcbiAgICAgICAgaWYgKGR4IDw9IERFRFVQX0RJU1RBTkNFICYmIGR5IDw9IERFRFVQX0RJU1RBTkNFKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gPSBwcmVmaXhlZChURVNUX0VMRU1FTlQuc3R5bGUsICd0b3VjaEFjdGlvbicpO1xudmFyIE5BVElWRV9UT1VDSF9BQ1RJT04gPSBQUkVGSVhFRF9UT1VDSF9BQ1RJT04gIT09IHVuZGVmaW5lZDtcblxuLy8gbWFnaWNhbCB0b3VjaEFjdGlvbiB2YWx1ZVxudmFyIFRPVUNIX0FDVElPTl9DT01QVVRFID0gJ2NvbXB1dGUnO1xudmFyIFRPVUNIX0FDVElPTl9BVVRPID0gJ2F1dG8nO1xudmFyIFRPVUNIX0FDVElPTl9NQU5JUFVMQVRJT04gPSAnbWFuaXB1bGF0aW9uJzsgLy8gbm90IGltcGxlbWVudGVkXG52YXIgVE9VQ0hfQUNUSU9OX05PTkUgPSAnbm9uZSc7XG52YXIgVE9VQ0hfQUNUSU9OX1BBTl9YID0gJ3Bhbi14JztcbnZhciBUT1VDSF9BQ1RJT05fUEFOX1kgPSAncGFuLXknO1xudmFyIFRPVUNIX0FDVElPTl9NQVAgPSBnZXRUb3VjaEFjdGlvblByb3BzKCk7XG5cbi8qKlxuICogVG91Y2ggQWN0aW9uXG4gKiBzZXRzIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eSBvciB1c2VzIHRoZSBqcyBhbHRlcm5hdGl2ZVxuICogQHBhcmFtIHtNYW5hZ2VyfSBtYW5hZ2VyXG4gKiBAcGFyYW0ge1N0cmluZ30gdmFsdWVcbiAqIEBjb25zdHJ1Y3RvclxuICovXG5mdW5jdGlvbiBUb3VjaEFjdGlvbihtYW5hZ2VyLCB2YWx1ZSkge1xuICAgIHRoaXMubWFuYWdlciA9IG1hbmFnZXI7XG4gICAgdGhpcy5zZXQodmFsdWUpO1xufVxuXG5Ub3VjaEFjdGlvbi5wcm90b3R5cGUgPSB7XG4gICAgLyoqXG4gICAgICogc2V0IHRoZSB0b3VjaEFjdGlvbiB2YWx1ZSBvbiB0aGUgZWxlbWVudCBvciBlbmFibGUgdGhlIHBvbHlmaWxsXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAvLyBmaW5kIG91dCB0aGUgdG91Y2gtYWN0aW9uIGJ5IHRoZSBldmVudCBoYW5kbGVyc1xuICAgICAgICBpZiAodmFsdWUgPT0gVE9VQ0hfQUNUSU9OX0NPTVBVVEUpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGhpcy5jb21wdXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoTkFUSVZFX1RPVUNIX0FDVElPTiAmJiB0aGlzLm1hbmFnZXIuZWxlbWVudC5zdHlsZSAmJiBUT1VDSF9BQ1RJT05fTUFQW3ZhbHVlXSkge1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVsZW1lbnQuc3R5bGVbUFJFRklYRURfVE9VQ0hfQUNUSU9OXSA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aW9ucyA9IHZhbHVlLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBqdXN0IHJlLXNldCB0aGUgdG91Y2hBY3Rpb24gdmFsdWVcbiAgICAgKi9cbiAgICB1cGRhdGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLnNldCh0aGlzLm1hbmFnZXIub3B0aW9ucy50b3VjaEFjdGlvbik7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGNvbXB1dGUgdGhlIHZhbHVlIGZvciB0aGUgdG91Y2hBY3Rpb24gcHJvcGVydHkgYmFzZWQgb24gdGhlIHJlY29nbml6ZXIncyBzZXR0aW5nc1xuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IHZhbHVlXG4gICAgICovXG4gICAgY29tcHV0ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhY3Rpb25zID0gW107XG4gICAgICAgIGVhY2godGhpcy5tYW5hZ2VyLnJlY29nbml6ZXJzLCBmdW5jdGlvbihyZWNvZ25pemVyKSB7XG4gICAgICAgICAgICBpZiAoYm9vbE9yRm4ocmVjb2duaXplci5vcHRpb25zLmVuYWJsZSwgW3JlY29nbml6ZXJdKSkge1xuICAgICAgICAgICAgICAgIGFjdGlvbnMgPSBhY3Rpb25zLmNvbmNhdChyZWNvZ25pemVyLmdldFRvdWNoQWN0aW9uKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMuam9pbignICcpKTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogdGhpcyBtZXRob2QgaXMgY2FsbGVkIG9uIGVhY2ggaW5wdXQgY3ljbGUgYW5kIHByb3ZpZGVzIHRoZSBwcmV2ZW50aW5nIG9mIHRoZSBicm93c2VyIGJlaGF2aW9yXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICovXG4gICAgcHJldmVudERlZmF1bHRzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgc3JjRXZlbnQgPSBpbnB1dC5zcmNFdmVudDtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGlucHV0Lm9mZnNldERpcmVjdGlvbjtcblxuICAgICAgICAvLyBpZiB0aGUgdG91Y2ggYWN0aW9uIGRpZCBwcmV2ZW50ZWQgb25jZSB0aGlzIHNlc3Npb25cbiAgICAgICAgaWYgKHRoaXMubWFuYWdlci5zZXNzaW9uLnByZXZlbnRlZCkge1xuICAgICAgICAgICAgc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBhY3Rpb25zID0gdGhpcy5hY3Rpb25zO1xuICAgICAgICB2YXIgaGFzTm9uZSA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fTk9ORV07XG4gICAgICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKSAmJiAhVE9VQ0hfQUNUSU9OX01BUFtUT1VDSF9BQ1RJT05fUEFOX1ldO1xuICAgICAgICB2YXIgaGFzUGFuWCA9IGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9QQU5fWCkgJiYgIVRPVUNIX0FDVElPTl9NQVBbVE9VQ0hfQUNUSU9OX1BBTl9YXTtcblxuICAgICAgICBpZiAoaGFzTm9uZSkge1xuICAgICAgICAgICAgLy9kbyBub3QgcHJldmVudCBkZWZhdWx0cyBpZiB0aGlzIGlzIGEgdGFwIGdlc3R1cmVcblxuICAgICAgICAgICAgdmFyIGlzVGFwUG9pbnRlciA9IGlucHV0LnBvaW50ZXJzLmxlbmd0aCA9PT0gMTtcbiAgICAgICAgICAgIHZhciBpc1RhcE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCAyO1xuICAgICAgICAgICAgdmFyIGlzVGFwVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgMjUwO1xuXG4gICAgICAgICAgICBpZiAoaXNUYXBQb2ludGVyICYmIGlzVGFwTW92ZW1lbnQgJiYgaXNUYXBUb3VjaFRpbWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzUGFuWCAmJiBoYXNQYW5ZKSB7XG4gICAgICAgICAgICAvLyBgcGFuLXggcGFuLXlgIG1lYW5zIGJyb3dzZXIgaGFuZGxlcyBhbGwgc2Nyb2xsaW5nL3Bhbm5pbmcsIGRvIG5vdCBwcmV2ZW50XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaGFzTm9uZSB8fFxuICAgICAgICAgICAgKGhhc1BhblkgJiYgZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHx8XG4gICAgICAgICAgICAoaGFzUGFuWCAmJiBkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcmV2ZW50U3JjKHNyY0V2ZW50KTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBjYWxsIHByZXZlbnREZWZhdWx0IHRvIHByZXZlbnQgdGhlIGJyb3dzZXIncyBkZWZhdWx0IGJlaGF2aW9yIChzY3JvbGxpbmcgaW4gbW9zdCBjYXNlcylcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gc3JjRXZlbnRcbiAgICAgKi9cbiAgICBwcmV2ZW50U3JjOiBmdW5jdGlvbihzcmNFdmVudCkge1xuICAgICAgICB0aGlzLm1hbmFnZXIuc2Vzc2lvbi5wcmV2ZW50ZWQgPSB0cnVlO1xuICAgICAgICBzcmNFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbn07XG5cbi8qKlxuICogd2hlbiB0aGUgdG91Y2hBY3Rpb25zIGFyZSBjb2xsZWN0ZWQgdGhleSBhcmUgbm90IGEgdmFsaWQgdmFsdWUsIHNvIHdlIG5lZWQgdG8gY2xlYW4gdGhpbmdzIHVwLiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gYWN0aW9uc1xuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIGNsZWFuVG91Y2hBY3Rpb25zKGFjdGlvbnMpIHtcbiAgICAvLyBub25lXG4gICAgaWYgKGluU3RyKGFjdGlvbnMsIFRPVUNIX0FDVElPTl9OT05FKSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgdmFyIGhhc1BhblggPSBpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fUEFOX1gpO1xuICAgIHZhciBoYXNQYW5ZID0gaW5TdHIoYWN0aW9ucywgVE9VQ0hfQUNUSU9OX1BBTl9ZKTtcblxuICAgIC8vIGlmIGJvdGggcGFuLXggYW5kIHBhbi15IGFyZSBzZXQgKGRpZmZlcmVudCByZWNvZ25pemVyc1xuICAgIC8vIGZvciBkaWZmZXJlbnQgZGlyZWN0aW9ucywgZS5nLiBob3Jpem9udGFsIHBhbiBidXQgdmVydGljYWwgc3dpcGU/KVxuICAgIC8vIHdlIG5lZWQgbm9uZSAoYXMgb3RoZXJ3aXNlIHdpdGggcGFuLXggcGFuLXkgY29tYmluZWQgbm9uZSBvZiB0aGVzZVxuICAgIC8vIHJlY29nbml6ZXJzIHdpbGwgd29yaywgc2luY2UgdGhlIGJyb3dzZXIgd291bGQgaGFuZGxlIGFsbCBwYW5uaW5nXG4gICAgaWYgKGhhc1BhblggJiYgaGFzUGFuWSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX05PTkU7XG4gICAgfVxuXG4gICAgLy8gcGFuLXggT1IgcGFuLXlcbiAgICBpZiAoaGFzUGFuWCB8fCBoYXNQYW5ZKSB7XG4gICAgICAgIHJldHVybiBoYXNQYW5YID8gVE9VQ0hfQUNUSU9OX1BBTl9YIDogVE9VQ0hfQUNUSU9OX1BBTl9ZO1xuICAgIH1cblxuICAgIC8vIG1hbmlwdWxhdGlvblxuICAgIGlmIChpblN0cihhY3Rpb25zLCBUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OKSkge1xuICAgICAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX01BTklQVUxBVElPTjtcbiAgICB9XG5cbiAgICByZXR1cm4gVE9VQ0hfQUNUSU9OX0FVVE87XG59XG5cbmZ1bmN0aW9uIGdldFRvdWNoQWN0aW9uUHJvcHMoKSB7XG4gICAgaWYgKCFOQVRJVkVfVE9VQ0hfQUNUSU9OKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdmFyIHRvdWNoTWFwID0ge307XG4gICAgdmFyIGNzc1N1cHBvcnRzID0gd2luZG93LkNTUyAmJiB3aW5kb3cuQ1NTLnN1cHBvcnRzO1xuICAgIFsnYXV0bycsICdtYW5pcHVsYXRpb24nLCAncGFuLXknLCAncGFuLXgnLCAncGFuLXggcGFuLXknLCAnbm9uZSddLmZvckVhY2goZnVuY3Rpb24odmFsKSB7XG5cbiAgICAgICAgLy8gSWYgY3NzLnN1cHBvcnRzIGlzIG5vdCBzdXBwb3J0ZWQgYnV0IHRoZXJlIGlzIG5hdGl2ZSB0b3VjaC1hY3Rpb24gYXNzdW1lIGl0IHN1cHBvcnRzXG4gICAgICAgIC8vIGFsbCB2YWx1ZXMuIFRoaXMgaXMgdGhlIGNhc2UgZm9yIElFIDEwIGFuZCAxMS5cbiAgICAgICAgdG91Y2hNYXBbdmFsXSA9IGNzc1N1cHBvcnRzID8gd2luZG93LkNTUy5zdXBwb3J0cygndG91Y2gtYWN0aW9uJywgdmFsKSA6IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvdWNoTWFwO1xufVxuXG4vKipcbiAqIFJlY29nbml6ZXIgZmxvdyBleHBsYWluZWQ7ICpcbiAqIEFsbCByZWNvZ25pemVycyBoYXZlIHRoZSBpbml0aWFsIHN0YXRlIG9mIFBPU1NJQkxFIHdoZW4gYSBpbnB1dCBzZXNzaW9uIHN0YXJ0cy5cbiAqIFRoZSBkZWZpbml0aW9uIG9mIGEgaW5wdXQgc2Vzc2lvbiBpcyBmcm9tIHRoZSBmaXJzdCBpbnB1dCB1bnRpbCB0aGUgbGFzdCBpbnB1dCwgd2l0aCBhbGwgaXQncyBtb3ZlbWVudCBpbiBpdC4gKlxuICogRXhhbXBsZSBzZXNzaW9uIGZvciBtb3VzZS1pbnB1dDogbW91c2Vkb3duIC0+IG1vdXNlbW92ZSAtPiBtb3VzZXVwXG4gKlxuICogT24gZWFjaCByZWNvZ25pemluZyBjeWNsZSAoc2VlIE1hbmFnZXIucmVjb2duaXplKSB0aGUgLnJlY29nbml6ZSgpIG1ldGhvZCBpcyBleGVjdXRlZFxuICogd2hpY2ggZGV0ZXJtaW5lcyB3aXRoIHN0YXRlIGl0IHNob3VsZCBiZS5cbiAqXG4gKiBJZiB0aGUgcmVjb2duaXplciBoYXMgdGhlIHN0YXRlIEZBSUxFRCwgQ0FOQ0VMTEVEIG9yIFJFQ09HTklaRUQgKGVxdWFscyBFTkRFRCksIGl0IGlzIHJlc2V0IHRvXG4gKiBQT1NTSUJMRSB0byBnaXZlIGl0IGFub3RoZXIgY2hhbmdlIG9uIHRoZSBuZXh0IGN5Y2xlLlxuICpcbiAqICAgICAgICAgICAgICAgUG9zc2libGVcbiAqICAgICAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICArLS0tLS0rLS0tLS0tLS0tLS0tLS0tK1xuICogICAgICAgICAgICB8ICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgICArLS0tLS0rLS0tLS0rICAgICAgICAgICAgICAgfFxuICogICAgICB8ICAgICAgICAgICB8ICAgICAgICAgICAgICAgfFxuICogICBGYWlsZWQgICAgICBDYW5jZWxsZWQgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICstLS0tLS0tKy0tLS0tLStcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICBSZWNvZ25pemVkICAgICAgIEJlZ2FuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIENoYW5nZWRcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBFbmRlZC9SZWNvZ25pemVkXG4gKi9cbnZhciBTVEFURV9QT1NTSUJMRSA9IDE7XG52YXIgU1RBVEVfQkVHQU4gPSAyO1xudmFyIFNUQVRFX0NIQU5HRUQgPSA0O1xudmFyIFNUQVRFX0VOREVEID0gODtcbnZhciBTVEFURV9SRUNPR05JWkVEID0gU1RBVEVfRU5ERUQ7XG52YXIgU1RBVEVfQ0FOQ0VMTEVEID0gMTY7XG52YXIgU1RBVEVfRkFJTEVEID0gMzI7XG5cbi8qKlxuICogUmVjb2duaXplclxuICogRXZlcnkgcmVjb2duaXplciBuZWVkcyB0byBleHRlbmQgZnJvbSB0aGlzIGNsYXNzLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICovXG5mdW5jdGlvbiBSZWNvZ25pemVyKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBhc3NpZ24oe30sIHRoaXMuZGVmYXVsdHMsIG9wdGlvbnMgfHwge30pO1xuXG4gICAgdGhpcy5pZCA9IHVuaXF1ZUlkKCk7XG5cbiAgICB0aGlzLm1hbmFnZXIgPSBudWxsO1xuXG4gICAgLy8gZGVmYXVsdCBpcyBlbmFibGUgdHJ1ZVxuICAgIHRoaXMub3B0aW9ucy5lbmFibGUgPSBpZlVuZGVmaW5lZCh0aGlzLm9wdGlvbnMuZW5hYmxlLCB0cnVlKTtcblxuICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcblxuICAgIHRoaXMuc2ltdWx0YW5lb3VzID0ge307XG4gICAgdGhpcy5yZXF1aXJlRmFpbCA9IFtdO1xufVxuXG5SZWNvZ25pemVyLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBAdmlydHVhbFxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICovXG4gICAgZGVmYXVsdHM6IHt9LFxuXG4gICAgLyoqXG4gICAgICogc2V0IG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge1JlY29nbml6ZXJ9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIGFsc28gdXBkYXRlIHRoZSB0b3VjaEFjdGlvbiwgaW4gY2FzZSBzb21ldGhpbmcgY2hhbmdlZCBhYm91dCB0aGUgZGlyZWN0aW9ucy9lbmFibGVkIHN0YXRlXG4gICAgICAgIHRoaXMubWFuYWdlciAmJiB0aGlzLm1hbmFnZXIudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZWNvZ25pemUgc2ltdWx0YW5lb3VzIHdpdGggYW4gb3RoZXIgcmVjb2duaXplci5cbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgcmVjb2duaXplV2l0aDogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdyZWNvZ25pemVXaXRoJywgdGhpcykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNpbXVsdGFuZW91cyA9IHRoaXMuc2ltdWx0YW5lb3VzO1xuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIGlmICghc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF0pIHtcbiAgICAgICAgICAgIHNpbXVsdGFuZW91c1tvdGhlclJlY29nbml6ZXIuaWRdID0gb3RoZXJSZWNvZ25pemVyO1xuICAgICAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlY29nbml6ZVdpdGgodGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGRyb3AgdGhlIHNpbXVsdGFuZW91cyBsaW5rLiBpdCBkb2VzbnQgcmVtb3ZlIHRoZSBsaW5rIG9uIHRoZSBvdGhlciByZWNvZ25pemVyLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge1JlY29nbml6ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBkcm9wUmVjb2duaXplV2l0aDogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdkcm9wUmVjb2duaXplV2l0aCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIG90aGVyUmVjb2duaXplciA9IGdldFJlY29nbml6ZXJCeU5hbWVJZk1hbmFnZXIob3RoZXJSZWNvZ25pemVyLCB0aGlzKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF07XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZWNvZ25pemVyIGNhbiBvbmx5IHJ1biB3aGVuIGFuIG90aGVyIGlzIGZhaWxpbmdcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IG90aGVyUmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtSZWNvZ25pemVyfSB0aGlzXG4gICAgICovXG4gICAgcmVxdWlyZUZhaWx1cmU6IGZ1bmN0aW9uKG90aGVyUmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcob3RoZXJSZWNvZ25pemVyLCAncmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVxdWlyZUZhaWwgPSB0aGlzLnJlcXVpcmVGYWlsO1xuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIGlmIChpbkFycmF5KHJlcXVpcmVGYWlsLCBvdGhlclJlY29nbml6ZXIpID09PSAtMSkge1xuICAgICAgICAgICAgcmVxdWlyZUZhaWwucHVzaChvdGhlclJlY29nbml6ZXIpO1xuICAgICAgICAgICAgb3RoZXJSZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkcm9wIHRoZSByZXF1aXJlRmFpbHVyZSBsaW5rLiBpdCBkb2VzIG5vdCByZW1vdmUgdGhlIGxpbmsgb24gdGhlIG90aGVyIHJlY29nbml6ZXIuXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfSBvdGhlclJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcn0gdGhpc1xuICAgICAqL1xuICAgIGRyb3BSZXF1aXJlRmFpbHVyZTogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIGlmIChpbnZva2VBcnJheUFyZyhvdGhlclJlY29nbml6ZXIsICdkcm9wUmVxdWlyZUZhaWx1cmUnLCB0aGlzKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlclJlY29nbml6ZXIgPSBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgdGhpcyk7XG4gICAgICAgIHZhciBpbmRleCA9IGluQXJyYXkodGhpcy5yZXF1aXJlRmFpbCwgb3RoZXJSZWNvZ25pemVyKTtcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWlyZUZhaWwuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogaGFzIHJlcXVpcmUgZmFpbHVyZXMgYm9vbGVhblxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGhhc1JlcXVpcmVGYWlsdXJlczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aCA+IDA7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGlmIHRoZSByZWNvZ25pemVyIGNhbiByZWNvZ25pemUgc2ltdWx0YW5lb3VzIHdpdGggYW4gb3RoZXIgcmVjb2duaXplclxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcn0gb3RoZXJSZWNvZ25pemVyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAgICovXG4gICAgY2FuUmVjb2duaXplV2l0aDogZnVuY3Rpb24ob3RoZXJSZWNvZ25pemVyKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuc2ltdWx0YW5lb3VzW290aGVyUmVjb2duaXplci5pZF07XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFlvdSBzaG91bGQgdXNlIGB0cnlFbWl0YCBpbnN0ZWFkIG9mIGBlbWl0YCBkaXJlY3RseSB0byBjaGVja1xuICAgICAqIHRoYXQgYWxsIHRoZSBuZWVkZWQgcmVjb2duaXplcnMgaGFzIGZhaWxlZCBiZWZvcmUgZW1pdHRpbmcuXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGlucHV0XG4gICAgICovXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuXG4gICAgICAgIGZ1bmN0aW9uIGVtaXQoZXZlbnQpIHtcbiAgICAgICAgICAgIHNlbGYubWFuYWdlci5lbWl0KGV2ZW50LCBpbnB1dCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyAncGFuc3RhcnQnIGFuZCAncGFubW92ZSdcbiAgICAgICAgaWYgKHN0YXRlIDwgU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgICAgIGVtaXQoc2VsZi5vcHRpb25zLmV2ZW50ICsgc3RhdGVTdHIoc3RhdGUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGVtaXQoc2VsZi5vcHRpb25zLmV2ZW50KTsgLy8gc2ltcGxlICdldmVudE5hbWUnIGV2ZW50c1xuXG4gICAgICAgIGlmIChpbnB1dC5hZGRpdGlvbmFsRXZlbnQpIHsgLy8gYWRkaXRpb25hbCBldmVudChwYW5sZWZ0LCBwYW5yaWdodCwgcGluY2hpbiwgcGluY2hvdXQuLi4pXG4gICAgICAgICAgICBlbWl0KGlucHV0LmFkZGl0aW9uYWxFdmVudCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwYW5lbmQgYW5kIHBhbmNhbmNlbFxuICAgICAgICBpZiAoc3RhdGUgPj0gU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgICAgIGVtaXQoc2VsZi5vcHRpb25zLmV2ZW50ICsgc3RhdGVTdHIoc3RhdGUpKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayB0aGF0IGFsbCB0aGUgcmVxdWlyZSBmYWlsdXJlIHJlY29nbml6ZXJzIGhhcyBmYWlsZWQsXG4gICAgICogaWYgdHJ1ZSwgaXQgZW1pdHMgYSBnZXN0dXJlIGV2ZW50LFxuICAgICAqIG90aGVyd2lzZSwgc2V0dXAgdGhlIHN0YXRlIHRvIEZBSUxFRC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKi9cbiAgICB0cnlFbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICBpZiAodGhpcy5jYW5FbWl0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVtaXQoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGl0J3MgZmFpbGluZyBhbnl3YXlcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogY2FuIHdlIGVtaXQ/XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgY2FuRW1pdDogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBpID0gMDtcbiAgICAgICAgd2hpbGUgKGkgPCB0aGlzLnJlcXVpcmVGYWlsLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5yZXF1aXJlRmFpbFtpXS5zdGF0ZSAmIChTVEFURV9GQUlMRUQgfCBTVEFURV9QT1NTSUJMRSkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaSsrO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiB1cGRhdGUgdGhlIHJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgcmVjb2duaXplOiBmdW5jdGlvbihpbnB1dERhdGEpIHtcbiAgICAgICAgLy8gbWFrZSBhIG5ldyBjb3B5IG9mIHRoZSBpbnB1dERhdGFcbiAgICAgICAgLy8gc28gd2UgY2FuIGNoYW5nZSB0aGUgaW5wdXREYXRhIHdpdGhvdXQgbWVzc2luZyB1cCB0aGUgb3RoZXIgcmVjb2duaXplcnNcbiAgICAgICAgdmFyIGlucHV0RGF0YUNsb25lID0gYXNzaWduKHt9LCBpbnB1dERhdGEpO1xuXG4gICAgICAgIC8vIGlzIGlzIGVuYWJsZWQgYW5kIGFsbG93IHJlY29nbml6aW5nP1xuICAgICAgICBpZiAoIWJvb2xPckZuKHRoaXMub3B0aW9ucy5lbmFibGUsIFt0aGlzLCBpbnB1dERhdGFDbG9uZV0pKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfRkFJTEVEO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVzZXQgd2hlbiB3ZSd2ZSByZWFjaGVkIHRoZSBlbmRcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiAoU1RBVEVfUkVDT0dOSVpFRCB8IFNUQVRFX0NBTkNFTExFRCB8IFNUQVRFX0ZBSUxFRCkpIHtcbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBTVEFURV9QT1NTSUJMRTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc3RhdGUgPSB0aGlzLnByb2Nlc3MoaW5wdXREYXRhQ2xvbmUpO1xuXG4gICAgICAgIC8vIHRoZSByZWNvZ25pemVyIGhhcyByZWNvZ25pemVkIGEgZ2VzdHVyZVxuICAgICAgICAvLyBzbyB0cmlnZ2VyIGFuIGV2ZW50XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICYgKFNUQVRFX0JFR0FOIHwgU1RBVEVfQ0hBTkdFRCB8IFNUQVRFX0VOREVEIHwgU1RBVEVfQ0FOQ0VMTEVEKSkge1xuICAgICAgICAgICAgdGhpcy50cnlFbWl0KGlucHV0RGF0YUNsb25lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiByZXR1cm4gdGhlIHN0YXRlIG9mIHRoZSByZWNvZ25pemVyXG4gICAgICogdGhlIGFjdHVhbCByZWNvZ25pemluZyBoYXBwZW5zIGluIHRoaXMgbWV0aG9kXG4gICAgICogQHZpcnR1YWxcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICogQHJldHVybnMge0NvbnN0fSBTVEFURVxuICAgICAqL1xuICAgIHByb2Nlc3M6IGZ1bmN0aW9uKGlucHV0RGF0YSkgeyB9LCAvLyBqc2hpbnQgaWdub3JlOmxpbmVcblxuICAgIC8qKlxuICAgICAqIHJldHVybiB0aGUgcHJlZmVycmVkIHRvdWNoLWFjdGlvblxuICAgICAqIEB2aXJ0dWFsXG4gICAgICogQHJldHVybnMge0FycmF5fVxuICAgICAqL1xuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHsgfSxcblxuICAgIC8qKlxuICAgICAqIGNhbGxlZCB3aGVuIHRoZSBnZXN0dXJlIGlzbid0IGFsbG93ZWQgdG8gcmVjb2duaXplXG4gICAgICogbGlrZSB3aGVuIGFub3RoZXIgaXMgYmVpbmcgcmVjb2duaXplZCBvciBpdCBpcyBkaXNhYmxlZFxuICAgICAqIEB2aXJ0dWFsXG4gICAgICovXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkgeyB9XG59O1xuXG4vKipcbiAqIGdldCBhIHVzYWJsZSBzdHJpbmcsIHVzZWQgYXMgZXZlbnQgcG9zdGZpeFxuICogQHBhcmFtIHtDb25zdH0gc3RhdGVcbiAqIEByZXR1cm5zIHtTdHJpbmd9IHN0YXRlXG4gKi9cbmZ1bmN0aW9uIHN0YXRlU3RyKHN0YXRlKSB7XG4gICAgaWYgKHN0YXRlICYgU1RBVEVfQ0FOQ0VMTEVEKSB7XG4gICAgICAgIHJldHVybiAnY2FuY2VsJztcbiAgICB9IGVsc2UgaWYgKHN0YXRlICYgU1RBVEVfRU5ERUQpIHtcbiAgICAgICAgcmV0dXJuICdlbmQnO1xuICAgIH0gZWxzZSBpZiAoc3RhdGUgJiBTVEFURV9DSEFOR0VEKSB7XG4gICAgICAgIHJldHVybiAnbW92ZSc7XG4gICAgfSBlbHNlIGlmIChzdGF0ZSAmIFNUQVRFX0JFR0FOKSB7XG4gICAgICAgIHJldHVybiAnc3RhcnQnO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogZGlyZWN0aW9uIGNvbnMgdG8gc3RyaW5nXG4gKiBAcGFyYW0ge0NvbnN0fSBkaXJlY3Rpb25cbiAqIEByZXR1cm5zIHtTdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGRpcmVjdGlvblN0cihkaXJlY3Rpb24pIHtcbiAgICBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9ET1dOKSB7XG4gICAgICAgIHJldHVybiAnZG93bic7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX1VQKSB7XG4gICAgICAgIHJldHVybiAndXAnO1xuICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uID09IERJUkVDVElPTl9MRUZUKSB7XG4gICAgICAgIHJldHVybiAnbGVmdCc7XG4gICAgfSBlbHNlIGlmIChkaXJlY3Rpb24gPT0gRElSRUNUSU9OX1JJR0hUKSB7XG4gICAgICAgIHJldHVybiAncmlnaHQnO1xuICAgIH1cbiAgICByZXR1cm4gJyc7XG59XG5cbi8qKlxuICogZ2V0IGEgcmVjb2duaXplciBieSBuYW1lIGlmIGl0IGlzIGJvdW5kIHRvIGEgbWFuYWdlclxuICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gb3RoZXJSZWNvZ25pemVyXG4gKiBAcGFyYW0ge1JlY29nbml6ZXJ9IHJlY29nbml6ZXJcbiAqIEByZXR1cm5zIHtSZWNvZ25pemVyfVxuICovXG5mdW5jdGlvbiBnZXRSZWNvZ25pemVyQnlOYW1lSWZNYW5hZ2VyKG90aGVyUmVjb2duaXplciwgcmVjb2duaXplcikge1xuICAgIHZhciBtYW5hZ2VyID0gcmVjb2duaXplci5tYW5hZ2VyO1xuICAgIGlmIChtYW5hZ2VyKSB7XG4gICAgICAgIHJldHVybiBtYW5hZ2VyLmdldChvdGhlclJlY29nbml6ZXIpO1xuICAgIH1cbiAgICByZXR1cm4gb3RoZXJSZWNvZ25pemVyO1xufVxuXG4vKipcbiAqIFRoaXMgcmVjb2duaXplciBpcyBqdXN0IHVzZWQgYXMgYSBiYXNlIGZvciB0aGUgc2ltcGxlIGF0dHJpYnV0ZSByZWNvZ25pemVycy5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBBdHRyUmVjb2duaXplcigpIHtcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59XG5cbmluaGVyaXQoQXR0clJlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIEF0dHJSZWNvZ25pemVyXG4gICAgICovXG4gICAgZGVmYXVsdHM6IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgICAgICAqIEBkZWZhdWx0IDFcbiAgICAgICAgICovXG4gICAgICAgIHBvaW50ZXJzOiAxXG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gY2hlY2sgaWYgaXQgdGhlIHJlY29nbml6ZXIgcmVjZWl2ZXMgdmFsaWQgaW5wdXQsIGxpa2UgaW5wdXQuZGlzdGFuY2UgPiAxMC5cbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gcmVjb2duaXplZFxuICAgICAqL1xuICAgIGF0dHJUZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9uUG9pbnRlcnMgPSB0aGlzLm9wdGlvbnMucG9pbnRlcnM7XG4gICAgICAgIHJldHVybiBvcHRpb25Qb2ludGVycyA9PT0gMCB8fCBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvblBvaW50ZXJzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIHRoZSBpbnB1dCBhbmQgcmV0dXJuIHRoZSBzdGF0ZSBmb3IgdGhlIHJlY29nbml6ZXJcbiAgICAgKiBAbWVtYmVyb2YgQXR0clJlY29nbml6ZXJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXRcbiAgICAgKiBAcmV0dXJucyB7Kn0gU3RhdGVcbiAgICAgKi9cbiAgICBwcm9jZXNzOiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgc3RhdGUgPSB0aGlzLnN0YXRlO1xuICAgICAgICB2YXIgZXZlbnRUeXBlID0gaW5wdXQuZXZlbnRUeXBlO1xuXG4gICAgICAgIHZhciBpc1JlY29nbml6ZWQgPSBzdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQpO1xuICAgICAgICB2YXIgaXNWYWxpZCA9IHRoaXMuYXR0clRlc3QoaW5wdXQpO1xuXG4gICAgICAgIC8vIG9uIGNhbmNlbCBpbnB1dCBhbmQgd2UndmUgcmVjb2duaXplZCBiZWZvcmUsIHJldHVybiBTVEFURV9DQU5DRUxMRURcbiAgICAgICAgaWYgKGlzUmVjb2duaXplZCAmJiAoZXZlbnRUeXBlICYgSU5QVVRfQ0FOQ0VMIHx8ICFpc1ZhbGlkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfQ0FOQ0VMTEVEO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUmVjb2duaXplZCB8fCBpc1ZhbGlkKSB7XG4gICAgICAgICAgICBpZiAoZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlIHwgU1RBVEVfRU5ERUQ7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCEoc3RhdGUgJiBTVEFURV9CRUdBTikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfQkVHQU47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc3RhdGUgfCBTVEFURV9DSEFOR0VEO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBTVEFURV9GQUlMRUQ7XG4gICAgfVxufSk7XG5cbi8qKlxuICogUGFuXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG93biBhbmQgbW92ZWQgaW4gdGhlIGFsbG93ZWQgZGlyZWN0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBQYW5SZWNvZ25pemVyKCkge1xuICAgIEF0dHJSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICB0aGlzLnBYID0gbnVsbDtcbiAgICB0aGlzLnBZID0gbnVsbDtcbn1cblxuaW5oZXJpdChQYW5SZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUGFuUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncGFuJyxcbiAgICAgICAgdGhyZXNob2xkOiAxMCxcbiAgICAgICAgcG9pbnRlcnM6IDEsXG4gICAgICAgIGRpcmVjdGlvbjogRElSRUNUSU9OX0FMTFxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgYWN0aW9ucyA9IFtdO1xuICAgICAgICBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChUT1VDSF9BQ1RJT05fUEFOX1kpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXJlY3Rpb24gJiBESVJFQ1RJT05fVkVSVElDQUwpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChUT1VDSF9BQ1RJT05fUEFOX1gpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY3Rpb25zO1xuICAgIH0sXG5cbiAgICBkaXJlY3Rpb25UZXN0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHRoaXMub3B0aW9ucztcbiAgICAgICAgdmFyIGhhc01vdmVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIGRpc3RhbmNlID0gaW5wdXQuZGlzdGFuY2U7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBpbnB1dC5kaXJlY3Rpb247XG4gICAgICAgIHZhciB4ID0gaW5wdXQuZGVsdGFYO1xuICAgICAgICB2YXIgeSA9IGlucHV0LmRlbHRhWTtcblxuICAgICAgICAvLyBsb2NrIHRvIGF4aXM/XG4gICAgICAgIGlmICghKGRpcmVjdGlvbiAmIG9wdGlvbnMuZGlyZWN0aW9uKSkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aW9uICYgRElSRUNUSU9OX0hPUklaT05UQUwpIHtcbiAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAoeCA9PT0gMCkgPyBESVJFQ1RJT05fTk9ORSA6ICh4IDwgMCkgPyBESVJFQ1RJT05fTEVGVCA6IERJUkVDVElPTl9SSUdIVDtcbiAgICAgICAgICAgICAgICBoYXNNb3ZlZCA9IHggIT0gdGhpcy5wWDtcbiAgICAgICAgICAgICAgICBkaXN0YW5jZSA9IE1hdGguYWJzKGlucHV0LmRlbHRhWCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICh5ID09PSAwKSA/IERJUkVDVElPTl9OT05FIDogKHkgPCAwKSA/IERJUkVDVElPTl9VUCA6IERJUkVDVElPTl9ET1dOO1xuICAgICAgICAgICAgICAgIGhhc01vdmVkID0geSAhPSB0aGlzLnBZO1xuICAgICAgICAgICAgICAgIGRpc3RhbmNlID0gTWF0aC5hYnMoaW5wdXQuZGVsdGFZKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbnB1dC5kaXJlY3Rpb24gPSBkaXJlY3Rpb247XG4gICAgICAgIHJldHVybiBoYXNNb3ZlZCAmJiBkaXN0YW5jZSA+IG9wdGlvbnMudGhyZXNob2xkICYmIGRpcmVjdGlvbiAmIG9wdGlvbnMuZGlyZWN0aW9uO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIEF0dHJSZWNvZ25pemVyLnByb3RvdHlwZS5hdHRyVGVzdC5jYWxsKHRoaXMsIGlucHV0KSAmJlxuICAgICAgICAgICAgKHRoaXMuc3RhdGUgJiBTVEFURV9CRUdBTiB8fCAoISh0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pICYmIHRoaXMuZGlyZWN0aW9uVGVzdChpbnB1dCkpKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcblxuICAgICAgICB0aGlzLnBYID0gaW5wdXQuZGVsdGFYO1xuICAgICAgICB0aGlzLnBZID0gaW5wdXQuZGVsdGFZO1xuXG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSBkaXJlY3Rpb25TdHIoaW5wdXQuZGlyZWN0aW9uKTtcblxuICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG4gICAgICAgICAgICBpbnB1dC5hZGRpdGlvbmFsRXZlbnQgPSB0aGlzLm9wdGlvbnMuZXZlbnQgKyBkaXJlY3Rpb247XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc3VwZXIuZW1pdC5jYWxsKHRoaXMsIGlucHV0KTtcbiAgICB9XG59KTtcblxuLyoqXG4gKiBQaW5jaFxuICogUmVjb2duaXplZCB3aGVuIHR3byBvciBtb3JlIHBvaW50ZXJzIGFyZSBtb3ZpbmcgdG93YXJkICh6b29tLWluKSBvciBhd2F5IGZyb20gZWFjaCBvdGhlciAoem9vbS1vdXQpLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBQaW5jaFJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChQaW5jaFJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQaW5jaFJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3BpbmNoJyxcbiAgICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgICBwb2ludGVyczogMlxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICAoTWF0aC5hYnMoaW5wdXQuc2NhbGUgLSAxKSA+IHRoaXMub3B0aW9ucy50aHJlc2hvbGQgfHwgdGhpcy5zdGF0ZSAmIFNUQVRFX0JFR0FOKTtcbiAgICB9LFxuXG4gICAgZW1pdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgaWYgKGlucHV0LnNjYWxlICE9PSAxKSB7XG4gICAgICAgICAgICB2YXIgaW5PdXQgPSBpbnB1dC5zY2FsZSA8IDEgPyAnaW4nIDogJ291dCc7XG4gICAgICAgICAgICBpbnB1dC5hZGRpdGlvbmFsRXZlbnQgPSB0aGlzLm9wdGlvbnMuZXZlbnQgKyBpbk91dDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9zdXBlci5lbWl0LmNhbGwodGhpcywgaW5wdXQpO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFByZXNzXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG93biBmb3IgeCBtcyB3aXRob3V0IGFueSBtb3ZlbWVudC5cbiAqIEBjb25zdHJ1Y3RvclxuICogQGV4dGVuZHMgUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBQcmVzc1JlY29nbml6ZXIoKSB7XG4gICAgUmVjb2duaXplci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbn1cblxuaW5oZXJpdChQcmVzc1JlY29nbml6ZXIsIFJlY29nbml6ZXIsIHtcbiAgICAvKipcbiAgICAgKiBAbmFtZXNwYWNlXG4gICAgICogQG1lbWJlcm9mIFByZXNzUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncHJlc3MnLFxuICAgICAgICBwb2ludGVyczogMSxcbiAgICAgICAgdGltZTogMjUxLCAvLyBtaW5pbWFsIHRpbWUgb2YgdGhlIHBvaW50ZXIgdG8gYmUgcHJlc3NlZFxuICAgICAgICB0aHJlc2hvbGQ6IDkgLy8gYSBtaW5pbWFsIG1vdmVtZW50IGlzIG9rLCBidXQga2VlcCBpdCBsb3dcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gW1RPVUNIX0FDVElPTl9BVVRPXTtcbiAgICB9LFxuXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG4gICAgICAgIHZhciB2YWxpZFBvaW50ZXJzID0gaW5wdXQucG9pbnRlcnMubGVuZ3RoID09PSBvcHRpb25zLnBvaW50ZXJzO1xuICAgICAgICB2YXIgdmFsaWRNb3ZlbWVudCA9IGlucHV0LmRpc3RhbmNlIDwgb3B0aW9ucy50aHJlc2hvbGQ7XG4gICAgICAgIHZhciB2YWxpZFRpbWUgPSBpbnB1dC5kZWx0YVRpbWUgPiBvcHRpb25zLnRpbWU7XG5cbiAgICAgICAgdGhpcy5faW5wdXQgPSBpbnB1dDtcblxuICAgICAgICAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxuICAgICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG4gICAgICAgIGlmICghdmFsaWRNb3ZlbWVudCB8fCAhdmFsaWRQb2ludGVycyB8fCAoaW5wdXQuZXZlbnRUeXBlICYgKElOUFVUX0VORCB8IElOUFVUX0NBTkNFTCkgJiYgIXZhbGlkVGltZSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKTtcbiAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5ldmVudFR5cGUgJiBJTlBVVF9TVEFSVCkge1xuICAgICAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5fdGltZXIgPSBzZXRUaW1lb3V0Q29udGV4dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgICAgICB0aGlzLnRyeUVtaXQoKTtcbiAgICAgICAgICAgIH0sIG9wdGlvbnMudGltZSwgdGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gU1RBVEVfRkFJTEVEO1xuICAgIH0sXG5cbiAgICByZXNldDogZnVuY3Rpb24oKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcik7XG4gICAgfSxcblxuICAgIGVtaXQ6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTVEFURV9SRUNPR05JWkVEKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaW5wdXQgJiYgKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX0VORCkpIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArICd1cCcsIGlucHV0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2lucHV0LnRpbWVTdGFtcCA9IG5vdygpO1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCB0aGlzLl9pbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiBSb3RhdGVcbiAqIFJlY29nbml6ZWQgd2hlbiB0d28gb3IgbW9yZSBwb2ludGVyIGFyZSBtb3ZpbmcgaW4gYSBjaXJjdWxhciBtb3Rpb24uXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIEF0dHJSZWNvZ25pemVyXG4gKi9cbmZ1bmN0aW9uIFJvdGF0ZVJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChSb3RhdGVSZWNvZ25pemVyLCBBdHRyUmVjb2duaXplciwge1xuICAgIC8qKlxuICAgICAqIEBuYW1lc3BhY2VcbiAgICAgKiBAbWVtYmVyb2YgUm90YXRlUmVjb2duaXplclxuICAgICAqL1xuICAgIGRlZmF1bHRzOiB7XG4gICAgICAgIGV2ZW50OiAncm90YXRlJyxcbiAgICAgICAgdGhyZXNob2xkOiAwLFxuICAgICAgICBwb2ludGVyczogMlxuICAgIH0sXG5cbiAgICBnZXRUb3VjaEFjdGlvbjogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBbVE9VQ0hfQUNUSU9OX05PTkVdO1xuICAgIH0sXG5cbiAgICBhdHRyVGVzdDogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N1cGVyLmF0dHJUZXN0LmNhbGwodGhpcywgaW5wdXQpICYmXG4gICAgICAgICAgICAoTWF0aC5hYnMoaW5wdXQucm90YXRpb24pID4gdGhpcy5vcHRpb25zLnRocmVzaG9sZCB8fCB0aGlzLnN0YXRlICYgU1RBVEVfQkVHQU4pO1xuICAgIH1cbn0pO1xuXG4vKipcbiAqIFN3aXBlXG4gKiBSZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgbW92aW5nIGZhc3QgKHZlbG9jaXR5KSwgd2l0aCBlbm91Z2ggZGlzdGFuY2UgaW4gdGhlIGFsbG93ZWQgZGlyZWN0aW9uLlxuICogQGNvbnN0cnVjdG9yXG4gKiBAZXh0ZW5kcyBBdHRyUmVjb2duaXplclxuICovXG5mdW5jdGlvbiBTd2lwZVJlY29nbml6ZXIoKSB7XG4gICAgQXR0clJlY29nbml6ZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn1cblxuaW5oZXJpdChTd2lwZVJlY29nbml6ZXIsIEF0dHJSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBTd2lwZVJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3N3aXBlJyxcbiAgICAgICAgdGhyZXNob2xkOiAxMCxcbiAgICAgICAgdmVsb2NpdHk6IDAuMyxcbiAgICAgICAgZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTCxcbiAgICAgICAgcG9pbnRlcnM6IDFcbiAgICB9LFxuXG4gICAgZ2V0VG91Y2hBY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gUGFuUmVjb2duaXplci5wcm90b3R5cGUuZ2V0VG91Y2hBY3Rpb24uY2FsbCh0aGlzKTtcbiAgICB9LFxuXG4gICAgYXR0clRlc3Q6IGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uO1xuICAgICAgICB2YXIgdmVsb2NpdHk7XG5cbiAgICAgICAgaWYgKGRpcmVjdGlvbiAmIChESVJFQ1RJT05fSE9SSVpPTlRBTCB8IERJUkVDVElPTl9WRVJUSUNBTCkpIHtcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gaW5wdXQub3ZlcmFsbFZlbG9jaXR5O1xuICAgICAgICB9IGVsc2UgaWYgKGRpcmVjdGlvbiAmIERJUkVDVElPTl9IT1JJWk9OVEFMKSB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0Lm92ZXJhbGxWZWxvY2l0eVg7XG4gICAgICAgIH0gZWxzZSBpZiAoZGlyZWN0aW9uICYgRElSRUNUSU9OX1ZFUlRJQ0FMKSB7XG4gICAgICAgICAgICB2ZWxvY2l0eSA9IGlucHV0Lm92ZXJhbGxWZWxvY2l0eVk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fc3VwZXIuYXR0clRlc3QuY2FsbCh0aGlzLCBpbnB1dCkgJiZcbiAgICAgICAgICAgIGRpcmVjdGlvbiAmIGlucHV0Lm9mZnNldERpcmVjdGlvbiAmJlxuICAgICAgICAgICAgaW5wdXQuZGlzdGFuY2UgPiB0aGlzLm9wdGlvbnMudGhyZXNob2xkICYmXG4gICAgICAgICAgICBpbnB1dC5tYXhQb2ludGVycyA9PSB0aGlzLm9wdGlvbnMucG9pbnRlcnMgJiZcbiAgICAgICAgICAgIGFicyh2ZWxvY2l0eSkgPiB0aGlzLm9wdGlvbnMudmVsb2NpdHkgJiYgaW5wdXQuZXZlbnRUeXBlICYgSU5QVVRfRU5EO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICB2YXIgZGlyZWN0aW9uID0gZGlyZWN0aW9uU3RyKGlucHV0Lm9mZnNldERpcmVjdGlvbik7XG4gICAgICAgIGlmIChkaXJlY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMubWFuYWdlci5lbWl0KHRoaXMub3B0aW9ucy5ldmVudCArIGRpcmVjdGlvbiwgaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCBpbnB1dCk7XG4gICAgfVxufSk7XG5cbi8qKlxuICogQSB0YXAgaXMgZWNvZ25pemVkIHdoZW4gdGhlIHBvaW50ZXIgaXMgZG9pbmcgYSBzbWFsbCB0YXAvY2xpY2suIE11bHRpcGxlIHRhcHMgYXJlIHJlY29nbml6ZWQgaWYgdGhleSBvY2N1clxuICogYmV0d2VlbiB0aGUgZ2l2ZW4gaW50ZXJ2YWwgYW5kIHBvc2l0aW9uLiBUaGUgZGVsYXkgb3B0aW9uIGNhbiBiZSB1c2VkIHRvIHJlY29nbml6ZSBtdWx0aS10YXBzIHdpdGhvdXQgZmlyaW5nXG4gKiBhIHNpbmdsZSB0YXAuXG4gKlxuICogVGhlIGV2ZW50RGF0YSBmcm9tIHRoZSBlbWl0dGVkIGV2ZW50IGNvbnRhaW5zIHRoZSBwcm9wZXJ0eSBgdGFwQ291bnRgLCB3aGljaCBjb250YWlucyB0aGUgYW1vdW50IG9mXG4gKiBtdWx0aS10YXBzIGJlaW5nIHJlY29nbml6ZWQuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBleHRlbmRzIFJlY29nbml6ZXJcbiAqL1xuZnVuY3Rpb24gVGFwUmVjb2duaXplcigpIHtcbiAgICBSZWNvZ25pemVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG5cbiAgICAvLyBwcmV2aW91cyB0aW1lIGFuZCBjZW50ZXIsXG4gICAgLy8gdXNlZCBmb3IgdGFwIGNvdW50aW5nXG4gICAgdGhpcy5wVGltZSA9IGZhbHNlO1xuICAgIHRoaXMucENlbnRlciA9IGZhbHNlO1xuXG4gICAgdGhpcy5fdGltZXIgPSBudWxsO1xuICAgIHRoaXMuX2lucHV0ID0gbnVsbDtcbiAgICB0aGlzLmNvdW50ID0gMDtcbn1cblxuaW5oZXJpdChUYXBSZWNvZ25pemVyLCBSZWNvZ25pemVyLCB7XG4gICAgLyoqXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqIEBtZW1iZXJvZiBQaW5jaFJlY29nbml6ZXJcbiAgICAgKi9cbiAgICBkZWZhdWx0czoge1xuICAgICAgICBldmVudDogJ3RhcCcsXG4gICAgICAgIHBvaW50ZXJzOiAxLFxuICAgICAgICB0YXBzOiAxLFxuICAgICAgICBpbnRlcnZhbDogMzAwLCAvLyBtYXggdGltZSBiZXR3ZWVuIHRoZSBtdWx0aS10YXAgdGFwc1xuICAgICAgICB0aW1lOiAyNTAsIC8vIG1heCB0aW1lIG9mIHRoZSBwb2ludGVyIHRvIGJlIGRvd24gKGxpa2UgZmluZ2VyIG9uIHRoZSBzY3JlZW4pXG4gICAgICAgIHRocmVzaG9sZDogOSwgLy8gYSBtaW5pbWFsIG1vdmVtZW50IGlzIG9rLCBidXQga2VlcCBpdCBsb3dcbiAgICAgICAgcG9zVGhyZXNob2xkOiAxMCAvLyBhIG11bHRpLXRhcCBjYW4gYmUgYSBiaXQgb2ZmIHRoZSBpbml0aWFsIHBvc2l0aW9uXG4gICAgfSxcblxuICAgIGdldFRvdWNoQWN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIFtUT1VDSF9BQ1RJT05fTUFOSVBVTEFUSU9OXTtcbiAgICB9LFxuXG4gICAgcHJvY2VzczogZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgdmFyIHZhbGlkUG9pbnRlcnMgPSBpbnB1dC5wb2ludGVycy5sZW5ndGggPT09IG9wdGlvbnMucG9pbnRlcnM7XG4gICAgICAgIHZhciB2YWxpZE1vdmVtZW50ID0gaW5wdXQuZGlzdGFuY2UgPCBvcHRpb25zLnRocmVzaG9sZDtcbiAgICAgICAgdmFyIHZhbGlkVG91Y2hUaW1lID0gaW5wdXQuZGVsdGFUaW1lIDwgb3B0aW9ucy50aW1lO1xuXG4gICAgICAgIHRoaXMucmVzZXQoKTtcblxuICAgICAgICBpZiAoKGlucHV0LmV2ZW50VHlwZSAmIElOUFVUX1NUQVJUKSAmJiAodGhpcy5jb3VudCA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhaWxUaW1lb3V0KCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB3ZSBvbmx5IGFsbG93IGxpdHRsZSBtb3ZlbWVudFxuICAgICAgICAvLyBhbmQgd2UndmUgcmVhY2hlZCBhbiBlbmQgZXZlbnQsIHNvIGEgdGFwIGlzIHBvc3NpYmxlXG4gICAgICAgIGlmICh2YWxpZE1vdmVtZW50ICYmIHZhbGlkVG91Y2hUaW1lICYmIHZhbGlkUG9pbnRlcnMpIHtcbiAgICAgICAgICAgIGlmIChpbnB1dC5ldmVudFR5cGUgIT0gSU5QVVRfRU5EKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFpbFRpbWVvdXQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFyIHZhbGlkSW50ZXJ2YWwgPSB0aGlzLnBUaW1lID8gKGlucHV0LnRpbWVTdGFtcCAtIHRoaXMucFRpbWUgPCBvcHRpb25zLmludGVydmFsKSA6IHRydWU7XG4gICAgICAgICAgICB2YXIgdmFsaWRNdWx0aVRhcCA9ICF0aGlzLnBDZW50ZXIgfHwgZ2V0RGlzdGFuY2UodGhpcy5wQ2VudGVyLCBpbnB1dC5jZW50ZXIpIDwgb3B0aW9ucy5wb3NUaHJlc2hvbGQ7XG5cbiAgICAgICAgICAgIHRoaXMucFRpbWUgPSBpbnB1dC50aW1lU3RhbXA7XG4gICAgICAgICAgICB0aGlzLnBDZW50ZXIgPSBpbnB1dC5jZW50ZXI7XG5cbiAgICAgICAgICAgIGlmICghdmFsaWRNdWx0aVRhcCB8fCAhdmFsaWRJbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuY291bnQgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvdW50ICs9IDE7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX2lucHV0ID0gaW5wdXQ7XG5cbiAgICAgICAgICAgIC8vIGlmIHRhcCBjb3VudCBtYXRjaGVzIHdlIGhhdmUgcmVjb2duaXplZCBpdCxcbiAgICAgICAgICAgIC8vIGVsc2UgaXQgaGFzIGJlZ2FuIHJlY29nbml6aW5nLi4uXG4gICAgICAgICAgICB2YXIgdGFwQ291bnQgPSB0aGlzLmNvdW50ICUgb3B0aW9ucy50YXBzO1xuICAgICAgICAgICAgaWYgKHRhcENvdW50ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gZmFpbGluZyByZXF1aXJlbWVudHMsIGltbWVkaWF0ZWx5IHRyaWdnZXIgdGhlIHRhcCBldmVudFxuICAgICAgICAgICAgICAgIC8vIG9yIHdhaXQgYXMgbG9uZyBhcyB0aGUgbXVsdGl0YXAgaW50ZXJ2YWwgdG8gdHJpZ2dlclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5oYXNSZXF1aXJlRmFpbHVyZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEVfUkVDT0dOSVpFRDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX1JFQ09HTklaRUQ7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyeUVtaXQoKTtcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0aW9ucy5pbnRlcnZhbCwgdGhpcyk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFURV9CRUdBTjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgZmFpbFRpbWVvdXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLl90aW1lciA9IHNldFRpbWVvdXRDb250ZXh0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0ZBSUxFRDtcbiAgICAgICAgfSwgdGhpcy5vcHRpb25zLmludGVydmFsLCB0aGlzKTtcbiAgICAgICAgcmV0dXJuIFNUQVRFX0ZBSUxFRDtcbiAgICB9LFxuXG4gICAgcmVzZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXIpO1xuICAgIH0sXG5cbiAgICBlbWl0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgPT0gU1RBVEVfUkVDT0dOSVpFRCkge1xuICAgICAgICAgICAgdGhpcy5faW5wdXQudGFwQ291bnQgPSB0aGlzLmNvdW50O1xuICAgICAgICAgICAgdGhpcy5tYW5hZ2VyLmVtaXQodGhpcy5vcHRpb25zLmV2ZW50LCB0aGlzLl9pbnB1dCk7XG4gICAgICAgIH1cbiAgICB9XG59KTtcblxuLyoqXG4gKiBTaW1wbGUgd2F5IHRvIGNyZWF0ZSBhIG1hbmFnZXIgd2l0aCBhIGRlZmF1bHQgc2V0IG9mIHJlY29nbml6ZXJzLlxuICogQHBhcmFtIHtIVE1MRWxlbWVudH0gZWxlbWVudFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQGNvbnN0cnVjdG9yXG4gKi9cbmZ1bmN0aW9uIEhhbW1lcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5yZWNvZ25pemVycyA9IGlmVW5kZWZpbmVkKG9wdGlvbnMucmVjb2duaXplcnMsIEhhbW1lci5kZWZhdWx0cy5wcmVzZXQpO1xuICAgIHJldHVybiBuZXcgTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKTtcbn1cblxuLyoqXG4gKiBAY29uc3Qge3N0cmluZ31cbiAqL1xuSGFtbWVyLlZFUlNJT04gPSAnMi4wLjcnO1xuXG4vKipcbiAqIGRlZmF1bHQgc2V0dGluZ3NcbiAqIEBuYW1lc3BhY2VcbiAqL1xuSGFtbWVyLmRlZmF1bHRzID0ge1xuICAgIC8qKlxuICAgICAqIHNldCBpZiBET00gZXZlbnRzIGFyZSBiZWluZyB0cmlnZ2VyZWQuXG4gICAgICogQnV0IHRoaXMgaXMgc2xvd2VyIGFuZCB1bnVzZWQgYnkgc2ltcGxlIGltcGxlbWVudGF0aW9ucywgc28gZGlzYWJsZWQgYnkgZGVmYXVsdC5cbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAqL1xuICAgIGRvbUV2ZW50czogZmFsc2UsXG5cbiAgICAvKipcbiAgICAgKiBUaGUgdmFsdWUgZm9yIHRoZSB0b3VjaEFjdGlvbiBwcm9wZXJ0eS9mYWxsYmFjay5cbiAgICAgKiBXaGVuIHNldCB0byBgY29tcHV0ZWAgaXQgd2lsbCBtYWdpY2FsbHkgc2V0IHRoZSBjb3JyZWN0IHZhbHVlIGJhc2VkIG9uIHRoZSBhZGRlZCByZWNvZ25pemVycy5cbiAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAqIEBkZWZhdWx0IGNvbXB1dGVcbiAgICAgKi9cbiAgICB0b3VjaEFjdGlvbjogVE9VQ0hfQUNUSU9OX0NPTVBVVEUsXG5cbiAgICAvKipcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICovXG4gICAgZW5hYmxlOiB0cnVlLFxuXG4gICAgLyoqXG4gICAgICogRVhQRVJJTUVOVEFMIEZFQVRVUkUgLS0gY2FuIGJlIHJlbW92ZWQvY2hhbmdlZFxuICAgICAqIENoYW5nZSB0aGUgcGFyZW50IGlucHV0IHRhcmdldCBlbGVtZW50LlxuICAgICAqIElmIE51bGwsIHRoZW4gaXQgaXMgYmVpbmcgc2V0IHRoZSB0byBtYWluIGVsZW1lbnQuXG4gICAgICogQHR5cGUge051bGx8RXZlbnRUYXJnZXR9XG4gICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAqL1xuICAgIGlucHV0VGFyZ2V0OiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogZm9yY2UgYW4gaW5wdXQgY2xhc3NcbiAgICAgKiBAdHlwZSB7TnVsbHxGdW5jdGlvbn1cbiAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICovXG4gICAgaW5wdXRDbGFzczogbnVsbCxcblxuICAgIC8qKlxuICAgICAqIERlZmF1bHQgcmVjb2duaXplciBzZXR1cCB3aGVuIGNhbGxpbmcgYEhhbW1lcigpYFxuICAgICAqIFdoZW4gY3JlYXRpbmcgYSBuZXcgTWFuYWdlciB0aGVzZSB3aWxsIGJlIHNraXBwZWQuXG4gICAgICogQHR5cGUge0FycmF5fVxuICAgICAqL1xuICAgIHByZXNldDogW1xuICAgICAgICAvLyBSZWNvZ25pemVyQ2xhc3MsIG9wdGlvbnMsIFtyZWNvZ25pemVXaXRoLCAuLi5dLCBbcmVxdWlyZUZhaWx1cmUsIC4uLl1cbiAgICAgICAgW1JvdGF0ZVJlY29nbml6ZXIsIHtlbmFibGU6IGZhbHNlfV0sXG4gICAgICAgIFtQaW5jaFJlY29nbml6ZXIsIHtlbmFibGU6IGZhbHNlfSwgWydyb3RhdGUnXV0sXG4gICAgICAgIFtTd2lwZVJlY29nbml6ZXIsIHtkaXJlY3Rpb246IERJUkVDVElPTl9IT1JJWk9OVEFMfV0sXG4gICAgICAgIFtQYW5SZWNvZ25pemVyLCB7ZGlyZWN0aW9uOiBESVJFQ1RJT05fSE9SSVpPTlRBTH0sIFsnc3dpcGUnXV0sXG4gICAgICAgIFtUYXBSZWNvZ25pemVyXSxcbiAgICAgICAgW1RhcFJlY29nbml6ZXIsIHtldmVudDogJ2RvdWJsZXRhcCcsIHRhcHM6IDJ9LCBbJ3RhcCddXSxcbiAgICAgICAgW1ByZXNzUmVjb2duaXplcl1cbiAgICBdLFxuXG4gICAgLyoqXG4gICAgICogU29tZSBDU1MgcHJvcGVydGllcyBjYW4gYmUgdXNlZCB0byBpbXByb3ZlIHRoZSB3b3JraW5nIG9mIEhhbW1lci5cbiAgICAgKiBBZGQgdGhlbSB0byB0aGlzIG1ldGhvZCBhbmQgdGhleSB3aWxsIGJlIHNldCB3aGVuIGNyZWF0aW5nIGEgbmV3IE1hbmFnZXIuXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqL1xuICAgIGNzc1Byb3BzOiB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNhYmxlcyB0ZXh0IHNlbGVjdGlvbiB0byBpbXByb3ZlIHRoZSBkcmFnZ2luZyBnZXN0dXJlLiBNYWlubHkgZm9yIGRlc2t0b3AgYnJvd3NlcnMuXG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgdXNlclNlbGVjdDogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNhYmxlIHRoZSBXaW5kb3dzIFBob25lIGdyaXBwZXJzIHdoZW4gcHJlc3NpbmcgYW4gZWxlbWVudC5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB0b3VjaFNlbGVjdDogJ25vbmUnLFxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEaXNhYmxlcyB0aGUgZGVmYXVsdCBjYWxsb3V0IHNob3duIHdoZW4geW91IHRvdWNoIGFuZCBob2xkIGEgdG91Y2ggdGFyZ2V0LlxuICAgICAgICAgKiBPbiBpT1MsIHdoZW4geW91IHRvdWNoIGFuZCBob2xkIGEgdG91Y2ggdGFyZ2V0IHN1Y2ggYXMgYSBsaW5rLCBTYWZhcmkgZGlzcGxheXNcbiAgICAgICAgICogYSBjYWxsb3V0IGNvbnRhaW5pbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGxpbmsuIFRoaXMgcHJvcGVydHkgYWxsb3dzIHlvdSB0byBkaXNhYmxlIHRoYXQgY2FsbG91dC5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ25vbmUnXG4gICAgICAgICAqL1xuICAgICAgICB0b3VjaENhbGxvdXQ6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHdoZXRoZXIgem9vbWluZyBpcyBlbmFibGVkLiBVc2VkIGJ5IElFMTA+XG4gICAgICAgICAqIEB0eXBlIHtTdHJpbmd9XG4gICAgICAgICAqIEBkZWZhdWx0ICdub25lJ1xuICAgICAgICAgKi9cbiAgICAgICAgY29udGVudFpvb21pbmc6ICdub25lJyxcblxuICAgICAgICAvKipcbiAgICAgICAgICogU3BlY2lmaWVzIHRoYXQgYW4gZW50aXJlIGVsZW1lbnQgc2hvdWxkIGJlIGRyYWdnYWJsZSBpbnN0ZWFkIG9mIGl0cyBjb250ZW50cy4gTWFpbmx5IGZvciBkZXNrdG9wIGJyb3dzZXJzLlxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxuICAgICAgICAgKiBAZGVmYXVsdCAnbm9uZSdcbiAgICAgICAgICovXG4gICAgICAgIHVzZXJEcmFnOiAnbm9uZScsXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE92ZXJyaWRlcyB0aGUgaGlnaGxpZ2h0IGNvbG9yIHNob3duIHdoZW4gdGhlIHVzZXIgdGFwcyBhIGxpbmsgb3IgYSBKYXZhU2NyaXB0XG4gICAgICAgICAqIGNsaWNrYWJsZSBlbGVtZW50IGluIGlPUy4gVGhpcyBwcm9wZXJ0eSBvYmV5cyB0aGUgYWxwaGEgdmFsdWUsIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICogQHR5cGUge1N0cmluZ31cbiAgICAgICAgICogQGRlZmF1bHQgJ3JnYmEoMCwwLDAsMCknXG4gICAgICAgICAqL1xuICAgICAgICB0YXBIaWdobGlnaHRDb2xvcjogJ3JnYmEoMCwwLDAsMCknXG4gICAgfVxufTtcblxudmFyIFNUT1AgPSAxO1xudmFyIEZPUkNFRF9TVE9QID0gMjtcblxuLyoqXG4gKiBNYW5hZ2VyXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gTWFuYWdlcihlbGVtZW50LCBvcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gYXNzaWduKHt9LCBIYW1tZXIuZGVmYXVsdHMsIG9wdGlvbnMgfHwge30pO1xuXG4gICAgdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0ID0gdGhpcy5vcHRpb25zLmlucHV0VGFyZ2V0IHx8IGVsZW1lbnQ7XG5cbiAgICB0aGlzLmhhbmRsZXJzID0ge307XG4gICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgdGhpcy5yZWNvZ25pemVycyA9IFtdO1xuICAgIHRoaXMub2xkQ3NzUHJvcHMgPSB7fTtcblxuICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgdGhpcy5pbnB1dCA9IGNyZWF0ZUlucHV0SW5zdGFuY2UodGhpcyk7XG4gICAgdGhpcy50b3VjaEFjdGlvbiA9IG5ldyBUb3VjaEFjdGlvbih0aGlzLCB0aGlzLm9wdGlvbnMudG91Y2hBY3Rpb24pO1xuXG4gICAgdG9nZ2xlQ3NzUHJvcHModGhpcywgdHJ1ZSk7XG5cbiAgICBlYWNoKHRoaXMub3B0aW9ucy5yZWNvZ25pemVycywgZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICB2YXIgcmVjb2duaXplciA9IHRoaXMuYWRkKG5ldyAoaXRlbVswXSkoaXRlbVsxXSkpO1xuICAgICAgICBpdGVtWzJdICYmIHJlY29nbml6ZXIucmVjb2duaXplV2l0aChpdGVtWzJdKTtcbiAgICAgICAgaXRlbVszXSAmJiByZWNvZ25pemVyLnJlcXVpcmVGYWlsdXJlKGl0ZW1bM10pO1xuICAgIH0sIHRoaXMpO1xufVxuXG5NYW5hZ2VyLnByb3RvdHlwZSA9IHtcbiAgICAvKipcbiAgICAgKiBzZXQgb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHJldHVybnMge01hbmFnZXJ9XG4gICAgICovXG4gICAgc2V0OiBmdW5jdGlvbihvcHRpb25zKSB7XG4gICAgICAgIGFzc2lnbih0aGlzLm9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIC8vIE9wdGlvbnMgdGhhdCBuZWVkIGEgbGl0dGxlIG1vcmUgc2V0dXBcbiAgICAgICAgaWYgKG9wdGlvbnMudG91Y2hBY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMudG91Y2hBY3Rpb24udXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5wdXRUYXJnZXQpIHtcbiAgICAgICAgICAgIC8vIENsZWFuIHVwIGV4aXN0aW5nIGV2ZW50IGxpc3RlbmVycyBhbmQgcmVpbml0aWFsaXplXG4gICAgICAgICAgICB0aGlzLmlucHV0LmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQudGFyZ2V0ID0gb3B0aW9ucy5pbnB1dFRhcmdldDtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQuaW5pdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBzdG9wIHJlY29nbml6aW5nIGZvciB0aGlzIHNlc3Npb24uXG4gICAgICogVGhpcyBzZXNzaW9uIHdpbGwgYmUgZGlzY2FyZGVkLCB3aGVuIGEgbmV3IFtpbnB1dF1zdGFydCBldmVudCBpcyBmaXJlZC5cbiAgICAgKiBXaGVuIGZvcmNlZCwgdGhlIHJlY29nbml6ZXIgY3ljbGUgaXMgc3RvcHBlZCBpbW1lZGlhdGVseS5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtmb3JjZV1cbiAgICAgKi9cbiAgICBzdG9wOiBmdW5jdGlvbihmb3JjZSkge1xuICAgICAgICB0aGlzLnNlc3Npb24uc3RvcHBlZCA9IGZvcmNlID8gRk9SQ0VEX1NUT1AgOiBTVE9QO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBydW4gdGhlIHJlY29nbml6ZXJzIVxuICAgICAqIGNhbGxlZCBieSB0aGUgaW5wdXRIYW5kbGVyIGZ1bmN0aW9uIG9uIGV2ZXJ5IG1vdmVtZW50IG9mIHRoZSBwb2ludGVycyAodG91Y2hlcylcbiAgICAgKiBpdCB3YWxrcyB0aHJvdWdoIGFsbCB0aGUgcmVjb2duaXplcnMgYW5kIHRyaWVzIHRvIGRldGVjdCB0aGUgZ2VzdHVyZSB0aGF0IGlzIGJlaW5nIG1hZGVcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gaW5wdXREYXRhXG4gICAgICovXG4gICAgcmVjb2duaXplOiBmdW5jdGlvbihpbnB1dERhdGEpIHtcbiAgICAgICAgdmFyIHNlc3Npb24gPSB0aGlzLnNlc3Npb247XG4gICAgICAgIGlmIChzZXNzaW9uLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJ1biB0aGUgdG91Y2gtYWN0aW9uIHBvbHlmaWxsXG4gICAgICAgIHRoaXMudG91Y2hBY3Rpb24ucHJldmVudERlZmF1bHRzKGlucHV0RGF0YSk7XG5cbiAgICAgICAgdmFyIHJlY29nbml6ZXI7XG4gICAgICAgIHZhciByZWNvZ25pemVycyA9IHRoaXMucmVjb2duaXplcnM7XG5cbiAgICAgICAgLy8gdGhpcyBob2xkcyB0aGUgcmVjb2duaXplciB0aGF0IGlzIGJlaW5nIHJlY29nbml6ZWQuXG4gICAgICAgIC8vIHNvIHRoZSByZWNvZ25pemVyJ3Mgc3RhdGUgbmVlZHMgdG8gYmUgQkVHQU4sIENIQU5HRUQsIEVOREVEIG9yIFJFQ09HTklaRURcbiAgICAgICAgLy8gaWYgbm8gcmVjb2duaXplciBpcyBkZXRlY3RpbmcgYSB0aGluZywgaXQgaXMgc2V0IHRvIGBudWxsYFxuICAgICAgICB2YXIgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplcjtcblxuICAgICAgICAvLyByZXNldCB3aGVuIHRoZSBsYXN0IHJlY29nbml6ZXIgaXMgcmVjb2duaXplZFxuICAgICAgICAvLyBvciB3aGVuIHdlJ3JlIGluIGEgbmV3IHNlc3Npb25cbiAgICAgICAgaWYgKCFjdXJSZWNvZ25pemVyIHx8IChjdXJSZWNvZ25pemVyICYmIGN1clJlY29nbml6ZXIuc3RhdGUgJiBTVEFURV9SRUNPR05JWkVEKSkge1xuICAgICAgICAgICAgY3VyUmVjb2duaXplciA9IHNlc3Npb24uY3VyUmVjb2duaXplciA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgcmVjb2duaXplcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZWNvZ25pemVyID0gcmVjb2duaXplcnNbaV07XG5cbiAgICAgICAgICAgIC8vIGZpbmQgb3V0IGlmIHdlIGFyZSBhbGxvd2VkIHRyeSB0byByZWNvZ25pemUgdGhlIGlucHV0IGZvciB0aGlzIG9uZS5cbiAgICAgICAgICAgIC8vIDEuICAgYWxsb3cgaWYgdGhlIHNlc3Npb24gaXMgTk9UIGZvcmNlZCBzdG9wcGVkIChzZWUgdGhlIC5zdG9wKCkgbWV0aG9kKVxuICAgICAgICAgICAgLy8gMi4gICBhbGxvdyBpZiB3ZSBzdGlsbCBoYXZlbid0IHJlY29nbml6ZWQgYSBnZXN0dXJlIGluIHRoaXMgc2Vzc2lvbiwgb3IgdGhlIHRoaXMgcmVjb2duaXplciBpcyB0aGUgb25lXG4gICAgICAgICAgICAvLyAgICAgIHRoYXQgaXMgYmVpbmcgcmVjb2duaXplZC5cbiAgICAgICAgICAgIC8vIDMuICAgYWxsb3cgaWYgdGhlIHJlY29nbml6ZXIgaXMgYWxsb3dlZCB0byBydW4gc2ltdWx0YW5lb3VzIHdpdGggdGhlIGN1cnJlbnQgcmVjb2duaXplZCByZWNvZ25pemVyLlxuICAgICAgICAgICAgLy8gICAgICB0aGlzIGNhbiBiZSBzZXR1cCB3aXRoIHRoZSBgcmVjb2duaXplV2l0aCgpYCBtZXRob2Qgb24gdGhlIHJlY29nbml6ZXIuXG4gICAgICAgICAgICBpZiAoc2Vzc2lvbi5zdG9wcGVkICE9PSBGT1JDRURfU1RPUCAmJiAoIC8vIDFcbiAgICAgICAgICAgICAgICAgICAgIWN1clJlY29nbml6ZXIgfHwgcmVjb2duaXplciA9PSBjdXJSZWNvZ25pemVyIHx8IC8vIDJcbiAgICAgICAgICAgICAgICAgICAgcmVjb2duaXplci5jYW5SZWNvZ25pemVXaXRoKGN1clJlY29nbml6ZXIpKSkgeyAvLyAzXG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5yZWNvZ25pemUoaW5wdXREYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVjb2duaXplci5yZXNldCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGUgcmVjb2duaXplciBoYXMgYmVlbiByZWNvZ25pemluZyB0aGUgaW5wdXQgYXMgYSB2YWxpZCBnZXN0dXJlLCB3ZSB3YW50IHRvIHN0b3JlIHRoaXMgb25lIGFzIHRoZVxuICAgICAgICAgICAgLy8gY3VycmVudCBhY3RpdmUgcmVjb2duaXplci4gYnV0IG9ubHkgaWYgd2UgZG9uJ3QgYWxyZWFkeSBoYXZlIGFuIGFjdGl2ZSByZWNvZ25pemVyXG4gICAgICAgICAgICBpZiAoIWN1clJlY29nbml6ZXIgJiYgcmVjb2duaXplci5zdGF0ZSAmIChTVEFURV9CRUdBTiB8IFNUQVRFX0NIQU5HRUQgfCBTVEFURV9FTkRFRCkpIHtcbiAgICAgICAgICAgICAgICBjdXJSZWNvZ25pemVyID0gc2Vzc2lvbi5jdXJSZWNvZ25pemVyID0gcmVjb2duaXplcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBnZXQgYSByZWNvZ25pemVyIGJ5IGl0cyBldmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSB7UmVjb2duaXplcnxTdHJpbmd9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcnxOdWxsfVxuICAgICAqL1xuICAgIGdldDogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAocmVjb2duaXplciBpbnN0YW5jZW9mIFJlY29nbml6ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZWNvZ25pemVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHJlY29nbml6ZXJzW2ldLm9wdGlvbnMuZXZlbnQgPT0gcmVjb2duaXplcikge1xuICAgICAgICAgICAgICAgIHJldHVybiByZWNvZ25pemVyc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogYWRkIGEgcmVjb2duaXplciB0byB0aGUgbWFuYWdlclxuICAgICAqIGV4aXN0aW5nIHJlY29nbml6ZXJzIHdpdGggdGhlIHNhbWUgZXZlbnQgbmFtZSB3aWxsIGJlIHJlbW92ZWRcbiAgICAgKiBAcGFyYW0ge1JlY29nbml6ZXJ9IHJlY29nbml6ZXJcbiAgICAgKiBAcmV0dXJucyB7UmVjb2duaXplcnxNYW5hZ2VyfVxuICAgICAqL1xuICAgIGFkZDogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcocmVjb2duaXplciwgJ2FkZCcsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBleGlzdGluZ1xuICAgICAgICB2YXIgZXhpc3RpbmcgPSB0aGlzLmdldChyZWNvZ25pemVyLm9wdGlvbnMuZXZlbnQpO1xuICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKGV4aXN0aW5nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVjb2duaXplcnMucHVzaChyZWNvZ25pemVyKTtcbiAgICAgICAgcmVjb2duaXplci5tYW5hZ2VyID0gdGhpcztcblxuICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gcmVjb2duaXplcjtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogcmVtb3ZlIGEgcmVjb2duaXplciBieSBuYW1lIG9yIGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtSZWNvZ25pemVyfFN0cmluZ30gcmVjb2duaXplclxuICAgICAqIEByZXR1cm5zIHtNYW5hZ2VyfVxuICAgICAqL1xuICAgIHJlbW92ZTogZnVuY3Rpb24ocmVjb2duaXplcikge1xuICAgICAgICBpZiAoaW52b2tlQXJyYXlBcmcocmVjb2duaXplciwgJ3JlbW92ZScsIHRoaXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHJlY29nbml6ZXIgPSB0aGlzLmdldChyZWNvZ25pemVyKTtcblxuICAgICAgICAvLyBsZXQncyBtYWtlIHN1cmUgdGhpcyByZWNvZ25pemVyIGV4aXN0c1xuICAgICAgICBpZiAocmVjb2duaXplcikge1xuICAgICAgICAgICAgdmFyIHJlY29nbml6ZXJzID0gdGhpcy5yZWNvZ25pemVycztcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGluQXJyYXkocmVjb2duaXplcnMsIHJlY29nbml6ZXIpO1xuXG4gICAgICAgICAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcmVjb2duaXplcnMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoQWN0aW9uLnVwZGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIGJpbmQgZXZlbnRcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gaGFuZGxlclxuICAgICAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBvbjogZnVuY3Rpb24oZXZlbnRzLCBoYW5kbGVyKSB7XG4gICAgICAgIGlmIChldmVudHMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgIGVhY2goc3BsaXRTdHIoZXZlbnRzKSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXJzW2V2ZW50XSB8fCBbXTtcbiAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XS5wdXNoKGhhbmRsZXIpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIHVuYmluZCBldmVudCwgbGVhdmUgZW1pdCBibGFuayB0byByZW1vdmUgYWxsIGhhbmRsZXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50c1xuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtoYW5kbGVyXVxuICAgICAqIEByZXR1cm5zIHtFdmVudEVtaXR0ZXJ9IHRoaXNcbiAgICAgKi9cbiAgICBvZmY6IGZ1bmN0aW9uKGV2ZW50cywgaGFuZGxlcikge1xuICAgICAgICBpZiAoZXZlbnRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnM7XG4gICAgICAgIGVhY2goc3BsaXRTdHIoZXZlbnRzKSwgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgIGlmICghaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBoYW5kbGVyc1tldmVudF07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGhhbmRsZXJzW2V2ZW50XSAmJiBoYW5kbGVyc1tldmVudF0uc3BsaWNlKGluQXJyYXkoaGFuZGxlcnNbZXZlbnRdLCBoYW5kbGVyKSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogZW1pdCBldmVudCB0byB0aGUgbGlzdGVuZXJzXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XG4gICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAgICAgKi9cbiAgICBlbWl0OiBmdW5jdGlvbihldmVudCwgZGF0YSkge1xuICAgICAgICAvLyB3ZSBhbHNvIHdhbnQgdG8gdHJpZ2dlciBkb20gZXZlbnRzXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZG9tRXZlbnRzKSB7XG4gICAgICAgICAgICB0cmlnZ2VyRG9tRXZlbnQoZXZlbnQsIGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm8gaGFuZGxlcnMsIHNvIHNraXAgaXQgYWxsXG4gICAgICAgIHZhciBoYW5kbGVycyA9IHRoaXMuaGFuZGxlcnNbZXZlbnRdICYmIHRoaXMuaGFuZGxlcnNbZXZlbnRdLnNsaWNlKCk7XG4gICAgICAgIGlmICghaGFuZGxlcnMgfHwgIWhhbmRsZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YS50eXBlID0gZXZlbnQ7XG4gICAgICAgIGRhdGEucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGRhdGEuc3JjRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB2YXIgaSA9IDA7XG4gICAgICAgIHdoaWxlIChpIDwgaGFuZGxlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBoYW5kbGVyc1tpXShkYXRhKTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBkZXN0cm95IHRoZSBtYW5hZ2VyIGFuZCB1bmJpbmRzIGFsbCBldmVudHNcbiAgICAgKiBpdCBkb2Vzbid0IHVuYmluZCBkb20gZXZlbnRzLCB0aGF0IGlzIHRoZSB1c2VyIG93biByZXNwb25zaWJpbGl0eVxuICAgICAqL1xuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmVsZW1lbnQgJiYgdG9nZ2xlQ3NzUHJvcHModGhpcywgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuaGFuZGxlcnMgPSB7fTtcbiAgICAgICAgdGhpcy5zZXNzaW9uID0ge307XG4gICAgICAgIHRoaXMuaW5wdXQuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xuICAgIH1cbn07XG5cbi8qKlxuICogYWRkL3JlbW92ZSB0aGUgY3NzIHByb3BlcnRpZXMgYXMgZGVmaW5lZCBpbiBtYW5hZ2VyLm9wdGlvbnMuY3NzUHJvcHNcbiAqIEBwYXJhbSB7TWFuYWdlcn0gbWFuYWdlclxuICogQHBhcmFtIHtCb29sZWFufSBhZGRcbiAqL1xuZnVuY3Rpb24gdG9nZ2xlQ3NzUHJvcHMobWFuYWdlciwgYWRkKSB7XG4gICAgdmFyIGVsZW1lbnQgPSBtYW5hZ2VyLmVsZW1lbnQ7XG4gICAgaWYgKCFlbGVtZW50LnN0eWxlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHByb3A7XG4gICAgZWFjaChtYW5hZ2VyLm9wdGlvbnMuY3NzUHJvcHMsIGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHByb3AgPSBwcmVmaXhlZChlbGVtZW50LnN0eWxlLCBuYW1lKTtcbiAgICAgICAgaWYgKGFkZCkge1xuICAgICAgICAgICAgbWFuYWdlci5vbGRDc3NQcm9wc1twcm9wXSA9IGVsZW1lbnQuc3R5bGVbcHJvcF07XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gdmFsdWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0eWxlW3Byb3BdID0gbWFuYWdlci5vbGRDc3NQcm9wc1twcm9wXSB8fCAnJztcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghYWRkKSB7XG4gICAgICAgIG1hbmFnZXIub2xkQ3NzUHJvcHMgPSB7fTtcbiAgICB9XG59XG5cbi8qKlxuICogdHJpZ2dlciBkb20gZXZlbnRcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFcbiAqL1xuZnVuY3Rpb24gdHJpZ2dlckRvbUV2ZW50KGV2ZW50LCBkYXRhKSB7XG4gICAgdmFyIGdlc3R1cmVFdmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGdlc3R1cmVFdmVudC5pbml0RXZlbnQoZXZlbnQsIHRydWUsIHRydWUpO1xuICAgIGdlc3R1cmVFdmVudC5nZXN0dXJlID0gZGF0YTtcbiAgICBkYXRhLnRhcmdldC5kaXNwYXRjaEV2ZW50KGdlc3R1cmVFdmVudCk7XG59XG5cbmFzc2lnbihIYW1tZXIsIHtcbiAgICBJTlBVVF9TVEFSVDogSU5QVVRfU1RBUlQsXG4gICAgSU5QVVRfTU9WRTogSU5QVVRfTU9WRSxcbiAgICBJTlBVVF9FTkQ6IElOUFVUX0VORCxcbiAgICBJTlBVVF9DQU5DRUw6IElOUFVUX0NBTkNFTCxcblxuICAgIFNUQVRFX1BPU1NJQkxFOiBTVEFURV9QT1NTSUJMRSxcbiAgICBTVEFURV9CRUdBTjogU1RBVEVfQkVHQU4sXG4gICAgU1RBVEVfQ0hBTkdFRDogU1RBVEVfQ0hBTkdFRCxcbiAgICBTVEFURV9FTkRFRDogU1RBVEVfRU5ERUQsXG4gICAgU1RBVEVfUkVDT0dOSVpFRDogU1RBVEVfUkVDT0dOSVpFRCxcbiAgICBTVEFURV9DQU5DRUxMRUQ6IFNUQVRFX0NBTkNFTExFRCxcbiAgICBTVEFURV9GQUlMRUQ6IFNUQVRFX0ZBSUxFRCxcblxuICAgIERJUkVDVElPTl9OT05FOiBESVJFQ1RJT05fTk9ORSxcbiAgICBESVJFQ1RJT05fTEVGVDogRElSRUNUSU9OX0xFRlQsXG4gICAgRElSRUNUSU9OX1JJR0hUOiBESVJFQ1RJT05fUklHSFQsXG4gICAgRElSRUNUSU9OX1VQOiBESVJFQ1RJT05fVVAsXG4gICAgRElSRUNUSU9OX0RPV046IERJUkVDVElPTl9ET1dOLFxuICAgIERJUkVDVElPTl9IT1JJWk9OVEFMOiBESVJFQ1RJT05fSE9SSVpPTlRBTCxcbiAgICBESVJFQ1RJT05fVkVSVElDQUw6IERJUkVDVElPTl9WRVJUSUNBTCxcbiAgICBESVJFQ1RJT05fQUxMOiBESVJFQ1RJT05fQUxMLFxuXG4gICAgTWFuYWdlcjogTWFuYWdlcixcbiAgICBJbnB1dDogSW5wdXQsXG4gICAgVG91Y2hBY3Rpb246IFRvdWNoQWN0aW9uLFxuXG4gICAgVG91Y2hJbnB1dDogVG91Y2hJbnB1dCxcbiAgICBNb3VzZUlucHV0OiBNb3VzZUlucHV0LFxuICAgIFBvaW50ZXJFdmVudElucHV0OiBQb2ludGVyRXZlbnRJbnB1dCxcbiAgICBUb3VjaE1vdXNlSW5wdXQ6IFRvdWNoTW91c2VJbnB1dCxcbiAgICBTaW5nbGVUb3VjaElucHV0OiBTaW5nbGVUb3VjaElucHV0LFxuXG4gICAgUmVjb2duaXplcjogUmVjb2duaXplcixcbiAgICBBdHRyUmVjb2duaXplcjogQXR0clJlY29nbml6ZXIsXG4gICAgVGFwOiBUYXBSZWNvZ25pemVyLFxuICAgIFBhbjogUGFuUmVjb2duaXplcixcbiAgICBTd2lwZTogU3dpcGVSZWNvZ25pemVyLFxuICAgIFBpbmNoOiBQaW5jaFJlY29nbml6ZXIsXG4gICAgUm90YXRlOiBSb3RhdGVSZWNvZ25pemVyLFxuICAgIFByZXNzOiBQcmVzc1JlY29nbml6ZXIsXG5cbiAgICBvbjogYWRkRXZlbnRMaXN0ZW5lcnMsXG4gICAgb2ZmOiByZW1vdmVFdmVudExpc3RlbmVycyxcbiAgICBlYWNoOiBlYWNoLFxuICAgIG1lcmdlOiBtZXJnZSxcbiAgICBleHRlbmQ6IGV4dGVuZCxcbiAgICBhc3NpZ246IGFzc2lnbixcbiAgICBpbmhlcml0OiBpbmhlcml0LFxuICAgIGJpbmRGbjogYmluZEZuLFxuICAgIHByZWZpeGVkOiBwcmVmaXhlZFxufSk7XG5cbi8vIHRoaXMgcHJldmVudHMgZXJyb3JzIHdoZW4gSGFtbWVyIGlzIGxvYWRlZCBpbiB0aGUgcHJlc2VuY2Ugb2YgYW4gQU1EXG4vLyAgc3R5bGUgbG9hZGVyIGJ1dCBieSBzY3JpcHQgdGFnLCBub3QgYnkgdGhlIGxvYWRlci5cbnZhciBmcmVlR2xvYmFsID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gd2luZG93IDogKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyA/IHNlbGYgOiB7fSkpOyAvLyBqc2hpbnQgaWdub3JlOmxpbmVcbmZyZWVHbG9iYWwuSGFtbWVyID0gSGFtbWVyO1xuXG5pZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG4gICAgZGVmaW5lKGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gSGFtbWVyO1xuICAgIH0pO1xufSBlbHNlIGlmICh0eXBlb2YgbW9kdWxlICE9ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBIYW1tZXI7XG59IGVsc2Uge1xuICAgIHdpbmRvd1tleHBvcnROYW1lXSA9IEhhbW1lcjtcbn1cblxufSkod2luZG93LCBkb2N1bWVudCwgJ0hhbW1lcicpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdmVuZG9ycyA9IFsnbXMnLCAnbW96JywgJ3dlYmtpdCcsICdvJ107XG5cbmZvcih2YXIgeCA9IDA7IHggPCB2ZW5kb3JzLmxlbmd0aCAmJiAhd2luZG93LkF1ZGlvQ29udGV4dDsgKyt4KSB7XG4gIHdpbmRvdy5BdWRpb0NvbnRleHQgPSB3aW5kb3dbdmVuZG9yc1t4XSsnQXVkaW9Db250ZXh0J107XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2luZG93LkF1ZGlvQ29udGV4dDtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gcmVtb3ZlRXh0ZW5zaW9uKHBhdGgpe1xuICAvLyBvbmx5IHN0cmlwcyBvZmYgZXh0ZW5zaW9ucyB0aGF0IGhhdmUgbGVuZ3RoIG9mIDQgb3IgbGVzc1xuICAvLyByZWdleCBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTgxODMxMC9yZWd1bGFyLWV4cHJlc3Npb24tdG8tcmVtb3ZlLWEtZmlsZXMtZXh0ZW5zaW9uXG4gIHJldHVybiBwYXRoLnJlcGxhY2UoLyguKilcXC5bXi5dezEsNH0kLywgJycpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHJlbW92ZUV4dGVuc2lvbjtcbiIsImNvbnN0IGF2ZXJhZ2VQb2ludHMgPSByZXF1aXJlKCcuL3V0aWxzL2F2ZXJhZ2VQb2ludHMnKTtcbmNvbnN0IGRlZ3JlZXNUb1JhZGlhbnMgPSByZXF1aXJlKCcuL3V0aWxzL2RlZ3JlZXNUb1JhZGlhbnMnKTtcbmNvbnN0IHJhZGlhbnNUb0RlZ3JlZXMgPSByZXF1aXJlKCcuL3V0aWxzL3JhZGlhbnNUb0RlZ3JlZXMnKTtcbmNvbnN0IHBvaW50SW5Qb2x5Z29uID0gcmVxdWlyZSgnLi91dGlscy9wb2ludEluUG9seWdvbicpO1xuY29uc3QgZGlzdGFuY2UgPSByZXF1aXJlKCcuL3V0aWxzL2Rpc3RhbmNlJyk7XG5jb25zdCBkZWdyZWVzRnJvbUNlbnRlciA9IHJlcXVpcmUoJy4vdXRpbHMvZGVncmVlc0Zyb21DZW50ZXInKTtcbmNvbnN0IHJhZGlhbnNGcm9tQ2VudGVyID0gcmVxdWlyZSgnLi91dGlscy9yYWRpYW5zRnJvbUNlbnRlcicpO1xuY29uc3Qgc2NhbGVQb2ludHMgPSByZXF1aXJlKCcuL3V0aWxzL3NjYWxlUG9pbnRzJyk7XG5jb25zdCB0cmFuc2xhdGVQb2ludHMgPSByZXF1aXJlKCcuL3V0aWxzL3RyYW5zbGF0ZVBvaW50cycpO1xuY29uc3QgaW5zaWRlQ2FudmFzID0gcmVxdWlyZSgnLi91dGlscy9pbnNpZGVDYW52YXMnKTtcbmNvbnN0IHJvdGF0ZURlZ3JlZXNBcm91bmRDZW50ZXIgPSByZXF1aXJlKCcuL3V0aWxzL3JvdGF0ZURlZ3JlZXNBcm91bmRDZW50ZXInKTtcbmNvbnN0IHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIgPSByZXF1aXJlKCcuL3V0aWxzL3JvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXInKTtcblxuXG4vKipcbiAqIE1hdGggdXRpbGl0eSBsaWJyYXJpZXNcbiAqIEBleHBvcnRzIHV0aWxzXG4gKi9cbmNvbnN0IHV0aWxzID0ge1xuICAvKipcbiAgICogR2V0cyB0aGUgYXZlcmFnZSBwb2ludCB2YWx1ZSBpbiBhbiBhcnJheSBvZiBwb2ludHMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge0FycmF5fSBwb2ludHNcbiAgICogQHJldHVybiB7T2JqZWN0fSBBbiBvYmplY3Qgd2l0aCB4IGFuZCB5IHZhbHVlc1xuICAgKi9cbiAgYXZlcmFnZVBvaW50cyxcblxuICAvKipcbiAgICogQ29udmVydCBkZWdyZWVzIHRvIHJhaWRhbnNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBkZWdyZWVzXG4gICAqIEByZXR1cm4ge051bWJlcn0gQSB2YWx1ZSBpbiByYWRpYW5zXG4gICAqL1xuICBkZWdyZWVzVG9SYWRpYW5zLFxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IHJhZGlhbnMgdG8gZGVncmVlc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHJhZGlhbnNcbiAgICogQHJldHVybiB7TnVtYmVyfSBBIHZhbHVlIGluIGRlZ3JlZXNcbiAgICovXG4gIHJhZGlhbnNUb0RlZ3JlZXMsXG5cbiAgLyoqXG4gICAqIENoZWNrcyBpZiBhIHBvaW50IGlzIGluIGEgcG9seWdvblxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IE9iamVjdCB3aXRoIGFuIHggYW5kIHkgdmFsdWVcbiAgICogQHBhcmFtIHtBcnJheX0gcG9seWdvbiBBcnJheSBvZiBwb2ludHNcbiAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgcG9pbnQgaXMgaW5zaWRlIHRoZSBwb2x5Z29uXG4gICAqL1xuICBwb2ludEluUG9seWdvbixcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZGlzdGFuY2UgYmV0d2VlbiAyIHBvaW50c1xuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50MSBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludDIgT2JqZWN0IHdpdGggYW4geCBhbmQgeSB2YWx1ZVxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IFRoZSBkaXN0YW5jZVxuICAgKi9cbiAgZGlzdGFuY2UsXG5cbiAgLyoqXG4gICAqIERlZ3JlZXMgYSBwb2ludCBpcyBvZmZzZXQgZnJvbSBhIGNlbnRlciBwb2ludFxuICAgKiBAZnVuY3Rpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IGNlbnRlciBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEByZXR1cm4ge051bWJlcn0gQSB2YWx1ZSBpbiBkZWdyZWVzXG4gICAqL1xuICBkZWdyZWVzRnJvbUNlbnRlcixcblxuICAvKipcbiAgICogUmFkaWFucyBhIHBvaW50IGlzIG9mZnNldCBmcm9tIGEgY2VudGVyIHBvaW50XG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gY2VudGVyIE9iamVjdCB3aXRoIGFuIHggYW5kIHkgdmFsdWVcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IE9iamVjdCB3aXRoIGFuIHggYW5kIHkgdmFsdWVcbiAgICogQHJldHVybiB7TnVtYmVyfSBBIHZhbHVlIGluIHJhZGlhbnNcbiAgICovXG4gIHJhZGlhbnNGcm9tQ2VudGVyLFxuXG4gIC8qKlxuICAgKiBTY2FsZSBhIHBvaW50IG9yIGFycmF5IG9mIHBvaW50cy5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBwb2ludHMgQSBwb2ludCBvciBhcnJheSBvZiBwb2ludHNcbiAgICogQHBhcmFtIHtPYmplY3R9IHNjYWxlIE9iamVjdCB3aXRoIGFuIHggYW5kIHkgdmFsdWVcbiAgICogQHJldHVybiB7T2JqZWN0fEFycmF5fSBBIHNjYWxlZCBwb2ludCBvciBhcnJheSBvZiBwb2ludHNcbiAgICovXG4gIHNjYWxlUG9pbnRzLFxuXG4gIC8qKlxuICAgKiBUcmFuc2xhdGUgYSBwb2ludCBvciBhcnJheSBvZiBwb2ludHNcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBwb2ludHMgQSBwb2ludCBvciBhcnJheSBvZiBwb2ludHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9mZnNldCBPYmplY3Qgd2l0aCBhbiB4IGFuZCB5IHZhbHVlXG4gICAqIEByZXR1cm4ge09iamVjdHxBcnJheX0gQSB0cmFuc2xhdGVkIHBvaW50IG9yIGFycmF5IG9mIHBvaW50c1xuICAgKi9cbiAgdHJhbnNsYXRlUG9pbnRzLFxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGEgcG9pbnQgaXMgaW5zaWRlIGEgY2FudmFzXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gcG9pbnQgQSBwb2ludCB0byB0ZXN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBjYW52YXMgT2JqZWN0IHdpdGggaGVpZ2h0IGFuZCB3aWR0aCBwcm9wZXJ0aWVzXG4gICAqIEByZXR1cm4ge0Jvb2xlYW59IFRydWUgaWYgaW5zaWRlIGNhbnZhcyBlbHNlIGZhbHNlXG4gICAqL1xuICBpbnNpZGVDYW52YXMsXG5cbiAgLyoqXG4gICAqIEdldCBhIHBvaW50IGJhc2VkIGFyb3VuZCB0aGUgcm90YXRpb24gaW4gcmFkaWFucyBvZiBvbmUgcG9pbnQgYXJvdW5kIGEgY2VudGVyXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gY2VudGVyIE9iamVjdCB3aXRoIGFuIHggYW5kIHkgdmFsdWVcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IE9iamVjdCB3aXRoIGFuIHggYW5kIHkgdmFsdWVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlIGFuIGFuZ2xlIGluIHJhZGlhbnNcbiAgICogQHJldHVybiB7T2JqZWN0fSBBIG5ldyBwb2ludCB0aGF0IGhhcyBiZWVuIHJvdGF0ZWRcbiAgICovXG4gIHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIsXG5cbiAgLyoqXG4gICAqIEdldCBhIHBvaW50IGJhc2VkIGFyb3VuZCB0aGUgcm90YXRpb24gaW4gZGVncmVlcyBvZiBvbmUgcG9pbnQgYXJvdW5kIGEgY2VudGVyXG4gICAqIEBmdW5jdGlvblxuICAgKiBAcGFyYW0ge09iamVjdH0gY2VudGVyIE9iamVjdCB3aXRoIGFuIHggYW5kIHkgdmFsdWVcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IE9iamVjdCB3aXRoIGFuIHggYW5kIHkgdmFsdWVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGFuZ2xlIGFuIGFuZ2xlIGluIGRlZ3JlZXNcbiAgICogQHJldHVybiB7T2JqZWN0fSBBIG5ldyBwb2ludCB0aGF0IGhhcyBiZWVuIHJvdGF0ZWRcbiAgICovXG4gIHJvdGF0ZURlZ3JlZXNBcm91bmRDZW50ZXIsXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHV0aWxzO1xuIiwiXG5mdW5jdGlvbiBhdmVyYWdlUG9pbnRzKHBvaW50cyl7XG4gIHZhciByZXRWYWwgPSB7eDogMCwgeTogMH07XG4gIHBvaW50cy5mb3JFYWNoKHBvaW50cywgZnVuY3Rpb24ocG9pbnQpe1xuICAgIHJldFZhbC54Kz0gcG9pbnQueDtcbiAgICByZXRWYWwueSs9IHBvaW50Lnk7XG4gIH0pO1xuICByZXRWYWwueCA9IHJldFZhbC54IC8gcG9pbnRzLmxlbmd0aDtcbiAgcmV0VmFsLnkgPSByZXRWYWwueSAvIHBvaW50cy5sZW5ndGg7XG4gIHJldHVybiByZXRWYWw7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYXZlcmFnZVBvaW50cztcbiIsImNvbnN0IHJhZGlhbnNUb0RlZ3JlZXMgPSByZXF1aXJlKCcuL3JhZGlhbnNUb0RlZ3JlZXMnKTtcbmNvbnN0IHJhZGlhbnNGcm9tQ2VudGVyID0gcmVxdWlyZSgnLi9yYWRpYW5zRnJvbUNlbnRlcicpO1xuXG5mdW5jdGlvbiBkZWdyZWVzRnJvbUNlbnRlcihjZW50ZXIsIHB0KXtcbiAgcmV0dXJuIHJhZGlhbnNUb0RlZ3JlZXMocmFkaWFuc0Zyb21DZW50ZXIoY2VudGVyLCBwdCkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZ3JlZXNGcm9tQ2VudGVyO1xuIiwiY29uc3Qgcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlciA9IHJlcXVpcmUoJy4vcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcicpO1xuY29uc3QgZGVncmVlc1RvUmFkaWFucyA9IHJlcXVpcmUoJy4vZGVncmVlc1RvUmFkaWFucycpOyBcblxuZnVuY3Rpb24gcm90YXRlRGVncmVlc0Fyb3VuZENlbnRlcihjZW50ZXIsIHB0LCBhbmdsZSkge1xuICByZXR1cm4gcm90YXRlUmFkaWFuc0Fyb3VuZENlbnRlcihjZW50ZXIsIHB0LCBkZWdyZWVzVG9SYWRpYW5zKGFuZ2xlKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gcm90YXRlRGVncmVlc0Fyb3VuZENlbnRlcjsiLCIvKipcbiAqIFRoaXMgdHlwZSBvZiBzcHJpdGUgaXMgYmFzZWQgb2ZmIG9mIHRoZSBleGNlbGxlbnQgaW1hZ2VzIGZyb20gUmVpbmVyJ3MgdGlsZXNldHM6IGh0dHA6Ly93d3cucmVpbmVyc3RpbGVzZXRzLmRlL1xuICogPGJyPlxuICogY3JlYXR1cmVzIGhhdmUgd2Fsa2luZywgaWRsZSwgYW5kIGR5aW5nIGFuaW1hdGlvbnMgaW4gOCBpc29tZXRyaWMgZGlyZWN0aW9uc1xuICogVGhlIGFuaW1hdGlvbnMgZGlyZWN0aW9ucyBhcmUgaW4gRSxOLE5FLE5XLFMsU0UsU1csVyAoYWxwaGFiZXRpY2FsKSBvcmRlciBzaW1wbHkgYmVjYXVzZSB0aGF0J3NcbiAqIGhvdyB0aGV5IHdlcmUgc3RpdGNoZWQgdG9nZXRoZXIgdXNpbmcgSW1hZ2VNYWdpY2suXG4gKlxuICogQG5hbWUgQ3JlYXR1cmVcbiAqIEBjb25zdHJ1Y3RvciBDcmVhdHVyZVxuICogQGV4dGVuZHMgU3ByaXRlXG4gKi9cblxuY29uc3QgU3ByaXRlID0gcmVxdWlyZSgnLi4vU3ByaXRlJyk7XG5jb25zdCBBbmltYXRpb24gPSByZXF1aXJlKCcuLi9BbmltYXRpb24nKTtcblxuXG4vKipcbiogQSBtYXAgb2Ygc3RhdGljIGNvbnN0YW50cyBmb3IgaW50ZXJuYWwgdXNlXG4qIEB0eXBlIHtPYmplY3R9XG4qIEBtZW1iZXJPZiBDcmVhdHVyZSNcbiogQHByb3BlcnR5IHtOdW1iZXJ9IEVBU1QgYSBkaXJlY3Rpb24gdGhlIGNyZWF0dXJlIGNhbiBmYWNlXG4qIEBwcm9wZXJ0eSB7TnVtYmVyfSBOT1JUSCBhIGRpcmVjdGlvbiB0aGUgY3JlYXR1cmUgY2FuIGZhY2VcbiogQHByb3BlcnR5IHtOdW1iZXJ9IE5PUlRIRUFTVCBhIGRpcmVjdGlvbiB0aGUgY3JlYXR1cmUgY2FuIGZhY2VcbiogQHByb3BlcnR5IHtOdW1iZXJ9IE5PUlRIV0VTVCBhIGRpcmVjdGlvbiB0aGUgY3JlYXR1cmUgY2FuIGZhY2VcbiogQHByb3BlcnR5IHtOdW1iZXJ9IFNPVVRIIGEgZGlyZWN0aW9uIHRoZSBjcmVhdHVyZSBjYW4gZmFjZVxuKiBAcHJvcGVydHkge051bWJlcn0gU09VVEhFQVNUIGEgZGlyZWN0aW9uIHRoZSBjcmVhdHVyZSBjYW4gZmFjZVxuKiBAcHJvcGVydHkge051bWJlcn0gU09VVEhXRVNUIGEgZGlyZWN0aW9uIHRoZSBjcmVhdHVyZSBjYW4gZmFjZVxuKiBAcHJvcGVydHkge051bWJlcn0gV0VTVCBhIGRpcmVjdGlvbiB0aGUgY3JlYXR1cmUgY2FuIGZhY2VcbiogQHByb3BlcnR5IHtOdW1iZXJ9IFNUQVRFX1dBTEtJTkcgYSBzdGF0ZSB0aGUgY3JlYXR1cmUgY2FuIGJlIGluXG4qIEBwcm9wZXJ0eSB7TnVtYmVyfSBTVEFURV9EWUlORyBhIHN0YXRlIHRoZSBjcmVhdHVyZSBjYW4gYmUgaW5cbiogQHByb3BlcnR5IHtOdW1iZXJ9IFNUQVRFX0lETEUgYSBzdGF0ZSB0aGUgY3JlYXR1cmUgY2FuIGJlIGluXG4qL1xuY29uc3QgRUFTVCA9IDA7XG5jb25zdCBOT1JUSCA9IDE7XG5jb25zdCBOT1JUSEVBU1QgPSAyO1xuY29uc3QgTk9SVEhXRVNUID0gMztcbmNvbnN0IFNPVVRIID0gNDtcbmNvbnN0IFNPVVRIRUFTVCA9IDU7XG5jb25zdCBTT1VUSFdFU1QgPSA2O1xuY29uc3QgV0VTVCA9IDc7XG5jb25zdCBTVEFURV9XQUxLSU5HID0gMDtcbmNvbnN0IFNUQVRFX0RZSU5HID0gMTtcbmNvbnN0IFNUQVRFX0lETEUgPSAyO1xuXG5cbmNsYXNzIENyZWF0dXJlIGV4dGVuZHMgU3ByaXRlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICogVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIGNyZWF0dXJlLiBXaWxsIGJlIGEgdmFsdWUgZnJvbSB0aGUgc3RhdGljIGNvbnN0YW50cy5cbiAgICAqIEB0eXBlIHtOdW1iZXJ9XG4gICAgKiBAbWVtYmVyT2YgQ3JlYXR1cmUjXG4gICAgKiBAZGVmYXVsdFxuICAgICovXG4gICAgdGhpcy5zdGF0ZSA9IFNUQVRFX0lETEU7XG5cbiAgICAvKipcbiAgICAqIEFuIGFycmF5IG9mIEFuaW1hdGlvbiBvYmplY3RzIChvbmUgZm9yIGVhY2ggZGlyZWN0aW9uKSB0byBkaXNwbGF5IHRoZSBjcmVhdHVyZSBpbiBhIHdhbGtpbmcgc3RhdGVcbiAgICAqIEB0eXBlIHtBcnJheX1cbiAgICAqIEBtZW1iZXJPZiBDcmVhdHVyZSNcbiAgICAqIEBkZWZhdWx0XG4gICAgKi9cbiAgICB0aGlzLndhbGtpbmdBbmltcyA9IFtdO1xuXG4gICAgLyoqXG4gICAgKiBBbiBhcnJheSBvZiBBbmltYXRpb24gb2JqZWN0cyAob25lIGZvciBlYWNoIGRpcmVjdGlvbikgdG8gZGlzcGxheSB0aGUgY3JlYXR1cmUgaW4gYSBkeWluZyBzdGF0ZVxuICAgICogQHR5cGUge0FycmF5fVxuICAgICogQG1lbWJlck9mIENyZWF0dXJlI1xuICAgICogQGRlZmF1bHRcbiAgICAqL1xuICAgIHRoaXMuZHlpbmdBbmltcyA9IFtdO1xuXG4gICAgLyoqXG4gICAgKiBBbiBhcnJheSBvZiBBbmltYXRpb24gb2JqZWN0cyAob25lIGZvciBlYWNoIGRpcmVjdGlvbikgdG8gZGlzcGxheSB0aGUgY3JlYXR1cmUgaW4gYW4gaWRsZSBzdGF0ZVxuICAgICogQHR5cGUge0FycmF5fVxuICAgICogQG1lbWJlck9mIENyZWF0dXJlI1xuICAgICogQGRlZmF1bHRcbiAgICAqL1xuICAgIHRoaXMuaWRsZUFuaW1zID0gW107XG5cbiAgICAvKipcbiAgICAqIFRoZSBjdXJyZW50IGRpcmVjdGlvbiB0aGF0IHRoZSBjcmVhdHVyZSBpcyBwb2ludGVkLiBXaWxsIGJlIGEgdmFsdWUgZnJvbSB0aGUgc3RhdGljIGNvbnN0YW5zdHMuXG4gICAgKiBAdHlwZSB7TnVtYmVyfVxuICAgICogQG1lbWJlck9mIENyZWF0dXJlI1xuICAgICogQGRlZmF1bHRcbiAgICAqL1xuICAgIHRoaXMuZGlyZWN0aW9uID0gRUFTVDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGlzIGNyZWF0dXJlJ3MgY3VycmVudCBkaXJlY3Rpb24gKGZyYW1lKSwgYW5kIGNoYW5nZXMgd2hpY2ggYW5pbWF0aW9uIGl0IHNob3VsZCBiZSB1c2luZyBpZiBuZWNjZXNhcnkuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQ3JlYXR1cmUjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBlbGFwc2VkVGltZSBFbGFwc2VkIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gICAqL1xuICB1cGRhdGVEaXJlY3Rpb24oZWxhcHNlZFRpbWUpe1xuICAgIHRoaXMueCArPSB0aGlzLmR4ICogZWxhcHNlZFRpbWU7XG4gICAgdGhpcy55ICs9IHRoaXMuZHkgKiBlbGFwc2VkVGltZTtcblxuICAgIGlmKHRoaXMuc3RhdGUgIT09IHRoaXMuc3RhdGljcy5TVEFURV9EWUlORyl7XG4gICAgICBpZih0aGlzLmR4ID4gMCAmJiB0aGlzLmR5ID09PSAwKXtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0aGlzLnN0YXRpY3MuRUFTVDtcbiAgICAgIH0gZWxzZSBpZih0aGlzLmR4ID09PSAwICYmIHRoaXMuZHkgPCAwKXtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0aGlzLnN0YXRpY3MuTk9SVEg7XG4gICAgICB9IGVsc2UgaWYodGhpcy5keCA+IDAgJiYgdGhpcy5keSA8IDApe1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuc3RhdGljcy5OT1JUSEVBU1Q7XG4gICAgICB9IGVsc2UgaWYodGhpcy5keCA8IDAgJiYgdGhpcy5keSA8IDApe1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuc3RhdGljcy5OT1JUSFdFU1Q7XG4gICAgICB9IGVsc2UgaWYodGhpcy5keCA9PT0gMCAmJiB0aGlzLmR5ID4gMCl7XG4gICAgICAgIHRoaXMuZGlyZWN0aW9uID0gdGhpcy5zdGF0aWNzLlNPVVRIO1xuICAgICAgfSBlbHNlIGlmKHRoaXMuZHggPiAwICYmIHRoaXMuZHkgPiAwKXtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0aGlzLnN0YXRpY3MuU09VVEhFQVNUO1xuICAgICAgfSBlbHNlIGlmKHRoaXMuZHggPCAwICYmIHRoaXMuZHkgPiAwKXtcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0aGlzLnN0YXRpY3MuU09VVEhXRVNUO1xuICAgICAgfSBlbHNlIGlmKHRoaXMuZHggPCAwICYmIHRoaXMuZHkgPT09IDApe1xuICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IHRoaXMuc3RhdGljcy5XRVNUO1xuICAgICAgfVxuXG4gICAgICBpZih0aGlzLmR4ID09PSAwICYmIHRoaXMuZHkgPT09IDApe1xuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGF0aWNzLlNUQVRFX0lETEU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXRlID0gdGhpcy5zdGF0aWNzLlNUQVRFX1dBTEtJTkc7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhpcyBjcmVhdHVyZSdzIGN1cnJlbnQgYW5pbWF0aW9uLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIENyZWF0dXJlI1xuICAgKiBAcGFyYW0ge051bWJlcn0gZWxhcHNlZFRpbWUgRWxhcHNlZCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgKi9cbiAgdXBkYXRlQW5pbWF0aW9ucyhlbGFwc2VkVGltZSl7XG4gICAgaWYodGhpcy5zdGF0ZSA9PT0gdGhpcy5zdGF0aWNzLlNUQVRFX1dBTEtJTkcpe1xuICAgICAgdGhpcy5hbmltID0gdGhpcy53YWxraW5nQW5pbXNbdGhpcy5kaXJlY3Rpb25dO1xuICAgIH0gZWxzZSBpZih0aGlzLnN0YXRlID09PSB0aGlzLnN0YXRpY3MuU1RBVEVfRFlJTkcpe1xuICAgICAgdGhpcy5hbmltID0gdGhpcy5keWluZ0FuaW1zW3RoaXMuZGlyZWN0aW9uXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5hbmltID0gdGhpcy5pZGxlQW5pbXNbdGhpcy5kaXJlY3Rpb25dO1xuICAgIH1cbiAgICB0aGlzLmFuaW0udXBkYXRlKGVsYXBzZWRUaW1lKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGNyZWF0ZSBhbmltYXRpb25zIGZyb20gYSBzaGVldCBvZiB0aWxlc1xuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIENyZWF0dXJlI1xuICAgKiBAcGFyYW0gIHtOdW1iZXJ9IGZyYW1lQ291bnQgTnVtYmVyIG9mIGZyYW1lcyBpbiB0aGUgYW5pbWF0aW9uXG4gICAqIEBwYXJhbSAge051bWJlcnxBcnJheX0gZnJhbWVUaW1lcyBWYWx1ZSBvciBhcnJheSBvZiB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byBhbW91bnQgb2YgdGltZSBwZXIgZnJhbWVcbiAgICogQHBhcmFtICB7SW1hZ2V9IGltZyBJbWFnZSBzaGVldCB0byBjcmVhdGUgYW5pbWF0aW9uIGZyb21cbiAgICogQHBhcmFtICB7TnVtYmVyfSB3IFdpZHRoIG9mIGVhY2ggdGlsZSBpbiBwaXhlbHNcbiAgICogQHBhcmFtICB7TnVtYmVyfSBoIEhlaWdodCBvZiBlYWNoIHRpbGUgaW4gcGl4ZWxzXG4gICAqIEBwYXJhbSAge051bWJlcn0geVNsb3QgU2xvdCBvbiBZIGF4aXMgdG8gc3RhcnQgY3JlYXRpbmcgdGlsZXNcbiAgICogQHJldHVybiB7QXJyYXl9IEFycmF5IG9mIEFuaW1hdGlvbnMgZ2VuZXJhdGVkIHVzaW5nIHBhcmFtZXRlcnNcbiAgICovXG4gIGNyZWF0ZUFuaW1hdGlvbnMoZnJhbWVDb3VudCwgZnJhbWVUaW1lcywgaW1nLCBoLCB3LCB5U2xvdCl7XG4gICAgdmFyIGFuaW1zID0gW107XG4gICAgdmFyIGlzRlRBcnJheSA9IEFycmF5LmlzQXJyYXkoZnJhbWVUaW1lcyk7XG4gICAgdmFyIGN1cnJlbnRGcmFtZVRpbWUgPSAxO1xuICAgIGlmKCF5U2xvdCl7XG4gICAgICB5U2xvdCA9IDA7XG4gICAgfVxuICAgIGZvcih2YXIgaSA9IDA7IGkgPCA4OyBpKyspe1xuICAgICAgYW5pbXNbaV0gPSBuZXcgQW5pbWF0aW9uKHtcbiAgICAgICAgaGVpZ2h0OiBoLFxuICAgICAgICB3aWR0aDogdyxcbiAgICAgICAgaW1hZ2U6IGltZ1xuICAgICAgfSk7XG4gICAgICBmb3IodmFyIGogPSAwOyBqIDwgZnJhbWVDb3VudDsgaisrKXtcbiAgICAgICAgaWYoaXNGVEFycmF5KXtcbiAgICAgICAgICBjdXJyZW50RnJhbWVUaW1lID0gZnJhbWVUaW1lc1tqXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjdXJyZW50RnJhbWVUaW1lID0gZnJhbWVUaW1lcztcbiAgICAgICAgfVxuICAgICAgICBhbmltc1tpXS5hZGRGcmFtZShjdXJyZW50RnJhbWVUaW1lLCBqICsgZnJhbWVDb3VudCAqIGksIHlTbG90KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFuaW1zO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3JlYXR1cmU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IENpcmNsZSA9IHJlcXVpcmUoJy4vZW50aXRpZXMvQ2lyY2xlJyk7XG5jb25zdCBNdWx0aVBvbHlnb24gPSByZXF1aXJlKCcuL2VudGl0aWVzL011bHRpUG9seWdvbicpO1xuY29uc3QgUG9seWdvbiA9IHJlcXVpcmUoJy4vZW50aXRpZXMvUG9seWdvbicpO1xuY29uc3QgUmVjdGFuZ2xlID0gcmVxdWlyZSgnLi9lbnRpdGllcy9SZWN0YW5nbGUnKTtcblxudmFyIGVudGl0aWVzID0ge1xuICBDaXJjbGUsXG4gIE11bHRpUG9seWdvbixcbiAgUG9seWdvbixcbiAgUmVjdGFuZ2xlXG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGVudGl0aWVzO1xuIiwiLyoqXG4gKiBUaGlzIEVudGl0eSBpcyBmb3IgYnVpbGRpbmcgY29tcGxleCBhbmQgcG9zc2libHkgY29uY2F2ZSBzaGFwZXNcbiAqIEBuYW1lIE11bHRpUG9seWdvblxuICogQGNvbnN0cnVjdG9yIE11bHRpUG9seWdvblxuICogQGV4dGVuZHMgRW50aXR5XG4gKi9cblxuY29uc3QgRW50aXR5ID0gcmVxdWlyZSgnLi9FbnRpdHknKTtcbmNvbnN0IHNjYWxlUG9pbnRzID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvc2NhbGVQb2ludHMnKTtcbmNvbnN0IHBvaW50SW5Qb2x5Z29uID0gcmVxdWlyZSgnLi4vLi4vdXRpbHMvcG9pbnRJblBvbHlnb24nKTtcbmNvbnN0IHRyYW5zbGF0ZVBvaW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3RyYW5zbGF0ZVBvaW50cycpO1xuXG5jbGFzcyBNdWx0aVBvbHlnb24gZXh0ZW5kcyBFbnRpdHkge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogQW4gYXJyYXkgb2YgcG9seWdvbnNcbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQG1lbWJlck9mIE11bHRpUG9seWdvbiNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMucG9seXMgPSBbXTtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgZWFjaCBwb2x5Z29uIGluIHRoZSBlbnRpdHlcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBNdWx0aVBvbHlnb24jXG4gICAqIEBwYXJhbSB7Q29udGV4dH0gY3R4IHRoZSBIVE1MNSAyZCBkcmF3aW5nIGNvbnRleHRcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIHRoZSBzY2FsZSB0byBkcmF3IHRoZSBlbnRpdHkgYXRcbiAgICovXG4gIGRyYXcoY3R4LCBzY2FsZSl7XG4gICAgc2NhbGUgPSBzY2FsZSB8fCB0aGlzLnNjYWxlIHx8IDE7XG4gICAgdmFyIG9nTGluZVdpZHRoID0gY3R4LmxpbmVXaWR0aDtcbiAgICBjdHgubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGg7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNsYXRlKHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSk7XG4gICAgY3R4LnJvdGF0ZSh0aGlzLmFuZ2xlKTtcbiAgICBjdHgudHJhbnNsYXRlKC0odGhpcy54KSAqIHNjYWxlLCAtKHRoaXMueSkgKiBzY2FsZSk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuZmlsbFN0eWxlO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuc3Ryb2tlU3R5bGU7XG5cbiAgICBmb3IodmFyIGogPSAwOyBqIDwgdGhpcy5wb2x5cy5sZW5ndGg7IGorKyl7XG4gICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICBjdHgubW92ZVRvKCh0aGlzLnggKyB0aGlzLnBvbHlzW2pdWzBdLngpICogc2NhbGUsICh0aGlzLnkgKyB0aGlzLnBvbHlzW2pdWzBdLnkpICogc2NhbGUpO1xuICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCB0aGlzLnBvbHlzW2pdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICBjdHgubGluZVRvKCh0aGlzLnBvbHlzW2pdW2ldLnggKyB0aGlzLngpICogc2NhbGUsICh0aGlzLnBvbHlzW2pdW2ldLnkgKyB0aGlzLnkpICogc2NhbGUpO1xuICAgICAgfVxuICAgICAgY3R4LmxpbmVUbygodGhpcy54ICsgdGhpcy5wb2x5c1tqXVswXS54KSAqIHNjYWxlLCAodGhpcy55ICsgdGhpcy5wb2x5c1tqXVswXS55KSAqIHNjYWxlKTtcbiAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgIGN0eC5maWxsKCk7XG4gICAgICBjdHguc3Ryb2tlKCk7XG4gICAgfVxuXG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICBjdHgubGluZVdpZHRoID0gb2dMaW5lV2lkdGg7XG4gICAgc3VwZXIuZHJhdyhjdHgsIHNjYWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIHNoYXBlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgTXVsdGlQb2x5Z29uI1xuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIGFtb3VudCB0aGUgc2hhcGUgc2hvdWxkIHNjYWxlXG4gICAqL1xuICBzY2FsZVNoYXBlKHNjYWxlKXtcbiAgICB0aGlzLnBvbHlzID0gc2NhbGVQb2ludHModGhpcy5wb2x5cywgc2NhbGUpO1xuICAgIHN1cC5zY2FsZVNoYXBlKHNjYWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgYSBnaXZlbiBwb2ludCBpcyBjb250YWluZWQgd2l0aGluIHRoaXMgTXVsdGlQb2x5Z29uLlxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIE11bHRpUG9seWdvbiNcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IEFuIG9iamVjdCB3aXRoIHggYW5kIHkgdmFsdWVzLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHBvaW50IGlzIGluIHNoYXBlIGVsc2UgZmFsc2VcbiAgICovXG4gIHBvaW50SW5TaGFwZShwb2ludCl7XG4gICAgZm9yKHZhciBqID0gMDsgaiA8IHRoaXMucG9seXMubGVuZ3RoOyBqKyspe1xuICAgICAgaWYocG9pbnRJblBvbHlnb24ocG9pbnQsIHRyYW5zbGF0ZVBvaW50cyh0aGlzLnBvbHlzW2pdLCB0aGlzKSkpe1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBNdWx0aVBvbHlnb247XG4iLCIvKipcbiAqIFRoaXMgRW50aXR5IHJlcHJlc2VudHMgYSBwb2x5Z29uIHdoaWNoIGlzIGJ1aWxkIGZyb20gYW4gYXJyYXkgb2YgcG9pbnRzLlxuICogQG5hbWUgUG9seWdvblxuICogQGNvbnN0cnVjdG9yIFBvbHlnb25cbiAqIEBleHRlbmRzIEVudGl0eVxuICovXG5cbmNvbnN0IEVudGl0eSA9IHJlcXVpcmUoJy4vRW50aXR5Jyk7XG5jb25zdCBzY2FsZVBvaW50cyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3NjYWxlUG9pbnRzJyk7XG5jb25zdCBwb2ludEluUG9seWdvbiA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzL3BvaW50SW5Qb2x5Z29uJyk7XG5jb25zdCB0cmFuc2xhdGVQb2ludHMgPSByZXF1aXJlKCcuLi8uLi91dGlscy90cmFuc2xhdGVQb2ludHMnKTtcblxuY2xhc3MgUG9seWdvbiBleHRlbmRzIEVudGl0eSB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICAvKipcbiAgICAgKiBBbiBhcnJheSBvZiBvYmplY3RzIHRoYXQgaGF2ZSB4IGFuZCB5IHZhbHVlcy5cbiAgICAgKiBAdHlwZSB7QXJyYXl9XG4gICAgICogQG1lbWJlck9mIFBvbHlnb24jXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLnBvaW50cyA9IFtdO1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEcmF3cyB0aGUgUG9seWdvbiBhdCBhIGdpdmVuIHNjYWxlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUG9seWdvbiNcbiAgICogQHBhcmFtIHtDb250ZXh0fSBjdHggVGhlIGRyYXdpbmcgY29udGV4dFxuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIHNjYWxlIGF0IHdoaWNoIHRvIGRyYXdcbiAgICovXG4gIGRyYXcoY3R4LCBzY2FsZSl7XG4gICAgc2NhbGUgPSBzY2FsZSB8fCB0aGlzLnNjYWxlIHx8IDE7XG4gICAgdmFyIG9nTGluZVdpZHRoID0gY3R4LmxpbmVXaWR0aDtcbiAgICBjdHgubGluZVdpZHRoID0gdGhpcy5saW5lV2lkdGg7XG4gICAgY3R4LnNhdmUoKTtcbiAgICBjdHgudHJhbnNsYXRlKHRoaXMueCAqIHNjYWxlLCB0aGlzLnkgKiBzY2FsZSk7XG4gICAgY3R4LnJvdGF0ZSh0aGlzLmFuZ2xlKTtcbiAgICBjdHgudHJhbnNsYXRlKC0odGhpcy54KSAqIHNjYWxlLCAtKHRoaXMueSkgKiBzY2FsZSk7XG4gICAgY3R4LmZpbGxTdHlsZSA9IHRoaXMuZmlsbFN0eWxlO1xuICAgIGN0eC5zdHJva2VTdHlsZSA9IHRoaXMuc3Ryb2tlU3R5bGU7XG5cbiAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgY3R4Lm1vdmVUbygodGhpcy54ICsgdGhpcy5wb2ludHNbMF0ueCkgKiBzY2FsZSwgKHRoaXMueSArIHRoaXMucG9pbnRzWzBdLnkpICogc2NhbGUpO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgdGhpcy5wb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICBjdHgubGluZVRvKCh0aGlzLnBvaW50c1tpXS54ICsgdGhpcy54KSAqIHNjYWxlLCAodGhpcy5wb2ludHNbaV0ueSArIHRoaXMueSkgKiBzY2FsZSk7XG4gICAgfVxuICAgIGN0eC5saW5lVG8oKHRoaXMueCArIHRoaXMucG9pbnRzWzBdLngpICogc2NhbGUsICh0aGlzLnkgKyB0aGlzLnBvaW50c1swXS55KSAqIHNjYWxlKTtcbiAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgY3R4LmZpbGwoKTtcbiAgICBjdHguc3Ryb2tlKCk7XG5cbiAgICBjdHgucmVzdG9yZSgpO1xuICAgIGN0eC5saW5lV2lkdGggPSBvZ0xpbmVXaWR0aDtcbiAgICBzdXBlci5kcmF3KGN0eCwgc2NhbGUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNjYWxlIHRoaXMgc2hhcGVcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBQb2x5Z29uI1xuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIGFtb3VudCB0aGUgc2hhcGUgc2hvdWxkIHNjYWxlXG4gICAqL1xuICBzY2FsZVNoYXBlKHNjYWxlKXtcbiAgICB0aGlzLnBvaW50cyA9IHNjYWxlUG9pbnRzKHRoaXMucG9pbnRzLCBzY2FsZSk7XG4gICAgc3VwZXIuc2NhbGVTaGFwZShzY2FsZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gcG9pbnQgaXMgY29udGFpbmVkIHdpdGhpbiB0aGlzIFBvbHlnb24uXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUG9seWdvbiNcbiAgICogQHBhcmFtIHtPYmplY3R9IHBvaW50IEFuIG9iamVjdCB3aXRoIHggYW5kIHkgdmFsdWVzLlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSBUcnVlIGlmIHBvaW50IGlzIGluIHNoYXBlIGVsc2UgZmFsc2VcbiAgICovXG4gIHBvaW50SW5TaGFwZShwb2ludCl7XG4gICAgcmV0dXJuIHBvaW50SW5Qb2x5Z29uKHBvaW50LCB0cmFuc2xhdGVQb2ludHModGhpcy5wb2ludHMsIHRoaXMpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbHlnb247XG4iLCIvKipcbiAqIFRoaXMgRW50aXR5IHJlcHJlc2VudHMgYSBSZWN0YW5nbGVcbiAqIEBuYW1lIFJlY3RhbmdsZVxuICogQGNvbnN0cnVjdG9yIFJlY3RhbmdsZVxuICogQGV4dGVuZHMgRW50aXR5XG4gKi9cblxuY29uc3QgRW50aXR5ID0gcmVxdWlyZSgnLi9FbnRpdHknKTtcblxuY2xhc3MgUmVjdGFuZ2xlIGV4dGVuZHMgRW50aXR5IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIEhhbGYgb2YgdGhlIFJlY3RhbmdsZSdzIHRvdGFsIHdpZHRoXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgUmVjdGFuZ2xlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5oYWxmV2lkdGggPSAxO1xuICAgIC8qKlxuICAgICAqIEhhbGYgb2YgdGhlIFJlY3RhbmdsZSdzIHRvdGFsIHdpZHRoXG4gICAgICogQHR5cGUge051bWJlcn1cbiAgICAgKiBAbWVtYmVyT2YgUmVjdGFuZ2xlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5oYWxmSGVpZ2h0ID0gMTtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogRHJhd3MgdGhlIFJlY3RhbmdsZSBhdCBhIGdpdmVuIHNjYWxlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmVjdGFuZ2xlI1xuICAgKiBAcGFyYW0ge0NvbnRleHR9IGN0eCBUaGUgZHJhd2luZyBjb250ZXh0XG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSBUaGUgc2NhbGUgYXQgd2hpY2ggdG8gZHJhd1xuICAgKi9cbiAgZHJhdyhjdHgsIHNjYWxlKXtcbiAgICBzY2FsZSA9IHNjYWxlIHx8IHRoaXMuc2NhbGUgfHwgMTtcbiAgICB2YXIgb2dMaW5lV2lkdGggPSBjdHgubGluZVdpZHRoO1xuICAgIGN0eC5saW5lV2lkdGggPSB0aGlzLmxpbmVXaWR0aDtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC50cmFuc2xhdGUodGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlKTtcbiAgICBjdHgucm90YXRlKHRoaXMuYW5nbGUpO1xuICAgIGN0eC50cmFuc2xhdGUoLSh0aGlzLngpICogc2NhbGUsIC0odGhpcy55KSAqIHNjYWxlKTtcbiAgICBjdHguZmlsbFN0eWxlID0gdGhpcy5maWxsU3R5bGU7XG4gICAgY3R4LnN0cm9rZVN0eWxlID0gdGhpcy5zdHJva2VTdHlsZTtcbiAgICBjdHguZmlsbFJlY3QoXG4gICAgICAodGhpcy54LXRoaXMuaGFsZldpZHRoKSAqIHNjYWxlLFxuICAgICAgKHRoaXMueS10aGlzLmhhbGZIZWlnaHQpICogc2NhbGUsXG4gICAgICAodGhpcy5oYWxmV2lkdGgqMikgKiBzY2FsZSxcbiAgICAgICh0aGlzLmhhbGZIZWlnaHQqMikgKiBzY2FsZVxuICAgICk7XG4gICAgY3R4LnN0cm9rZVJlY3QoXG4gICAgICAodGhpcy54LXRoaXMuaGFsZldpZHRoKSAqIHNjYWxlLFxuICAgICAgKHRoaXMueS10aGlzLmhhbGZIZWlnaHQpICogc2NhbGUsXG4gICAgICAodGhpcy5oYWxmV2lkdGgqMikgKiBzY2FsZSxcbiAgICAgICh0aGlzLmhhbGZIZWlnaHQqMikgKiBzY2FsZVxuICAgICk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgICBjdHgubGluZVdpZHRoID0gb2dMaW5lV2lkdGg7XG4gICAgc3VwZXIuZHJhdyhjdHgsIHNjYWxlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTY2FsZSB0aGlzIHNoYXBlXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmVjdGFuZ2xlI1xuICAgKiBAcGFyYW0ge051bWJlcn0gc2NhbGUgVGhlIGFtb3VudCB0aGUgc2hhcGUgc2hvdWxkIHNjYWxlXG4gICAqL1xuICBzY2FsZVNoYXBlKHNjYWxlKXtcbiAgICB0aGlzLmhhbGZIZWlnaHQgPSB0aGlzLmhhbGZIZWlnaHQgKiBzY2FsZTtcbiAgICB0aGlzLmhhbGZXaWR0aCA9IHRoaXMuaGFsZldpZHRoICogc2NhbGU7XG4gICAgc3VwZXIuc2NhbGVTaGFwZShzY2FsZSk7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2tzIGlmIGEgZ2l2ZW4gcG9pbnQgaXMgY29udGFpbmVkIHdpdGhpbiB0aGlzIFJlY3RhbmdsZS5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBSZWN0YW5nbGUjXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBwb2ludCBBbiBvYmplY3Qgd2l0aCB4IGFuZCB5IHZhbHVlcy5cbiAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiBwb2ludCBpcyBpbiBzaGFwZSBlbHNlIGZhbHNlXG4gICAqL1xuICBwb2ludEluU2hhcGUocG9pbnQpe1xuICAgIHJldHVybiAoKHBvaW50LnggPj0gKHRoaXMueCAtIHRoaXMuaGFsZldpZHRoKSkgJiYgKHBvaW50LnggPD0gKHRoaXMueCArIHRoaXMuaGFsZldpZHRoKSkgJiYgKHBvaW50LnkgPj0gKHRoaXMueSAtIHRoaXMuaGFsZkhlaWdodCkpICYmIChwb2ludC55IDw9ICh0aGlzLnkgKyB0aGlzLmhhbGZIZWlnaHQpKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBSZWN0YW5nbGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IERpc3RhbmNlID0gcmVxdWlyZSgnLi9qb2ludHMvRGlzdGFuY2UnKTtcbmNvbnN0IFByaXNtYXRpYyA9IHJlcXVpcmUoJy4vam9pbnRzL1ByaXNtYXRpYycpO1xuY29uc3QgUmV2b2x1dGUgPSByZXF1aXJlKCcuL2pvaW50cy9SZXZvbHV0ZScpO1xuXG52YXIgam9pbnRzID0ge1xuICBEaXN0YW5jZSxcbiAgUHJpc21hdGljLFxuICBSZXZvbHV0ZVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBqb2ludHM7XG4iLCIvKipcbiAqIFRoaXMgcmVwcmVzZW50cyBhIGRpc3RhbmNlIGpvaW50IGJldHdlZW4gdHdvIGJvZGllcy5cbiAqIFRoaXMgdHlwZSBvZiBqb2ludCBmb3JjZXMgdHdvIGJvZGllcyB0byBrZWVwIGEgY29uc3RhbnQgZGlzdGFuY2UgZm9yIGVhY2ggb3RoZXIuXG4gKiBAbmFtZSBEaXN0YW5jZVxuICogQGNvbnN0cnVjdG9yIERpc3RhbmNlXG4gKiBAZXh0ZW5kcyBKb2ludFxuICovXG5cbmNvbnN0IEpvaW50ID0gcmVxdWlyZSgnLi9Kb2ludCcpO1xuXG5cbi8vIGJveDJkIGdsb2JhbHNcbmNvbnN0IEIyVmVjMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMjtcbmNvbnN0IEIyRGlzdGFuY2VKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMkRpc3RhbmNlSm9pbnREZWY7XG5cbmNsYXNzIERpc3RhbmNlIGV4dGVuZHMgSm9pbnQge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuICAgIHN1cGVyKG9wdGlvbnMpO1xuXG4gICAgLyoqXG4gICAgICogQSBwb2ludCBvbiB0aGUgc2Vjb25kIGVudGl0eSB3aGVyZSB0aGUgam9pbnQgd2lsbCBiZSBhdHRhY2hlZC4gSWYgbm8gcG9pbnQgaXMgc3BlY2lmaWVkLCB0aGUgc2Vjb25kIGJvZHkgd2lsbCBiZSBhdHRhY2hlZCBhdCBpdHMgY2VudGVyIHBvaW50LlxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIERpc3RhbmNlI1xuICAgICAqIEBkZWZhdWx0XG4gICAgICovXG4gICAgdGhpcy5ib2R5UG9pbnQyID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogU2NhbGVzIHRoZSBwb3NpdGlvbnMgYm9kaWVzIHRoYXQgdGhlIGpvaW50IGFyZSBjb25uZWN0ZWQgYXQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgRGlzdGFuY2UjXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSB0aGUgc2NhbGUgdG8gbXVsdGlwbHkgdGhlIGRpbWVudGlvbnMgYnlcbiAgICovXG4gIHNjYWxlSm9pbnRMb2NhdGlvbihzY2FsZSl7XG4gICAgaWYoc2NhbGUgJiYgdGhpcy5ib2R5UG9pbnQyKXtcbiAgICAgIHRoaXMuYm9keVBvaW50Mi54ID0gdGhpcy5ib2R5UG9pbnQyLnggKiBzY2FsZTtcbiAgICAgIHRoaXMuYm9keVBvaW50Mi55ID0gdGhpcy5ib2R5UG9pbnQyLnkgKiBzY2FsZTtcbiAgICAgIHRoaXMuYWxyZWFkeVNjYWxlZCA9IHRydWU7XG4gICAgfVxuICAgIHN1cGVyLnNjYWxlSm9pbnRMb2NhdGlvbihzY2FsZSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgYWRkcyB0aGlzIGpvaW50IGluIHRoZSBCb3gyZCB3b3JsZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBEaXN0YW5jZSNcbiAgICogQHBhcmFtIHtCb3h9IHRoZSBib3ggaW4gd2hpY2ggdG8gY3JlYXRlIHRoZSBqb2ludC5cbiAgICogQHJldHVybiB7YjJKb2ludH0gSm9pbnQgY3JlYXRlZCBieSBib3gyZFxuICAgKi9cbiAgY3JlYXRlQjJKb2ludChib3gpe1xuICAgIGlmKGJveCAmJiBib3guYm9kaWVzTWFwICYmIGJveC5iMldvcmxkICYmIGJveC5qb2ludHNNYXAgJiYgIWJveC5qb2ludHNNYXBbdGhpcy5pZF0pe1xuICAgICAgY29uc3QgYm9keTEgPSBib3guYm9kaWVzTWFwW3RoaXMuYm9keUlkMV07XG4gICAgICBjb25zdCBib2R5MiA9IGJveC5ib2RpZXNNYXBbdGhpcy5ib2R5SWQyXTtcbiAgICAgIGlmKGJvZHkxICYmIGJvZHkyKXtcbiAgICAgICAgbGV0IHZlYzEsIHZlYzI7XG4gICAgICAgIGlmKHRoaXMuYm9keVBvaW50MSl7XG4gICAgICAgICAgdmVjMSA9IG5ldyBCMlZlYzIodGhpcy5ib2R5UG9pbnQxLngsIHRoaXMuYm9keVBvaW50MS55KTtcbiAgICAgICAgfVxuICAgICAgICBpZih0aGlzLmJvZHlQb2ludDIpe1xuICAgICAgICAgIHZlYzIgPSBuZXcgQjJWZWMyKHRoaXMuYm9keVBvaW50Mi54LCB0aGlzLmJvZHlQb2ludDIueSk7XG4gICAgICAgIH1cbiAgICAgICAgdmVjMSA9IHZlYzEgfHwgYm9keTEuR2V0V29ybGRDZW50ZXIoKTtcbiAgICAgICAgdmVjMiA9IHZlYzIgfHwgYm9keTIuR2V0V29ybGRDZW50ZXIoKTtcbiAgICAgICAgY29uc3Qgam9pbnQgPSBuZXcgQjJEaXN0YW5jZUpvaW50RGVmKCk7XG4gICAgICAgIGpvaW50LkluaXRpYWxpemUoYm9keTEsIGJvZHkyLCB2ZWMxLCB2ZWMyKTtcblxuICAgICAgICBpZiAodGhpcy5qb2ludEF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGpvaW50LCB0aGlzLmpvaW50QXR0cmlidXRlcyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJveC5iMldvcmxkLkNyZWF0ZUpvaW50KGpvaW50KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBEaXN0YW5jZTtcbiIsIi8qKlxuICogVGhpcyByZXByZXNlbnRzIGEgcHJpc21hdGljIGpvaW50IGJldHdlZW4gdHdvIGJvZGllcy5cbiAqIFRoaXMgdHlwZSBvZiBqb2ludCBmb3JjZXMgYSBib2R5IHRvIGtlZXAgaXRzIGFuZ2xlIHJvdGF0aW9uIGNvbnNpdGVudCB3aXRoIGFub3RoZXIgYm9keVxuICogQG5hbWUgUHJpc21hdGljXG4gKiBAY29uc3RydWN0b3IgUHJpc21hdGljXG4gKiBAZXh0ZW5kcyBKb2ludFxuICovXG5cbmNvbnN0IEpvaW50ID0gcmVxdWlyZSgnLi9Kb2ludCcpO1xuXG4vLyBib3gyZCBnbG9iYWxzXG5jb25zdCBCMlZlYzIgPSBCb3gyRC5Db21tb24uTWF0aC5iMlZlYzI7XG5jb25zdCBCMlByaXNtYXRpY0pvaW50RGVmID0gQm94MkQuRHluYW1pY3MuSm9pbnRzLmIyUHJpc21hdGljSm9pbnREZWY7XG5cbmNsYXNzIFByaXNtYXRpYyBleHRlbmRzIEpvaW50IHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcbiAgICBzdXBlcihvcHRpb25zKTtcblxuICAgIC8qKlxuICAgICAqIEFuIG9iamVjdCB3aXRoIHggYW5kIHkgbnVtZXJpYyBjb21wb25lbnRzIHJlcHJlc2VudGluZyB0aGUgbGluZSBpbiB3aGljaCB0aGUgZW50aXRpZXMgY2FuIG1vdmUgcmVsYXRpdmUgdG8gZWFjaCBvdGhlclxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIFByaXNtYXRpYyNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYXhpc1NjYWxlID0gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhbmQgYWRkcyB0aGlzIGpvaW50IGluIHRoZSBCb3gyZCB3b3JsZC5cbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBQcmlzbWF0aWMjXG4gICAqIEBwYXJhbSB7Qm94fSB0aGUgYm94IGluIHdoaWNoIHRvIGNyZWF0ZSB0aGUgam9pbnQuXG4gICAqIEByZXR1cm4ge2IySm9pbnR9IEpvaW50IGNyZWF0ZWQgYnkgYm94MmRcbiAgICovXG4gIGNyZWF0ZUIySm9pbnQoYm94KXtcbiAgICBpZihib3ggJiYgYm94LmJvZGllc01hcCAmJiBib3guYjJXb3JsZCAmJiBib3guam9pbnRzTWFwICYmICFib3guam9pbnRzTWFwW3RoaXMuaWRdKXtcbiAgICAgIGNvbnN0IGJvZHkxID0gYm94LmJvZGllc01hcFt0aGlzLmJvZHlJZDFdO1xuICAgICAgY29uc3QgYm9keTIgPSBib3guYm9kaWVzTWFwW3RoaXMuYm9keUlkMl07XG4gICAgICBpZihib2R5MSAmJiBib2R5Mil7XG4gICAgICAgIGxldCB2ZWMxO1xuICAgICAgICBpZih0aGlzLmJvZHlQb2ludDEpe1xuICAgICAgICAgIHZlYzEgPSBuZXcgQjJWZWMyKHRoaXMuYm9keVBvaW50MS54LCB0aGlzLmJvZHlQb2ludDEueSk7XG4gICAgICAgIH1cbiAgICAgICAgdmVjMSA9IHZlYzEgfHwgYm9keTEuR2V0V29ybGRDZW50ZXIoKTtcbiAgICAgICAgdmFyIGpvaW50ID0gbmV3IEIyUHJpc21hdGljSm9pbnREZWYoKTtcbiAgICAgICAgdmFyIGF4aXM7XG4gICAgICAgIGlmKHRoaXMuYXhpc1NjYWxlKXtcbiAgICAgICAgICBheGlzID0gbmV3IEIyVmVjMih0aGlzLmF4aXNTY2FsZS54LCB0aGlzLmF4aXNTY2FsZS55KTtcbiAgICAgICAgfWVsc2V7XG4gICAgICAgICAgYXhpcyA9IG5ldyBCMlZlYzIoMSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgam9pbnQuSW5pdGlhbGl6ZShib2R5MSwgYm9keTIsIHZlYzEsIGF4aXMpO1xuXG4gICAgICAgIGlmICh0aGlzLmpvaW50QXR0cmlidXRlcykge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oam9pbnQsIHRoaXMuam9pbnRBdHRyaWJ1dGVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYm94LmIyV29ybGQuQ3JlYXRlSm9pbnQoam9pbnQpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFByaXNtYXRpYztcbiIsIi8qKlxuICogVGhpcyByZXByZXNlbnRzIGEgcmV2b2x1dGUgam9pbnQgYmV0d2VlbiB0d28gYm9kaWVzLlxuICogVGhpcyBhbGxvdyBmb3Igcm90YXRpb24gb2Ygb25lIGJvZHkgYXJvdW5kIGEgcG9pbnQgb2YgYW5vdGhlci5cbiAqIEBuYW1lIFJldm9sdXRlXG4gKiBAY29uc3RydWN0b3IgUmV2b2x1dGVcbiAqIEBleHRlbmRzIEpvaW50XG4gKi9cblxuY29uc3QgSm9pbnQgPSByZXF1aXJlKCcuL0pvaW50Jyk7XG5cbi8vIGJveDJkIGdsb2JhbHNcbmNvbnN0IEIyVmVjMiA9IEJveDJELkNvbW1vbi5NYXRoLmIyVmVjMjtcbmNvbnN0IEIyUmV2b2x1dGVKb2ludERlZiA9IEJveDJELkR5bmFtaWNzLkpvaW50cy5iMlJldm9sdXRlSm9pbnREZWY7XG5cblxuY2xhc3MgUmV2b2x1dGUgZXh0ZW5kcyBKb2ludCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSl7XG4gICAgc3VwZXIob3B0aW9ucyk7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW5kIGFkZHMgdGhpcyBqb2ludCBpbiB0aGUgQm94MmQgd29ybGQuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgUmV2b2x1dGUjXG4gICAqIEBwYXJhbSB7Qm94fSB0aGUgYm94IGluIHdoaWNoIHRvIGNyZWF0ZSB0aGUgam9pbnQuXG4gICAqIEByZXR1cm4ge2IySm9pbnR9IEpvaW50IGNyZWF0ZWQgYnkgYm94MmRcbiAgICovXG4gIGNyZWF0ZUIySm9pbnQoYm94KXtcbiAgICBpZihib3ggJiYgYm94LmJvZGllc01hcCAmJiBib3guYjJXb3JsZCAmJiBib3guam9pbnRzTWFwICYmICFib3guam9pbnRzTWFwW3RoaXMuaWRdKXtcbiAgICAgICAgdmFyIGJvZHkxID0gYm94LmJvZGllc01hcFt0aGlzLmJvZHlJZDFdO1xuICAgICAgICB2YXIgYm9keTIgPSBib3guYm9kaWVzTWFwW3RoaXMuYm9keUlkMl07XG4gICAgICAgIGlmKGJvZHkxICYmIGJvZHkyKXtcbiAgICAgICAgICB2YXIgdmVjMTtcbiAgICAgICAgICBpZih0aGlzLmJvZHlQb2ludDEpe1xuICAgICAgICAgICAgdmVjMSA9IG5ldyBCMlZlYzIodGhpcy5ib2R5UG9pbnQxLngsIHRoaXMuYm9keVBvaW50MS55KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdmVjMSA9IHZlYzEgfHwgYm9keTEuR2V0V29ybGRDZW50ZXIoKTtcbiAgICAgICAgICB2YXIgam9pbnQgPSBuZXcgQjJSZXZvbHV0ZUpvaW50RGVmKCk7XG4gICAgICAgICAgdmFyIGF4aXM7XG4gICAgICAgICAgam9pbnQuSW5pdGlhbGl6ZShib2R5MSwgYm9keTIsIHZlYzEsIGF4aXMpO1xuXG4gICAgICAgICAgaWYgKHRoaXMuam9pbnRBdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGpvaW50LCB0aGlzLmpvaW50QXR0cmlidXRlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBib3guYjJXb3JsZC5DcmVhdGVKb2ludChqb2ludCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmV2b2x1dGU7XG4iLCIvKipcbiAqIFRoaXMgY29udGFjdCBsaXN0ZW5lciBmb3IgdGhlIEJveDJkIHdvcmxkIGFzc2lnbnMgY29sbGlzaW9uIG9iamVjdHMgdG8gZW50aXRpZXMgd2hlbiB0aGV5IGNvbGxpZGUuXG4gKiBAbmFtZSBDb250YWN0XG4gKiBAY29uc3RydWN0b3IgQ29udGFjdFxuICovXG5cbmNsYXNzIENvbnRhY3Qge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zID0ge30pe1xuXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblxuICAgIHRoaXMuY29sbGlzaW9ucyA9IHRoaXMuY29sbGlzaW9ucyB8fCB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldHMgdGhlIHN0YXRlIG9mIHRoZSBjb250YWN0IGxpc3RlbmVyIHBlciBpdGVyYXRpb24gb2YgdGhlIGJveCB3b3JsZCBjYWxjdWxhdGlvbnMuXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQ29udGFjdCNcbiAgICovXG4gIHJlc2V0KCl7XG4gICAgdGhpcy5jb2xsaXNpb25zID0ge307XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYSBib3gyZCBjb2xsaXNvbiBiZWdpbnNcbiAgICogQGZ1bmN0aW9uIGJlZ2luQ29udGFjdFxuICAgKiBAbWVtYmVyT2YgQ29udGFjdCNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkQSBJZCBvZiBib2R5IEFcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkQiBJZCBvZiBib2R5IEJcbiAgICogQHBhcmFtIHtiMkNvbnRhY250fSBjb250YWN0IFRoZSBib3gyZCBjb250YWN0IG9iamVjdC5cbiAgICovXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGEgYm94MmQgY29sbGlzb24gZW5kc1xuICAgKiBAZnVuY3Rpb24gZW5kQ29udGFjdFxuICAgKiBAbWVtYmVyT2YgQ29udGFjdCNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkQSBJZCBvZiBib2R5IEFcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkQiBJZCBvZiBib2R5IEJcbiAgICogQHBhcmFtIHtiMkNvbnRhY3R9IGNvbnRhY3QgVGhlIGJveDJkIGNvbnRhY3Qgb2JqZWN0LlxuICAqL1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgYmVmb3JlIGEgYm94MmQgY29sbGlzb24gaXMgcmVzb2x2ZWRcbiAgICogQGZ1bmN0aW9uIHByZVNvbHZlXG4gICAqIEBtZW1iZXJPZiBDb250YWN0I1xuICAgKiBAcGFyYW0ge1N0cmluZ30gaWRBIElkIG9mIGJvZHkgQVxuICAgKiBAcGFyYW0ge1N0cmluZ30gaWRCIElkIG9mIGJvZHkgQlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2xkTWFuaWZvbGQgT2xkIG1hbmlmb2xkIG9iamVjdCBwYXNzZWQgaW50byBwcmVTb2x2ZSBsaXN0ZW5lclxuICAgKiBAcGFyYW0ge2IyQ29udGFjdH0gY29udGFjdCBUaGUgYm94MmQgY29udGFjdCBvYmplY3QuXG4gICovXG5cbiAgLyoqXG4gICAqIENhbGxlZCBhZnRlciBhIGJveDJkIGNvbGxpc29uIGlzIHJlc29sdmVkXG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQ29udGFjdCNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkQSBJZCBvZiBib2R5IEFcbiAgICogQHBhcmFtIHtTdHJpbmd9IGlkQiBJZCBvZiBib2R5IEJcbiAgICogQHBhcmFtIHtPYmplY3R9IGltcHVsc2UgSW1wdWxzZSBvYmplY3QgcGFzc2VkIGludG8gcG9zdFNvbHZlIGxpc3RlbmVyXG4gICAqIEBwYXJhbSB7YjJDb250YWN0fSBjb250YWN0IFRoZSBib3gyZCBjb250YWN0IG9iamVjdC5cbiAgKi9cbiAgcG9zdFNvbHZlKGlkQSwgaWRCLCBpbXB1bHNlLCBjb250YWN0KXtcbiAgICB0aGlzLmNvbGxpc2lvbnNbaWRBXSA9IHRoaXMuY29sbGlzaW9uc1tpZEFdIHx8IFtdO1xuICAgIHRoaXMuY29sbGlzaW9uc1tpZEFdLnB1c2goe2lkOiBpZEIsIGltcHVsc2U6IGltcHVsc2Uubm9ybWFsSW1wdWxzZXNbMF19KTtcbiAgICB0aGlzLmNvbGxpc2lvbnNbaWRCXSA9IHRoaXMuY29sbGlzaW9uc1tpZEJdIHx8IFtdO1xuICAgIHRoaXMuY29sbGlzaW9uc1tpZEJdLnB1c2goe2lkOiBpZEEsIGltcHVsc2U6IGltcHVsc2Uubm9ybWFsSW1wdWxzZXNbMF19KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IENvbnRhY3Q7XG4iLCIvKipcbiAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSBvYmplY3QgdGhhdCBhbGxvd3MgZm9yIHF1aWNrbHkgY3JlYXRpbmcgYSBib3gyZCBiYXNlZCBnYW1lLlxuICogQG5hbWUgQm94R2FtZVxuICogQGNvbnN0cnVjdG9yIEJveEdhbWVcbiAqIEBleHRlbmRzIEdhbWVDb3JlXG4gKi9cblxuY29uc3QgR2FtZUNvcmUgPSByZXF1aXJlKCcuLi9HYW1lQ29yZScpO1xuY29uc3QgQm94ID0gcmVxdWlyZSgnLi9Cb3gnKTtcblxuY2xhc3MgQm94R2FtZSBleHRlbmRzIEdhbWVDb3JlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KXtcbiAgICBzdXBlcihvcHRpb25zKTtcbiAgICBjb25zb2xlLmxvZygnYm94Z2FtZSBvcHRpb25zJywgb3B0aW9ucyk7XG4gICAgLyoqXG4gICAgICogVGhlIGluc3RhbmNlIG9mIEJveCB1c2VkIGZvciB0aGlzIGdhbWUuXG4gICAgICogQHR5cGUge0JveH1cbiAgICAgKiBAbWVtYmVyT2YgQm94R2FtZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYm94ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIGJveCBzaG91bGQgcGVyZm9ybSBjYWxjdWxhdGlvbnMgZHVyaW5nIGl0cyB1cGRhdGUgY3ljbGVcbiAgICAgKiBAdHlwZSB7Qm9vbGVhbn1cbiAgICAgKiBAbWVtYmVyT2YgQm94R2FtZSNcbiAgICAgKiBAZGVmYXVsdFxuICAgICAqL1xuICAgIHRoaXMuYm94VXBkYXRpbmcgPSB0cnVlO1xuXG4gICAgLyoqXG4gICAgICogQSBtYXAgb2YgRW50aXR5IG9iamVjdHMgdGhhdCBhcmUgYWRkZWQgdG8gdGhlIEJveFxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmVudGl0aWVzID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIEEgbWFwIG9mIEpvaW50IG9iamVjdHMgdGhhdCBhcmUgYWRkZWQgdG8gdGhlIEJveFxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAgICogQGRlZmF1bHRcbiAgICAgKi9cbiAgICB0aGlzLmpvaW50cyA9IG51bGw7XG5cbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXG4gICAgaWYoIXRoaXMuYm94KXtcbiAgICAgIHRoaXMuYm94ID0gbmV3IEJveChvcHRpb25zLmJveE9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmKCF0aGlzLmVudGl0aWVzKXtcbiAgICAgIHRoaXMuZW50aXRpZXMgPSB7fTtcbiAgICB9XG5cbiAgICBpZighdGhpcy5qb2ludHMpe1xuICAgICAgdGhpcy5qb2ludHMgPSB7fTtcbiAgICB9XG5cbiAgfVxuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBhbGwgcGh5c2ljcyBjYWxjdWxhdGlvbnMgaW4gdGhlIEJveFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAqIEBwYXJhbSAge051bWJlcn0gbWlsbGlzIFRoZSBtaWxsaXNlY29uZHMgdGhhdCBoYXZlIHBhc3NlZCBzaW5jZSBsYXN0IGl0ZXJhdGlvbiBvZiBnYW1lTG9vcFxuICAgKi9cbiAgdXBkYXRlQm94KG1pbGxpcyl7XG4gICAgaWYodGhpcy5ib3hVcGRhdGluZyl7XG4gICAgICB0aGlzLmJveC51cGRhdGUobWlsbGlzKTtcbiAgICAgIHRoaXMuYm94LnVwZGF0ZUV4dGVybmFsU3RhdGUodGhpcy5lbnRpdGllcyk7XG4gICAgfVxuICB9XG5cblxuICAvKipcbiAgICogQWRkcyBhbiBFbnRpdHkgb2JqZWN0IHRvIGVudGl0aWVzIGFuZCBib3hcbiAgICogQGZ1bmN0aW9uXG4gICAqIEBtZW1iZXJPZiBCb3hHYW1lI1xuICAgKiBAcGFyYW0ge0VudGl0eX0gZW50aXR5IEVudGl0eSB0byBhZGRcbiAgICovXG4gIGFkZEJvZHkoZW50aXR5KXtcbiAgICB0aGlzLmVudGl0aWVzW2VudGl0eS5pZF0gPSBlbnRpdHk7XG4gICAgdGhpcy5ib3guYWRkQm9keShlbnRpdHkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBzZXJpZXMgb2YgRW50aXR5IG9iamVjdHMgdG8gZW50aXRpZXMgYW5kIGJveFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAqIEBwYXJhbSB7QXJyYXl8RW50aXR5fSBlbnRpdGllcyBDYW4gdGFrZSBhbiBhcnJheSBvZiBFbnRpdHkgb2JqZWN0cyBvciBhbnkgbnVtYmVyIG9mIEVudGl0eSBvYmplY3RzXG4gICAqL1xuICBhZGRCb2RpZXMoZW50aXRpZXMpe1xuICAgIGlmKCFBcnJheS5pc0FycmF5KGVudGl0aWVzKSkge1xuICAgICAgZW50aXRpZXMgPSBbZW50aXRpZXNdO1xuICAgIH1cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgZW50aXRpZXMuZm9yRWFjaCgoZW50aXR5KSA9PiB7XG4gICAgICB0aGlzLmFkZEJvZHkoZW50aXR5KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGFuIEVudGl0eSBvYmplY3QgZnJvbSBlbnRpdGllcyBhbmQgYm94XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94R2FtZSNcbiAgICogQHBhcmFtICB7RW50aXR5fSBlbnRpdHkgRW50aXR5IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlQm9keShlbnRpdHkpe1xuICAgIHRoaXMuYm94LnJlbW92ZUJvZHkoZW50aXR5LmlkKTtcbiAgICBkZWxldGUgdGhpcy5lbnRpdGllc1tlbnRpdHkuaWRdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZXMgYSBzZXJpZXMgb2YgRW50aXR5IG9iamVjdHMgZnJvbSBlbnRpdGllcyBhbmQgYm94XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94R2FtZSNcbiAgICogQHBhcmFtIHtBcnJheXxFbnRpdHl9IGVudGl0aWVzIENhbiB0YWtlIGFuIGFycmF5IG9mIEVudGl0eSBvYmplY3RzIG9yIGFueSBudW1iZXIgb2YgRW50aXR5IG9iamVjdHNcbiAgICovXG4gIHJlbW92ZUJvZGllcyhlbnRpdGllcyl7XG4gICAgaWYoIUFycmF5LmlzQXJyYXkoZW50aXRpZXMpKSB7XG4gICAgICBlbnRpdGllcyA9IFtlbnRpdGllc107XG4gICAgfVxuICAgIGVudGl0aWVzLmZvckVhY2goKGVudGl0eSkgPT4ge1xuICAgICAgdGhpcy5yZW1vdmVCb2R5KGVudGl0eSk7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBhIEpvaW50IHRvIGpvaW50cyBhbmQgYm94XG4gICAqIEBmdW5jdGlvblxuICAgKiBAbWVtYmVyT2YgQm94R2FtZSNcbiAgICogQHBhcmFtIHtKb2ludH0gam9pbnQgSm9pbnQgdG8gYWRkXG4gICAqL1xuICBhZGRKb2ludChqb2ludCl7XG4gICAgdGhpcy5qb2ludHNbam9pbnQuaWRdID0gam9pbnQ7XG4gICAgdGhpcy5ib3guYWRkSm9pbnQoam9pbnQpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBzZXJpZXMgb2YgSm9pbnQgb2JqZWN0cyB0byBqb2ludHMgYW5kIGJveFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAqIEBwYXJhbSB7QXJyYXl8Sm9pbnR9IGpvaW50cyBDYW4gdGFrZSBhbiBhcnJheSBvZiBKb2ludCBvYmplY3RzIG9yIGFueSBudW1iZXIgb2YgSm9pbnQgb2JqZWN0c1xuICAgKi9cbiAgYWRkSm9pbnRzKGpvaW50cyl7XG4gICAgaWYoIUFycmF5LmlzQXJyYXkoam9pbnRzKSkge1xuICAgICAgam9pbnRzID0gW2pvaW50c107XG4gICAgfVxuICAgIGpvaW50cy5mb3JFYWNoKChlbnRpdHkpID0+IHtcbiAgICAgIHRoaXMuYWRkSm9pbnQoZW50aXR5KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgSm9pbnQgZnJvbSBqb2ludHMgYW5kIGJveFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAqIEBwYXJhbSAge0pvaW50fSBqb2ludCBKb2ludCB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZUpvaW50KGpvaW50KXtcbiAgICB0aGlzLmJveC5yZW1vdmVKb2ludChqb2ludC5pZCk7XG4gICAgZGVsZXRlIHRoaXMuam9pbnRzW2pvaW50LmlkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIGEgc2VyaWVzIG9mIEpvaW50IG9iamVjdHMgZnJvbSBqb2ludHMgYW5kIGJveFxuICAgKiBAZnVuY3Rpb25cbiAgICogQG1lbWJlck9mIEJveEdhbWUjXG4gICAqIEBwYXJhbSB7QXJyYXl8Sm9pbnR9IGpvaW50cyBDYW4gdGFrZSBhbiBhcnJheSBvZiBKb2ludCBvYmplY3RzIG9yIGFueSBudW1iZXIgb2YgSm9pbnQgb2JqZWN0c1xuICAgKi9cbiAgcmVtb3ZlSm9pbnRzKGpvaW50cyl7XG4gICAgaWYoIUFycmF5LmlzQXJyYXkoam9pbnRzKSkge1xuICAgICAgam9pbnRzID0gW2pvaW50c107XG4gICAgfVxuICAgIGpvaW50cy5mb3JFYWNoKChlbnRpdHkpID0+IHtcbiAgICAgIHRoaXMucmVtb3ZlSm9pbnQoZW50aXR5KTtcbiAgICB9KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEJveEdhbWU7XG5cbiIsIlxuZnVuY3Rpb24gZHJhdyhjdHgpIHtcbiAgY3R4LmZpbGxTdHlsZSA9ICcjQUFBJztcbiAgY3R4LmZpbGxSZWN0KDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgT2JqZWN0LmtleXModGhpcy5lbnRpdGllcykuZm9yRWFjaCgoaykgPT4ge1xuICAgIHRoaXMuZW50aXRpZXNba10uZHJhdyhjdHgpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZHJhdzsiLCJpbXBvcnQgQ2lyY2xlIGZyb20gJ2Zyb3plbmpzL2JveDJkL2VudGl0aWVzL0NpcmNsZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEhlYWQgZXh0ZW5kcyBDaXJjbGUge1xuICBkcmF3KGN0eCwgc2NhbGUpIHtcbiAgICBzY2FsZSA9IHNjYWxlIHx8IHRoaXMuc2NhbGUgfHwgMTtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGN0eC50cmFuc2xhdGUodGhpcy54ICogc2NhbGUsIHRoaXMueSAqIHNjYWxlKTtcbiAgICBjdHgucm90YXRlKHRoaXMuYW5nbGUpO1xuICAgIGN0eC50cmFuc2xhdGUoLSh0aGlzLngpICogc2NhbGUsIC0odGhpcy55KSAqIHNjYWxlKTtcbiAgICBjdHguZHJhd0ltYWdlKHRoaXMuaW1nLCB0aGlzLnggKiBzY2FsZSAtICh0aGlzLmltZy53aWR0aCAvIDIpLCB0aGlzLnkgKiBzY2FsZSAtICh0aGlzLmltZy5oZWlnaHQgLyAyKSk7XG4gICAgY3R4LnJlc3RvcmUoKTtcbiAgfVxufVxuIiwiXG5jb25zb2xlLmxvZygnd3RmIHRvbyBtYW55IGJyaWNrcz8nKTtcblxubGV0IGJyaWNrcyA9IFtcbiAgWzYsMV0sWzEwLDFdLFsxNCwxXSxbMzQsMV0sWzM4LDFdLFs0MiwxXSxcbiAgWzgsM10sWzEyLDNdLFsxNiwzXSxbMzIsM10sWzM2LDNdLFs0MCwzXSxcbiAgWzYsNV0sWzEwLDVdLFsxNCw1XSxbMzQsNV0sWzM4LDVdLFs0Miw1XSxcbiAgWzgsN10sWzEyLDddLFsxNiw3XSxbMzIsN10sWzM2LDddLFs0MCw3XSxcbiAgWzEwLDldLFsxNCw5XSxbMTgsOV0sWzMwLDldLFszNCw5XSxbMzgsOV0sXG4gIFsxMiwxMV0sWzE2LDExXSxbMjAsMTFdLFsyNCwxMV0sWzI4LDExXSxbMzIsMTFdLFszNiwxMV0sXG4gIFsxNCwxM10sWzE4LDEzXSxbMjIsMTNdLFsyNiwxM10sWzMwLDEzXSxbMzQsMTNdLFxuICBbMTIsMTVdLFsxNiwxNV0sWzIwLDE1XSxbMjQsMTVdLFsyOCwxNV0sWzMyLDE1XSxbMzYsMTVdLFxuICBbMTgsMTddLFsyMiwxN10sWzI2LDE3XSxbMzAsMTddLFxuICBbMjQsMTldXG5dO1xuXG5cbmJyaWNrcyA9IGJyaWNrcy5tYXAoKGIpID0+IHtcbiAgYiA9IFtiWzBdICogMTIuNSwgYlsxXSAqIDEyLjVdO1xuICBiWzBdID0gYlswXSAtIDMwMDtcbiAgcmV0dXJuIGI7XG59KTtcblxuXG5leHBvcnQgZGVmYXVsdCBicmlja3M7XG4iLCJpbXBvcnQgeyBib3gyZCwga2V5cywgdXRpbHMgfSBmcm9tICdmcm96ZW5qcyc7XG5cbmltcG9ydCBib3hEYXRhIGZyb20gJy4vYm94RGF0YSc7XG5pbXBvcnQgZHJhdyBmcm9tICcuL2RyYXcnO1xuaW1wb3J0IEhlYWQgZnJvbSAnLi9IZWFkJztcbmltcG9ydCByYXdCcmlja3MgZnJvbSAnLi9icmlja3MnO1xuaW1wb3J0IGNvbG9ycyBmcm9tICcuL2NvbG9ycyc7XG5cbmNvbnN0IHsgQm94R2FtZSwgZW50aXRpZXMgfSA9IGJveDJkO1xuY29uc3QgeyBSZXZvbHV0ZSB9ID0gYm94MmQuam9pbnRzO1xuY29uc3QgeyByYWRpYW5zRnJvbUNlbnRlciwgc2NhbGVQb2ludHMsIHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIgfSA9IHV0aWxzO1xuXG5jb25zdCBzcGVlZCA9IDEwO1xuXG4vLyBGdWxsIEhEIEdhbWUgIVxuY29uc3QgZnVsbFcgPSAxOTIwO1xuY29uc3QgZnVsbEggPSAxMDgwO1xuXG4vL3NldHVwIGEgR2FtZUNvcmUgaW5zdGFuY2VcbmNvbnN0IGdhbWUgPSBuZXcgQm94R2FtZSh7XG4gIGNhbnZhc0lkOiAnY2FudmFzJyxcbiAgZ2FtZUFyZWFJZDogJ2dhbWVBcmVhJyxcbiAgY2FudmFzUGVyY2VudGFnZTogMC45NSxcbiAgYm94T3B0aW9uczoge3Jlc29sdmVDb2xsaXNpb25zOiB0cnVlfSxcbiAgZHJhdzogZHJhdyxcbiAgaW5pdElucHV0OiBmdW5jdGlvbihpbSl7XG4gICAgaW0uYWRkQXJyb3dLZXlBY3Rpb25zKCk7XG5cbiAgICBpbS5hZGRLZXlBY3Rpb24oJ0EnKTtcbiAgICBpbS5hZGRLZXlBY3Rpb24oJ0QnKTtcbiAgfSxcbiAgaGFuZGxlSW5wdXQ6IGZ1bmN0aW9uKGltKXtcbiAgICBpZihpbS5rZXlBY3Rpb25zW2tleXMuTEVGVF0uaXNQcmVzc2VkKCkpe1xuICAgICAgdGhpcy5ib3guYXBwbHlJbXB1bHNlRGVncmVlcygnaGVhZCcsIDI3MCwgc3BlZWQpO1xuICAgIH1cblxuICAgIGlmKGltLmtleUFjdGlvbnNba2V5cy5SSUdIVF0uaXNQcmVzc2VkKCkpe1xuICAgICAgdGhpcy5ib3guYXBwbHlJbXB1bHNlRGVncmVlcygnaGVhZCcsIDkwLCBzcGVlZCk7XG4gICAgfVxuXG4gICAgaWYoaW0ua2V5QWN0aW9uc1trZXlzLlVQXS5pc1ByZXNzZWQoKSl7XG4gICAgICB0aGlzLmJveC5hcHBseUltcHVsc2VEZWdyZWVzKCdoZWFkJywgMCwgc3BlZWQpO1xuICAgIH1cblxuICAgIGlmKGltLmtleUFjdGlvbnNba2V5cy5ET1dOXS5pc1ByZXNzZWQoKSl7XG4gICAgICB0aGlzLmJveC5hcHBseUltcHVsc2VEZWdyZWVzKCdoZWFkJywgMTgwLCBzcGVlZCk7XG4gICAgfVxuXG4gICAgaWYoaW0ua2V5QWN0aW9ucy5BLmlzUHJlc3NlZCgpKXtcbiAgICAgIHRoaXMuYm94LmFwcGx5VG9ycXVlKCdoZWFkJywgLXNwZWVkICogMTAwKTtcbiAgICB9XG5cbiAgICBpZihpbS5rZXlBY3Rpb25zLkQuaXNQcmVzc2VkKCkpe1xuICAgICAgdGhpcy5ib3guYXBwbHlUb3JxdWUoJ2hlYWQnLCBzcGVlZCAgKiAxMDApO1xuICAgIH1cblxuICAgIGlmKGltLm1vdXNlQWN0aW9uLmlzUHJlc3NlZCgpKXtcbiAgICAgIHRoaXMuYm94LmFwcGx5SW1wdWxzZSgnaGVhZCcsIHJhZGlhbnNGcm9tQ2VudGVyKHRoaXMuZW50aXRpZXMudG9yc28sIHNjYWxlUG9pbnRzKGltLm1vdXNlQWN0aW9uLnBvc2l0aW9uLCAxL3RoaXMuYm94LnNjYWxlKSksIHNwZWVkKTtcbiAgICB9XG4gIH0sXG4gIHVwZGF0ZTogZnVuY3Rpb24obWlsbGlzKSB7XG4gICAgdGhpcy51cGRhdGVCb3gobWlsbGlzKTtcbiAgICBpZih0aGlzLmhlYWQgJiYgdGhpcy5oZWFkLmNvbGxpc2lvbnMpIHtcbiAgICAgIC8vY29uc29sZS5sb2coJ2hlYWQnLCB0aGlzLmhlYWQuY29sbGlzaW9ucyk7XG4gICAgICB0aGlzLmhlYWQuY29sbGlzaW9ucy5mb3JFYWNoKChldCkgPT4ge1xuICAgICAgICBjb25zdCBlbnQgPSB0aGlzLmVudGl0aWVzW2V0LmlkXTtcbiAgICAgICAgaWYoZW50ICYmIGVudC5icmljaykge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQm9keShldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIGVudCAmJiBlbnQua2luZykge1xuICAgICAgICAgIGVudC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICBpZih0aGlzLmVudGl0aWVzLm5lY2sgJiYgdGhpcy5lbnRpdGllcy5uZWNrLmNvbGxpc2lvbnMpIHtcbiAgICAgIC8vY29uc29sZS5sb2coJ2VudGl0aWVzLm5lY2snLCB0aGlzLmVudGl0aWVzLm5lY2suY29sbGlzaW9ucyk7XG4gICAgICB0aGlzLmVudGl0aWVzLm5lY2suY29sbGlzaW9ucy5mb3JFYWNoKChldCkgPT4ge1xuICAgICAgICBjb25zdCBlbnQgPSB0aGlzLmVudGl0aWVzW2V0LmlkXTtcbiAgICAgICAgaWYoZW50ICYmIGVudC5icmljaykge1xuICAgICAgICAgIHRoaXMucmVtb3ZlQm9keShldCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIGVudCAmJiBlbnQua2luZykge1xuICAgICAgICAgIGVudC5maWxsU3R5bGUgPSAnYmxhY2snO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxufSk7XG5cblxuXG4gIC8vYWRkIGV2ZXJ5dGhpbmcgdG8gYm94IGZyb20gdGhlIGJveERhdGFcbmJveERhdGEuZW50aXRpZXMuZm9yRWFjaChmdW5jdGlvbihwcm9wcyl7XG4gIGlmKHByb3BzLmlkID09PSAnaGVhZCcpe1xuICAgIHByb3BzLmltZyA9IGdhbWUucmVzb3VyY2VNYW5hZ2VyLmxvYWRJbWFnZSgnaW1hZ2VzL2hlYWQucG5nJyk7XG4gICAgZ2FtZS5oZWFkID0gbmV3IEhlYWQocHJvcHMpO1xuICAgIGdhbWUuYWRkQm9keShnYW1lLmhlYWQpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IEVudGl0eSA9IGVudGl0aWVzW3Byb3BzLnR5cGVdO1xuICAgIGlmKEVudGl0eSl7XG4gICAgICBwcm9wcy5kcmF3Q2VudGVyID0gZmFsc2U7XG4gICAgICBnYW1lLmFkZEJvZHkobmV3IEVudGl0eShwcm9wcykpO1xuICAgIH1cbiAgfVxufSk7XG5cblxuY29uc3QgaGV4U2lkZSA9IDc4My43OTc3Mzg0NDQxMztcbmNvbnN0IHNpZGVXID0gNTY4LjEwMTEzMDc3NzY5O1xuXG4vL2NvbnN0IGFuZyA9IE1hdGguYXRhbiggTWF0aC50YW4oNTQwLHNpZGVXLCA1NDApKTtcbmNvbnN0IHNpbnQxID0gNTQwIC8gaGV4U2lkZTtcbmNvbnN0IGFuZzEgPSBNYXRoLmFzaW4oc2ludDEpO1xuY29uc3Qgc2ludDIgPSBzaWRlVyAvIGhleFNpZGU7XG5jb25zdCBhbmcyID0gTWF0aC5hc2luKHNpbnQyKVxuY29uc29sZS5sb2coJ2FuZ2xlIGluIHJhZGlhbnMnLCBhbmcxLCBhbmcyKTtcblxuY29uc3QgcGN0ID0gMC42MDQzMTIyMzg5NTQ3OTE4NTgzOyBcblxuY29uc3QgYW5ncyA9IFtcbiAgMCxcbiAgYW5nMSxcbiAgYW5nMiArIChNYXRoLlBJLzIpLFxuICBNYXRoLlBJLFxuICBNYXRoLlBJICsgYW5nMSxcbiAgKE1hdGguUEkgKiAxLjUpICsgYW5nMlxuXTtcblxubGV0IGMgPSBbXG4gIFtmdWxsVyAvIDIsIDBdLFxuICBbZnVsbFcgLSAoc2lkZVcgKiBwY3QpLCAoZnVsbEggLyAyKSAqICgxIC0gcGN0KV0sXG4gIFtmdWxsVyAtIChzaWRlVyAqIHBjdCksIChmdWxsSCAvIDIpICsgKChmdWxsSCAvIDIpICogcGN0KV0sXG4gIFtmdWxsVyAvIDIsIGZ1bGxIXSxcbiAgW3NpZGVXICogcGN0LCAoZnVsbEggLyAyKSArICgoZnVsbEggLyAyKSAqIHBjdCldLFxuICBbc2lkZVcgKiBwY3QsIChmdWxsSCAvIDIpICogKDEgLSBwY3QpXSxcbl07XG5cbmNvbnN0IHBsYXllcnMgPSBjLm1hcCgoY3B0LCBpZHgpID0+IHtcbiAgcmV0dXJuIHtcbiAgICBwdDogY3B0LFxuICAgIGNvbG9yOiBjb2xvcnNbaWR4XSxcbiAgICBhbmdsZTogYW5nc1tpZHhdXG4gIH1cbn0pO1xuXG5jb25zb2xlLmxvZygncGxheWVycycsIHBsYXllcnMpO1xuXG5jb25zdCBkMSA9IE1hdGguc3FydChcbiAgTWF0aC5wb3coKGNbMV1bMF0gLSBjWzBdWzBdKSwgMikgXG4gICsgTWF0aC5wb3coKGNbMV1bMV0gLSBjWzBdWzFdKSwgMikgXG4pO1xuXG5jb25zdCBkMiA9IE1hdGguc3FydChcbiAgTWF0aC5wb3coKGNbNV1bMF0gLSBjWzBdWzBdKSwgMikgXG4gICsgTWF0aC5wb3coKGNbNV1bMV0gLSBjWzBdWzFdKSwgMikgXG4pXG5cbmNvbnNvbGUubG9nKCdkJywgZDEsIGQyLCBkMSAtIGQyLCBjICk7XG5cbmNvbnN0IG9yaWdpbiA9IHt4OiBwbGF5ZXJzWzBdLnB0WzBdLCB5OiBwbGF5ZXJzWzBdLnB0WzFdfTtcblxucGxheWVycy5mb3JFYWNoKChwLCBpZHgpID0+IHtcbiAgY29uc29sZS5sb2coJ2NyZWF0aW5nIHBsYXllcicsIHApO1xuICBjb25zdCBwcHQgPSB7eDogcC5wdFswXSwgeTogcC5wdFsxXX07XG4gIGNvbnN0IG5ld0hlYWRQdCA9IHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIocHB0LCB7eDogcHB0LngsIHk6IHBwdC55ICsgNTV9LCBwLmFuZ2xlKTtcbiAgY29uc3QgY2lyID0gbmV3IGVudGl0aWVzLkNpcmNsZSh7XG4gICAgeDogbmV3SGVhZFB0LngsXG4gICAgeTogbmV3SGVhZFB0LnksXG4gICAgcmFkaXVzOiA1MCxcbiAgICBzdGF0aWNCb2R5OiB0cnVlLFxuICAgIHJlc3RpdHV0aW9uOiAyLFxuICAgIGZpbGxTdHlsZTogcC5jb2xvcixcbiAgICBraW5nOiB0cnVlXG4gIH0pO1xuICBnYW1lLmFkZEJvZHkoY2lyKTtcblxuICByYXdCcmlja3MuZm9yRWFjaCgocmIsIGpkeCkgPT4ge1xuICAgIGNvbnN0IG9wcyA9IHtcbiAgICAgIHg6IHJiWzBdICsgKGZ1bGxXIC8gMiksXG4gICAgICB5OiByYlsxXSxcbiAgICAgIGhhbGZXaWR0aDogMjUsXG4gICAgICBoYWxmSGVpZ2h0OiAxMi41LFxuICAgICAgc3RhdGljQm9keTogdHJ1ZSxcbiAgICAgIHJlc3RpdHV0aW9uOiAxLjUsXG4gICAgICBwbGF5ZXJJZDogaWR4LFxuICAgICAgZmlsbFN0eWxlOiBwLmNvbG9yLFxuICAgICAgYnJpY2s6IHRydWVcbiAgICB9O1xuICBcbiAgICBjb25zdCBwdCA9IHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIob3JpZ2luLCBvcHMsIHAuYW5nbGUpO1xuICAgIGNvbnNvbGUubG9nKCdyb3RhdGVkIHB0JywgcHQpO1xuICBcbiAgICBvcHMueCA9IHB0Lng7XG4gICAgb3BzLnkgPSBwdC55O1xuICBcbiAgXG4gICAgb3BzLnggKz0gKHBwdC54IC0gcGxheWVyc1swXS5wdFswXSk7XG4gICAgb3BzLnkgKz0gKHBwdC55IC0gcGxheWVyc1swXS5wdFsxXSk7XG5cbiAgICBvcHMucG9pbnRzID0gW1xuICAgICAge3g6IG9wcy5oYWxmV2lkdGgsIHk6IC1vcHMuaGFsZkhlaWdodH0sXG4gICAgICB7eDogb3BzLmhhbGZXaWR0aCwgeTogb3BzLmhhbGZIZWlnaHR9LFxuICAgICAge3g6IC1vcHMuaGFsZldpZHRoLCB5OiBvcHMuaGFsZkhlaWdodH0sXG4gICAgICB7eDogLW9wcy5oYWxmV2lkdGgsIHk6IC1vcHMuaGFsZkhlaWdodH0sXG4gICAgXTtcblxuICAgIG9wcy5wb2ludHMgPSBvcHMucG9pbnRzLm1hcCgob3BwdCkgPT4ge1xuICAgICAgcmV0dXJuIHJvdGF0ZVJhZGlhbnNBcm91bmRDZW50ZXIoe3g6IDAsIHk6IDB9LCBvcHB0LCBwLmFuZ2xlKTtcbiAgICB9KVxuICBcbiAgICBjb25zdCBiID0gbmV3IGVudGl0aWVzLlBvbHlnb24ob3BzKTtcbiAgICAvL2NvbnNvbGUubG9nKGIpO1xuICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgZ2FtZS5hZGRCb2R5KGIpO1xuICAgICAgLy8gY29uc29sZS5sb2coJ3d0ZiB0aW1lb3V0JywgYik7XG4gICAgLy8gfSwgMTAgKyAoaWR4ICogMTApICsgamR4KTtcblxuICB9KTtcblxufSk7XG5cblxuXG5ib3hEYXRhLmpvaW50cy5mb3JFYWNoKGZ1bmN0aW9uKHByb3BzKXtcbiAgdmFyIGpvaW50O1xuICBpZihwcm9wcy50eXBlID09PSAnUmV2b2x1dGUnKXtcbiAgICBqb2ludCA9IG5ldyBSZXZvbHV0ZShwcm9wcyk7XG4gIH1cblxuICBpZihqb2ludCl7XG4gICAgZ2FtZS5ib3guYWRkSm9pbnQoam9pbnQpO1xuICB9XG59KTtcblxuLy9pZiB5b3Ugd2FudCB0byB0YWtlIGEgbG9vayBhdCB0aGUgZ2FtZSBvYmplY3QgaW4gZGV2IHRvb2xzXG5jb25zb2xlLmxvZyhnYW1lKTtcbndpbmRvdy5nYW1lID0gZ2FtZTtcblxuXG4vL2xhdW5jaCB0aGUgZ2FtZSFcbmdhbWUucnVuKCk7XG5nYW1lLmJveC5hcHBseUltcHVsc2VEZWdyZWVzKCdoZWFkJywgTWF0aC5yYW5kb20oKSAqIDM2MCwgNTApO1xuIl0sInNvdXJjZVJvb3QiOiIifQ==